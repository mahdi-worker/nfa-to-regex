// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"emU3S":[function(require,module,exports) {
var Refresh = require('react-refresh/runtime');
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {
};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};

},{"react-refresh/runtime":"aeH4U"}],"aeH4U":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"8alcJ"}],"8alcJ":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {
                },
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {
                },
                onCommitFiberUnmount: function() {
                }
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {
        };
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"gT4u9":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "4a236f9275d0a351";
module.bundle.HMR_BUNDLE_ID = "e91ee9189978ec32";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    var parents = getParents(module.bundle.root, id); // If no parents, the asset is new. Prevent reloading the page.
    if (!parents.length) return true;
    return parents.some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"ipvmp":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$32f6 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$32f6.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jsxRuntime = require("react/jsx-runtime");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _app = require("./App");
var root = document.getElementById("root");
_reactDomDefault.default.render(_jsxRuntime.jsx(_app.App, {
}, void 0), root);

  $parcel$ReactRefreshHelpers$32f6.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-runtime":"6Ds2u","react-dom":"afyCw","./App":"eKGy4","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"9pz13"}],"6Ds2u":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-jsx-runtime.development.js');

},{"./cjs/react-jsx-runtime.development.js":"hOpeX"}],"hOpeX":[function(require,module,exports) {
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) key = '' + maybeKey;
        if (hasValidKey(config)) key = '' + config.key;
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentName(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (Array.isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.
    function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
    }
    function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
    }
    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions
    var jsxs = jsxWithValidationStatic;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
})();

},{"react":"4mchR","object-assign":"iUUFa"}],"4mchR":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"d4OQ6"}],"d4OQ6":[function(require,module,exports) {
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    exports.Suspense = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        exports.StrictMode = symbolFor('react.strict_mode');
        exports.Profiler = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        exports.Suspense = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: 0
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame1 = {
    };
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame1.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame1.getCurrentStack = null;
    ReactDebugCurrentFrame1.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame1.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    /**
 * Used by act() to track whether you're inside an act() scope.
 */ var IsSomeRendererActing = {
        current: false
    };
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame1;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error1(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {
    };
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error1("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {
    };
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component1(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component1.prototype.isReactComponent = {
    };
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component1.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component1.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component1.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component1.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component1.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error1("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case exports.Profiler:
                return 'Profiler';
            case exports.StrictMode:
                return 'StrictMode';
            case exports.Suspense:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error1("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error1("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error1("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) key = '' + config.key;
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (!!(element === null || element === undefined)) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = _assign({
        }, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) key = '' + config.key;
             // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) // Explicit key
        return escape('' + element.key);
         // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                var childrenString = '' + children;
                throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) calculateChangedBits = null;
        else if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') error1("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error1("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error1("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                    var defaultExport = moduleObject.default;
                    if (defaultExport === undefined) error1("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = defaultExport;
                }
            }, function(error) {
                if (payload._status === Pending) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error;
                }
            });
        }
        if (payload._status === Resolved) return payload._result;
        else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error1("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error1("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error1("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error1('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error1('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error1("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (render.displayName == null) render.displayName = name;
            }
        });
        return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error1("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (type.displayName == null) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        if (unstable_observedBits !== undefined) error1("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : '');
         // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error1("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error1("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error1("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case exports.Suspense:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error1("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error1('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error1("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error1('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error1("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error1("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error1('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error1("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    try {
        var frozenObject = Object.freeze({
        });
        /* eslint-disable no-new */ new Map([
            [
                frozenObject,
                null
            ]
        ]);
        new Set([
            frozenObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component1;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
})();

},{"object-assign":"iUUFa"}],"iUUFa":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"afyCw":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"l2Fks"}],"l2Fks":[function(require,module,exports) {
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error1(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    if (!React) throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    var OffscreenComponent = 23;
    var LegacyHiddenComponent = 24;
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableFundamentalAPI = false; // Experimental Scope support.
    var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
    var warnAboutStringRefs = false;
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies1 = {
    };
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames1 = {
    }; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies1[registrationName]) error1("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies1[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames1[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames1.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {
    };
    var validatedAttributeNameCache = {
    };
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error1('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {
    }; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL1(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error1("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL1('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
         // If the object is an opaque reference ID, it's expected that
        // the next prop is different than the server value, so just return
        // expected
        if (isOpaqueHydratingObject(expected)) return expected;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else node.setAttribute(_attributeName, '' + value);
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL1(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error1("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix1;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix1 === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix1 = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix1 + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case Block:
                return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error1("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
    var current1 = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current1 === null) return null;
        var owner = current1._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentName(owner.type);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current1 === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current1);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame1.getCurrentStack = null;
        current1 = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame1.getCurrentStack = getCurrentFiberStackInDev;
        current1 = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    function getIsRendering() {
        return isRendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error1("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error1("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({
        }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error1("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error1("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error1("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error1("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = ''; // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function(child) {
            if (child == null) return;
            content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration code path too.
        });
        return content;
    }
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // This mirrors the code path above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
            if (child == null) return;
            if (typeof child === 'string' || typeof child === 'number') return;
            if (typeof child.type !== 'string') return;
            if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error1('Only strings and numbers are supported as <option> children.');
            }
        });
         // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error1("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({
            children: undefined
        }, props);
        var content = flattenChildren(props.children);
        if (content) hostProps.children = content;
        return hostProps;
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) error1("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && isArray) error1("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {
            };
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$2(element, props) {
        return _assign({
        }, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error1("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({
        }, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error1("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error1("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (!(defaultValue == null)) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (Array.isArray(children)) {
                    if (!(children.length <= 1)) throw Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes1 = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes1.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {
    };
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {
    };
    var warnedStyleValues = {
    };
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error1('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error1('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error1("Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead.", name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error1('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error1('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {
        };
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {
        };
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error1("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error1("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (!(props.style == null || typeof props.style === 'object')) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {
    };
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error1('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error1('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error1('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error1("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error1("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error1("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error1("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {
    };
    var warnedProperties$1 = {
    };
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error1("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
                error1('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error1('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error1("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error1("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error1("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error1("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error1("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error1('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error1("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error1("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.", value, name, name, value, name);
            else error1("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error1("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error1("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error1("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    var IS_REPLAYED = 16;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (!(typeof restoreImpl === 'function')) throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function(fn, a, b, c, d) {
        return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function() {
    };
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, bookkeeping);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    }
    function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isBatchingEventUpdates = true;
        try {
            return batchedEventUpdatesImpl(fn, a, b);
        } finally{
            isBatchingEventUpdates = false;
            finishEventHandler();
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
            return discreteUpdatesImpl(fn, a, b, c, d);
        } finally{
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) finishEventHandler();
        }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
        if (!isInsideEventHandler) flushDiscreteUpdatesImpl();
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (!(!listener || typeof listener === 'function')) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options1 = {
        }; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options1, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options1, options1);
        window.removeEventListener('test', options1, options1);
    } catch (e1) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error) {
            this.onError(error);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (!(typeof document !== 'undefined')) throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error != null && typeof error === 'object') try {
                        error._suppressLogging = true;
                    } catch (inner) {
                    }
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                error = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error) {
            hasError = true;
            caughtError = error;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
        } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get1(key) {
        return key._reactInternals;
    }
    function has1(key) {
        return key._reactInternals !== undefined;
    }
    function set1(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var PlacementAndUpdate = /*           */ 6;
    var Deletion = /*                     */ 8;
    var ContentReset = /*                 */ 16;
    var Callback = /*                     */ 32;
    var DidCapture = /*                   */ 64;
    var Ref = /*                          */ 128;
    var Snapshot = /*                     */ 256;
    var Passive = /*                      */ 512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.
    var PassiveUnmountPendingDev = /*     */ 8192;
    var Hydrating = /*                    */ 1024;
    var HydratingAndUpdate = /*           */ 1028; // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*          */ 932; // Union of all host effects
    var HostEffectMask = /*               */ 2047; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 2048;
    var ShouldCapture = /*                */ 4096;
    var ForceUpdateForLegacySuspense = /* */ 16384; // Static tags describe aspects of a fiber that are not specific to a render,
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current = fiber.alternate;
                if (current !== null) suspenseState = current.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error1("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get1(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) throw Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (!(a.alternate === b)) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (!(a.tag === HostRoot)) throw Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) return node;
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;
        while(node !== null){
            if (node === parentFiber || node === parentFiberAlternate) return true;
            node = node.return;
        }
        return false;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with attemptToDispatchEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                            Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                                attemptHydrationAtCurrentPriority(nearestMounted);
                            });
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // First replay discrete events.
        while(queuedDiscreteEvents.length > 0){
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
                // We're still blocked.
                // Increase the priority of this boundary to unblock
                // the next discrete event.
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) attemptUserBlockingHydration(_fiber4);
                break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while(targetContainers.length > 0){
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                    // We're still blocked. Try again later.
                    nextDiscreteEvent.blockedOn = nextBlockedOn;
                    break;
                } // This target container was successfully dispatched. Try the next.
                targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) // We've successfully replayed the first event. Let's try the next one.
            queuedDiscreteEvents.shift();
        } // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes = {
        };
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes['Moz' + styleProp] = 'moz' + eventName;
        return prefixes;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {
    };
    /**
 * Element to check for prefixes on.
 */ var style1 = {
    };
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style1 = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style1) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = [
        'cancel',
        'cancel',
        'click',
        'click',
        'close',
        'close',
        'contextmenu',
        'contextMenu',
        'copy',
        'copy',
        'cut',
        'cut',
        'auxclick',
        'auxClick',
        'dblclick',
        'doubleClick',
        'dragend',
        'dragEnd',
        'dragstart',
        'dragStart',
        'drop',
        'drop',
        'focusin',
        'focus',
        'focusout',
        'blur',
        'input',
        'input',
        'invalid',
        'invalid',
        'keydown',
        'keyDown',
        'keypress',
        'keyPress',
        'keyup',
        'keyUp',
        'mousedown',
        'mouseDown',
        'mouseup',
        'mouseUp',
        'paste',
        'paste',
        'pause',
        'pause',
        'play',
        'play',
        'pointercancel',
        'pointerCancel',
        'pointerdown',
        'pointerDown',
        'pointerup',
        'pointerUp',
        'ratechange',
        'rateChange',
        'reset',
        'reset',
        'seeked',
        'seeked',
        'submit',
        'submit',
        'touchcancel',
        'touchCancel',
        'touchend',
        'touchEnd',
        'touchstart',
        'touchStart',
        'volumechange',
        'volumeChange'
    ];
    var otherDiscreteEvents = [
        'change',
        'selectionchange',
        'textInput',
        'compositionstart',
        'compositionend',
        'compositionupdate'
    ];
    var userBlockingPairsForSimpleEventPlugin = [
        'drag',
        'drag',
        'dragenter',
        'dragEnter',
        'dragexit',
        'dragExit',
        'dragleave',
        'dragLeave',
        'dragover',
        'dragOver',
        'mousemove',
        'mouseMove',
        'mouseout',
        'mouseOut',
        'mouseover',
        'mouseOver',
        'pointermove',
        'pointerMove',
        'pointerout',
        'pointerOut',
        'pointerover',
        'pointerOver',
        'scroll',
        'scroll',
        'toggle',
        'toggle',
        'touchmove',
        'touchMove',
        'wheel',
        'wheel'
    ]; // prettier-ignore
    var continuousPairsForSimpleEventPlugin = [
        'abort',
        'abort',
        ANIMATION_END,
        'animationEnd',
        ANIMATION_ITERATION,
        'animationIteration',
        ANIMATION_START,
        'animationStart',
        'canplay',
        'canPlay',
        'canplaythrough',
        'canPlayThrough',
        'durationchange',
        'durationChange',
        'emptied',
        'emptied',
        'encrypted',
        'encrypted',
        'ended',
        'ended',
        'error',
        'error',
        'gotpointercapture',
        'gotPointerCapture',
        'load',
        'load',
        'loadeddata',
        'loadedData',
        'loadedmetadata',
        'loadedMetadata',
        'loadstart',
        'loadStart',
        'lostpointercapture',
        'lostPointerCapture',
        'playing',
        'playing',
        'progress',
        'progress',
        'seeking',
        'seeking',
        'stalled',
        'stalled',
        'suspend',
        'suspend',
        'timeupdate',
        'timeUpdate',
        TRANSITION_END,
        'transitionEnd',
        'waiting',
        'waiting'
    ];
    /**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */ function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
        // As the event types are in pairs of two, we need to iterate
        // through in twos. The events are in pairs of two to save code
        // and improve init perf of processing this array, as it will
        // result in far fewer object allocations and property accesses
        // if we only use three arrays to process all the categories of
        // instead of tuples.
        for(var i = 0; i < eventTypes.length; i += 2){
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = 'on' + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [
                topEvent
            ]);
        }
    }
    function setEventPriorities(eventTypes, priority) {
        for(var i = 0; i < eventTypes.length; i++)eventPriorities.set(eventTypes[i], priority);
    }
    function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
        // want to warn if we can't detect the priority
        // for the event.
        return priority === undefined ? ContinuousEvent : priority;
    }
    function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        setEventPriorities(otherDiscreteEvents, DiscreteEvent);
    }
    var Scheduler_now = Scheduler.unstable_now;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    var SyncLanePriority = 15;
    var SyncBatchedLanePriority = 14;
    var InputDiscreteHydrationLanePriority = 13;
    var InputDiscreteLanePriority = 12;
    var InputContinuousHydrationLanePriority = 11;
    var InputContinuousLanePriority = 10;
    var DefaultHydrationLanePriority = 9;
    var DefaultLanePriority = 8;
    var TransitionHydrationPriority = 7;
    var TransitionPriority = 6;
    var RetryLanePriority = 5;
    var SelectiveHydrationLanePriority = 4;
    var IdleHydrationLanePriority = 3;
    var IdleLanePriority = 2;
    var OffscreenLanePriority = 1;
    var NoLanePriority = 0;
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var SyncBatchedLane = /*                 */ 2;
    var InputDiscreteHydrationLane = /*      */ 4;
    var InputDiscreteLanes = /*                    */ 24;
    var InputContinuousHydrationLane = /*           */ 32;
    var InputContinuousLanes = /*                  */ 192;
    var DefaultHydrationLane = /*            */ 256;
    var DefaultLanes = /*                   */ 3584;
    var TransitionHydrationLane = /*                */ 4096;
    var TransitionLanes = /*                       */ 4186112;
    var RetryLanes = /*                            */ 62914560;
    var SomeRetryLane = /*                  */ 33554432;
    var SelectiveHydrationLane = /*          */ 67108864;
    var NonIdleLanes = /*                                 */ 134217727;
    var IdleHydrationLane = /*               */ 134217728;
    var IdleLanes = /*                             */ 805306368;
    var OffscreenLane = /*                   */ 1073741824;
    var NoTimestamp = -1;
    function setCurrentUpdateLanePriority(newLanePriority) {
    } // "Registers" used to "return" multiple values
    // Used by getHighestPriorityLanes and getNextLanes:
    var return_highestLanePriority = DefaultLanePriority;
    function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
        }
        if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
        }
        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
        }
        var inputDiscreteLanes = InputDiscreteLanes & lanes;
        if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
        }
        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
        }
        var inputContinuousLanes = InputContinuousLanes & lanes;
        if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
        }
        if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
        }
        var defaultLanes = DefaultLanes & lanes;
        if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
        }
        if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
        }
        var transitionLanes = TransitionLanes & lanes;
        if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
        }
        var retryLanes = RetryLanes & lanes;
        if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
        }
        if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
        }
        if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
        }
        var idleLanes = IdleLanes & lanes;
        if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
        }
        if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
        }
        error1('Should have found matching lanes. This is a bug in React.');
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
    }
    function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch(schedulerPriorityLevel){
            case ImmediatePriority:
                return SyncLanePriority;
            case UserBlockingPriority:
                return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
                // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                return DefaultLanePriority;
            case IdlePriority:
                return IdleLanePriority;
            default:
                return NoLanePriority;
        }
    }
    function lanePriorityToSchedulerPriority(lanePriority) {
        switch(lanePriority){
            case SyncLanePriority:
            case SyncBatchedLanePriority:
                return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
                return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
                return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
                return IdlePriority;
            case NoLanePriority:
                return NoPriority;
            default:
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
        }
        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root.expiredLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Check if any work has expired.
        if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
            // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else {
                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                    if (nonIdlePingedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                        nextLanePriority = return_highestLanePriority;
                    }
                }
            } else {
                // The only remaining work is Idle.
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(unblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                }
            }
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If there are higher priority lanes, we'll include them even if they
        // are suspended.
        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) return wipLanes;
            else return_highestLanePriority = nextLanePriority;
        } // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        // TODO: Expiration heuristic is constant per lane, so could use a map.
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;
        if (priority >= InputContinuousLanePriority) // User interactions should expire slightly more quickly.
        //
        // NOTE: This is set to the corresponding constant as in Scheduler.js. When
        // we made it larger, a product metric in www regressed, suggesting there's
        // a user interaction that's being starved by a series of synchronous
        // updates. If that theory is correct, the proper solution is to fix the
        // starvation. However, this scenario supports the idea that expiration
        // times are an important safeguard when starvation does happen.
        //
        // Also note that, in the case of user input specifically, this will soon no
        // longer be an issue because we plan to make user input synchronous by
        // default (until you enter `startTransition`, of course.)
        //
        // If weren't planning to make these updates synchronous soon anyway, I
        // would probably make this number a configurable parameter.
        return currentTime + 250;
        else if (priority >= TransitionPriority) return currentTime + 5000;
        else // Anything idle priority or lower should never expire.
        return NoTimestamp;
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function returnNextLanesPriority() {
        return return_highestLanePriority;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    } // To ensure consistency across multiple updates in the same event, this should
    // be a pure function, so that it always returns the same lane for given inputs.
    function findUpdateLane(lanePriority, wipLanes) {
        switch(lanePriority){
            case NoLanePriority:
                break;
            case SyncLanePriority:
                return SyncLane;
            case SyncBatchedLanePriority:
                return SyncBatchedLane;
            case InputDiscreteLanePriority:
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) // Shift to the next priority level
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
                return _lane;
            case InputContinuousLanePriority:
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) // Shift to the next priority level
                return findUpdateLane(DefaultLanePriority, wipLanes);
                return _lane2;
            case DefaultLanePriority:
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                    // If all the default lanes are already being worked on, look for a
                    // lane in the transition range.
                    _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                    if (_lane3 === NoLane) // All the transition lanes are taken, too. This should be very
                    // rare, but as a last resort, pick a default lane. This will have
                    // the effect of interrupting the current work-in-progress render.
                    _lane3 = pickArbitraryLane(DefaultLanes);
                }
                return _lane3;
            case TransitionPriority:
            case RetryLanePriority:
                break;
            case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) lane = pickArbitraryLane(IdleLanes);
                return lane;
        }
        throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findTransitionLane(wipLanes, pendingLanes) {
        // First look for lanes that are completely unclaimed, i.e. have no
        // pending work.
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
        if (lane === NoLane) {
            // If all lanes have pending work, look for a lane that isn't currently
            // being worked on.
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) // If everything is being worked on, pick any lane. This has the
            // effect of interrupting the current work-in-progress.
            lane = pickArbitraryLane(TransitionLanes);
        }
        return lane;
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findRetryLane(wipLanes) {
        // This is a fork of `findUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
        if (lane === NoLane) lane = pickArbitraryLane(RetryLanes);
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function getLowestPriorityLane(lanes) {
        // This finds the most significant non-zero bit.
        var index = 31 - clz32(lanes);
        return index < 0 ? NoLanes : 1 << index;
    }
    function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set, subset) {
        return set & ~subset;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
        // it's not practical to try every single possible combination. We need a
        // heuristic to decide which lanes to attempt to render, and in which batches.
        // For now, we use the same heuristic as in the old ExpirationTimes model:
        // retry any lane at equal or lower priority, but don't try updates at higher
        // priority without also including the lower priority updates. This works well
        // when considering updates across different priority levels, but isn't
        // sufficient for updates within the same priority, since we want to treat
        // those updates as parallel.
        // Unsuspend any update at equal or lower priority.
        var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111
        root.suspendedLanes &= higherPriorityLanes;
        root.pingedLanes &= higherPriorityLanes;
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markDiscreteUpdatesExpired(root) {
        root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
    }
    function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
    }
    function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = entangledLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(lanes) {
        if (lanes === 0) return 32;
        return 31 - (log(lanes) / LN2 | 0) | 0;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
            case ContinuousEvent:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
        runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        var allowReplay = true;
        // TODO: replaying capture phase events is currently broken
        // because we used to do it during top-level native bubble handlers
        // but now we use different bubble and capture handlers.
        // In eager mode, we attach capture listeners early, so we need
        // to filter them out until we fix the logic to handle them correctly.
        // This could've been outside the flag but I put it inside to reduce risk.
        allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
        if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
        }
        var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            // We successfully dispatched this event.
            if (allowReplay) clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
                // This this to be replayed later once the target is available.
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) return;
             // We need to clear only if we didn't queue because
            // queueing is accummulative.
            clearIfContinuousEvent(domEventName, nativeEvent);
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.
        return null;
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root1 = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root1 = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root1 = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root1) return root1.value;
        return root1.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {
            },
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = _assign({
    }, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = _assign({
    }, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = _assign({
    }, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = _assign({
    }, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = _assign({
    }, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = _assign({
    }, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = _assign({
    }, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = _assign({
    }, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = _assign({
    }, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = _assign({
    }, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = _assign({
    }, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = _assign({
    }, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) start = length;
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't forsee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (rootContainerElement[listeningMarker]) // Performance optimization: don't iterate through events
        // for the same portal container or root node more than once.
        // TODO: once we remove the flag, we may be able to also
        // remove some of the bookkeeping maps used for laziness.
        return;
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement, null);
            listenToNativeEvent(domEventName, true, rootContainerElement, null);
        });
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
        var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var target = rootContainerElement; // selectionchange needs to be attached to the document
        // otherwise it won't capture incoming events that are only
        // triggered on the document directly.
        if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) target = rootContainerElement.ownerDocument;
         // If the event can be delegated (or is capture phase), we can
        // register it to the root container. Otherwise, we should
        // register the event to the target element and mark it as
        // a non-delegated event.
        if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            // For all non-delegated events, apart from scroll, we attach
            // their event listeners to the respective elements that their
            // events fire on. That means we can skip this step, as event
            // listener has already been added previously. However, we
            // special case the scroll event because the reality is that any
            // element can scroll.
            // TODO: ideally, we'd eventually apply the same logic to all
            // events from the nonDelegatedEvents list. Then we can remove
            // this special case and use the same logic for all events.
            if (domEventName !== 'scroll') return;
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
        }
        var listenerSet = getEventListenerSet(target);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
        // we need to trap an event listener onto the target.
        if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies1,
            possibleRegistrationNames: possibleRegistrationNames1
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function(markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function(serverText, clientText) {
        if (didWarnInvalidHydration) return;
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        didWarnInvalidHydration = true;
        error1('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error1('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error1('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error1("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error1('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error1("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error1("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {
                    };
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
            // In this case, call the opaque object's toString function which generates a new client
            // ID so client and server IDs match and throws to rerender.
            nextProp.toString();
            else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Built-in SSR attribute is allowed
                case 'data-reactroot':
                    break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies1.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE$1) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE$1) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        warnForTextDifference(textNode.nodeValue, text);
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error1('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = _assign({
        }, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {
    };
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error1('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error1('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error1("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1; // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) domElement.focus();
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function hideInstance(instance) {
        var style = instance.style;
        if (typeof style.setProperty === 'function') style.setProperty('display', 'none', 'important');
        else style.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) body.textContent = '';
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        return diffHydratedProperties(instance, type, props, parentNamespace);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        warnForUnmatchedText(textInstance, text);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForUnmatchedText(textInstance, text);
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    var clientId = 0;
    function makeClientIdInDEV(warnOnAccessInDEV) {
        var id = 'r:' + (clientId++).toString(36);
        return {
            toString: function() {
                warnOnAccessInDEV();
                return id;
            },
            valueOf: function() {
                warnOnAccessInDEV();
                return id;
            }
        };
    }
    function isOpaqueHydratingObject(value) {
        return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
    }
    function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
        };
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error1("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error1('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index1 = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index1 < 0) {
            error1('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index1]) error1('Unexpected Fiber popped.');
        cursor.current = valueStack[index1];
        valueStack[index1] = null;
        fiberStack[index1] = null;
        index1--;
    }
    function push(cursor, value, fiber) {
        index1++;
        valueStack[index1] = cursor.current;
        fiberStack[index1] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {
    };
    var emptyContextObject = {
    };
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {
        };
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (!(contextStackCursor.current === emptyContextObject)) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error1("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return _assign({
        }, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var rendererID = null;
    var injectedHook = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error1("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error1('React instrumentation encountered an error: %s.', err);
        } // DevTools exists
        return true;
    }
    function onScheduleRoot(root, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
            else injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error1('React instrumentation encountered an error: %s', err);
            }
        }
    }
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    var fakeCallbackNode = {
    }; // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority$1 = 99;
    var UserBlockingPriority$2 = 98;
    var NormalPriority$1 = 97;
    var LowPriority$1 = 96;
    var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority$1 = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function() {
    };
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function() {
        return Scheduler_now$1() - initialTimeMs$1;
    };
    function getCurrentPriorityLevel() {
        switch(Scheduler_getCurrentPriorityLevel()){
            case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
                return NormalPriority$1;
            case Scheduler_LowPriority:
                return LowPriority$1;
            case Scheduler_IdlePriority:
                return IdlePriority$1;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch(reactPriorityLevel){
            case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
                return Scheduler_NormalPriority;
            case LowPriority$1:
                return Scheduler_LowPriority;
            case IdlePriority$1:
                return Scheduler_IdlePriority;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options);
    }
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) {
            syncQueue = [
                callback
            ]; // Flush the queue in the next tick, at the earliest.
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
        return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) Scheduler_cancelCallback(callbackNode);
    }
    function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            var i = 0;
            try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                    for(; i < _queue.length; i++){
                        var callback = _queue[i];
                        do callback = callback(_isSync2);
                        while (callback !== null)
                    }
                });
                syncQueue = null;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error;
            } finally{
                isFlushingSyncQueue = false;
            }
        }
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    var NoMode = 0;
    var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var DebugTracingMode = 16;
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = 0;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set) {
        var array = [];
        set.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error1("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error1("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error1("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error1("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error1("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({
            }, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {
    };
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error1("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        context._currentValue = currentValue;
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) // No change
        return 0;
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) error1("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderLanes) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            else break;
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context, observedBits) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error1("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        if (lastContextWithAllBitsObserved === context) ;
        else if (observedBits === false || observedBits === 0) ;
        else {
            var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else resolvedObservedBits = observedBits;
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem,
                    responders: null
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        sharedQueue.pending = update;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error1("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current = workInProgress.alternate;
        if (current !== null) {
            var currentQueue = current.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null) // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return _assign({
                }, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current = workInProgress.alternate;
            if (current !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback1(callback, context) {
        if (!(typeof callback === 'function')) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback1(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {
    };
    var isArray1 = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error1("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error1("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
            } finally{
                reenableLogs();
            }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({
        }, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get1(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    reenableLogs();
                }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (shouldUpdate === undefined) error1("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error1("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error1("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error1("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error1("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error1("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error1("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error1("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error1("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error1("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error1("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error1("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error1("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error1("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error1("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error1("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error1("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error1("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error1("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error1("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error1("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray1(_state))) error1('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error1("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set1(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error1("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        } // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                new ctor(props, context); // eslint-disable-line no-new
            } finally{
                reenableLogs();
            }
        }
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error1("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error1("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error1("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress.type) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error1("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error1("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
             // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {
    };
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {
    };
    ownerHasFunctionTypeWarning = {
    };
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (!(typeof child._store === 'object')) throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error1("Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information.");
    };
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error1("A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (!(ownerFiber.tag === ClassComponent)) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) return current.ref;
                var ref = function(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = inst.refs = {
                    };
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (!(typeof mixedRef === 'string')) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error1("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    } // We avoid inlining this to avoid potential deopts from using try/catch.
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
             // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) // Noop.
            return lastPlacedIndex;
            var current = newFiber.alternate;
            if (current !== null) {
                var oldIndex = current.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags = Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags = Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
            if (current === null || current.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current, element, lanes) {
            if (current !== null) {
                if (current.elementType === element.type || isCompatibleFamilyForHotReloading(current, element)) {
                    // Move based on index
                    var existing = useFiber(current, element.props);
                    existing.ref = coerceRef(returnFiber, current, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current, portal, lanes) {
            if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (current === null || current.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                            return updateElement(returnFiber, oldFiber, newChild, lanes);
                        } else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error1("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === 'function')) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error1("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error1("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) throw Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    switch(child.tag){
                        case Fragment:
                            if (element.type === REACT_FRAGMENT_TYPE) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, element.props.children);
                                existing.return = returnFiber;
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                                return existing;
                            }
                            break;
                        case Block:
                        // We intentionally fallthrough here if enableBlocksAPI is not on.
                        // eslint-disable-next-lined no-fallthrough
                        default:
                            if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var _existing3 = useFiber(child, element.props);
                                _existing3.ref = coerceRef(returnFiber, child, element);
                                _existing3.return = returnFiber;
                                _existing3._debugSource = element._source;
                                _existing3._debugOwner = element._owner;
                                return _existing3;
                            }
                            break;
                    } // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            if (isObject) throwOnInvalidObjectType(returnFiber, newChild);
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch(returnFiber.tag){
                case ClassComponent:
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) break;
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
            }
             // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers1 = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current, workInProgress) {
        if (!(current === null || workInProgress.child === current.child)) throw Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {
    };
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.
        if (props.fallback === undefined) return false;
         // Regular boundaries always capture.
        if (props.unstable_avoidThisFallback !== true) return true;
         // If it's a boundary we should avoid, then we prefer to bubble up to the
        // parent boundary if it is currently invisible.
        if (hasInvisibleParent) return false;
         // If the parent is not able to handle it, we must handle it.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*  */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /*    */ 2;
    var Passive$1 = /*   */ 4;
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating1 = false;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating1 = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                }
                return false;
            case SuspenseComponent:
                return false;
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating1) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating1 = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating1 = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating1) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating1 = true;
            return false;
        }
        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while(nextInstance){
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating1 = false;
    }
    function getIsHydrating() {
        return isHydrating1;
    }
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    var rendererSigil$1;
    // Used to detect multiple renderers using the same mutable source.
    rendererSigil$1 = {
    };
    function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
    }
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    function getWorkInProgressVersion(mutableSource) {
        return mutableSource._workInProgressVersionPrimary;
    }
    function setWorkInProgressVersion(mutableSource, version) {
        mutableSource._workInProgressVersionPrimary = version;
        workInProgressSources.push(mutableSource);
    }
    function warnAboutMultipleRenderersDEV(mutableSource) {
        if (mutableSource._currentPrimaryRenderer == null) mutableSource._currentPrimaryRenderer = rendererSigil$1;
        else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) error1("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
    } // Eager reads the version of a mutable source and stores it on the root.
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnAboutUseOpaqueIdentifier;
    didWarnAboutUseOpaqueIdentifier = {
    };
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes1 = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook1 = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error1("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error1("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error1("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error1("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes1 = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current !== null && current.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook1 = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook1 !== null && currentHook1.next !== null;
        renderLanes1 = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook1 = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.flags &= ~(Passive | Update);
        current.lanes = removeLanes(current.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes1 = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook1 = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook1 === null) {
            var current = currentlyRenderingFiber$1.alternate;
            if (current !== null) nextCurrentHook = current.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook1.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook1 = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) throw Error("Rendered more hooks than during the previous render.");
            currentHook1 = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook1.memoizedState,
                baseState: currentHook1.baseState,
                baseQueue: currentHook1.baseQueue,
                queue: currentHook1.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current = currentHook1; // The last rebase update that is NOT part of the base state.
        var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error1("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes1, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        eagerReducer: update.eagerReducer,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.eagerReducer === reducer) // If this update was processed eagerly, and its reducer matches the
                    // current reducer, we can use the eagerly computed state.
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        }
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
        warnAboutMultipleRenderersDEV(source);
        var getVersion = source._getVersion;
        var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?
        var isSafeToReadFromSource = false; // Check the version first.
        // If this render has already been started with a specific version,
        // we can use it alone to determine if we can safely read from the source.
        var currentRenderVersion = getWorkInProgressVersion(source);
        if (currentRenderVersion !== null) // It's safe to read if the store hasn't been mutated since the last time
        // we read something.
        isSafeToReadFromSource = currentRenderVersion === version;
        else {
            // If there's no version, then this is the first time we've read from the
            // source during the current render pass, so we need to do a bit more work.
            // What we need to determine is if there are any hooks that already
            // subscribed to the source, and if so, whether there are any pending
            // mutations that haven't been synchronized yet.
            //
            // If there are no pending mutations, then `root.mutableReadLanes` will be
            // empty, and we know we can safely read.
            //
            // If there *are* pending mutations, we may still be able to safely read
            // if the currently rendering lanes are inclusive of the pending mutation
            // lanes, since that guarantees that the value we're about to read from
            // the source is consistent with the values that we read during the most
            // recent mutation.
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes1, root.mutableReadLanes);
            if (isSafeToReadFromSource) // If it's safe to read from this source during the current render,
            // store the version in case other components read from it.
            // A changed version number will let those components know to throw and restart the render.
            setWorkInProgressVersion(source, version);
        }
        if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            if (typeof snapshot === 'function') error1("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
            return snapshot;
        } else {
            // This handles the special case of a mutable source being shared between renderers.
            // In that case, if the source is mutated between the first and second renderer,
            // The second renderer don't know that it needs to reset the WIP version during unwind,
            // (because the hook only marks sources as dirty if it's written to their WIP version).
            // That would cause this tear check to throw again and eventually be visible to the user.
            // We can avoid this infinite loop by explicitly marking the source as dirty.
            //
            // This can lead to tearing in the first renderer when it resumes,
            // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
            markSourceAsDirty(source);
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
        }
    }
    function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root = getWorkInProgressRoot();
        if (!(root !== null)) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const
        var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root, source, getSnapshot);
        }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
        var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
        // We use it to clear the pending update queue if we have a new source.
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
            refs: refs,
            source: source,
            subscribe: subscribe
        }; // Sync the values needed by our subscription handler after each commit.
        dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.
            refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                if (typeof maybeNewSnapshot === 'function') error1("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                    setSnapshot(maybeNewSnapshot);
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root, lane);
                } // If the source mutated between render and now,
                // there may be state updates already scheduled from the old source.
                // Entangle the updates so that they render in the same batch.
                markRootEntangled(root, root.mutableReadLanes);
            }
        }, [
            getSnapshot,
            source,
            subscribe
        ]); // If we got a new source or subscribe function, re-subscribe in a passive effect.
        dispatcher.useEffect(function() {
            var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                    latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root, lane);
                } catch (error) {
                    // A selector might throw after a source mutation.
                    // e.g. it might try to read from a part of the store that no longer exists.
                    // In this case we should still schedule an update with React.
                    // Worst case the selector will throw again and then an error boundary will handle it.
                    latestSetSnapshot(function() {
                        throw error;
                    });
                }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            if (typeof unsubscribe !== 'function') error1('Mutable source subscribe function must return an unsubscribe function.');
            return unsubscribe;
        }, [
            source,
            subscribe
        ]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
        //
        // If either the source or the subscription have changed we can't can't trust the update queue.
        // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
        //
        // If the getSnapshot function changed, we also shouldn't rely on the update queue.
        // It's possible that the underlying source was mutated between the when the last "change" event fired,
        // and when the current render (with the new getSnapshot function) is processed.
        //
        // In both cases, we need to throw away pending updates (since they are no longer relevant)
        // and treat reading from the source as we do in the mount case.
        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            // Create a new queue and setState method,
            // So if there are interleaved updates, they get pushed to the older queue.
            // When this becomes current, the previous queue and dispatch method will be discarded,
            // including any interleaving updates that occur.
            var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
        }
        return snapshot;
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
            refs: {
                getSnapshot: getSnapshot,
                setSnapshot: null
            },
            source: source,
            subscribe: subscribe
        };
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
            current: initialValue
        };
        Object.seal(ref);
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook1 !== null) {
            var prevEffect = currentHook1.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error1("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error1("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error1("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setPending(false);
                callback();
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        });
    }
    function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
        // never changes.
        var start = startTransition.bind(null, setPending);
        mountRef(start);
        return [
            start,
            isPending
        ];
    }
    function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        // TODO: Should warn in effects and callbacks, too
        var name = getComponentName(fiber.type) || 'Unknown';
        if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error1("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
        }
    }
    function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
                if (!didUpgrade) {
                    // Only upgrade once. This works even inside the render phase because
                    // the update is added to a shared queue, which outlasts the
                    // in-progress render.
                    didUpgrade = true;
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
                throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                    setId(makeId());
                }, undefined, null);
            }
            return id;
        } else {
            var _id = makeId();
            mountState(_id);
            return _id;
        }
    }
    function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
    }
    function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
    }
    function dispatchAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error1("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null
        }; // Append the update to the end of the list.
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.eagerReducer = lastRenderedReducer;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error) {
                    } finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error1("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error1("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime1 = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime1;
    }
    function recordCommitTime() {
        commitTime1 = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {
    };
    didWarnAboutModulePatternComponent = {
    };
    didWarnAboutContextTypeOnFunctionComponent = {
    };
    didWarnAboutGetDerivedStateOnFunctionComponent = {
    };
    didWarnAboutFunctionRefs = {
    };
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {
    };
    didWarnAboutTailOptions = {
    };
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        if (current === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers1(workInProgress, current.child, nextChildren, renderLanes);
    }
    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers1(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers1(workInProgress, null, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
        if (current === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type));
        var currentChild = current.child; // This is always exactly one child
        if (!includesSomeLane(updateLanes, renderLanes)) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType));
            }
        }
        if (current !== null) {
            var prevProps = current.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes, updateLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumlated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current.lanes;
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current !== null ? current.memoizedState : null;
        if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Figure out what we should do in Blocking mode.
                var nextState = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes);
            } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                } else nextBaseLanes = renderLanes;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                markSpawnedWork(OffscreenLane);
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes
                };
                workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    // ourselves to this constraint, though. If the behavior diverges, we should
    // fork the function.
    var updateLegacyHiddenComponent = updateOffscreenComponent;
    function updateFragment1(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateProfiler(current, workInProgress, renderLanes) {
        workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        if (current === null && ref !== null || current !== null && current.ref !== ref) // Schedule a Ref effect
        workInProgress.flags |= Ref;
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            shouldUpdate = true;
        } else if (current === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
        else shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error1("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    instance.render();
                } finally{
                    reenableLogs();
                }
            }
            setIsRendering(false);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        else if (root.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
        pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        if (!(current !== null && updateQueue !== null)) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        var root = workInProgress.stateNode;
        if (root.hydrate && enterHydrationState(workInProgress)) {
            var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;
            if (mutableSourceEagerHydrationData != null) for(var i = 0; i < mutableSourceEagerHydrationData.length; i += 2){
                var mutableSource = mutableSourceEagerHydrationData[i];
                var version = mutableSourceEagerHydrationData[i + 1];
                setWorkInProgressVersion(mutableSource, version);
            }
            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
            workInProgress.child = child;
            var node = child;
            while(node){
                // Mark each child as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
            }
        } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress);
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current, workInProgress);
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostText(current, workInProgress) {
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes);
        var value;
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error1("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error1("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error1("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                } finally{
                    reenableLogs();
                }
            }
            reconcileChildren(null, workInProgress, value, renderLanes);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error1('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error1("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error1('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error1('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes) {
        return {
            baseLanes: renderLanes
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current !== null) {
            var suspenseState = current.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallack
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current, renderLanes) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current.childLanes, renderLanes);
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else {
            // Attempting the main content
            if (current === null || current.memoizedState !== null) // This is a new mount or this boundary is already showing a fallback state.
            // Mark this subtree context as having at least one invisible parent that could
            // handle the fallback state.
            // Boundaries without fallbacks or should be avoided are not considered since
            // they cannot handle preferred fallback states.
            {
                if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconcilation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                // This is a CPU-bound tree. Skip this tree and show a placeholder to
                // unblock the surrounding content. Then immediately retry after the
                // initial commit.
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var _primaryChildFragment = workInProgress.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
                // get it started back up to attempt the next item. While in terms of
                // priority this work has the same priority as this current render, it's
                // not part of the same transition once the transition has committed. If
                // it's sync, we still want to yield so that it can be painted.
                // Conceptually, this is really the same as pinging. We can use any
                // RetryLane even if it's the one currently rendering since we're leaving
                // it behind on this node.
                workInProgress.lanes = SomeRetryLane;
                markSpawnedWork(SomeRetryLane);
                return _fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
        } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current.memoizedState;
            if (prevState !== null) {
                if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;
                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);
                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                } else {
                    var _nextPrimaryChildren3 = nextProps.children;
                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);
                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                }
            } else // The current tree is not already showing a fallback.
            if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);
                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
            } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);
                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function createWorkInProgressOffscreenFiber(current, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & BlockingMode) === NoMode) primaryChildFragment.lanes = renderLanes;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & BlockingMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion effect during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it. So we need to remove it from the list. Deletions are stored
            // on the same list as effects. We want to keep the effects from the primary
            // tree. So we copy the primary child fragment's effect list, which does not
            // include the fallback deletion effect.
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
                workInProgress.firstEffect = primaryChildFragment.firstEffect;
                workInProgress.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
            } else // TODO: Reset this somewhere else? Lol legacy mode is so weird.
            workInProgress.firstEffect = workInProgress.lastEffect = null;
        } else primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function scheduleWorkOnFiber(fiber, renderLanes) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
        scheduleWorkOnParentPath(fiber.return, renderLanes);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleWorkOnFiber(node, renderLanes);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleWorkOnFiber(node, renderLanes);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error1("\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error1("\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error1("\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
                    break;
            }
            else error1("%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error1("\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?", tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error1("<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?", tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index) {
        var isArray = Array.isArray(childSlot);
        var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';
        if (isArray || isIterable) {
            var type = isArray ? 'array' : 'iterable';
            error1("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error1("A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?", revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & BlockingMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers1(workInProgress, null, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error1('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, changedBits, renderLanes);
        }
        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error1("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error1("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        if (current !== null) // Reuse previous dependencies
        workInProgress.dependencies = current.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current, workInProgress);
            return workInProgress.child;
        }
    }
    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
            last.nextEffect = current;
            returnFiber.lastEffect = current;
        } else returnFiber.firstEffect = returnFiber.lastEffect = current;
        current.nextEffect = null;
        current.flags = Deletion;
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function beginWork(current, workInProgress, renderLanes) {
        var updateLanes = workInProgress.lanes;
        if (workInProgress._debugNeedsRemount && current !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current !== null) {
            var oldProps = current.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else if (!includesSomeLane(renderLanes, updateLanes)) {
                didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch(workInProgress.tag){
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        break;
                    case ClassComponent:
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                    case Profiler:
                        // Profiler should only call onRender when one of its descendants actually rendered.
                        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                        if (hasChildWork) workInProgress.flags |= Update;
                         // Reset effect durations for the next eventual effect phase.
                        // These are reset during render to allow the DevTools commit hook a chance to read them,
                        var stateNode = workInProgress.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                        break;
                    case SuspenseComponent:
                        var state = workInProgress.memoizedState;
                        if (state !== null) {
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            // child fragment.
                            var primaryChildFragment = workInProgress.child;
                            var primaryChildLanes = primaryChildFragment.childLanes;
                            if (includesSomeLane(renderLanes, primaryChildLanes)) // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current, workInProgress, renderLanes);
                            else {
                                // The primary child fragment does not have pending work marked
                                // on it
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                                // priority. Bailout.
                                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                                if (child !== null) // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                                else return null;
                            }
                        } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        break;
                    case SuspenseListComponent:
                        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                        if (didSuspendBefore) {
                            if (_hasChildWork) // If something was in fallback state last time, and we have all the
                            // same children then we're still in progressive loading state.
                            // Something might get unblocked by state updates or retries in the
                            // tree which will affect the tail. So we need to use the normal
                            // path to compute the correct tail.
                            return updateSuspenseListComponent(current, workInProgress, renderLanes);
                             // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.
                            workInProgress.flags |= DidCapture;
                        } // If nothing suspended before and we're rendering the same children,
                        // then the tail doesn't matter. Anything new that suspends will work
                        // in the "together" mode, so we can continue from the state we had.
                        var renderState = workInProgress.memoizedState;
                        if (renderState !== null) {
                            // Reset to the "together" mode in case we've started a different
                            // update in the past but didn't complete it.
                            renderState.rendering = null;
                            renderState.tail = null;
                            renderState.lastEffect = null;
                        }
                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                        if (_hasChildWork) break;
                        else // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        return null;
                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                        // Need to check if the tree still needs to be deferred. This is
                        // almost identical to the logic used in the normal update path,
                        // so we'll just enter that. The only difference is we'll bail out
                        // at the next level instead of this one, because the child props
                        // have not changed. Which is fine.
                        // TODO: Probably should refactor `beginWork` to split the bailout
                        // path from the normal path. I'm tempted to do a labeled break here
                        // but I won't :)
                        workInProgress.lanes = NoLanes;
                        return updateOffscreenComponent(current, workInProgress, renderLanes);
                }
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
            else // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
        } else didReceiveUpdate = false;
         // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
            case FunctionComponent:
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
            case ClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
            case HostRoot:
                return updateHostRoot(current, workInProgress, renderLanes);
            case HostComponent:
                return updateHostComponent(current, workInProgress, renderLanes);
            case HostText:
                return updateHostText(current, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current, workInProgress, renderLanes);
            case HostPortal:
                return updatePortalComponent(current, workInProgress, renderLanes);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            case Fragment:
                return updateFragment1(current, workInProgress, renderLanes);
            case Mode:
                return updateMode(current, workInProgress, renderLanes);
            case Profiler:
                return updateProfiler(current, workInProgress, renderLanes);
            case ContextProvider:
                return updateContextProvider(current, workInProgress, renderLanes);
            case ContextConsumer:
                return updateContextConsumer(current, workInProgress, renderLanes);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
            case IncompleteClassComponent:
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current, workInProgress, renderLanes);
            case LegacyHiddenComponent:
                return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(workInProgress) {
    };
    updateHostComponent$1 = function(current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current === null || current.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (!fiberRoot.hydrate) // Schedule an effect to clear this container at the start of the next commit.
                    // This handles the case of React rendering into a container with previous children.
                    // It's also safe to do for updates too, because current.child would only be null
                    // if the previous render was null (so the the container would already be empty).
                    workInProgress.flags |= Snapshot;
                }
                updateHostContainer(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
                    if (current.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                return null;
            case HostText:
                var newText = newProps;
                if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current === null) {
                    if (workInProgress.memoizedProps.fallback !== undefined) popHydrationState(workInProgress);
                } else {
                    var prevState = current.memoizedState;
                    prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) // If this subtreee is running in blocking mode we can suspend,
                // otherwise we won't suspend.
                // TODO: This will still suspend a synchronous tree if anything
                // in the concurrent tree already suspended during this render.
                // This is a known bug.
                {
                    if ((workInProgress.mode & BlockingMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                if (nextDidTimeout || prevDidTimeout) // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update;
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                if (current === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                return null;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) // We're running in the default, "independent" mode.
                // We don't do anything in this mode.
                return null;
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thennables. Instead, we'll transfer its thennables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThennables = suspended.updateQueue;
                                    if (newThennables !== null) {
                                        workInProgress.updateQueue = newThennables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect list before doing the second pass since that's now invalid.
                                    if (renderState.lastEffect === null) workInProgress.firstEffect = null;
                                    workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.
                                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThennables = _suspended.updateQueue;
                            if (_newThennables !== null) {
                                workInProgress.updateQueue = _newThennables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We need to delete the row we just rendered.
                                // Reset the effect list to what it was before we rendered this
                                // child. The nested children have already appended themselves.
                                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.
                                if (lastEffect !== null) lastEffect.nextEffect = null;
                                 // We're done.
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.lastEffect = workInProgress.lastEffect;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    return next;
                }
                return null;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                if (current !== null) {
                    var _nextState = workInProgress.memoizedState;
                    var _prevState = current.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    var nextIsHidden = _nextState !== null;
                    if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') workInProgress.flags |= Update;
                }
                return null;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(workInProgress, renderLanes) {
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if (!((_flags & DidCapture) === NoFlags)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);
            if (errorBoundaryName) errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            else errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined
                logCapturedError(fiber, errorInfo);
            }
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error1("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || 'Unknown');
            }
        };
        else update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
        };
        return update;
    }
    function attachPingListener(root, wakeable, lanes) {
        // Attach a listener to the promise to "ping" the root and retry. But only if
        // one does not already exist for the lanes we're currently rendering (which
        // acts like a "thread ID" here).
        var pingCache = root.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            wakeable.then(ping, ping);
        }
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable.
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
                // Reset the memoizedState to what it was before we attempted
                // to render it.
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                    sourceFiber.updateQueue = currentSource.updateQueue;
                    sourceFiber.memoizedState = currentSource.memoizedState;
                    sourceFiber.lanes = currentSource.lanes;
                } else {
                    sourceFiber.updateQueue = null;
                    sourceFiber.memoizedState = null;
                }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.
            var _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    // attach another listener to flip the boundary back to its normal state.
                    var wakeables = _workInProgress.updateQueue;
                    if (wakeables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(wakeable);
                        _workInProgress.updateQueue = updateQueue;
                    } else wakeables.add(wakeable);
                     // If the boundary is outside of blocking mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a blocking mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & BlockingMode) === NoMode) {
                        _workInProgress.flags |= DidCapture;
                        sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                            // completed class component. For example, we should not call
                            // componentWillUnmount if it is deleted.
                            sourceFiber.tag = IncompleteClassComponent;
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force update to
                                // prevent a bail out.
                                var update = createUpdate(NoTimestamp, SyncLane);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        } // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.
                        return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.
                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. Transitions apply
                    // to this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.
                    attachPingListener(root, wakeable, rootRenderLanes);
                    _workInProgress.flags |= ShouldCapture;
                    _workInProgress.lanes = rootRenderLanes;
                    return;
                } // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null) // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
        } // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var callComponentWillUnmountWithTimer = function(current, instance) {
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current, instance) {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);
        if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current, unmountError);
        }
    }
    function safelyDetachRef(current) {
        var ref = current.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current, refError);
                }
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current, destroy) {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
            var error = clearCaughtError();
            captureCommitPhaseError(current, error);
        }
    }
    function commitBeforeMutationLifeCycles(current, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                return;
            case ClassComponent:
                if (finishedWork.flags & Snapshot) {
                    if (current !== null) {
                        var prevProps = current.memoizedProps;
                        var prevState = current.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error1("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                }
                return;
            case HostRoot:
                if (finishedWork.flags & Snapshot) {
                    var root = finishedWork.stateNode;
                    clearContainer(root.containerInfo);
                }
                return;
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) destroy();
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = ' You returned: ' + destroy;
                        error1("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                    enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                    enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
            }while (effect !== firstEffect)
        }
    }
    function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                schedulePassiveEffects(finishedWork);
                return;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (current === null) {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidMount();
                    } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                        var prevState = current.memoizedState; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error1("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error1("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                return;
            case HostText:
                // We have no life-cycles associated with text.
                return;
            case HostPortal:
                // We have no life-cycles associated with portals.
                return;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                return;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) hideInstance(instance);
                else unhideInstance(node.stateNode, node.memoizedProps);
            } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) hideTextInstance(_instance3);
                else unhideTextInstance(_instance3, node.memoizedProps);
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') ref(instanceToUse);
            else {
                if (!ref.hasOwnProperty('current')) error1("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current) {
        var currentRef = current.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') currentRef(null);
            else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current, renderPriorityLevel) {
        onCommitUnmount(current);
        switch(current.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                var updateQueue = current.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                            if (destroy !== undefined) {
                                if ((tag & Passive$1) !== NoFlags$1) enqueuePendingPassiveHookEffectUnmount(current, effect);
                                else safelyCallDestroy(current, destroy);
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current);
                var instance = current.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current, instance);
                return;
            case HostComponent:
                safelyDetachRef(current);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current);
                return;
            case FundamentalComponent:
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root;
        while(true){
            commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        // Note: we cannot null out sibling here, otherwise it can cause issues
        // with findDOMNode and how it requires the sibling field to carry out
        // traversal in a later effect. See PR #16820. We now clear the sibling
        // field after effects, see: detachFiberAfterEffects.
        //
        // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
        // It may be required if the current component is an error boundary,
        // and one of its descendants throws while unmounting a passive effect.
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        fiber._debugOwner = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch(parentFiber.tag){
            case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case FundamentalComponent:
            // eslint-disable-next-line-no-fallthrough
            default:
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (parentFiber.flags & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag
            parentFiber.flags &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        if (isContainer) insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        else insertOrAppendPlacementNode(finishedWork, before, parent);
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (!(parent !== null)) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current, renderPriorityLevel) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current);
        var alternate = current.alternate;
        detachFiberMutation(current);
        if (alternate !== null) detachFiberMutation(alternate);
    }
    function commitWork(current, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current !== null ? current.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (!(finishedWork.stateNode !== null)) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current !== null ? current.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                    // We've just hydrated. No need to hydrate again.
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState !== null) {
            markCommitTimeOfFallback();
            // Hide the Offscreen component that contains the primary children. TODO:
            // Ideally, this effect would have been scheduled on the Offscreen fiber
            // itself. That's how unhiding works: the Offscreen component schedules an
            // effect on itself. However, in this case, the component didn't complete,
            // so the fiber was never added to the effect list in the normal path. We
            // could have appended it to the effect list in the Suspense component's
            // second pass, but doing it this way is less complicated. This would be
            // simpler if we got rid of the effect list and traversed the tree, like
            // we're planning to do.
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
        }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current = finishedWork.alternate;
            if (current !== null) {
                var prevState = current.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    if (wakeable.__reactDoNotTraceInteractions !== true) retry = tracing.unstable_wrap(retry);
                    retryCache.add(wakeable);
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    // It returns false if the boundary is already hidden.
    // TODO: Use an effect tag.
    function isSuspenseBoundaryBeingHidden(current, finishedWork) {
        if (current !== null) {
            var oldState = current.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
            }
        }
        return false;
    }
    function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor$1('selector.role');
        TEST_NAME_TYPE = symbolFor$1('selector.test_id');
        TEXT_TYPE = symbolFor$1('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var EventContext = /*                 */ 2;
    var DiscreteEventContext = /*         */ 4;
    var LegacyUnbatchedContext = /*       */ 8;
    var RenderContext = /*                */ 16;
    var CommitContext = /*                */ 32;
    var RetryAfterError = /*       */ 64;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress1 = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes1 = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.
    var workInProgressRootPingedLanes = NoLanes;
    var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority$1;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveHookEffectsMount = [];
    var pendingPassiveHookEffectsUnmount = [];
    var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    // TODO: Can use a bitmask instead of an array
    var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventWipLanes = NoLanes;
    var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
    // We warn about state updates for unmounted components differently in this case.
    var isFlushingPassiveEffects = false;
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // The algorithm for assigning an update to a lane should be stable for all
        // updates at the same priority within the same event. To do this, the inputs
        // to the algorithm must be the same. For example, we use the `renderLanes`
        // to avoid choosing a lane that is already in the middle of rendering.
        //
        // However, the "included" lanes could be mutated in between updates in the
        // same event, like if you perform an update inside `flushSync`. Or any other
        // code path that might call `prepareFreshStack`.
        //
        // The trick we use is to cache the first of each of these inputs within an
        // event. Then reset the cached values once we can be sure the event is over.
        // Our heuristic for that is whenever we enter a concurrent work loop.
        //
        // We'll do the same for `currentEventPendingLanes` below.
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        } // TODO: Remove this dependency on the Scheduler priority.
        // To do that, we're replacing it with an update lane priority.
        var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
        // This couples React to the Scheduler internals, so we're replacing it
        // with the currentUpdateLanePriority above. As an example of how this
        // could be problematic, if we're not inside `Scheduler.runWithPriority`,
        // then we'll get the priority of the current running Scheduler task,
        // which is probably not what we want.
        var lane;
        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }
        return lane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // See `requestUpdateLane` for explanation of `currentEventWipLanes`
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        return findRetryLane(currentEventWipLanes);
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
        } // Mark that the root has a pending update.
        markRootUpdated(root, lane, eventTime);
        if (root === workInProgressRoot) {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
            // definitely won't finish. Since we have a new update, let's mark it as
            // suspended now, right before marking the incoming update. This has the
            // effect of interrupting the current render and switching to the update.
            // TODO: Make sure this doesn't override pings that happen while we've
            // already started rendering.
            markRootSuspended$1(root, workInProgressRootRenderLanes);
        } // TODO: requestUpdateLanePriority also reads the priority. Pass the
        // priority as an argument to that function and this one.
        var priorityLevel = getCurrentPriorityLevel();
        if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                // Register pending interactions on the root to avoid losing traced interaction data.
                schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                // root inside of batchedUpdates should be synchronous, but layout updates
                // should be deferred until the end of the batch.
                performSyncWorkOnRoot(root);
            } else {
                ensureRootIsScheduled(root, eventTime);
                schedulePendingInteractions(root, lane);
                if (executionContext === NoContext) {
                    // Flush the synchronous work now, unless we're already working or inside
                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                    // scheduleCallbackForFiber to preserve the ability to schedule a callback
                    // without immediately flushing it. We only do this for user-initiated
                    // updates, to preserve historical behavior of legacy mode.
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        } else {
            // Schedule a discrete update but only if it's not Sync.
            if ((executionContext & DiscreteEventContext) !== NoContext && // discrete, even inside a discrete event.
            (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                // This is the result of a discrete event. Track the lowest priority
                // discrete update per root so we can flush them early, if needed.
                if (rootsWithPendingDiscreteUpdates === null) rootsWithPendingDiscreteUpdates = new Set([
                    root
                ]);
                else rootsWithPendingDiscreteUpdates.add(root);
            } // Schedule other updates after in case the callback is sync.
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, lane);
        } // We use this when assigning a lane for a transition inside
        // `requestUpdateLane`. We assume it's the same as the root being updated,
        // since in the common case of a single root app it probably is. If it's not
        // the same root, then it's not a huge deal, we just might batch more stuff
        // together more than necessary.
        mostRecentlyUpdatedRoot = root;
    } // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
        } else return null;
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.
        var newCallbackPriority = returnNextLanesPriority();
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root.callbackNode = null;
                root.callbackPriority = NoLanePriority;
            }
            return;
        } // Check if there's an existing task. We may be able to reuse it.
        if (existingCallbackNode !== null) {
            var existingCallbackPriority = root.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) // The priority hasn't changed. We can reuse the existing task. Exit.
            return;
             // The priority changed. Cancel the existing callback. We'll schedule a new
            // one below.
            cancelCallback(existingCallbackNode);
        } // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLanePriority) // Special case: Sync React callbacks are scheduled on a special
        // internal queue
        newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
        else if (newCallbackPriority === SyncBatchedLanePriority) newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
        else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        }
        root.callbackPriority = newCallbackPriority;
        root.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root) {
        // Since we know we're in a React event, we can clear the current
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next expiration time to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
        var exitStatus = renderRootConcurrent(root, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        //
        // So we'll throw out the current work and restart.
        prepareFreshStack(root, NoLanes);
        else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError; // If an error occurred during hydration,
                // discard server response and fall back to client side render.
                if (root.hydrate) {
                    root.hydrate = false;
                    clearContainer(root.containerInfo);
                } // If something threw an error, try rendering one more time. We'll render
                // synchronously to block concurrent data mutations, and we'll includes
                // all pending updates are included. If it still fails after the second
                // attempt, we'll give up and commit the resulting tree.
                lanes = getLanesToRetrySynchronouslyOnError(root);
                if (lanes !== NoLanes) exitStatus = renderRootSync(root, lanes);
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now());
                throw fatalError;
            } // We now have a consistent tree. The next step is either to commit it,
            // or, if something suspended, wait to commit it after a timeout.
            var finishedWork = root.current.alternate;
            root.finishedWork = finishedWork;
            root.finishedLanes = lanes;
            finishConcurrentRender(root, exitStatus, lanes);
        }
        ensureRootIsScheduled(root, now());
        if (root.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
        return null;
    }
    function finishConcurrentRender(root, exitStatus, lanes) {
        switch(exitStatus){
            case RootIncomplete:
            case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root);
                break;
            case RootSuspended:
                markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root);
                break;
            default:
                throw Error("Unknown root exit status.");
        }
    }
    function markRootSuspended$1(root, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        flushPassiveEffects();
        var lanes;
        var exitStatus;
        if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
            // There's a partial tree, and at least one of its lanes has expired. Finish
            // rendering it before rendering the rest of the expired work.
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                // The render included lanes that were updated during the render phase.
                // For example, when unhiding a hidden tree, we include all the lanes
                // that were previously skipped when the tree was hidden. That set of
                // lanes is a superset of the lanes we started rendering with.
                //
                // Note that this only happens when part of the tree is rendered
                // concurrently. If the whole tree is rendered synchronously, then there
                // are no interleaved events.
                lanes = getNextLanes(root, lanes);
                exitStatus = renderRootSync(root, lanes);
            }
        } else {
            lanes = getNextLanes(root, NoLanes);
            exitStatus = renderRootSync(root, lanes);
        }
        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError; // If an error occurred during hydration,
            // discard server response and fall back to client side render.
            if (root.hydrate) {
                root.hydrate = false;
                clearContainer(root.containerInfo);
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            lanes = getLanesToRetrySynchronouslyOnError(root);
            if (lanes !== NoLanes) exitStatus = renderRootSync(root, lanes);
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
        } // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root, now());
        return null;
    }
    function flushDiscreteUpdates() {
        // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
        // However, `act` uses `batchedUpdates`, so there's no way to distinguish
        // those two cases. Need to fix this before exposing flushDiscreteUpdates
        // as a public API.
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            if ((executionContext & RenderContext) !== NoContext) error1("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.
            return;
        }
        flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
        // they fire before the next serial event.
        flushPassiveEffects();
    }
    function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root) {
                markDiscreteUpdatesExpired(root);
                ensureRootIsScheduled(root, now());
            });
        } // Now flush the immediate queue.
        flushSyncCallbackQueue();
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function flushSync(fn, a) {
        var prevExecutionContext = executionContext;
        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            error1("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            return fn(a);
        }
        executionContext |= BatchedContext;
        try {
            if (fn) return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
            else return undefined;
        } finally{
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            flushSyncCallbackQueue();
        }
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes1, fiber);
        subtreeRenderLanes1 = mergeLanes(subtreeRenderLanes1, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes1 = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        var timeoutHandle = root.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress1 !== null) {
            var interruptedWork = workInProgress1.return;
            while(interruptedWork !== null){
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root;
        workInProgress1 = createWorkInProgress(root.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes1 = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        spawnedWorkDuringRender = null;
        ReactStrictModeWarnings.discardPendingWarnings();
    }
    function handleError(root, thrownValue) {
        do {
            var erroredWork = workInProgress1;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress1 = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress1 === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress1 = erroredWork;
                } else erroredWork = workInProgress1;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function pushInteractions(root) {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
        return prevInteractions;
    }
    function popInteractions(prevInteractions) {
        tracing.__interactionsRef.current = prevInteractions;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) workInProgressRootExitStatus = RootErrored;
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootIncomplete;
    }
    function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root, lanes);
            startWorkOnPendingInteractions(root, lanes);
        }
        var prevInteractions = pushInteractions(root);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress1 !== null) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress1 !== null)performUnitOfWork(workInProgress1);
    }
    function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root, lanes);
            startWorkOnPendingInteractions(root, lanes);
        }
        var prevInteractions = pushInteractions(root);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress1 !== null) return RootIncomplete;
        else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress1 !== null && !shouldYield())performUnitOfWork(workInProgress1);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes1);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current, unitOfWork, subtreeRenderLanes1);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress1 = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current, completedWork, subtreeRenderLanes1);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current, completedWork, subtreeRenderLanes1); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress1 = next;
                    return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) returnFiber.firstEffect = completedWork.firstEffect;
                    if (completedWork.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                        returnFiber.lastEffect = completedWork.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.
                    if (flags > PerformedWork) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork;
                        else returnFiber.firstEffect = completedWork;
                        returnFiber.lastEffect = completedWork;
                    }
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress1 = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.flags |= Incomplete;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress1 = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress1 = completedWork;
        }while (completedWork !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootCompleted;
    }
    function resetChildLanes(completedWork) {
        if (// to switch statement in `completeWork`.
        (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes1, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
        var newChildLanes = NoLanes; // Bubble up the earliest expiration time.
        if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while(child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
        } else {
            var _child = completedWork.child;
            while(_child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
            }
        }
        completedWork.childLanes = newChildLanes;
    }
    function commitRoot(root) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
        return null;
    }
    function commitRootImpl(root, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        var finishedWork = root.finishedWork;
        var lanes = root.finishedLanes;
        if (finishedWork === null) return null;
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        if (!(finishedWork !== root.current)) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root.callbackNode = null; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of
        // `flushDiscreteUpdates` starts a useless render pass which may cancels
        // a scheduled timeout.
        if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) rootsWithPendingDiscreteUpdates.delete(root);
        }
        if (root === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress1 = null;
            workInProgressRootRenderLanes = NoLanes;
        } // Get the list of effects.
        var firstEffect;
        if (finishedWork.flags > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            } else firstEffect = finishedWork;
        } else // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
        if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            focusedInstanceHandle = prepareForCommit(root.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null) // We no longer need to track the active instance fiber
            focusedInstanceHandle = null;
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.
            requestPaint();
            popInteractions(prevInteractions);
            executionContext = prevExecutionContext;
        } else {
            // No effects.
            root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;
            while(nextEffect !== null){
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) detachFiberAfterEffects(nextEffect);
                nextEffect = nextNextEffect;
            }
        } // Read this again, since an effect might have updated it
        remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
        if (remainingLanes !== NoLanes) {
            if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for(var i = 0; i < expirationTimes.length; i++)scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
            }
            schedulePendingInteractions(root, remainingLanes);
        } else // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) // If there are no passive effects, then we can complete the pending interactions.
        // Otherwise, we'll wait until after the passive effects are flushed.
        // Wait to do this until after remaining work has been scheduled,
        // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
        finishPendingInteractions(root, lanes);
        if (remainingLanes === SyncLane) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root;
            }
        } else nestedUpdateCount = 0;
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root, now());
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
         // If layout work was scheduled, flush it now.
        flushSyncCallbackQueue();
        return null;
    }
    function commitBeforeMutationEffects() {
        while(nextEffect !== null){
            var current = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                    if (doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
                } else // TODO: Move this out of the hot path using a dedicated effect tag.
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current, nextEffect);
                resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) // If there are passive effects, schedule a callback to flush at
            // the earliest opportunity.
            {
                if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function() {
                        flushPassiveEffects();
                        return null;
                    });
                }
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitMutationEffects(root, renderPriorityLevel) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) commitResetTextContent(nextEffect);
            if (flags & Ref) {
                var current = nextEffect.alternate;
                if (current !== null) commitDetachRef(current);
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch(primaryFlags){
                case Placement:
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted does
                    // and isMounted is deprecated anyway so we should be able to kill this.
                    nextEffect.flags &= ~Placement;
                    break;
                case PlacementAndUpdate:
                    // Placement
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    nextEffect.flags &= ~Placement; // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                case Hydrating:
                    nextEffect.flags &= ~Hydrating;
                    break;
                case HydratingAndUpdate:
                    nextEffect.flags &= ~Hydrating; // Update
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                case Update:
                    var _current3 = nextEffect.alternate;
                    commitWork(_current3, nextEffect);
                    break;
                case Deletion:
                    commitDeletion(root, nextEffect);
                    break;
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitLayoutEffects(root, committedLanes) {
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
                var current = nextEffect.alternate;
                commitLifeCycles(root, current, nextEffect);
            }
            if (flags & Ref) commitAttachRef(nextEffect);
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
        return false;
    }
    function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        fiber.flags |= PassiveUnmountPendingDev;
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.flags |= PassiveUnmountPendingDev;
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function invokePassiveEffectCreate(effect) {
        var create = effect.create;
        effect.destroy = create();
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called
        // before ANY passive effect create functions are called.
        // Otherwise effects in sibling components might interfere with each other.
        // e.g. a destroy function in one component may unintentionally override a ref
        // value set by a create function in another component.
        // Layout effects have the same constraint.
        // First pass: Destroy stale passive effects.
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];
        for(var i = 0; i < unmountEffects.length; i += 2){
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = undefined;
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) alternate.flags &= ~PassiveUnmountPendingDev;
            if (typeof destroy === 'function') {
                setCurrentFiber(fiber);
                invokeGuardedCallback(null, destroy, null);
                if (hasCaughtError()) {
                    if (!(fiber !== null)) throw Error("Should be working on an effect.");
                    var error = clearCaughtError();
                    captureCommitPhaseError(fiber, error);
                }
                resetCurrentFiber();
            }
        } // Second pass: Create new passive effects.
        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];
        for(var _i = 0; _i < mountEffects.length; _i += 2){
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            setCurrentFiber(_fiber);
            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            if (hasCaughtError()) {
                if (!(_fiber !== null)) throw Error("Should be working on an effect.");
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
            }
            resetCurrentFiber();
        } // Note: This currently assumes there are no passive effects on the root fiber
        // because the root is not part of its own effect list.
        // This could change in the future.
        var effect = root.current.firstEffect;
        while(effect !== null){
            var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC
            effect.nextEffect = null;
            if (effect.flags & Deletion) detachFiberAfterEffects(effect);
            effect = nextNextEffect;
        }
        popInteractions(prevInteractions);
        finishPendingInteractions(root, lanes);
        isFlushingPassiveEffects = false;
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, SyncLane);
        }
    }
    function captureCommitPhaseError(sourceFiber, error) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
            return;
        }
        var fiber = sourceFiber.return;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                    if (root !== null) {
                        markRootUpdated(root, SyncLane, eventTime);
                        ensureRootIsScheduled(root, eventTime);
                        schedulePendingInteractions(root, SyncLane);
                    } else {
                        // This component has already been unmounted.
                        // We can't schedule any follow up work for the root because the fiber is already unmounted,
                        // but we can still call the log-only boundary so the error isn't swallowed.
                        //
                        // TODO This is only a temporary bandaid for the old reconciler fork.
                        // We can delete this special case once the new fork is merged.
                        if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) try {
                            instance.componentDidCatch(error, errorInfo);
                        } catch (errorToIgnore) {
                        // This is kind of an edge case.
                        }
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root, pingedLanes);
        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root, eventTime);
        schedulePendingInteractions(root, pingedLanes);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new expiration time.
        if (retryLane === NoLane) retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, retryLane);
        }
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        retryCache = boundaryFiber.stateNode;
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error1("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & (BlockingMode | ConcurrentMode))) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current1;
        try {
            setCurrentFiber(fiber);
            error1("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // If there are pending passive effects unmounts for this Fiber,
        // we can assume that they would have prevented this update.
        if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) return;
            didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else didWarnStateUpdateForUnmountedComponent = new Set([
            componentName
        ]);
        if (isFlushingPassiveEffects) ;
        else {
            var previousFiber = current1;
            try {
                setCurrentFiber(fiber);
                error1("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current, unitOfWork, lanes);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.
                throw replayError;
            } else // This branch is reachable if the render phase is impure.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress1 && getComponentName(workInProgress1.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                    error1("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error1("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    } // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
        current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current1;
            try {
                setCurrentFiber(fiber);
                error1("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) error1("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current1;
            try {
                setCurrentFiber(fiber);
                error1("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error1("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://reactjs.org/link/mock-scheduler");
            }
        }
    }
    function computeThreadID(root, lane) {
        // Interaction threads are unique per root and expiration time.
        // NOTE: Intentionally unsound cast. All that matters is that it's a number
        // and it represents a batch of work. Could make a helper function instead,
        // but meh this is fine for now.
        return lane * 1000 + root.interactionThreadID;
    }
    function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) spawnedWorkDuringRender = [
            lane
        ];
        else spawnedWorkDuringRender.push(lane);
    }
    function scheduleInteractions(root, lane, interactions) {
        if (interactions.size > 0) {
            var pendingInteractionMap = root.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) // Update the pending async work count for previously unscheduled interaction.
                interaction.__count++;
                pendingInteractions.add(interaction);
            });
            else {
                pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.
                interactions.forEach(function(interaction) {
                    interaction.__count++;
                });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root, lane);
                subscriber.onWorkScheduled(interactions, threadID);
            }
        }
    }
    function schedulePendingInteractions(root, lane) {
        scheduleInteractions(root, lane, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root, lanes) {
        // we can accurately attribute time spent working on it, And so that cascading
        // work triggered during the render phase will be associated with it.
        var interactions = new Set();
        root.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
            });
        }); // Store the current set of interactions on the FiberRoot for a few reasons:
        // We can re-use it in hot functions like performConcurrentWorkOnRoot()
        // without having to recalculate it. We will also use it in commitWork() to
        // pass to any Profiler onRender() hooks. This also provides DevTools with a
        // way to access it when the onCommitRoot() hook is called.
        root.memoizedInteractions = interactions;
        if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root, lanes);
                try {
                    subscriber.onWorkStarted(interactions, threadID);
                } catch (error) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function() {
                        throw error;
                    });
                }
            }
        }
    }
    function finishPendingInteractions(root, committedLanes) {
        var remainingLanesAfterCommit = root.pendingLanes;
        var subscriber;
        try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root.memoizedInteractions.size > 0) {
                // FIXME: More than one lane can finish in a single commit.
                var threadID = computeThreadID(root, committedLanes);
                subscriber.onWorkStopped(root.memoizedInteractions, threadID);
            }
        } catch (error2) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
            });
        } finally{
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            var pendingInteractionMap = root.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                // Only decrement the pending interaction count if we're done.
                // If there's still work at the current priority,
                // That indicates that we are waiting for suspense data.
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                    pendingInteractionMap.delete(lane);
                    scheduledInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) try {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error) {
                            // If the subscriber throws, rethrow it in a separate task
                            scheduleCallback(ImmediatePriority$1, function() {
                                throw error;
                            });
                        }
                    });
                }
            });
        }
    } // `act` testing API
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return actingUpdatesScopeDepth > 0;
    }
    // so we can tell if any async act() calls try to run in parallel.
    var actingUpdatesScopeDepth = 0;
    function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
    }
    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root, element) {
        if (root.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({
        });
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;
        if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            // DEV-only fields
            workInProgress._debugID = current._debugID;
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
            workInProgress.alternate = current;
            current.alternate = workInProgress;
        } else {
            workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress.flags = NoFlags; // The effect list is no longer valid.
            workInProgress.nextEffect = null;
            workInProgress.firstEffect = null;
            workInProgress.lastEffect = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
        }
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
            case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;
            case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
        }
        return workInProgress;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress, renderLanes) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect tag but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress.flags &= Placement; // The effect list is no longer valid.
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
        var current = workInProgress.alternate;
        if (current === null) {
            // Reset to createFiber's initial values.
            workInProgress.childLanes = NoLanes;
            workInProgress.lanes = renderLanes;
            workInProgress.child = null;
            workInProgress.memoizedProps = null;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.dependencies = null;
            workInProgress.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        return workInProgress;
    }
    function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) mode = ConcurrentMode | BlockingMode | StrictMode;
        else if (tag === BlockingRoot) mode = BlockingMode | StrictMode;
        else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error1('Profiler must specify an "id" as a prop');
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_OFFSCREEN_TYPE;
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.mutableSourceEagerHydrationData = null;
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
        switch(tag){
            case BlockingRoot:
                this._debugRootType = 'createBlockingRoot()';
                break;
            case ConcurrentRoot:
                this._debugRootType = 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = 'createLegacyRoot()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        initializeUpdateQueue(uninitializedFiber);
        return root;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root.mutableSourceEagerHydrationData == null) root.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {
    };
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get1(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get1(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw Error("Unable to find node on an unmounted component.");
            else throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current1;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) error1("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error1("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current1 !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error1("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current1.type) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error1("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thennables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = InputDiscreteHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function runWithPriority$2(priority, fn) {
        setCurrentUpdateLanePriority(priority);
        return fn();
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.tag === FundamentalComponent) return hostFiber.stateNode.instance;
        return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index) {
        var key = path[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index + 1 === path.length) {
            if (Array.isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index + 1 === oldPath.length) {
            var newKey = newPath[index]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (Array.isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index, value) {
        if (index >= path.length) return value;
        var key = path[index];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook = fiber.memoizedState;
        while(currentHook !== null && id > 0){
            currentHook = currentHook.next;
            id--;
        }
        return currentHook;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current1;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools
        });
    }
    function ReactDOMRoot(container, options) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
    }
    function ReactDOMBlockingRoot(container, tag, options) {
        this._internalRoot = createRootImpl(container, tag, options);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
        var root = this._internalRoot;
        if (typeof arguments[1] === 'function') error1("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var container = root.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error1("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error1("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root = this._internalRoot;
        var container = root.containerInfo;
        updateContainer(null, root, null, function() {
            unmarkContainerAsRoot(container);
        });
    };
    function createRootImpl(container, tag, options) {
        // Tag is either LegacyRoot or Concurrent Root
        var hydrate = options != null && options.hydrate === true;
        var hydrationCallbacks = options != null && options.hydrationOptions || null;
        var mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
        var root = createContainer(container, tag, hydrate);
        markContainerAsRoot(root.current, container);
        var containerNodeType = container.nodeType;
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root, mutableSource);
        }
        return root;
    }
    function createLegacyRoot(container, options) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error1("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error1("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error1("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while(rootSibling = container.lastChild){
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error1("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
                container.removeChild(rootSibling);
            }
        }
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
        }
        return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
        } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error1("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        // member of intersection type." Whyyyyyy.
        var root = container._reactRootContainer;
        var fiberRoot;
        if (!root) {
            // Initial mount
            root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root._internalRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                };
            } // Initial mount should not be batched.
            unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
            });
        } else {
            fiberRoot = root._internalRoot;
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    _originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error1("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate1(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render1(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) throw Error("Target container is not a DOM element.");
        if (!(parentComponent != null && has1(parentComponent))) throw Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error1("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error1("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error1("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setAttemptHydrationAtPriority(runWithPriority$2);
    var didWarnAboutUnstableCreatePortal = false;
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error1("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn("The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.");
        }
        return createPortal$1(children, container, key);
    }
    var Internals = {
        // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
        ]
    };
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate1;
    exports.render = render1;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
})();

},{"react":"4mchR","object-assign":"iUUFa","scheduler":"kKlXr","scheduler/tracing":"7D5oU"}],"kKlXr":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"6lQJ8"}],"6lQJ8":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var requestPaint;
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    if (// implementation using setTimeout.
    typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
            if (_callback !== null) try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
            } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
            }
        };
        requestHostCallback = function(cb) {
            if (_callback !== null) // Protect against re-entrancy.
            setTimeout(requestHostCallback, 0, cb);
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
            }
        };
        requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
        };
        exports.unstable_shouldYield = function() {
            return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function() {
        };
    } else {
        // Capture local references to native APIs, in case a polyfill overrides them.
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            if (typeof cancelAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
        // thread, like user events. By default, it yields multiple times per frame.
        // It does not attempt to align with frame boundaries, since most tasks don't
        // need to be frame aligned; for those that do, use requestAnimationFrame.
        var yieldInterval = 5;
        var deadline = 0; // TODO: Make this configurable
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
        }; // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function() {
        };
        exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
                // Using console['error'] to evade Babel and ESLint
                console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
            }
            if (fps > 0) yieldInterval = Math.floor(1000 / fps);
            else // reset the framerate
            yieldInterval = 5;
        };
        var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                // cycle. This means there's always time remaining at the beginning of
                // the message event.
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                    var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                    if (!hasMoreWork) {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                    } else // If there's more work, schedule the next message event at the end
                    // of the preceding one.
                    port.postMessage(null);
                } catch (error) {
                    // If a scheduler task throws, exit the current browser task so the
                    // error can be observed.
                    port.postMessage(null);
                    throw error;
                }
            } else isMessageLoopRunning = false;
             // Yielding to the browser will give it a chance to paint, so we can
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
            }
        };
        requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
            }, ms);
        };
        cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
        };
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
    }
    function pop(heap) {
        var first = heap[0];
        if (first !== undefined) {
            var last = heap.pop();
            if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
            }
            return first;
        } else return null;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(true){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== undefined && compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while(index < length){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (left !== undefined && compare(left, node) < 0) {
                if (right !== undefined && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (right !== undefined && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {
    }
    /* eslint-disable no-var */ // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {
    }
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
})();

},{}],"7D5oU":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler-tracing.development.js');

},{"./cjs/scheduler-tracing.development.js":"1zOao"}],"1zOao":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    exports.__interactionsRef = {
        current: new Set()
    };
    exports.__subscriberRef = {
        current: null
    };
    function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
            return callback();
        } finally{
            exports.__interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        return exports.__interactionsRef.current;
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
            if (subscriber !== null) subscriber.onInteractionTraced(interaction);
        } finally{
            try {
                if (subscriber !== null) subscriber.onWorkStarted(interactions, threadID);
            } finally{
                try {
                    returnValue = callback();
                } finally{
                    exports.__interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) subscriber.onWorkStopped(interactions, threadID);
                    } finally{
                        interaction.__count--; // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) subscriber.onWorkScheduled(wrappedInteractions, threadID);
         // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
                var returnValue;
                try {
                    if (subscriber !== null) subscriber.onWorkStarted(wrappedInteractions, threadID);
                } finally{
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally{
                        exports.__interactionsRef.current = prevInteractions;
                        if (subscriber !== null) subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                }
                return returnValue;
            } finally{
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
                if (subscriber !== null) subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally{
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    subscribers = new Set();
    function unstable_subscribe(subscriber) {
        subscribers.add(subscriber);
        if (subscribers.size === 1) exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
        };
    }
    function unstable_unsubscribe(subscriber) {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) exports.__subscriberRef.current = null;
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
})();

},{}],"eKGy4":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$6c06 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$6c06.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "App", ()=>App1
);
var _jsxRuntime = require("react/jsx-runtime");
var _react = require("@monaco-editor/react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _jsYaml = require("js-yaml");
var _jsYamlDefault = parcelHelpers.interopDefault(_jsYaml);
var _react1 = require("react");
var _nfaView = require("./components/nfa-view");
var _nfaViewDefault = parcelHelpers.interopDefault(_nfaView);
var _reactBootstrap = require("react-bootstrap");
var _bootstrapMinCss = require("bootstrap/dist/css/bootstrap.min.css");
var _automata = require("./logic/automata");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var initialCode = "# NFA to regex converter\n\nstates:\n    1:\n        a:\n            - 2\n        b:\n            - 3\n    2:\n        a:\n            - 1\n        b:\n            - 2\n    3:\n        a:\n            - 2\n        b:\n            - 1\nstart: 1\naccept:\n    - 2\n    - 3";
var App1 = function(_super) {
    __extends(App, _super);
    function App(props) {
        var _this = _super.call(this, props) || this;
        _this.onSimulation = function() {
            try {
                var automation = _jsYamlDefault.default.load(_this.code);
                var nfa = new _automata.GNFA(automation);
                _this.setState({
                    err: null,
                    nfa: nfa
                });
            } catch (e) {
                _this.setState({
                    err: e.message,
                    nfa: null
                });
            }
        };
        _this.setErr = function(err) {
            _this.setState({
                err: err
            });
        };
        _this.state = {
            err: null,
            nfa: null
        };
        _this.code = initialCode;
        return _this;
    }
    App.prototype.render = function() {
        var _this = this;
        return _jsxRuntime.jsx(_jsxRuntime.Fragment, {
            children: _jsxRuntime.jsx(_reactBootstrap.Container, __assign({
                fluid: true
            }, {
                children: _jsxRuntime.jsxs(_reactBootstrap.Row, {
                    children: [
                        _jsxRuntime.jsxs(_reactBootstrap.Col, __assign({
                            lg: 6,
                            sm: 12,
                            xs: 12,
                            className: 'd-flex flex-column align-items-stretch'
                        }, {
                            children: [
                                this.state.err && _jsxRuntime.jsxs(_reactBootstrap.Alert, __assign({
                                    variant: "danger",
                                    className: 'px-3 py-2'
                                }, {
                                    children: [
                                        _jsxRuntime.jsx(_reactBootstrap.Alert.Heading, {
                                            children: "Error"
                                        }, void 0),
                                        _jsxRuntime.jsx("pre", {
                                            children: this.state.err
                                        }, void 0)
                                    ]
                                }), void 0),
                                _jsxRuntime.jsx(_reactBootstrap.Button, __assign({
                                    variant: "flat",
                                    size: "lg",
                                    onClick: this.onSimulation
                                }, {
                                    children: "load"
                                }), void 0),
                                this.state.nfa && _jsxRuntime.jsx(_nfaViewDefault.default, {
                                    gnfa: this.state.nfa,
                                    setError: this.setErr
                                }, void 0)
                            ]
                        }), void 0),
                        _jsxRuntime.jsx(_reactBootstrap.Col, __assign({
                            lg: 6,
                            sm: 12,
                            xs: 12
                        }, {
                            children: _jsxRuntime.jsx(_reactDefault.default, {
                                height: "100vh",
                                defaultLanguage: "yaml",
                                defaultValue: initialCode,
                                onChange: function(c) {
                                    return _this.code = c;
                                },
                                theme: "vs-dark",
                                options: {
                                    minimap: {
                                        enabled: false
                                    },
                                    fontSize: 18,
                                    fontLigatures: true,
                                    fontFamily: "cascadia",
                                    autoIndent: "advanced",
                                    automaticLayout: true,
                                    wordWrap: "on"
                                }
                            }, void 0)
                        }), void 0)
                    ]
                }, void 0)
            }), void 0)
        }, void 0);
    };
    return App;
}(_react1.Component);

  $parcel$ReactRefreshHelpers$6c06.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-runtime":"6Ds2u","@monaco-editor/react":"6lSVx","js-yaml":"ihQNw","react":"4mchR","./components/nfa-view":"1y1hX","react-bootstrap":"9qMdX","bootstrap/dist/css/bootstrap.min.css":"5dhe6","./logic/automata":"bzRas","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"9pz13"}],"6lSVx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loader", ()=>_loaderDefault.default
);
parcelHelpers.export(exports, "DiffEditor", ()=>_indexJsDefault.default
);
parcelHelpers.export(exports, "useMonaco", ()=>_indexJsDefault1.default
);
parcelHelpers.export(exports, "default", ()=>_indexJsDefault2.default
);
var _loader = require("@monaco-editor/loader");
var _loaderDefault = parcelHelpers.interopDefault(_loader);
var _indexJs = require("./DiffEditor/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("./hooks/useMonaco/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("./Editor/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);

},{"@monaco-editor/loader":"kYGOo","./DiffEditor/index.js":"eLQZK","./hooks/useMonaco/index.js":"8lqQi","./Editor/index.js":"iPPYo","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kYGOo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_indexJsDefault.default
);
var _indexJs = require("./loader/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);

},{"./loader/index.js":"kcJU2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kcJU2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rollupPluginBabelHelpersJs = require("../_virtual/_rollupPluginBabelHelpers.js");
var _stateLocal = require("state-local");
var _stateLocalDefault = parcelHelpers.interopDefault(_stateLocal);
var _indexJs = require("../config/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../validators/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _composeJs = require("../utils/compose.js");
var _composeJsDefault = parcelHelpers.interopDefault(_composeJs);
var _deepMergeJs = require("../utils/deepMerge.js");
var _deepMergeJsDefault = parcelHelpers.interopDefault(_deepMergeJs);
var _makeCancelableJs = require("../utils/makeCancelable.js");
var _makeCancelableJsDefault = parcelHelpers.interopDefault(_makeCancelableJs);
/** the local state of the module */ var _state$create = _stateLocalDefault.default.create({
    config: _indexJsDefault.default,
    isInitialized: false,
    resolve: null,
    reject: null,
    monaco: null
}), _state$create2 = _rollupPluginBabelHelpersJs.slicedToArray(_state$create, 2), getState = _state$create2[0], setState = _state$create2[1];
/**
 * set the loader configuration
 * @param {Object} config - the configuration object
 */ function config1(config) {
    setState(function(state) {
        return {
            config: _deepMergeJsDefault.default(state.config, _indexJsDefault1.default.config(config))
        };
    });
}
/**
 * handles the initialization of the monaco-editor
 * @return {Promise} - returns an instance of monaco (with a cancelable promise)
 */ function init() {
    var state = getState(function(_ref) {
        var isInitialized = _ref.isInitialized;
        return {
            isInitialized: isInitialized
        };
    });
    if (!state.isInitialized) {
        if (window.monaco && window.monaco.editor) {
            storeMonacoInstance(window.monaco);
            return _makeCancelableJsDefault.default(Promise.resolve(window.monaco));
        }
        _composeJsDefault.default(injectScripts, getMonacoLoaderScript)(configureLoader1);
        setState({
            isInitialized: true
        });
    }
    return _makeCancelableJsDefault.default(wrapperPromise);
}
/**
 * injects provided scripts into the document.body
 * @param {Object} script - an HTML script element
 * @return {Object} - the injected HTML script element
 */ function injectScripts(script) {
    return document.body.appendChild(script);
}
/**
 * creates an HTML script element with/without provided src
 * @param {string} [src] - the source path of the script
 * @return {Object} - the created HTML script element
 */ function createScript(src) {
    var script = document.createElement('script');
    return src && (script.src = src), script;
}
/**
 * creates an HTML script element with the monaco loader src
 * @return {Object} - the created HTML script element
 */ function getMonacoLoaderScript(configureLoader) {
    var state = getState(function(_ref2) {
        var config = _ref2.config, reject = _ref2.reject;
        return {
            config: config,
            reject: reject
        };
    });
    var loaderScript = createScript("".concat(state.config.paths.vs, "/loader.js"));
    loaderScript.onload = function() {
        return configureLoader();
    };
    loaderScript.onerror = state.reject;
    return loaderScript;
}
/**
 * configures the monaco loader
 */ function configureLoader1() {
    var state = getState(function(_ref3) {
        var config = _ref3.config, resolve = _ref3.resolve, reject = _ref3.reject;
        return {
            config: config,
            resolve: resolve,
            reject: reject
        };
    });
    var require = window.require;
    require.config(state.config);
    require([
        'vs/editor/editor.main'
    ], function(monaco) {
        storeMonacoInstance(monaco);
        state.resolve(monaco);
    }, function(error) {
        state.reject(error);
    });
}
/**
 * store monaco instance in local state
 */ function storeMonacoInstance(monaco) {
    if (!getState().monaco) setState({
        monaco: monaco
    });
}
/**
 * internal helper function
 * extracts stored monaco instance
 * @return {Object|null} - the monaco instance
 */ function __getMonacoInstance() {
    return getState(function(_ref4) {
        var monaco = _ref4.monaco;
        return monaco;
    });
}
var wrapperPromise = new Promise(function(resolve, reject) {
    return setState({
        resolve: resolve,
        reject: reject
    });
});
var loader = {
    config: config1,
    init: init,
    __getMonacoInstance: __getMonacoInstance
};
exports.default = loader;

},{"../_virtual/_rollupPluginBabelHelpers.js":"6eB3m","state-local":"9x13M","../config/index.js":"lyws4","../validators/index.js":"aXyQc","../utils/compose.js":"jv0WK","../utils/deepMerge.js":"2b9Sp","../utils/makeCancelable.js":"iIzG6","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6eB3m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arrayLikeToArray", ()=>_arrayLikeToArray
);
parcelHelpers.export(exports, "arrayWithHoles", ()=>_arrayWithHoles
);
parcelHelpers.export(exports, "defineProperty", ()=>_defineProperty
);
parcelHelpers.export(exports, "iterableToArrayLimit", ()=>_iterableToArrayLimit
);
parcelHelpers.export(exports, "nonIterableRest", ()=>_nonIterableRest
);
parcelHelpers.export(exports, "objectSpread2", ()=>_objectSpread2
);
parcelHelpers.export(exports, "slicedToArray", ()=>_slicedToArray
);
parcelHelpers.export(exports, "unsupportedIterableToArray", ()=>_unsupportedIterableToArray
);
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ciiiV":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"9x13M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function compose() {
    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++)fns[_key] = arguments[_key];
    return function(x) {
        return fns.reduceRight(function(y, f) {
            return f(y);
        }, x);
    };
}
function curry(fn) {
    return function curried() {
        var _this = this;
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return args.length >= fn.length ? fn.apply(this, args) : function() {
            for(var _len3 = arguments.length, nextArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)nextArgs[_key3] = arguments[_key3];
            return curried.apply(_this, [].concat(args, nextArgs));
        };
    };
}
function isObject(value) {
    return ({
    }).toString.call(value).includes('Object');
}
function isEmpty(obj) {
    return !Object.keys(obj).length;
}
function isFunction(value) {
    return typeof value === 'function';
}
function hasOwnProperty(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
}
function validateChanges(initial, changes) {
    if (!isObject(changes)) errorHandler('changeType');
    if (Object.keys(changes).some(function(field) {
        return !hasOwnProperty(initial, field);
    })) errorHandler('changeField');
    return changes;
}
function validateSelector(selector) {
    if (!isFunction(selector)) errorHandler('selectorType');
}
function validateHandler(handler) {
    if (!(isFunction(handler) || isObject(handler))) errorHandler('handlerType');
    if (isObject(handler) && Object.values(handler).some(function(_handler) {
        return !isFunction(_handler);
    })) errorHandler('handlersType');
}
function validateInitial(initial) {
    if (!initial) errorHandler('initialIsRequired');
    if (!isObject(initial)) errorHandler('initialType');
    if (isEmpty(initial)) errorHandler('initialContent');
}
function throwError(errorMessages, type) {
    throw new Error(errorMessages[type] || errorMessages["default"]);
}
var errorMessages1 = {
    initialIsRequired: 'initial state is required',
    initialType: 'initial state should be an object',
    initialContent: 'initial state shouldn\'t be an empty object',
    handlerType: 'handler should be an object or a function',
    handlersType: 'all handlers should be a functions',
    selectorType: 'selector should be a function',
    changeType: 'provided value of changes should be an object',
    changeField: 'it seams you want to change a field in the state which is not specified in the "initial" state',
    "default": 'an unknown error accured in `state-local` package'
};
var errorHandler = curry(throwError)(errorMessages1);
var validators = {
    changes: validateChanges,
    selector: validateSelector,
    handler: validateHandler,
    initial: validateInitial
};
function create(initial) {
    var handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    };
    validators.initial(initial);
    validators.handler(handler);
    var state1 = {
        current: initial
    };
    var didUpdate = curry(didStateUpdate)(state1, handler);
    var update = curry(updateState)(state1);
    var validate = curry(validators.changes)(initial);
    var getChanges = curry(extractChanges)(state1);
    function getState() {
        var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function(state) {
            return state;
        };
        validators.selector(selector);
        return selector(state1.current);
    }
    function setState(causedChanges) {
        compose(didUpdate, update, validate, getChanges)(causedChanges);
    }
    return [
        getState,
        setState
    ];
}
function extractChanges(state, causedChanges) {
    return isFunction(causedChanges) ? causedChanges(state.current) : causedChanges;
}
function updateState(state, changes) {
    state.current = _objectSpread2(_objectSpread2({
    }, state.current), changes);
    return changes;
}
function didStateUpdate(state, handler, changes) {
    isFunction(handler) ? handler(state.current) : Object.keys(changes).forEach(function(field) {
        var _handler$field;
        return (_handler$field = handler[field]) === null || _handler$field === void 0 ? void 0 : _handler$field.call(handler, state.current[field]);
    });
    return changes;
}
var index = {
    create: create
};
exports.default = index;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lyws4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var config = {
    paths: {
        vs: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.28.1/min/vs'
    }
};
exports.default = config;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aXyQc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "errorHandler", ()=>errorHandler
);
parcelHelpers.export(exports, "errorMessages", ()=>errorMessages1
);
var _curryJs = require("../utils/curry.js");
var _curryJsDefault = parcelHelpers.interopDefault(_curryJs);
var _isObjectJs = require("../utils/isObject.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
/**
 * validates the configuration object and informs about deprecation
 * @param {Object} config - the configuration object 
 * @return {Object} config - the validated configuration object
 */ function validateConfig(config) {
    if (!config) errorHandler('configIsRequired');
    if (!_isObjectJsDefault.default(config)) errorHandler('configType');
    if (config.urls) {
        informAboutDeprecation();
        return {
            paths: {
                vs: config.urls.monacoBase
            }
        };
    }
    return config;
}
/**
 * logs deprecation message
 */ function informAboutDeprecation() {
    console.warn(errorMessages1.deprecation);
}
function throwError(errorMessages, type) {
    throw new Error(errorMessages[type] || errorMessages["default"]);
}
var errorMessages1 = {
    configIsRequired: 'the configuration object is required',
    configType: 'the configuration object should be an object',
    "default": 'an unknown error accured in `@monaco-editor/loader` package',
    deprecation: "Deprecation warning!\n    You are using deprecated way of configuration.\n\n    Instead of using\n      monaco.config({ urls: { monacoBase: '...' } })\n    use\n      monaco.config({ paths: { vs: '...' } })\n\n    For more please check the link https://github.com/suren-atoyan/monaco-loader#config\n  "
};
var errorHandler = _curryJsDefault.default(throwError)(errorMessages1);
var validators = {
    config: validateConfig
};
exports.default = validators;

},{"../utils/curry.js":"8BV1L","../utils/isObject.js":"lnMH8","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8BV1L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function curry(fn) {
    return function curried() {
        var _this = this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        return args.length >= fn.length ? fn.apply(this, args) : function() {
            for(var _len2 = arguments.length, nextArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)nextArgs[_key2] = arguments[_key2];
            return curried.apply(_this, [].concat(args, nextArgs));
        };
    };
}
exports.default = curry;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lnMH8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function isObject(value) {
    return ({
    }).toString.call(value).includes('Object');
}
exports.default = isObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jv0WK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var compose = function compose() {
    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++)fns[_key] = arguments[_key];
    return function(x) {
        return fns.reduceRight(function(y, f) {
            return f(y);
        }, x);
    };
};
exports.default = compose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2b9Sp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rollupPluginBabelHelpersJs = require("../_virtual/_rollupPluginBabelHelpers.js");
function merge(target, source) {
    Object.keys(source).forEach(function(key) {
        if (source[key] instanceof Object) {
            if (target[key]) Object.assign(source[key], merge(target[key], source[key]));
        }
    });
    return _rollupPluginBabelHelpersJs.objectSpread2(_rollupPluginBabelHelpersJs.objectSpread2({
    }, target), source);
}
exports.default = merge;

},{"../_virtual/_rollupPluginBabelHelpers.js":"6eB3m","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iIzG6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CANCELATION_MESSAGE", ()=>CANCELATION_MESSAGE
);
// The source (has been changed) is https://github.com/facebook/react/issues/5465#issuecomment-157888325
var CANCELATION_MESSAGE = {
    type: 'cancelation',
    msg: 'operation is manually canceled'
};
function makeCancelable(promise) {
    var hasCanceled_ = false;
    var wrappedPromise = new Promise(function(resolve, reject) {
        promise.then(function(val) {
            return hasCanceled_ ? reject(CANCELATION_MESSAGE) : resolve(val);
        });
        promise["catch"](reject);
    });
    return wrappedPromise.cancel = function() {
        return hasCanceled_ = true;
    }, wrappedPromise;
}
exports.default = makeCancelable;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eLQZK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _diffEditorJs = require("./DiffEditor.js");
var _diffEditorJsDefault = parcelHelpers.interopDefault(_diffEditorJs);
var index = /*#__PURE__*/ _react.memo(_diffEditorJsDefault.default);
exports.default = index;

},{"react":"4mchR","./DiffEditor.js":"6FGjF","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6FGjF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _loader = require("@monaco-editor/loader");
var _loaderDefault = parcelHelpers.interopDefault(_loader);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _indexJs = require("../MonacoContainer/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../hooks/useMount/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../hooks/useUpdate/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../utils/index.js");
function DiffEditor({ original: original1 , modified: modified1 , language , originalLanguage , modifiedLanguage , /* === */ originalModelPath , modifiedModelPath , keepCurrentOriginalModel , keepCurrentModifiedModel , theme , loading , options , /* === */ height , width , className , wrapperProps , /* === */ beforeMount , onMount  }) {
    const [isEditorReady, setIsEditorReady] = _react.useState(false);
    const [isMonacoMounting, setIsMonacoMounting] = _react.useState(true);
    const editorRef = _react.useRef(null);
    const monacoRef = _react.useRef(null);
    const containerRef = _react.useRef(null);
    const onMountRef = _react.useRef(onMount);
    const beforeMountRef = _react.useRef(beforeMount);
    _indexJsDefault1.default(()=>{
        const cancelable = _loaderDefault.default.init();
        cancelable.then((monaco)=>(monacoRef.current = monaco) && setIsMonacoMounting(false)
        ).catch((error)=>(error === null || error === void 0 ? void 0 : error.type) !== 'cancelation' && console.error('Monaco initialization: error:', error)
        );
        return ()=>editorRef.current ? disposeEditor() : cancelable.cancel()
        ;
    });
    _indexJsDefault2.default(()=>{
        const modifiedEditor = editorRef.current.getModifiedEditor();
        if (modifiedEditor.getOption(monacoRef.current.editor.EditorOption.readOnly)) modifiedEditor.setValue(modified1);
        else if (modified1 !== modifiedEditor.getValue()) {
            modifiedEditor.executeEdits('', [
                {
                    range: modifiedEditor.getModel().getFullModelRange(),
                    text: modified1,
                    forceMoveMarkers: true
                }
            ]);
            modifiedEditor.pushUndoStop();
        }
    }, [
        modified1
    ], isEditorReady);
    _indexJsDefault2.default(()=>{
        editorRef.current.getModel().original.setValue(original1);
    }, [
        original1
    ], isEditorReady);
    _indexJsDefault2.default(()=>{
        const { original , modified  } = editorRef.current.getModel();
        monacoRef.current.editor.setModelLanguage(original, originalLanguage || language);
        monacoRef.current.editor.setModelLanguage(modified, modifiedLanguage || language);
    }, [
        language,
        originalLanguage,
        modifiedLanguage
    ], isEditorReady);
    _indexJsDefault2.default(()=>{
        monacoRef.current.editor.setTheme(theme);
    }, [
        theme
    ], isEditorReady);
    _indexJsDefault2.default(()=>{
        editorRef.current.updateOptions(options);
    }, [
        options
    ], isEditorReady);
    const setModels = _react.useCallback(()=>{
        beforeMountRef.current(monacoRef.current);
        const originalModel = _indexJs3.getOrCreateModel(monacoRef.current, original1, originalLanguage || language, originalModelPath);
        const modifiedModel = _indexJs3.getOrCreateModel(monacoRef.current, modified1, modifiedLanguage || language, modifiedModelPath);
        editorRef.current.setModel({
            original: originalModel,
            modified: modifiedModel
        });
    }, [
        language,
        modified1,
        modifiedLanguage,
        original1,
        originalLanguage,
        originalModelPath,
        modifiedModelPath
    ]);
    const createEditor = _react.useCallback(()=>{
        editorRef.current = monacoRef.current.editor.createDiffEditor(containerRef.current, {
            automaticLayout: true,
            ...options
        });
        setModels();
        monacoRef.current.editor.setTheme(theme);
        setIsEditorReady(true);
    }, [
        options,
        theme,
        setModels
    ]);
    _react.useEffect(()=>{
        if (isEditorReady) onMountRef.current(editorRef.current, monacoRef.current);
    }, [
        isEditorReady
    ]);
    _react.useEffect(()=>{
        !isMonacoMounting && !isEditorReady && createEditor();
    }, [
        isMonacoMounting,
        isEditorReady,
        createEditor
    ]);
    function disposeEditor() {
        const models = editorRef.current.getModel();
        if (!keepCurrentOriginalModel) {
            var _models$original;
            (_models$original = models.original) === null || _models$original === void 0 || _models$original.dispose();
        }
        if (!keepCurrentModifiedModel) {
            var _models$modified;
            (_models$modified = models.modified) === null || _models$modified === void 0 || _models$modified.dispose();
        }
        editorRef.current.dispose();
    }
    return(/*#__PURE__*/ _reactDefault.default.createElement(_indexJsDefault.default, {
        width: width,
        height: height,
        isEditorReady: isEditorReady,
        loading: loading,
        _ref: containerRef,
        className: className,
        wrapperProps: wrapperProps
    }));
}
DiffEditor.propTypes = {
    original: _propTypesDefault.default.string,
    modified: _propTypesDefault.default.string,
    language: _propTypesDefault.default.string,
    originalLanguage: _propTypesDefault.default.string,
    modifiedLanguage: _propTypesDefault.default.string,
    /* === */ originalModelPath: _propTypesDefault.default.string,
    modifiedModelPath: _propTypesDefault.default.string,
    keepCurrentOriginalModel: _propTypesDefault.default.bool,
    keepCurrentModifiedModel: _propTypesDefault.default.bool,
    theme: _propTypesDefault.default.string,
    loading: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.element,
        _propTypesDefault.default.string
    ]),
    options: _propTypesDefault.default.object,
    /* === */ width: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    height: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    className: _propTypesDefault.default.string,
    wrapperProps: _propTypesDefault.default.object,
    /* === */ beforeMount: _propTypesDefault.default.func,
    onMount: _propTypesDefault.default.func
};
DiffEditor.defaultProps = {
    theme: 'light',
    loading: 'Loading...',
    options: {
    },
    keepCurrentOriginalModel: false,
    keepCurrentModifiedModel: false,
    /* === */ width: '100%',
    height: '100%',
    wrapperProps: {
    },
    /* === */ beforeMount: _indexJs3.noop,
    onMount: _indexJs3.noop
};
exports.default = DiffEditor;

},{"@monaco-editor/loader":"kYGOo","react":"4mchR","prop-types":"2bysO","../MonacoContainer/index.js":"jeu1V","../hooks/useMount/index.js":"lljBr","../hooks/useUpdate/index.js":"335vI","../utils/index.js":"8yR8B","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2bysO":[function(require,module,exports) {
var ReactIs = require('react-is');
// By explicitly using `prop-types` you are opting into new development behavior.
// http://fb.me/prop-types-in-prod
var throwOnDirectAccess = true;
module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);

},{"react-is":"5KyfE","./factoryWithTypeCheckers":"3o4sw"}],"5KyfE":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-is.development.js');

},{"./cjs/react-is.development.js":"dWfYV"}],"dWfYV":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"3o4sw":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactIs = require('react-is');
var assign = require('object-assign');
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var has = require('./lib/has');
var checkPropTypes = require('./checkPropTypes');
var printWarning = function() {
};
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */ function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') return iteratorFn;
    }
    /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */ var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bigint: createPrimitiveTypeChecker('bigint'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */ /*eslint-disable no-self-compare*/ function is(x, y) {
        // SameValue algorithm
        if (x === y) // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
        else // Step 6.a: NaN == NaN
        return x !== x && y !== y;
    }
    /*eslint-enable no-self-compare*/ /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */ function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === 'object' ? data : {
        };
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {
        };
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = 'Invariant Violation';
                    throw err;
                } else if (typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                        printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            } else return validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
                    expectedType: expectedType
                });
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            {
                if (arguments.length > 1) printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                else printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) return null;
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') return String(value);
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            for(var key in propValue)if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            printWarning('Invalid argument supplied to oneOfType, expected an instance of array.');
            return emptyFunctionThatReturnsNull;
        }
        for(var i1 = 0; i1 < arrayOfTypeCheckers.length; i1++){
            var checker = arrayOfTypeCheckers[i1];
            if (typeof checker !== 'function') {
                printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + ' at index ' + i1 + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for(var i = 0; i < arrayOfTypeCheckers.length; i++){
                var checker = arrayOfTypeCheckers[i];
                var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
                if (checkerResult == null) return null;
                if (checkerResult.data.hasOwnProperty('expectedType')) expectedTypes.push(checkerResult.data.expectedType);
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (typeof checker !== 'function') return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            // We need to check all keys in case some are required but missing from props.
            var allKeys = assign({
            }, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (has(shapeTypes, key) && typeof checker !== 'function') return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                if (!checker) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue){
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) while(!(step = iterator.next()).done){
                        if (!isNode(step.value)) return false;
                    }
                    else // Iterator will provide entry [k,v] tuples rather than values.
                    while(!(step = iterator.next()).done){
                        var entry = step.value;
                        if (entry) {
                            if (!isNode(entry[1])) return false;
                        }
                    }
                } else return false;
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') return true;
        // falsy value can't be a Symbol
        if (!propValue) return false;
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') return true;
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) return true;
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) return 'array';
        if (propValue instanceof RegExp) // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
        if (isSymbol(propType, propValue)) return 'symbol';
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) return '' + propValue;
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) return 'date';
            else if (propValue instanceof RegExp) return 'regexp';
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

},{"react-is":"5KyfE","object-assign":"iUUFa","./lib/ReactPropTypesSecret":"bQ0BL","./lib/has":"fM5kX","./checkPropTypes":"aGXhS"}],"bQ0BL":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

},{}],"fM5kX":[function(require,module,exports) {
module.exports = Function.call.bind(Object.prototype.hasOwnProperty);

},{}],"aGXhS":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var printWarning = function() {
};
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var loggedTypeFailures = {
};
var has = require('./lib/has');
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {
    }
};
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {
    };
};
module.exports = checkPropTypes;

},{"./lib/ReactPropTypesSecret":"bQ0BL","./lib/has":"fM5kX"}],"jeu1V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _monacoContainerJs = require("./MonacoContainer.js");
var _monacoContainerJsDefault = parcelHelpers.interopDefault(_monacoContainerJs);
var MonacoContainer = /*#__PURE__*/ _react.memo(_monacoContainerJsDefault.default);
exports.default = MonacoContainer;

},{"react":"4mchR","./MonacoContainer.js":"2Z8CL","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2Z8CL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _rollupPluginBabelHelpersJs = require("../_virtual/_rollupPluginBabelHelpers.js");
var _loadingJs = require("../Loading/Loading.js");
var _loadingJsDefault = parcelHelpers.interopDefault(_loadingJs);
var _stylesJs = require("./styles.js");
var _stylesJsDefault = parcelHelpers.interopDefault(_stylesJs);
// one of the reasons why we use a separate prop for passing ref instead of using forwardref
function MonacoContainer({ width , height , isEditorReady , loading , _ref , className , wrapperProps  }) {
    return(/*#__PURE__*/ _reactDefault.default.createElement("section", _rollupPluginBabelHelpersJs.extends({
        style: {
            ..._stylesJsDefault.default.wrapper,
            width,
            height
        }
    }, wrapperProps), !isEditorReady && /*#__PURE__*/ _reactDefault.default.createElement(_loadingJsDefault.default, {
        content: loading
    }), /*#__PURE__*/ _reactDefault.default.createElement("div", {
        ref: _ref,
        style: {
            ..._stylesJsDefault.default.fullWidth,
            ...!isEditorReady && _stylesJsDefault.default.hide
        },
        className: className
    })));
}
MonacoContainer.propTypes = {
    width: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]).isRequired,
    height: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]).isRequired,
    loading: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.element,
        _propTypesDefault.default.string
    ]).isRequired,
    isEditorReady: _propTypesDefault.default.bool.isRequired,
    className: _propTypesDefault.default.string,
    wrapperProps: _propTypesDefault.default.object
};
exports.default = MonacoContainer;

},{"react":"4mchR","prop-types":"2bysO","../_virtual/_rollupPluginBabelHelpers.js":"bN9Dd","../Loading/Loading.js":"rk9Cn","./styles.js":"chLvj","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bN9Dd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extends", ()=>_extends
);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"rk9Cn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
const loadingStyles = {
    display: 'flex',
    height: '100%',
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center'
};
function Loading({ content  }) {
    return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
        style: loadingStyles
    }, content));
}
exports.default = Loading;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"chLvj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const styles = {
    wrapper: {
        display: 'flex',
        position: 'relative',
        textAlign: 'initial'
    },
    fullWidth: {
        width: '100%'
    },
    hide: {
        display: 'none'
    }
};
exports.default = styles;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lljBr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useMount(effect) {
    _react.useEffect(effect, []);
}
exports.default = useMount;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"335vI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useUpdate(effect, deps, applyChanges = true) {
    const isInitialMount = _react.useRef(true);
    _react.useEffect(isInitialMount.current || !applyChanges ? ()=>{
        isInitialMount.current = false;
    } : effect, deps);
}
exports.default = useUpdate;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8yR8B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOrCreateModel", ()=>getOrCreateModel
);
parcelHelpers.export(exports, "isUndefined", ()=>isUndefined
);
parcelHelpers.export(exports, "noop", ()=>noop
);
function noop() {
}
function getOrCreateModel(monaco, value, language, path) {
    return getModel(monaco, path) || createModel(monaco, value, language, path);
}
function getModel(monaco, path) {
    return monaco.editor.getModel(createModelUri(monaco, path));
}
function createModel(monaco, value, language, path) {
    return monaco.editor.createModel(value, language, path && createModelUri(monaco, path));
}
function createModelUri(monaco, path) {
    return monaco.Uri.parse(path);
}
function isUndefined(input) {
    return input === undefined;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8lqQi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _loader = require("@monaco-editor/loader");
var _loaderDefault = parcelHelpers.interopDefault(_loader);
var _react = require("react");
var _indexJs = require("../useMount/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function useMonaco() {
    const [monaco1, setMonaco] = _react.useState(_loaderDefault.default.__getMonacoInstance());
    _indexJsDefault.default(()=>{
        let cancelable;
        if (!monaco1) {
            cancelable = _loaderDefault.default.init();
            cancelable.then((monaco)=>{
                setMonaco(monaco);
            });
        }
        return ()=>{
            var _cancelable;
            return (_cancelable = cancelable) === null || _cancelable === void 0 ? void 0 : _cancelable.cancel();
        };
    });
    return monaco1;
}
exports.default = useMonaco;

},{"@monaco-editor/loader":"kYGOo","react":"4mchR","../useMount/index.js":"lljBr","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iPPYo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _editorJs = require("./Editor.js");
var _editorJsDefault = parcelHelpers.interopDefault(_editorJs);
var index = /*#__PURE__*/ _react.memo(_editorJsDefault.default);
exports.default = index;

},{"react":"4mchR","./Editor.js":"3bWhq","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3bWhq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _loader = require("@monaco-editor/loader");
var _loaderDefault = parcelHelpers.interopDefault(_loader);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _indexJs = require("../MonacoContainer/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("../hooks/useMount/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _indexJs2 = require("../hooks/useUpdate/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _indexJs3 = require("../utils/index.js");
var _indexJs4 = require("../hooks/usePrevious/index.js");
var _indexJsDefault3 = parcelHelpers.interopDefault(_indexJs4);
const viewStates = new Map();
function Editor({ defaultValue , defaultLanguage , defaultPath , value , language , path , /* === */ theme , line , loading , options , overrideServices , saveViewState , keepCurrentModel , /* === */ width , height , className , wrapperProps , /* === */ beforeMount , onMount , onChange , onValidate  }) {
    const [isEditorReady, setIsEditorReady] = _react.useState(false);
    const [isMonacoMounting, setIsMonacoMounting] = _react.useState(true);
    const monacoRef = _react.useRef(null);
    const editorRef = _react.useRef(null);
    const containerRef = _react.useRef(null);
    const onMountRef = _react.useRef(onMount);
    const beforeMountRef = _react.useRef(beforeMount);
    const subscriptionRef = _react.useRef(null);
    const valueRef = _react.useRef(value);
    const previousPath = _indexJsDefault3.default(path);
    _indexJsDefault1.default(()=>{
        const cancelable = _loaderDefault.default.init();
        cancelable.then((monaco)=>(monacoRef.current = monaco) && setIsMonacoMounting(false)
        ).catch((error)=>(error === null || error === void 0 ? void 0 : error.type) !== 'cancelation' && console.error('Monaco initialization: error:', error)
        );
        return ()=>editorRef.current ? disposeEditor() : cancelable.cancel()
        ;
    });
    _indexJsDefault2.default(()=>{
        const model = _indexJs3.getOrCreateModel(monacoRef.current, defaultValue || value, defaultLanguage || language, path);
        if (model !== editorRef.current.getModel()) {
            saveViewState && viewStates.set(previousPath, editorRef.current.saveViewState());
            editorRef.current.setModel(model);
            saveViewState && editorRef.current.restoreViewState(viewStates.get(path));
        }
    }, [
        path
    ], isEditorReady);
    _indexJsDefault2.default(()=>{
        editorRef.current.updateOptions(options);
    }, [
        options
    ], isEditorReady);
    _indexJsDefault2.default(()=>{
        if (editorRef.current.getOption(monacoRef.current.editor.EditorOption.readOnly)) editorRef.current.setValue(value);
        else if (value !== editorRef.current.getValue()) {
            editorRef.current.executeEdits('', [
                {
                    range: editorRef.current.getModel().getFullModelRange(),
                    text: value,
                    forceMoveMarkers: true
                }
            ]);
            editorRef.current.pushUndoStop();
        }
    }, [
        value
    ], isEditorReady);
    _indexJsDefault2.default(()=>{
        monacoRef.current.editor.setModelLanguage(editorRef.current.getModel(), language);
    }, [
        language
    ], isEditorReady);
    _indexJsDefault2.default(()=>{
        // reason for undefined check: https://github.com/suren-atoyan/monaco-react/pull/188
        if (!_indexJs3.isUndefined(line)) editorRef.current.revealLine(line);
    }, [
        line
    ], isEditorReady);
    _indexJsDefault2.default(()=>{
        monacoRef.current.editor.setTheme(theme);
    }, [
        theme
    ], isEditorReady);
    const createEditor = _react.useCallback(()=>{
        beforeMountRef.current(monacoRef.current);
        const autoCreatedModelPath = path || defaultPath;
        const defaultModel = _indexJs3.getOrCreateModel(monacoRef.current, value || defaultValue, defaultLanguage || language, autoCreatedModelPath);
        editorRef.current = monacoRef.current.editor.create(containerRef.current, {
            model: defaultModel,
            automaticLayout: true,
            ...options
        }, overrideServices);
        saveViewState && editorRef.current.restoreViewState(viewStates.get(autoCreatedModelPath));
        monacoRef.current.editor.setTheme(theme);
        setIsEditorReady(true);
    }, [
        defaultValue,
        defaultLanguage,
        defaultPath,
        value,
        language,
        path,
        options,
        overrideServices,
        saveViewState,
        theme
    ]);
    _react.useEffect(()=>{
        if (isEditorReady) onMountRef.current(editorRef.current, monacoRef.current);
    }, [
        isEditorReady
    ]);
    _react.useEffect(()=>{
        !isMonacoMounting && !isEditorReady && createEditor();
    }, [
        isMonacoMounting,
        isEditorReady,
        createEditor
    ]); // subscription
    // to avoid unnecessary updates (attach - dispose listener) in subscription
    valueRef.current = value;
    _react.useEffect(()=>{
        if (isEditorReady && onChange) {
            var _subscriptionRef$curr, _editorRef$current;
            (_subscriptionRef$curr = subscriptionRef.current) === null || _subscriptionRef$curr === void 0 || _subscriptionRef$curr.dispose();
            subscriptionRef.current = (_editorRef$current = editorRef.current) === null || _editorRef$current === void 0 ? void 0 : _editorRef$current.onDidChangeModelContent((event)=>{
                const editorValue = editorRef.current.getValue();
                if (valueRef.current !== editorValue) onChange(editorValue, event);
            });
        }
    }, [
        isEditorReady,
        onChange
    ]); // onValidate
    _react.useEffect(()=>{
        if (isEditorReady) {
            const changeMarkersListener = monacoRef.current.editor.onDidChangeMarkers((uris)=>{
                var _editorRef$current$ge;
                const editorUri = (_editorRef$current$ge = editorRef.current.getModel()) === null || _editorRef$current$ge === void 0 ? void 0 : _editorRef$current$ge.uri;
                if (editorUri) {
                    const currentEditorHasMarkerChanges = uris.find((uri)=>uri.path === editorUri.path
                    );
                    if (currentEditorHasMarkerChanges) {
                        const markers = monacoRef.current.editor.getModelMarkers({
                            resource: editorUri
                        });
                        onValidate === null || onValidate === void 0 || onValidate(markers);
                    }
                }
            });
            return ()=>{
                changeMarkersListener === null || changeMarkersListener === void 0 || changeMarkersListener.dispose();
            };
        }
    }, [
        isEditorReady,
        onValidate
    ]);
    function disposeEditor() {
        var _subscriptionRef$curr2;
        (_subscriptionRef$curr2 = subscriptionRef.current) === null || _subscriptionRef$curr2 === void 0 || _subscriptionRef$curr2.dispose();
        if (keepCurrentModel) saveViewState && viewStates.set(path, editorRef.current.saveViewState());
        else {
            var _editorRef$current$ge2;
            (_editorRef$current$ge2 = editorRef.current.getModel()) === null || _editorRef$current$ge2 === void 0 || _editorRef$current$ge2.dispose();
        }
        editorRef.current.dispose();
    }
    return(/*#__PURE__*/ _reactDefault.default.createElement(_indexJsDefault.default, {
        width: width,
        height: height,
        isEditorReady: isEditorReady,
        loading: loading,
        _ref: containerRef,
        className: className,
        wrapperProps: wrapperProps
    }));
}
Editor.propTypes = {
    defaultValue: _propTypesDefault.default.string,
    defaultPath: _propTypesDefault.default.string,
    defaultLanguage: _propTypesDefault.default.string,
    value: _propTypesDefault.default.string,
    language: _propTypesDefault.default.string,
    path: _propTypesDefault.default.string,
    /* === */ theme: _propTypesDefault.default.string,
    line: _propTypesDefault.default.number,
    loading: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.element,
        _propTypesDefault.default.string
    ]),
    options: _propTypesDefault.default.object,
    overrideServices: _propTypesDefault.default.object,
    saveViewState: _propTypesDefault.default.bool,
    keepCurrentModel: _propTypesDefault.default.bool,
    /* === */ width: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    height: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    className: _propTypesDefault.default.string,
    wrapperProps: _propTypesDefault.default.object,
    /* === */ beforeMount: _propTypesDefault.default.func,
    onMount: _propTypesDefault.default.func,
    onChange: _propTypesDefault.default.func,
    onValidate: _propTypesDefault.default.func
};
Editor.defaultProps = {
    theme: 'light',
    loading: 'Loading...',
    options: {
    },
    overrideServices: {
    },
    saveViewState: true,
    keepCurrentModel: false,
    /* === */ width: '100%',
    height: '100%',
    wrapperProps: {
    },
    /* === */ beforeMount: _indexJs3.noop,
    onMount: _indexJs3.noop,
    onValidate: _indexJs3.noop
};
exports.default = Editor;

},{"@monaco-editor/loader":"kYGOo","react":"4mchR","prop-types":"2bysO","../MonacoContainer/index.js":"jeu1V","../hooks/useMount/index.js":"lljBr","../hooks/useUpdate/index.js":"335vI","../utils/index.js":"8yR8B","../hooks/usePrevious/index.js":"brcd2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"brcd2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function usePrevious(value) {
    const ref = _react.useRef();
    _react.useEffect(()=>{
        ref.current = value;
    }, [
        value
    ]);
    return ref.current;
}
exports.default = usePrevious;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ihQNw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CORE_SCHEMA", ()=>CORE_SCHEMA
);
parcelHelpers.export(exports, "DEFAULT_SCHEMA", ()=>DEFAULT_SCHEMA
);
parcelHelpers.export(exports, "FAILSAFE_SCHEMA", ()=>FAILSAFE_SCHEMA
);
parcelHelpers.export(exports, "JSON_SCHEMA", ()=>JSON_SCHEMA
);
parcelHelpers.export(exports, "Schema", ()=>Schema
);
parcelHelpers.export(exports, "Type", ()=>Type
);
parcelHelpers.export(exports, "YAMLException", ()=>YAMLException
);
parcelHelpers.export(exports, "dump", ()=>dump
);
parcelHelpers.export(exports, "load", ()=>load
);
parcelHelpers.export(exports, "loadAll", ()=>loadAll
);
parcelHelpers.export(exports, "safeDump", ()=>safeDump
);
parcelHelpers.export(exports, "safeLoad", ()=>safeLoad
);
parcelHelpers.export(exports, "safeLoadAll", ()=>safeLoadAll
);
parcelHelpers.export(exports, "types", ()=>types
);
/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */ function isNothing(subject) {
    return typeof subject === 'undefined' || subject === null;
}
function isObject(subject) {
    return typeof subject === 'object' && subject !== null;
}
function toArray(sequence) {
    if (Array.isArray(sequence)) return sequence;
    else if (isNothing(sequence)) return [];
    return [
        sequence
    ];
}
function extend(target, source) {
    var index, length, key, sourceKeys;
    if (source) {
        sourceKeys = Object.keys(source);
        for(index = 0, length = sourceKeys.length; index < length; index += 1){
            key = sourceKeys[index];
            target[key] = source[key];
        }
    }
    return target;
}
function repeat(string, count) {
    var result = '', cycle;
    for(cycle = 0; cycle < count; cycle += 1)result += string;
    return result;
}
function isNegativeZero(number) {
    return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}
var isNothing_1 = isNothing;
var isObject_1 = isObject;
var toArray_1 = toArray;
var repeat_1 = repeat;
var isNegativeZero_1 = isNegativeZero;
var extend_1 = extend;
var common = {
    isNothing: isNothing_1,
    isObject: isObject_1,
    toArray: toArray_1,
    repeat: repeat_1,
    isNegativeZero: isNegativeZero_1,
    extend: extend_1
};
// YAML error class. http://stackoverflow.com/questions/8458984
function formatError(exception, compact) {
    var where = '', message = exception.reason || '(unknown reason)';
    if (!exception.mark) return message;
    if (exception.mark.name) where += 'in "' + exception.mark.name + '" ';
    where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';
    if (!compact && exception.mark.snippet) where += '\n\n' + exception.mark.snippet;
    return message + ' ' + where;
}
function YAMLException$1(reason, mark) {
    // Super constructor
    Error.call(this);
    this.name = 'YAMLException';
    this.reason = reason;
    this.mark = mark;
    this.message = formatError(this, false);
    // Include stack trace in error object
    if (Error.captureStackTrace) // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
    else // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = new Error().stack || '';
}
// Inherit from Error
YAMLException$1.prototype = Object.create(Error.prototype);
YAMLException$1.prototype.constructor = YAMLException$1;
YAMLException$1.prototype.toString = function toString(compact) {
    return this.name + ': ' + formatError(this, compact);
};
var exception1 = YAMLException$1;
// get snippet for a single line, respecting maxLength
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
    var head = '';
    var tail = '';
    var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
    if (position - lineStart > maxHalfLength) {
        head = ' ... ';
        lineStart = position - maxHalfLength + head.length;
    }
    if (lineEnd - position > maxHalfLength) {
        tail = ' ...';
        lineEnd = position + maxHalfLength - tail.length;
    }
    return {
        str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, '→') + tail,
        pos: position - lineStart + head.length // relative position
    };
}
function padStart(string, max) {
    return common.repeat(' ', max - string.length) + string;
}
function makeSnippet(mark, options) {
    options = Object.create(options || null);
    if (!mark.buffer) return null;
    if (!options.maxLength) options.maxLength = 79;
    if (typeof options.indent !== 'number') options.indent = 1;
    if (typeof options.linesBefore !== 'number') options.linesBefore = 3;
    if (typeof options.linesAfter !== 'number') options.linesAfter = 2;
    var re = /\r?\n|\r|\0/g;
    var lineStarts = [
        0
    ];
    var lineEnds = [];
    var match;
    var foundLineNo = -1;
    while(match = re.exec(mark.buffer)){
        lineEnds.push(match.index);
        lineStarts.push(match.index + match[0].length);
        if (mark.position <= match.index && foundLineNo < 0) foundLineNo = lineStarts.length - 2;
    }
    if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;
    var result = '', i, line;
    var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
    var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
    for(i = 1; i <= options.linesBefore; i++){
        if (foundLineNo - i < 0) break;
        line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);
        result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + ' | ' + line.str + '\n' + result;
    }
    line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
    result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + ' | ' + line.str + '\n';
    result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\n';
    for(i = 1; i <= options.linesAfter; i++){
        if (foundLineNo + i >= lineEnds.length) break;
        line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);
        result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + ' | ' + line.str + '\n';
    }
    return result.replace(/\n$/, '');
}
var snippet = makeSnippet;
var TYPE_CONSTRUCTOR_OPTIONS = [
    'kind',
    'multi',
    'resolve',
    'construct',
    'instanceOf',
    'predicate',
    'represent',
    'representName',
    'defaultStyle',
    'styleAliases'
];
var YAML_NODE_KINDS = [
    'scalar',
    'sequence',
    'mapping'
];
function compileStyleAliases(map) {
    var result = {
    };
    if (map !== null) Object.keys(map).forEach(function(style) {
        map[style].forEach(function(alias) {
            result[String(alias)] = style;
        });
    });
    return result;
}
function Type$1(tag, options) {
    options = options || {
    };
    Object.keys(options).forEach(function(name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) throw new exception1('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    });
    // TODO: Add tag format check.
    this.options = options; // keep original options in case user wants to extend this type later
    this.tag = tag;
    this.kind = options['kind'] || null;
    this.resolve = options['resolve'] || function() {
        return true;
    };
    this.construct = options['construct'] || function(data) {
        return data;
    };
    this.instanceOf = options['instanceOf'] || null;
    this.predicate = options['predicate'] || null;
    this.represent = options['represent'] || null;
    this.representName = options['representName'] || null;
    this.defaultStyle = options['defaultStyle'] || null;
    this.multi = options['multi'] || false;
    this.styleAliases = compileStyleAliases(options['styleAliases'] || null);
    if (YAML_NODE_KINDS.indexOf(this.kind) === -1) throw new exception1('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
}
var type1 = Type$1;
/*eslint-disable max-len*/ function compileList(schema, name) {
    var result = [];
    schema[name].forEach(function(currentType) {
        var newIndex = result.length;
        result.forEach(function(previousType, previousIndex) {
            if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) newIndex = previousIndex;
        });
        result[newIndex] = currentType;
    });
    return result;
}
function compileMap() {
    var result = {
        scalar: {
        },
        sequence: {
        },
        mapping: {
        },
        fallback: {
        },
        multi: {
            scalar: [],
            sequence: [],
            mapping: [],
            fallback: []
        }
    }, index, length;
    function collectType(type) {
        if (type.multi) {
            result.multi[type.kind].push(type);
            result.multi['fallback'].push(type);
        } else result[type.kind][type.tag] = result['fallback'][type.tag] = type;
    }
    for(index = 0, length = arguments.length; index < length; index += 1)arguments[index].forEach(collectType);
    return result;
}
function Schema$1(definition) {
    return this.extend(definition);
}
Schema$1.prototype.extend = function extend(definition) {
    var implicit = [];
    var explicit = [];
    if (definition instanceof type1) // Schema.extend(type)
    explicit.push(definition);
    else if (Array.isArray(definition)) // Schema.extend([ type1, type2, ... ])
    explicit = explicit.concat(definition);
    else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
        // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })
        if (definition.implicit) implicit = implicit.concat(definition.implicit);
        if (definition.explicit) explicit = explicit.concat(definition.explicit);
    } else throw new exception1("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
    implicit.forEach(function(type$1) {
        if (!(type$1 instanceof type1)) throw new exception1('Specified list of YAML types (or a single Type object) contains a non-Type object.');
        if (type$1.loadKind && type$1.loadKind !== 'scalar') throw new exception1('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
        if (type$1.multi) throw new exception1('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');
    });
    explicit.forEach(function(type$1) {
        if (!(type$1 instanceof type1)) throw new exception1('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    });
    var result = Object.create(Schema$1.prototype);
    result.implicit = (this.implicit || []).concat(implicit);
    result.explicit = (this.explicit || []).concat(explicit);
    result.compiledImplicit = compileList(result, 'implicit');
    result.compiledExplicit = compileList(result, 'explicit');
    result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
    return result;
};
var schema1 = Schema$1;
var str1 = new type1('tag:yaml.org,2002:str', {
    kind: 'scalar',
    construct: function(data) {
        return data !== null ? data : '';
    }
});
var seq = new type1('tag:yaml.org,2002:seq', {
    kind: 'sequence',
    construct: function(data) {
        return data !== null ? data : [];
    }
});
var map1 = new type1('tag:yaml.org,2002:map', {
    kind: 'mapping',
    construct: function(data) {
        return data !== null ? data : {
        };
    }
});
var failsafe = new schema1({
    explicit: [
        str1,
        seq,
        map1
    ]
});
function resolveYamlNull(data) {
    if (data === null) return true;
    var max = data.length;
    return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');
}
function constructYamlNull() {
    return null;
}
function isNull(object) {
    return object === null;
}
var _null = new type1('tag:yaml.org,2002:null', {
    kind: 'scalar',
    resolve: resolveYamlNull,
    construct: constructYamlNull,
    predicate: isNull,
    represent: {
        canonical: function() {
            return '~';
        },
        lowercase: function() {
            return 'null';
        },
        uppercase: function() {
            return 'NULL';
        },
        camelcase: function() {
            return 'Null';
        },
        empty: function() {
            return '';
        }
    },
    defaultStyle: 'lowercase'
});
function resolveYamlBoolean(data) {
    if (data === null) return false;
    var max = data.length;
    return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');
}
function constructYamlBoolean(data) {
    return data === 'true' || data === 'True' || data === 'TRUE';
}
function isBoolean(object) {
    return Object.prototype.toString.call(object) === '[object Boolean]';
}
var bool = new type1('tag:yaml.org,2002:bool', {
    kind: 'scalar',
    resolve: resolveYamlBoolean,
    construct: constructYamlBoolean,
    predicate: isBoolean,
    represent: {
        lowercase: function(object) {
            return object ? 'true' : 'false';
        },
        uppercase: function(object) {
            return object ? 'TRUE' : 'FALSE';
        },
        camelcase: function(object) {
            return object ? 'True' : 'False';
        }
    },
    defaultStyle: 'lowercase'
});
function isHexCode(c) {
    return 48 /* 0 */  <= c && c <= 57 /* 9 */  || 65 /* A */  <= c && c <= 70 /* F */  || 97 /* a */  <= c && c <= 102 /* f */ ;
}
function isOctCode(c) {
    return 48 /* 0 */  <= c && c <= 55 /* 7 */ ;
}
function isDecCode(c) {
    return 48 /* 0 */  <= c && c <= 57 /* 9 */ ;
}
function resolveYamlInteger(data) {
    if (data === null) return false;
    var max = data.length, index = 0, hasDigits = false, ch;
    if (!max) return false;
    ch = data[index];
    // sign
    if (ch === '-' || ch === '+') ch = data[++index];
    if (ch === '0') {
        // 0
        if (index + 1 === max) return true;
        ch = data[++index];
        // base 2, base 8, base 16
        if (ch === 'b') {
            // base 2
            index++;
            for(; index < max; index++){
                ch = data[index];
                if (ch === '_') continue;
                if (ch !== '0' && ch !== '1') return false;
                hasDigits = true;
            }
            return hasDigits && ch !== '_';
        }
        if (ch === 'x') {
            // base 16
            index++;
            for(; index < max; index++){
                ch = data[index];
                if (ch === '_') continue;
                if (!isHexCode(data.charCodeAt(index))) return false;
                hasDigits = true;
            }
            return hasDigits && ch !== '_';
        }
        if (ch === 'o') {
            // base 8
            index++;
            for(; index < max; index++){
                ch = data[index];
                if (ch === '_') continue;
                if (!isOctCode(data.charCodeAt(index))) return false;
                hasDigits = true;
            }
            return hasDigits && ch !== '_';
        }
    }
    // base 10 (except 0)
    // value should not start with `_`;
    if (ch === '_') return false;
    for(; index < max; index++){
        ch = data[index];
        if (ch === '_') continue;
        if (!isDecCode(data.charCodeAt(index))) return false;
        hasDigits = true;
    }
    // Should have digits and should not end with `_`
    if (!hasDigits || ch === '_') return false;
    return true;
}
function constructYamlInteger(data) {
    var value = data, sign = 1, ch;
    if (value.indexOf('_') !== -1) value = value.replace(/_/g, '');
    ch = value[0];
    if (ch === '-' || ch === '+') {
        if (ch === '-') sign = -1;
        value = value.slice(1);
        ch = value[0];
    }
    if (value === '0') return 0;
    if (ch === '0') {
        if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
        if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);
        if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);
    }
    return sign * parseInt(value, 10);
}
function isInteger(object) {
    return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);
}
var int = new type1('tag:yaml.org,2002:int', {
    kind: 'scalar',
    resolve: resolveYamlInteger,
    construct: constructYamlInteger,
    predicate: isInteger,
    represent: {
        binary: function(obj) {
            return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);
        },
        octal: function(obj) {
            return obj >= 0 ? '0o' + obj.toString(8) : '-0o' + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
            return obj.toString(10);
        },
        /* eslint-disable max-len */ hexadecimal: function(obj) {
            return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);
        }
    },
    defaultStyle: 'decimal',
    styleAliases: {
        binary: [
            2,
            'bin'
        ],
        octal: [
            8,
            'oct'
        ],
        decimal: [
            10,
            'dec'
        ],
        hexadecimal: [
            16,
            'hex'
        ]
    }
});
var YAML_FLOAT_PATTERN = new RegExp(// 2.5e4, 2.5 and integers
"^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
function resolveYamlFloat(data) {
    if (data === null) return false;
    if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
    // Probably should update regexp & check speed
    data[data.length - 1] === '_') return false;
    return true;
}
function constructYamlFloat(data) {
    var value, sign;
    value = data.replace(/_/g, '').toLowerCase();
    sign = value[0] === '-' ? -1 : 1;
    if ('+-'.indexOf(value[0]) >= 0) value = value.slice(1);
    if (value === '.inf') return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
    else if (value === '.nan') return NaN;
    return sign * parseFloat(value, 10);
}
var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
function representYamlFloat(object, style) {
    var res;
    if (isNaN(object)) switch(style){
        case 'lowercase':
            return '.nan';
        case 'uppercase':
            return '.NAN';
        case 'camelcase':
            return '.NaN';
    }
    else if (Number.POSITIVE_INFINITY === object) switch(style){
        case 'lowercase':
            return '.inf';
        case 'uppercase':
            return '.INF';
        case 'camelcase':
            return '.Inf';
    }
    else if (Number.NEGATIVE_INFINITY === object) switch(style){
        case 'lowercase':
            return '-.inf';
        case 'uppercase':
            return '-.INF';
        case 'camelcase':
            return '-.Inf';
    }
    else if (common.isNegativeZero(object)) return '-0.0';
    res = object.toString(10);
    // JS stringifier can build scientific format without dots: 5e-100,
    // while YAML requres dot: 5.e-100. Fix it with simple hack
    return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}
function isFloat(object) {
    return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));
}
var float = new type1('tag:yaml.org,2002:float', {
    kind: 'scalar',
    resolve: resolveYamlFloat,
    construct: constructYamlFloat,
    predicate: isFloat,
    represent: representYamlFloat,
    defaultStyle: 'lowercase'
});
var json = failsafe.extend({
    implicit: [
        _null,
        bool,
        int,
        float
    ]
});
var core = json;
var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"); // [3] day
var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"); // [11] tz_minute
function resolveYamlTimestamp(data) {
    if (data === null) return false;
    if (YAML_DATE_REGEXP.exec(data) !== null) return true;
    if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
    return false;
}
function constructYamlTimestamp(data) {
    var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
    match = YAML_DATE_REGEXP.exec(data);
    if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
    if (match === null) throw new Error('Date resolve error');
    // match: [1] year [2] month [3] day
    year = +match[1];
    month = +match[2] - 1; // JS month starts with 0
    day = +match[3];
    if (!match[4]) return new Date(Date.UTC(year, month, day));
    // match: [4] hour [5] minute [6] second [7] fraction
    hour = +match[4];
    minute = +match[5];
    second = +match[6];
    if (match[7]) {
        fraction = match[7].slice(0, 3);
        while(fraction.length < 3)fraction += '0';
        fraction = +fraction;
    }
    // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute
    if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
        if (match[9] === '-') delta = -delta;
    }
    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
    if (delta) date.setTime(date.getTime() - delta);
    return date;
}
function representYamlTimestamp(object /*, style*/ ) {
    return object.toISOString();
}
var timestamp = new type1('tag:yaml.org,2002:timestamp', {
    kind: 'scalar',
    resolve: resolveYamlTimestamp,
    construct: constructYamlTimestamp,
    instanceOf: Date,
    represent: representYamlTimestamp
});
function resolveYamlMerge(data) {
    return data === '<<' || data === null;
}
var merge = new type1('tag:yaml.org,2002:merge', {
    kind: 'scalar',
    resolve: resolveYamlMerge
});
/*eslint-disable no-bitwise*/ // [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';
function resolveYamlBinary(data) {
    if (data === null) return false;
    var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
    // Convert one by one.
    for(idx = 0; idx < max; idx++){
        code = map.indexOf(data.charAt(idx));
        // Skip CR/LF
        if (code > 64) continue;
        // Fail on illegal characters
        if (code < 0) return false;
        bitlen += 6;
    }
    // If there are any bits left, source was corrupted
    return bitlen % 8 === 0;
}
function constructYamlBinary(data) {
    var idx, tailbits, input = data.replace(/[\r\n=]/g, ''), max = input.length, map = BASE64_MAP, bits = 0, result = [];
    // Collect by 6*4 bits (3 bytes)
    for(idx = 0; idx < max; idx++){
        if (idx % 4 === 0 && idx) {
            result.push(bits >> 16 & 255);
            result.push(bits >> 8 & 255);
            result.push(bits & 255);
        }
        bits = bits << 6 | map.indexOf(input.charAt(idx));
    }
    // Dump tail
    tailbits = max % 4 * 6;
    if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
    } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
    } else if (tailbits === 12) result.push(bits >> 4 & 255);
    return new Uint8Array(result);
}
function representYamlBinary(object /*, style*/ ) {
    var result = '', bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
    // Convert every three bytes to 4 ASCII characters.
    for(idx = 0; idx < max; idx++){
        if (idx % 3 === 0 && idx) {
            result += map[bits >> 18 & 63];
            result += map[bits >> 12 & 63];
            result += map[bits >> 6 & 63];
            result += map[bits & 63];
        }
        bits = (bits << 8) + object[idx];
    }
    // Dump tail
    tail = max % 3;
    if (tail === 0) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
    } else if (tail === 2) {
        result += map[bits >> 10 & 63];
        result += map[bits >> 4 & 63];
        result += map[bits << 2 & 63];
        result += map[64];
    } else if (tail === 1) {
        result += map[bits >> 2 & 63];
        result += map[bits << 4 & 63];
        result += map[64];
        result += map[64];
    }
    return result;
}
function isBinary(obj) {
    return Object.prototype.toString.call(obj) === '[object Uint8Array]';
}
var binary = new type1('tag:yaml.org,2002:binary', {
    kind: 'scalar',
    resolve: resolveYamlBinary,
    construct: constructYamlBinary,
    predicate: isBinary,
    represent: representYamlBinary
});
var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2 = Object.prototype.toString;
function resolveYamlOmap(data) {
    if (data === null) return true;
    var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
    for(index = 0, length = object.length; index < length; index += 1){
        pair = object[index];
        pairHasKey = false;
        if (_toString$2.call(pair) !== '[object Object]') return false;
        for(pairKey in pair)if (_hasOwnProperty$3.call(pair, pairKey)) {
            if (!pairHasKey) pairHasKey = true;
            else return false;
        }
        if (!pairHasKey) return false;
        if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
        else return false;
    }
    return true;
}
function constructYamlOmap(data) {
    return data !== null ? data : [];
}
var omap = new type1('tag:yaml.org,2002:omap', {
    kind: 'sequence',
    resolve: resolveYamlOmap,
    construct: constructYamlOmap
});
var _toString$1 = Object.prototype.toString;
function resolveYamlPairs(data) {
    if (data === null) return true;
    var index, length, pair, keys, result, object = data;
    result = new Array(object.length);
    for(index = 0, length = object.length; index < length; index += 1){
        pair = object[index];
        if (_toString$1.call(pair) !== '[object Object]') return false;
        keys = Object.keys(pair);
        if (keys.length !== 1) return false;
        result[index] = [
            keys[0],
            pair[keys[0]]
        ];
    }
    return true;
}
function constructYamlPairs(data) {
    if (data === null) return [];
    var index, length, pair, keys, result, object = data;
    result = new Array(object.length);
    for(index = 0, length = object.length; index < length; index += 1){
        pair = object[index];
        keys = Object.keys(pair);
        result[index] = [
            keys[0],
            pair[keys[0]]
        ];
    }
    return result;
}
var pairs = new type1('tag:yaml.org,2002:pairs', {
    kind: 'sequence',
    resolve: resolveYamlPairs,
    construct: constructYamlPairs
});
var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
function resolveYamlSet(data) {
    if (data === null) return true;
    var key, object = data;
    for(key in object)if (_hasOwnProperty$2.call(object, key)) {
        if (object[key] !== null) return false;
    }
    return true;
}
function constructYamlSet(data) {
    return data !== null ? data : {
    };
}
var set = new type1('tag:yaml.org,2002:set', {
    kind: 'mapping',
    resolve: resolveYamlSet,
    construct: constructYamlSet
});
var _default = core.extend({
    implicit: [
        timestamp,
        merge
    ],
    explicit: [
        binary,
        omap,
        pairs,
        set
    ]
});
/*eslint-disable max-len,no-use-before-define*/ var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function _class(obj) {
    return Object.prototype.toString.call(obj);
}
function is_EOL(c) {
    return c === 10 /* LF */  || c === 13 /* CR */ ;
}
function is_WHITE_SPACE(c) {
    return c === 9 /* Tab */  || c === 32 /* Space */ ;
}
function is_WS_OR_EOL(c) {
    return c === 9 /* Tab */  || c === 32 /* Space */  || c === 10 /* LF */  || c === 13 /* CR */ ;
}
function is_FLOW_INDICATOR(c) {
    return c === 44 /* , */  || c === 91 /* [ */  || c === 93 /* ] */  || c === 123 /* { */  || c === 125 /* } */ ;
}
function fromHexCode(c) {
    var lc;
    if (48 /* 0 */  <= c && c <= 57 /* 9 */ ) return c - 48;
    /*eslint-disable no-bitwise*/ lc = c | 32;
    if (97 /* a */  <= lc && lc <= 102 /* f */ ) return lc - 97 + 10;
    return -1;
}
function escapedHexLen(c) {
    if (c === 120 /* x */ ) return 2;
    if (c === 117 /* u */ ) return 4;
    if (c === 85 /* U */ ) return 8;
    return 0;
}
function fromDecimalCode(c) {
    if (48 /* 0 */  <= c && c <= 57 /* 9 */ ) return c - 48;
    return -1;
}
function simpleEscapeSequence(c) {
    /* eslint-disable indent */ return c === 48 /* 0 */  ? '\x00' : c === 97 /* a */  ? '\x07' : c === 98 /* b */  ? '\x08' : c === 116 /* t */  ? '\x09' : c === 9 /* Tab */  ? '\x09' : c === 110 /* n */  ? '\x0A' : c === 118 /* v */  ? '\x0B' : c === 102 /* f */  ? '\x0C' : c === 114 /* r */  ? '\x0D' : c === 101 /* e */  ? '\x1B' : c === 32 /* Space */  ? ' ' : c === 34 /* " */  ? '\x22' : c === 47 /* / */  ? '/' : c === 92 /* \ */  ? '\x5C' : c === 78 /* N */  ? '\x85' : c === 95 /* _ */  ? '\xA0' : c === 76 /* L */  ? '\u2028' : c === 80 /* P */  ? '\u2029' : '';
}
function charFromCodepoint(c) {
    if (c <= 65535) return String.fromCharCode(c);
    // Encode UTF-16 surrogate pair
    // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
    return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
}
var simpleEscapeCheck = new Array(256); // integer, for fast access
var simpleEscapeMap = new Array(256);
for(var i1 = 0; i1 < 256; i1++){
    simpleEscapeCheck[i1] = simpleEscapeSequence(i1) ? 1 : 0;
    simpleEscapeMap[i1] = simpleEscapeSequence(i1);
}
function State$1(input, options) {
    this.input = input;
    this.filename = options['filename'] || null;
    this.schema = options['schema'] || _default;
    this.onWarning = options['onWarning'] || null;
    // (Hidden) Remove? makes the loader to expect YAML 1.1 documents
    // if such documents have no explicit %YAML directive
    this.legacy = options['legacy'] || false;
    this.json = options['json'] || false;
    this.listener = options['listener'] || null;
    this.implicitTypes = this.schema.compiledImplicit;
    this.typeMap = this.schema.compiledTypeMap;
    this.length = input.length;
    this.position = 0;
    this.line = 0;
    this.lineStart = 0;
    this.lineIndent = 0;
    // position of first leading tab in the current line,
    // used to make sure there are no tabs in the indentation
    this.firstTabInLine = -1;
    this.documents = [];
/*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/ }
function generateError(state, message) {
    var mark = {
        name: state.filename,
        buffer: state.input.slice(0, -1),
        position: state.position,
        line: state.line,
        column: state.position - state.lineStart
    };
    mark.snippet = snippet(mark);
    return new exception1(message, mark);
}
function throwError(state, message) {
    throw generateError(state, message);
}
function throwWarning(state, message) {
    if (state.onWarning) state.onWarning.call(null, generateError(state, message));
}
var directiveHandlers = {
    YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) throwError(state, 'duplication of %YAML directive');
        if (args.length !== 1) throwError(state, 'YAML directive accepts exactly one argument');
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) throwError(state, 'ill-formed argument of the YAML directive');
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) throwError(state, 'unacceptable YAML version of the document');
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) throwWarning(state, 'unsupported YAML version of the document');
    },
    TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) throwError(state, 'TAG directive accepts exactly two arguments');
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
        if (_hasOwnProperty$1.call(state.tagMap, handle)) throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        if (!PATTERN_TAG_URI.test(prefix)) throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
        try {
            prefix = decodeURIComponent(prefix);
        } catch (err) {
            throwError(state, 'tag prefix is malformed: ' + prefix);
        }
        state.tagMap[handle] = prefix;
    }
};
function captureSegment(state, start, end, checkJson) {
    var _position, _length, _character, _result;
    if (start < end) {
        _result = state.input.slice(start, end);
        if (checkJson) for(_position = 0, _length = _result.length; _position < _length; _position += 1){
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) throwError(state, 'expected valid JSON character');
        }
        else if (PATTERN_NON_PRINTABLE.test(_result)) throwError(state, 'the stream contains non-printable characters');
        state.result += _result;
    }
}
function mergeMappings(state, destination, source, overridableKeys) {
    var sourceKeys, key, index, quantity;
    if (!common.isObject(source)) throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
    sourceKeys = Object.keys(source);
    for(index = 0, quantity = sourceKeys.length; index < quantity; index += 1){
        key = sourceKeys[index];
        if (!_hasOwnProperty$1.call(destination, key)) {
            destination[key] = source[key];
            overridableKeys[key] = true;
        }
    }
}
function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
    var index, quantity;
    // The output is a plain object here, so keys can only be strings.
    // We need to convert keyNode to a string, but doing so can hang the process
    // (deeply nested arrays that explode exponentially using aliases).
    if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for(index = 0, quantity = keyNode.length; index < quantity; index += 1){
            if (Array.isArray(keyNode[index])) throwError(state, 'nested arrays are not supported inside keys');
            if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') keyNode[index] = '[object Object]';
        }
    }
    // Avoid code execution in load() via toString property
    // (still use its own toString for arrays, timestamps,
    // and whatever user schema extensions happen to have @@toStringTag)
    if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') keyNode = '[object Object]';
    keyNode = String(keyNode);
    if (_result === null) _result = {
    };
    if (keyTag === 'tag:yaml.org,2002:merge') {
        if (Array.isArray(valueNode)) for(index = 0, quantity = valueNode.length; index < quantity; index += 1)mergeMappings(state, _result, valueNode[index], overridableKeys);
        else mergeMappings(state, _result, valueNode, overridableKeys);
    } else {
        if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
            state.line = startLine || state.line;
            state.lineStart = startLineStart || state.lineStart;
            state.position = startPos || state.position;
            throwError(state, 'duplicated mapping key');
        }
        // used for this specific key only because Object.defineProperty is slow
        if (keyNode === '__proto__') Object.defineProperty(_result, keyNode, {
            configurable: true,
            enumerable: true,
            writable: true,
            value: valueNode
        });
        else _result[keyNode] = valueNode;
        delete overridableKeys[keyNode];
    }
    return _result;
}
function readLineBreak(state) {
    var ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 10 /* LF */ ) state.position++;
    else if (ch === 13 /* CR */ ) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10 /* LF */ ) state.position++;
    } else throwError(state, 'a line break is expected');
    state.line += 1;
    state.lineStart = state.position;
    state.firstTabInLine = -1;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
    var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
    while(ch !== 0){
        while(is_WHITE_SPACE(ch)){
            if (ch === 9 /* Tab */  && state.firstTabInLine === -1) state.firstTabInLine = state.position;
            ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35 /* # */ ) do ch = state.input.charCodeAt(++state.position);
        while (ch !== 10 /* LF */  && ch !== 13 /* CR */  && ch !== 0)
        if (is_EOL(ch)) {
            readLineBreak(state);
            ch = state.input.charCodeAt(state.position);
            lineBreaks++;
            state.lineIndent = 0;
            while(ch === 32 /* Space */ ){
                state.lineIndent++;
                ch = state.input.charCodeAt(++state.position);
            }
        } else break;
    }
    if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) throwWarning(state, 'deficient indentation');
    return lineBreaks;
}
function testDocumentSeparator(state) {
    var _position = state.position, ch;
    ch = state.input.charCodeAt(_position);
    // Condition state.position === state.lineStart is tested
    // in parent on each call, for efficiency. No needs to test here again.
    if ((ch === 45 /* - */  || ch === 46 /* . */ ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) return true;
    }
    return false;
}
function writeFoldedLines(state, count) {
    if (count === 1) state.result += ' ';
    else if (count > 1) state.result += common.repeat('\n', count - 1);
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
    var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
    ch = state.input.charCodeAt(state.position);
    if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 /* # */  || ch === 38 /* & */  || ch === 42 /* * */  || ch === 33 /* ! */  || ch === 124 /* | */  || ch === 62 /* > */  || ch === 39 /* ' */  || ch === 34 /* " */  || ch === 37 /* % */  || ch === 64 /* @ */  || ch === 96 /* ` */ ) return false;
    if (ch === 63 /* ? */  || ch === 45 /* - */ ) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) return false;
    }
    state.kind = 'scalar';
    state.result = '';
    captureStart = captureEnd = state.position;
    hasPendingContent = false;
    while(ch !== 0){
        if (ch === 58 /* : */ ) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) break;
        } else if (ch === 35 /* # */ ) {
            preceding = state.input.charCodeAt(state.position - 1);
            if (is_WS_OR_EOL(preceding)) break;
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) break;
        else if (is_EOL(ch)) {
            _line = state.line;
            _lineStart = state.lineStart;
            _lineIndent = state.lineIndent;
            skipSeparationSpace(state, false, -1);
            if (state.lineIndent >= nodeIndent) {
                hasPendingContent = true;
                ch = state.input.charCodeAt(state.position);
                continue;
            } else {
                state.position = captureEnd;
                state.line = _line;
                state.lineStart = _lineStart;
                state.lineIndent = _lineIndent;
                break;
            }
        }
        if (hasPendingContent) {
            captureSegment(state, captureStart, captureEnd, false);
            writeFoldedLines(state, state.line - _line);
            captureStart = captureEnd = state.position;
            hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) captureEnd = state.position + 1;
        ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, captureEnd, false);
    if (state.result) return true;
    state.kind = _kind;
    state.result = _result;
    return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
    var ch, captureStart, captureEnd;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 39 /* ' */ ) return false;
    state.kind = 'scalar';
    state.result = '';
    state.position++;
    captureStart = captureEnd = state.position;
    while((ch = state.input.charCodeAt(state.position)) !== 0){
        if (ch === 39 /* ' */ ) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (ch === 39 /* ' */ ) {
                captureStart = state.position;
                state.position++;
                captureEnd = state.position;
            } else return true;
        } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
            captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) throwError(state, 'unexpected end of the document within a single quoted scalar');
        else {
            state.position++;
            captureEnd = state.position;
        }
    }
    throwError(state, 'unexpected end of the stream within a single quoted scalar');
}
function readDoubleQuotedScalar(state, nodeIndent) {
    var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 34 /* " */ ) return false;
    state.kind = 'scalar';
    state.result = '';
    state.position++;
    captureStart = captureEnd = state.position;
    while((ch = state.input.charCodeAt(state.position)) !== 0){
        if (ch === 34 /* " */ ) {
            captureSegment(state, captureStart, state.position, true);
            state.position++;
            return true;
        } else if (ch === 92 /* \ */ ) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (is_EOL(ch)) skipSeparationSpace(state, false, nodeIndent);
            else if (ch < 256 && simpleEscapeCheck[ch]) {
                state.result += simpleEscapeMap[ch];
                state.position++;
            } else if ((tmp = escapedHexLen(ch)) > 0) {
                hexLength = tmp;
                hexResult = 0;
                for(; hexLength > 0; hexLength--){
                    ch = state.input.charCodeAt(++state.position);
                    if ((tmp = fromHexCode(ch)) >= 0) hexResult = (hexResult << 4) + tmp;
                    else throwError(state, 'expected hexadecimal character');
                }
                state.result += charFromCodepoint(hexResult);
                state.position++;
            } else throwError(state, 'unknown escape sequence');
            captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
            captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) throwError(state, 'unexpected end of the document within a double quoted scalar');
        else {
            state.position++;
            captureEnd = state.position;
        }
    }
    throwError(state, 'unexpected end of the stream within a double quoted scalar');
}
function readFlowCollection(state, nodeIndent) {
    var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = Object.create(null), keyNode, keyTag, valueNode, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 91 /* [ */ ) {
        terminator = 93; /* ] */ 
        isMapping = false;
        _result = [];
    } else if (ch === 123 /* { */ ) {
        terminator = 125; /* } */ 
        isMapping = true;
        _result = {
        };
    } else return false;
    if (state.anchor !== null) state.anchorMap[state.anchor] = _result;
    ch = state.input.charCodeAt(++state.position);
    while(ch !== 0){
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
            state.position++;
            state.tag = _tag;
            state.anchor = _anchor;
            state.kind = isMapping ? 'mapping' : 'sequence';
            state.result = _result;
            return true;
        } else if (!readNext) throwError(state, 'missed comma between flow collection entries');
        else if (ch === 44 /* , */ ) // "flow collection entries can never be completely empty", as per YAML 1.2, section 7.4
        throwError(state, "expected the node content, but found ','");
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63 /* ? */ ) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following)) {
                isPair = isExplicitPair = true;
                state.position++;
                skipSeparationSpace(state, true, nodeIndent);
            }
        }
        _line = state.line; // Save the current line.
        _lineStart = state.lineStart;
        _pos = state.position;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58 /* : */ ) {
            isPair = true;
            ch = state.input.charCodeAt(++state.position);
            skipSeparationSpace(state, true, nodeIndent);
            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
            valueNode = state.result;
        }
        if (isMapping) storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
        else if (isPair) _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
        else _result.push(keyNode);
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44 /* , */ ) {
            readNext = true;
            ch = state.input.charCodeAt(++state.position);
        } else readNext = false;
    }
    throwError(state, 'unexpected end of the stream within a flow collection');
}
function readBlockScalar(state, nodeIndent) {
    var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 124 /* | */ ) folding = false;
    else if (ch === 62 /* > */ ) folding = true;
    else return false;
    state.kind = 'scalar';
    state.result = '';
    while(ch !== 0){
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 /* + */  || ch === 45 /* - */ ) {
            if (CHOMPING_CLIP === chomping) chomping = ch === 43 /* + */  ? CHOMPING_KEEP : CHOMPING_STRIP;
            else throwError(state, 'repeat of a chomping mode identifier');
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
            if (tmp === 0) throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
            else if (!detectedIndent) {
                textIndent = nodeIndent + tmp - 1;
                detectedIndent = true;
            } else throwError(state, 'repeat of an indentation width identifier');
        } else break;
    }
    if (is_WHITE_SPACE(ch)) {
        do ch = state.input.charCodeAt(++state.position);
        while (is_WHITE_SPACE(ch))
        if (ch === 35 /* # */ ) do ch = state.input.charCodeAt(++state.position);
        while (!is_EOL(ch) && ch !== 0)
    }
    while(ch !== 0){
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while((!detectedIndent || state.lineIndent < textIndent) && ch === 32 /* Space */ ){
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) textIndent = state.lineIndent;
        if (is_EOL(ch)) {
            emptyLines++;
            continue;
        }
        // End of the scalar.
        if (state.lineIndent < textIndent) {
            // Perform the chomping.
            if (chomping === CHOMPING_KEEP) state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
            else if (chomping === CHOMPING_CLIP) {
                if (didReadContent) state.result += '\n';
            }
            break;
        }
        // Folded style: use fancy rules to handle line breaks.
        if (folding) {
            // Lines starting with white space characters (more-indented lines) are not folded.
            if (is_WHITE_SPACE(ch)) {
                atMoreIndented = true;
                // except for the first content line (cf. Example 8.1)
                state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
            // End of more-indented block.
            } else if (atMoreIndented) {
                atMoreIndented = false;
                state.result += common.repeat('\n', emptyLines + 1);
            // Just one line break - perceive as the same line.
            } else if (emptyLines === 0) {
                if (didReadContent) state.result += ' ';
            } else state.result += common.repeat('\n', emptyLines);
        // Literal style: just add exact number of line breaks between content lines.
        } else // Keep all line breaks except the header line break.
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while(!is_EOL(ch) && ch !== 0)ch = state.input.charCodeAt(++state.position);
        captureSegment(state, captureStart, state.position, false);
    }
    return true;
}
function readBlockSequence(state, nodeIndent) {
    var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
    // there is a leading tab before this token, so it can't be a block sequence/mapping;
    // it can still be flow sequence/mapping or a scalar
    if (state.firstTabInLine !== -1) return false;
    if (state.anchor !== null) state.anchorMap[state.anchor] = _result;
    ch = state.input.charCodeAt(state.position);
    while(ch !== 0){
        if (state.firstTabInLine !== -1) {
            state.position = state.firstTabInLine;
            throwError(state, 'tab characters must not be used in indentation');
        }
        if (ch !== 45 /* - */ ) break;
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) break;
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
            if (state.lineIndent <= nodeIndent) {
                _result.push(null);
                ch = state.input.charCodeAt(state.position);
                continue;
            }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) throwError(state, 'bad indentation of a sequence entry');
        else if (state.lineIndent < nodeIndent) break;
    }
    if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = 'sequence';
        state.result = _result;
        return true;
    }
    return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
    var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {
    }, overridableKeys = Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
    // there is a leading tab before this token, so it can't be a block sequence/mapping;
    // it can still be flow sequence/mapping or a scalar
    if (state.firstTabInLine !== -1) return false;
    if (state.anchor !== null) state.anchorMap[state.anchor] = _result;
    ch = state.input.charCodeAt(state.position);
    while(ch !== 0){
        if (!atExplicitKey && state.firstTabInLine !== -1) {
            state.position = state.firstTabInLine;
            throwError(state, 'tab characters must not be used in indentation');
        }
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line; // Save the current line.
        //
        // Explicit notation case. There are two separate blocks:
        // first for the key (denoted by "?") and second for the value (denoted by ":")
        //
        if ((ch === 63 /* ? */  || ch === 58 /* : */ ) && is_WS_OR_EOL(following)) {
            if (ch === 63 /* ? */ ) {
                if (atExplicitKey) {
                    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                    keyTag = keyNode = valueNode = null;
                }
                detected = true;
                atExplicitKey = true;
                allowCompact = true;
            } else if (atExplicitKey) {
                // i.e. 0x3A/* : */ === character after the explicit key.
                atExplicitKey = false;
                allowCompact = true;
            } else throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
            state.position += 1;
            ch = following;
        //
        // Implicit notation case. Flow-style node as the key first, then ":", and the value.
        //
        } else {
            _keyLine = state.line;
            _keyLineStart = state.lineStart;
            _keyPos = state.position;
            if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) break;
            if (state.line === _line) {
                ch = state.input.charCodeAt(state.position);
                while(is_WHITE_SPACE(ch))ch = state.input.charCodeAt(++state.position);
                if (ch === 58 /* : */ ) {
                    ch = state.input.charCodeAt(++state.position);
                    if (!is_WS_OR_EOL(ch)) throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
                    if (atExplicitKey) {
                        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
                        keyTag = keyNode = valueNode = null;
                    }
                    detected = true;
                    atExplicitKey = false;
                    allowCompact = false;
                    keyTag = state.tag;
                    keyNode = state.result;
                } else if (detected) throwError(state, 'can not read an implicit mapping pair; a colon is missed');
                else {
                    state.tag = _tag;
                    state.anchor = _anchor;
                    return true; // Keep the result of `composeNode`.
                }
            } else if (detected) throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');
            else {
                state.tag = _tag;
                state.anchor = _anchor;
                return true; // Keep the result of `composeNode`.
            }
        }
        //
        // Common reading code for both explicit and implicit notations.
        //
        if (state.line === _line || state.lineIndent > nodeIndent) {
            if (atExplicitKey) {
                _keyLine = state.line;
                _keyLineStart = state.lineStart;
                _keyPos = state.position;
            }
            if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
                if (atExplicitKey) keyNode = state.result;
                else valueNode = state.result;
            }
            if (!atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
                keyTag = keyNode = valueNode = null;
            }
            skipSeparationSpace(state, true, -1);
            ch = state.input.charCodeAt(state.position);
        }
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) throwError(state, 'bad indentation of a mapping entry');
        else if (state.lineIndent < nodeIndent) break;
    }
    //
    // Epilogue.
    //
    // Special case: last mapping's node contains only the key in explicit notation.
    if (atExplicitKey) storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
    // Expose the resulting mapping.
    if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = 'mapping';
        state.result = _result;
    }
    return detected;
}
function readTagProperty(state) {
    var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 33 /* ! */ ) return false;
    if (state.tag !== null) throwError(state, 'duplication of a tag property');
    ch = state.input.charCodeAt(++state.position);
    if (ch === 60 /* < */ ) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
    } else if (ch === 33 /* ! */ ) {
        isNamed = true;
        tagHandle = '!!';
        ch = state.input.charCodeAt(++state.position);
    } else tagHandle = '!';
    _position = state.position;
    if (isVerbatim) {
        do ch = state.input.charCodeAt(++state.position);
        while (ch !== 0 && ch !== 62 /* > */ )
        if (state.position < state.length) {
            tagName = state.input.slice(_position, state.position);
            ch = state.input.charCodeAt(++state.position);
        } else throwError(state, 'unexpected end of the stream within a verbatim tag');
    } else {
        while(ch !== 0 && !is_WS_OR_EOL(ch)){
            if (ch === 33 /* ! */ ) {
                if (!isNamed) {
                    tagHandle = state.input.slice(_position - 1, state.position + 1);
                    if (!PATTERN_TAG_HANDLE.test(tagHandle)) throwError(state, 'named tag handle cannot contain such characters');
                    isNamed = true;
                    _position = state.position + 1;
                } else throwError(state, 'tag suffix cannot contain exclamation marks');
            }
            ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
    if (tagName && !PATTERN_TAG_URI.test(tagName)) throwError(state, 'tag name cannot contain such characters: ' + tagName);
    try {
        tagName = decodeURIComponent(tagName);
    } catch (err) {
        throwError(state, 'tag name is malformed: ' + tagName);
    }
    if (isVerbatim) state.tag = tagName;
    else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) state.tag = state.tagMap[tagHandle] + tagName;
    else if (tagHandle === '!') state.tag = '!' + tagName;
    else if (tagHandle === '!!') state.tag = 'tag:yaml.org,2002:' + tagName;
    else throwError(state, 'undeclared tag handle "' + tagHandle + '"');
    return true;
}
function readAnchorProperty(state) {
    var _position, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 38 /* & */ ) return false;
    if (state.anchor !== null) throwError(state, 'duplication of an anchor property');
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while(ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch))ch = state.input.charCodeAt(++state.position);
    if (state.position === _position) throwError(state, 'name of an anchor node must contain at least one character');
    state.anchor = state.input.slice(_position, state.position);
    return true;
}
function readAlias(state) {
    var _position, alias, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 42 /* * */ ) return false;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while(ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch))ch = state.input.charCodeAt(++state.position);
    if (state.position === _position) throwError(state, 'name of an alias node must contain at least one character');
    alias = state.input.slice(_position, state.position);
    if (!_hasOwnProperty$1.call(state.anchorMap, alias)) throwError(state, 'unidentified alias "' + alias + '"');
    state.result = state.anchorMap[alias];
    skipSeparationSpace(state, true, -1);
    return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
    var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;
    if (state.listener !== null) state.listener('open', state);
    state.tag = null;
    state.anchor = null;
    state.kind = null;
    state.result = null;
    allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
    if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            if (state.lineIndent > parentIndent) indentStatus = 1;
            else if (state.lineIndent === parentIndent) indentStatus = 0;
            else if (state.lineIndent < parentIndent) indentStatus = -1;
        }
    }
    if (indentStatus === 1) {
        while(readTagProperty(state) || readAnchorProperty(state))if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) indentStatus = 1;
            else if (state.lineIndent === parentIndent) indentStatus = 0;
            else if (state.lineIndent < parentIndent) indentStatus = -1;
        } else allowBlockCollections = false;
    }
    if (allowBlockCollections) allowBlockCollections = atNewLine || allowCompact;
    if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) flowIndent = parentIndent;
        else flowIndent = parentIndent + 1;
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
            if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) hasContent = true;
            else {
                if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) hasContent = true;
                else if (readAlias(state)) {
                    hasContent = true;
                    if (state.tag !== null || state.anchor !== null) throwError(state, 'alias node should not have any properties');
                } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
                    hasContent = true;
                    if (state.tag === null) state.tag = '?';
                }
                if (state.anchor !== null) state.anchorMap[state.anchor] = state.result;
            }
        } else if (indentStatus === 0) // Special case: block sequences are allowed to have same indentation level as the parent.
        // http://www.yaml.org/spec/1.2/spec.html#id2799784
        hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
    if (state.tag === null) {
        if (state.anchor !== null) state.anchorMap[state.anchor] = state.result;
    } else if (state.tag === '?') {
        // Implicit resolving is not allowed for non-scalar types, and '?'
        // non-specific tag is only automatically assigned to plain scalars.
        //
        // We only need to check kind conformity in case user explicitly assigns '?'
        // tag, for example like this: "!<?> [0]"
        //
        if (state.result !== null && state.kind !== 'scalar') throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
        for(typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1){
            type = state.implicitTypes[typeIndex];
            if (type.resolve(state.result)) {
                state.result = type.construct(state.result);
                state.tag = type.tag;
                if (state.anchor !== null) state.anchorMap[state.anchor] = state.result;
                break;
            }
        }
    } else if (state.tag !== '!') {
        if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback'], state.tag)) type = state.typeMap[state.kind || 'fallback'][state.tag];
        else {
            // looking for multi type
            type = null;
            typeList = state.typeMap.multi[state.kind || 'fallback'];
            for(typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1)if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
                type = typeList[typeIndex];
                break;
            }
        }
        if (!type) throwError(state, 'unknown tag !<' + state.tag + '>');
        if (state.result !== null && type.kind !== state.kind) throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
        if (!type.resolve(state.result, state.tag)) throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
        else {
            state.result = type.construct(state.result, state.tag);
            if (state.anchor !== null) state.anchorMap[state.anchor] = state.result;
        }
    }
    if (state.listener !== null) state.listener('close', state);
    return state.tag !== null || state.anchor !== null || hasContent;
}
function readDocument(state) {
    var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
    state.version = null;
    state.checkLineBreaks = state.legacy;
    state.tagMap = Object.create(null);
    state.anchorMap = Object.create(null);
    while((ch = state.input.charCodeAt(state.position)) !== 0){
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37 /* % */ ) break;
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while(ch !== 0 && !is_WS_OR_EOL(ch))ch = state.input.charCodeAt(++state.position);
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) throwError(state, 'directive name must not be less than one character in length');
        while(ch !== 0){
            while(is_WHITE_SPACE(ch))ch = state.input.charCodeAt(++state.position);
            if (ch === 35 /* # */ ) {
                do ch = state.input.charCodeAt(++state.position);
                while (ch !== 0 && !is_EOL(ch))
                break;
            }
            if (is_EOL(ch)) break;
            _position = state.position;
            while(ch !== 0 && !is_WS_OR_EOL(ch))ch = state.input.charCodeAt(++state.position);
            directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0) readLineBreak(state);
        if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) directiveHandlers[directiveName](state, directiveName, directiveArgs);
        else throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
    skipSeparationSpace(state, true, -1);
    if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 /* - */  && state.input.charCodeAt(state.position + 1) === 45 /* - */  && state.input.charCodeAt(state.position + 2) === 45 /* - */ ) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
    } else if (hasDirectives) throwError(state, 'directives end mark is expected');
    composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
    skipSeparationSpace(state, true, -1);
    if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) throwWarning(state, 'non-ASCII line breaks are interpreted as content');
    state.documents.push(state.result);
    if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46 /* . */ ) {
            state.position += 3;
            skipSeparationSpace(state, true, -1);
        }
        return;
    }
    if (state.position < state.length - 1) throwError(state, 'end of the stream or a document separator is expected');
    else return;
}
function loadDocuments(input, options) {
    input = String(input);
    options = options || {
    };
    if (input.length !== 0) {
        // Add tailing `\n` if not exists
        if (input.charCodeAt(input.length - 1) !== 10 /* LF */  && input.charCodeAt(input.length - 1) !== 13 /* CR */ ) input += '\n';
        // Strip BOM
        if (input.charCodeAt(0) === 65279) input = input.slice(1);
    }
    var state = new State$1(input, options);
    var nullpos = input.indexOf('\0');
    if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, 'null byte is not allowed in input');
    }
    // Use 0 as string terminator. That significantly simplifies bounds check.
    state.input += '\0';
    while(state.input.charCodeAt(state.position) === 32 /* Space */ ){
        state.lineIndent += 1;
        state.position += 1;
    }
    while(state.position < state.length - 1)readDocument(state);
    return state.documents;
}
function loadAll$1(input, iterator, options) {
    if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
        options = iterator;
        iterator = null;
    }
    var documents = loadDocuments(input, options);
    if (typeof iterator !== 'function') return documents;
    for(var index = 0, length = documents.length; index < length; index += 1)iterator(documents[index]);
}
function load$1(input, options) {
    var documents = loadDocuments(input, options);
    if (documents.length === 0) /*eslint-disable no-undefined*/ return undefined;
    else if (documents.length === 1) return documents[0];
    throw new exception1('expected a single document in the stream, but found more');
}
var loadAll_1 = loadAll$1;
var load_1 = load$1;
var loader = {
    loadAll: loadAll_1,
    load: load_1
};
/*eslint-disable no-use-before-define*/ var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_BOM = 65279;
var CHAR_TAB = 9; /* Tab */ 
var CHAR_LINE_FEED = 10; /* LF */ 
var CHAR_CARRIAGE_RETURN = 13; /* CR */ 
var CHAR_SPACE = 32; /* Space */ 
var CHAR_EXCLAMATION = 33; /* ! */ 
var CHAR_DOUBLE_QUOTE = 34; /* " */ 
var CHAR_SHARP = 35; /* # */ 
var CHAR_PERCENT = 37; /* % */ 
var CHAR_AMPERSAND = 38; /* & */ 
var CHAR_SINGLE_QUOTE = 39; /* ' */ 
var CHAR_ASTERISK = 42; /* * */ 
var CHAR_COMMA = 44; /* , */ 
var CHAR_MINUS = 45; /* - */ 
var CHAR_COLON = 58; /* : */ 
var CHAR_EQUALS = 61; /* = */ 
var CHAR_GREATER_THAN = 62; /* > */ 
var CHAR_QUESTION = 63; /* ? */ 
var CHAR_COMMERCIAL_AT = 64; /* @ */ 
var CHAR_LEFT_SQUARE_BRACKET = 91; /* [ */ 
var CHAR_RIGHT_SQUARE_BRACKET = 93; /* ] */ 
var CHAR_GRAVE_ACCENT = 96; /* ` */ 
var CHAR_LEFT_CURLY_BRACKET = 123; /* { */ 
var CHAR_VERTICAL_LINE = 124; /* | */ 
var CHAR_RIGHT_CURLY_BRACKET = 125; /* } */ 
var ESCAPE_SEQUENCES = {
};
ESCAPE_SEQUENCES[0] = '\\0';
ESCAPE_SEQUENCES[7] = '\\a';
ESCAPE_SEQUENCES[8] = '\\b';
ESCAPE_SEQUENCES[9] = '\\t';
ESCAPE_SEQUENCES[10] = '\\n';
ESCAPE_SEQUENCES[11] = '\\v';
ESCAPE_SEQUENCES[12] = '\\f';
ESCAPE_SEQUENCES[13] = '\\r';
ESCAPE_SEQUENCES[27] = '\\e';
ESCAPE_SEQUENCES[34] = '\\"';
ESCAPE_SEQUENCES[92] = '\\\\';
ESCAPE_SEQUENCES[133] = '\\N';
ESCAPE_SEQUENCES[160] = '\\_';
ESCAPE_SEQUENCES[8232] = '\\L';
ESCAPE_SEQUENCES[8233] = '\\P';
var DEPRECATED_BOOLEANS_SYNTAX = [
    'y',
    'Y',
    'yes',
    'Yes',
    'YES',
    'on',
    'On',
    'ON',
    'n',
    'N',
    'no',
    'No',
    'NO',
    'off',
    'Off',
    'OFF'
];
var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
function compileStyleMap(schema, map) {
    var result, keys, index, length, tag, style, type;
    if (map === null) return {
    };
    result = {
    };
    keys = Object.keys(map);
    for(index = 0, length = keys.length; index < length; index += 1){
        tag = keys[index];
        style = String(map[tag]);
        if (tag.slice(0, 2) === '!!') tag = 'tag:yaml.org,2002:' + tag.slice(2);
        type = schema.compiledTypeMap['fallback'][tag];
        if (type && _hasOwnProperty.call(type.styleAliases, style)) style = type.styleAliases[style];
        result[tag] = style;
    }
    return result;
}
function encodeHex(character) {
    var string, handle, length;
    string = character.toString(16).toUpperCase();
    if (character <= 255) {
        handle = 'x';
        length = 2;
    } else if (character <= 65535) {
        handle = 'u';
        length = 4;
    } else if (character <= 4294967295) {
        handle = 'U';
        length = 8;
    } else throw new exception1('code point within a string may not be greater than 0xFFFFFFFF');
    return '\\' + handle + common.repeat('0', length - string.length) + string;
}
var QUOTING_TYPE_SINGLE = 1, QUOTING_TYPE_DOUBLE = 2;
function State(options) {
    this.schema = options['schema'] || _default;
    this.indent = Math.max(1, options['indent'] || 2);
    this.noArrayIndent = options['noArrayIndent'] || false;
    this.skipInvalid = options['skipInvalid'] || false;
    this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];
    this.styleMap = compileStyleMap(this.schema, options['styles'] || null);
    this.sortKeys = options['sortKeys'] || false;
    this.lineWidth = options['lineWidth'] || 80;
    this.noRefs = options['noRefs'] || false;
    this.noCompatMode = options['noCompatMode'] || false;
    this.condenseFlow = options['condenseFlow'] || false;
    this.quotingType = options['quotingType'] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
    this.forceQuotes = options['forceQuotes'] || false;
    this.replacer = typeof options['replacer'] === 'function' ? options['replacer'] : null;
    this.implicitTypes = this.schema.compiledImplicit;
    this.explicitTypes = this.schema.compiledExplicit;
    this.tag = null;
    this.result = '';
    this.duplicates = [];
    this.usedDuplicates = null;
}
// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
    var ind = common.repeat(' ', spaces), position = 0, next = -1, result = '', line, length = string.length;
    while(position < length){
        next = string.indexOf('\n', position);
        if (next === -1) {
            line = string.slice(position);
            position = length;
        } else {
            line = string.slice(position, next + 1);
            position = next + 1;
        }
        if (line.length && line !== '\n') result += ind;
        result += line;
    }
    return result;
}
function generateNextLine(state, level) {
    return '\n' + common.repeat(' ', state.indent * level);
}
function testImplicitResolving(state, str) {
    var index, length, type;
    for(index = 0, length = state.implicitTypes.length; index < length; index += 1){
        type = state.implicitTypes[index];
        if (type.resolve(str)) return true;
    }
    return false;
}
// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
    return c === CHAR_SPACE || c === CHAR_TAB;
}
// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
    return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
}
// [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// Including s-white (for some reason, examples doesn't match specs in this aspect)
// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark
function isNsCharOrWhitespace(c) {
    return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
}
// [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out
//                             c = flow-in   ⇒ ns-plain-safe-in
//                             c = block-key ⇒ ns-plain-safe-out
//                             c = flow-key  ⇒ ns-plain-safe-in
// [128] ns-plain-safe-out ::= ns-char
// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator
// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )
//                            | ( /* An ns-char preceding */ “#” )
//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )
function isPlainSafe(c, prev, inblock) {
    var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
    var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
    return // ns-plain-safe
    (inblock ? cIsNsCharOrWhitespace : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP // false on '#'
     && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '
     || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar; // change to true on ':[^ ]'
}
// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
    // Uses a subset of ns-char - c-indicator
    // where ns-char = nb-char - s-white.
    // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part
    return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) // - s-white
     && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}
// Simplified test for values allowed as the last character in plain style.
function isPlainSafeLast(c) {
    // just not whitespace or colon, it will be checked to be plain character later
    return !isWhitespace(c) && c !== CHAR_COLON;
}
// Same as 'string'.codePointAt(pos), but works in older browsers.
function codePointAt(string, pos) {
    var first = string.charCodeAt(pos), second;
    if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
        second = string.charCodeAt(pos + 1);
        if (second >= 56320 && second <= 57343) // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        return (first - 55296) * 1024 + second - 56320 + 65536;
    }
    return first;
}
// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
    var leadingSpaceRe = /^\n* /;
    return leadingSpaceRe.test(string);
}
var STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;
// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
    var i;
    var char = 0;
    var prevChar = null;
    var hasLineBreak = false;
    var hasFoldableLine = false; // only checked if shouldTrackWidth
    var shouldTrackWidth = lineWidth !== -1;
    var previousLineBreak = -1; // count the first line correctly
    var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
    if (singleLineOnly || forceQuotes) // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for(i = 0; i < string.length; char >= 65536 ? i += 2 : i++){
        char = codePointAt(string, i);
        if (!isPrintable(char)) return STYLE_DOUBLE;
        plain = plain && isPlainSafe(char, prevChar, inblock);
        prevChar = char;
    }
    else {
        // Case: block styles permitted.
        for(i = 0; i < string.length; char >= 65536 ? i += 2 : i++){
            char = codePointAt(string, i);
            if (char === CHAR_LINE_FEED) {
                hasLineBreak = true;
                // Check if any line can be folded.
                if (shouldTrackWidth) {
                    hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
                    previousLineBreak = i;
                }
            } else if (!isPrintable(char)) return STYLE_DOUBLE;
            plain = plain && isPlainSafe(char, prevChar, inblock);
            prevChar = char;
        }
        // in case the end is missing a \n
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
    }
    // Although every style can represent \n without escaping, prefer block styles
    // for multiline, since they're more readable and they don't add empty lines.
    // Also prefer folding a super-long line.
    if (!hasLineBreak && !hasFoldableLine) {
        // Strings interpretable as another type have to be quoted;
        // e.g. the string 'true' vs. the boolean true.
        if (plain && !forceQuotes && !testAmbiguousType(string)) return STYLE_PLAIN;
        return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
    }
    // Edge case: block indentation indicator can only have one digit.
    if (indentPerLevel > 9 && needIndentIndicator(string)) return STYLE_DOUBLE;
    // At this point we know block styles are valid.
    // Prefer literal style unless we want to fold.
    if (!forceQuotes) return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}
// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string1, level, iskey, inblock) {
    state.dump = (function() {
        if (string1.length === 0) return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
        if (!state.noCompatMode) {
            if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string1) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string1)) return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string1 + '"' : "'" + string1 + "'";
        }
        var indent = state.indent * Math.max(1, level); // no 0-indent scalars
        // As indentation gets deeper, let the width decrease monotonically
        // to the lower bound min(state.lineWidth, 40).
        // Note that this implies
        //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
        //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
        // This behaves better than a constant minimum width which disallows narrower options,
        // or an indent threshold which causes the width to suddenly increase.
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        // Without knowing if keys are implicit/explicit, assume implicit for safety.
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string) {
            return testImplicitResolving(state, string);
        }
        switch(chooseScalarStyle(string1, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)){
            case STYLE_PLAIN:
                return string1;
            case STYLE_SINGLE:
                return "'" + string1.replace(/'/g, "''") + "'";
            case STYLE_LITERAL:
                return '|' + blockHeader(string1, state.indent) + dropEndingNewline(indentString(string1, indent));
            case STYLE_FOLDED:
                return '>' + blockHeader(string1, state.indent) + dropEndingNewline(indentString(foldString(string1, lineWidth), indent));
            case STYLE_DOUBLE:
                return '"' + escapeString(string1) + '"';
            default:
                throw new exception1('impossible error: invalid scalar style');
        }
    })();
}
// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
    var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';
    // note the special case: the string '\n' counts as a "trailing" empty line.
    var clip = string[string.length - 1] === '\n';
    var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
    var chomp = keep ? '+' : clip ? '' : '-';
    return indentIndicator + chomp + '\n';
}
// (See the note for writeScalar.)
function dropEndingNewline(string) {
    return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
}
// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
    // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
    // unless they're before or after a more-indented line, or at the very
    // beginning or end, in which case $k$ maps to $k$.
    // Therefore, parse each chunk as newline(s) followed by a content line.
    var lineRe = /(\n+)([^\n]*)/g;
    // first line (possibly an empty line)
    var result = function() {
        var nextLF = string.indexOf('\n');
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
    }();
    // If we haven't reached the first content line yet, don't add an extra \n.
    var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
    var moreIndented;
    // rest of the lines
    var match;
    while(match = lineRe.exec(string)){
        var prefix = match[1], line = match[2];
        moreIndented = line[0] === ' ';
        result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\n' : '') + foldLine(line, width);
        prevMoreIndented = moreIndented;
    }
    return result;
}
// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
    if (line === '' || line[0] === ' ') return line;
    // Since a more-indented line adds a \n, breaks can't be followed by a space.
    var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
    var match;
    // start is an inclusive index. end, curr, and next are exclusive.
    var start = 0, end, curr = 0, next = 0;
    var result = '';
    // Invariants: 0 <= start <= length-1.
    //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
    // Inside the loop:
    //   A match implies length >= 2, so curr and next are <= length-2.
    while(match = breakRe.exec(line)){
        next = match.index;
        // maintain invariant: curr - start <= width
        if (next - start > width) {
            end = curr > start ? curr : next; // derive end <= length-2
            result += '\n' + line.slice(start, end);
            // skip the space that was output as \n
            start = end + 1; // derive start <= length-1
        }
        curr = next;
    }
    // By the invariants, start <= length-1, so there is something left over.
    // It is either the whole string or a part starting from non-whitespace.
    result += '\n';
    // Insert a break if the remainder is too long and there is a break available.
    if (line.length - start > width && curr > start) result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
    else result += line.slice(start);
    return result.slice(1); // drop extra \n joiner
}
// Escapes a double-quoted string.
function escapeString(string) {
    var result = '';
    var char = 0;
    var escapeSeq;
    for(var i = 0; i < string.length; char >= 65536 ? i += 2 : i++){
        char = codePointAt(string, i);
        escapeSeq = ESCAPE_SEQUENCES[char];
        if (!escapeSeq && isPrintable(char)) {
            result += string[i];
            if (char >= 65536) result += string[i + 1];
        } else result += escapeSeq || encodeHex(char);
    }
    return result;
}
function writeFlowSequence(state, level, object) {
    var _result = '', _tag = state.tag, index, length, value;
    for(index = 0, length = object.length; index < length; index += 1){
        value = object[index];
        if (state.replacer) value = state.replacer.call(object, String(index), value);
        // Write only valid elements, put null instead of invalid elements.
        if (writeNode(state, level, value, false, false) || typeof value === 'undefined' && writeNode(state, level, null, false, false)) {
            if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');
            _result += state.dump;
        }
    }
    state.tag = _tag;
    state.dump = '[' + _result + ']';
}
function writeBlockSequence(state, level, object, compact) {
    var _result = '', _tag = state.tag, index, length, value;
    for(index = 0, length = object.length; index < length; index += 1){
        value = object[index];
        if (state.replacer) value = state.replacer.call(object, String(index), value);
        // Write only valid elements, put null instead of invalid elements.
        if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === 'undefined' && writeNode(state, level + 1, null, true, true, false, true)) {
            if (!compact || _result !== '') _result += generateNextLine(state, level);
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) _result += '-';
            else _result += '- ';
            _result += state.dump;
        }
    }
    state.tag = _tag;
    state.dump = _result || '[]'; // Empty sequence if no valid values.
}
function writeFlowMapping(state, level, object) {
    var _result = '', _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
    for(index = 0, length = objectKeyList.length; index < length; index += 1){
        pairBuffer = '';
        if (_result !== '') pairBuffer += ', ';
        if (state.condenseFlow) pairBuffer += '"';
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) objectValue = state.replacer.call(object, objectKey, objectValue);
        if (!writeNode(state, level, objectKey, false, false)) continue; // Skip this pair because of invalid key;
        if (state.dump.length > 1024) pairBuffer += '? ';
        pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');
        if (!writeNode(state, level, objectValue, false, false)) continue; // Skip this pair because of invalid value.
        pairBuffer += state.dump;
        // Both key and value are valid.
        _result += pairBuffer;
    }
    state.tag = _tag;
    state.dump = '{' + _result + '}';
}
function writeBlockMapping(state, level, object, compact) {
    var _result = '', _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
    // Allow sorting keys so that the output file is deterministic
    if (state.sortKeys === true) // Default sorting
    objectKeyList.sort();
    else if (typeof state.sortKeys === 'function') // Custom sort function
    objectKeyList.sort(state.sortKeys);
    else if (state.sortKeys) // Something is wrong
    throw new exception1('sortKeys must be a boolean or a function');
    for(index = 0, length = objectKeyList.length; index < length; index += 1){
        pairBuffer = '';
        if (!compact || _result !== '') pairBuffer += generateNextLine(state, level);
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (state.replacer) objectValue = state.replacer.call(object, objectKey, objectValue);
        if (!writeNode(state, level + 1, objectKey, true, true, true)) continue; // Skip this pair because of invalid key.
        explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;
        if (explicitPair) {
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) pairBuffer += '?';
            else pairBuffer += '? ';
        }
        pairBuffer += state.dump;
        if (explicitPair) pairBuffer += generateNextLine(state, level);
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) continue; // Skip this pair because of invalid value.
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) pairBuffer += ':';
        else pairBuffer += ': ';
        pairBuffer += state.dump;
        // Both key and value are valid.
        _result += pairBuffer;
    }
    state.tag = _tag;
    state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}
function detectType(state, object, explicit) {
    var _result, typeList, index, length, type, style;
    typeList = explicit ? state.explicitTypes : state.implicitTypes;
    for(index = 0, length = typeList.length; index < length; index += 1){
        type = typeList[index];
        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
            if (explicit) {
                if (type.multi && type.representName) state.tag = type.representName(object);
                else state.tag = type.tag;
            } else state.tag = '?';
            if (type.represent) {
                style = state.styleMap[type.tag] || type.defaultStyle;
                if (_toString.call(type.represent) === '[object Function]') _result = type.represent(object, style);
                else if (_hasOwnProperty.call(type.represent, style)) _result = type.represent[style](object, style);
                else throw new exception1('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
                state.dump = _result;
            }
            return true;
        }
    }
    return false;
}
// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
    state.tag = null;
    state.dump = object;
    if (!detectType(state, object, false)) detectType(state, object, true);
    var type = _toString.call(state.dump);
    var inblock = block;
    var tagStr;
    if (block) block = state.flowLevel < 0 || state.flowLevel > level;
    var objectOrArray = type === '[object Object]' || type === '[object Array]', duplicateIndex, duplicate;
    if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
    }
    if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) compact = false;
    if (duplicate && state.usedDuplicates[duplicateIndex]) state.dump = '*ref_' + duplicateIndex;
    else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) state.usedDuplicates[duplicateIndex] = true;
        if (type === '[object Object]') {
            if (block && Object.keys(state.dump).length !== 0) {
                writeBlockMapping(state, level, state.dump, compact);
                if (duplicate) state.dump = '&ref_' + duplicateIndex + state.dump;
            } else {
                writeFlowMapping(state, level, state.dump);
                if (duplicate) state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
            }
        } else if (type === '[object Array]') {
            if (block && state.dump.length !== 0) {
                if (state.noArrayIndent && !isblockseq && level > 0) writeBlockSequence(state, level - 1, state.dump, compact);
                else writeBlockSequence(state, level, state.dump, compact);
                if (duplicate) state.dump = '&ref_' + duplicateIndex + state.dump;
            } else {
                writeFlowSequence(state, level, state.dump);
                if (duplicate) state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
            }
        } else if (type === '[object String]') {
            if (state.tag !== '?') writeScalar(state, state.dump, level, iskey, inblock);
        } else if (type === '[object Undefined]') return false;
        else {
            if (state.skipInvalid) return false;
            throw new exception1('unacceptable kind of an object to dump ' + type);
        }
        if (state.tag !== null && state.tag !== '?') {
            // Need to encode all characters except those allowed by the spec:
            //
            // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */
            // [36] ns-hex-digit    ::=  ns-dec-digit
            //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */
            // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */
            // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”
            // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”
            //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”
            //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”
            //
            // Also need to encode '!' because it has special meaning (end of tag prefix).
            //
            tagStr = encodeURI(state.tag[0] === '!' ? state.tag.slice(1) : state.tag).replace(/!/g, '%21');
            if (state.tag[0] === '!') tagStr = '!' + tagStr;
            else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') tagStr = '!!' + tagStr.slice(18);
            else tagStr = '!<' + tagStr + '>';
            state.dump = tagStr + ' ' + state.dump;
        }
    }
    return true;
}
function getDuplicateReferences(object, state) {
    var objects = [], duplicatesIndexes = [], index, length;
    inspectNode(object, objects, duplicatesIndexes);
    for(index = 0, length = duplicatesIndexes.length; index < length; index += 1)state.duplicates.push(objects[duplicatesIndexes[index]]);
    state.usedDuplicates = new Array(length);
}
function inspectNode(object, objects, duplicatesIndexes) {
    var objectKeyList, index, length;
    if (object !== null && typeof object === 'object') {
        index = objects.indexOf(object);
        if (index !== -1) {
            if (duplicatesIndexes.indexOf(index) === -1) duplicatesIndexes.push(index);
        } else {
            objects.push(object);
            if (Array.isArray(object)) for(index = 0, length = object.length; index < length; index += 1)inspectNode(object[index], objects, duplicatesIndexes);
            else {
                objectKeyList = Object.keys(object);
                for(index = 0, length = objectKeyList.length; index < length; index += 1)inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
        }
    }
}
function dump$1(input, options) {
    options = options || {
    };
    var state = new State(options);
    if (!state.noRefs) getDuplicateReferences(input, state);
    var value = input;
    if (state.replacer) value = state.replacer.call({
        '': value
    }, '', value);
    if (writeNode(state, 0, value, true, true)) return state.dump + '\n';
    return '';
}
var dump_1 = dump$1;
var dumper = {
    dump: dump_1
};
function renamed(from, to) {
    return function() {
        throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' + 'Use yaml.' + to + ' instead, which is now safe by default.');
    };
}
var Type = type1;
var Schema = schema1;
var FAILSAFE_SCHEMA = failsafe;
var JSON_SCHEMA = json;
var CORE_SCHEMA = core;
var DEFAULT_SCHEMA = _default;
var load = loader.load;
var loadAll = loader.loadAll;
var dump = dumper.dump;
var YAMLException = exception1;
// Re-export all types in case user wants to create custom schema
var types = {
    binary: binary,
    float: float,
    map: map1,
    null: _null,
    pairs: pairs,
    set: set,
    timestamp: timestamp,
    bool: bool,
    int: int,
    merge: merge,
    omap: omap,
    seq: seq,
    str: str1
};
// Removed functions from JS-YAML 3.0.x
var safeLoad = renamed('safeLoad', 'load');
var safeLoadAll = renamed('safeLoadAll', 'loadAll');
var safeDump = renamed('safeDump', 'dump');
var jsYaml = {
    Type: Type,
    Schema: Schema,
    FAILSAFE_SCHEMA: FAILSAFE_SCHEMA,
    JSON_SCHEMA: JSON_SCHEMA,
    CORE_SCHEMA: CORE_SCHEMA,
    DEFAULT_SCHEMA: DEFAULT_SCHEMA,
    load: load,
    loadAll: loadAll,
    dump: dump,
    YAMLException: YAMLException,
    types: types,
    safeLoad: safeLoad,
    safeLoadAll: safeLoadAll,
    safeDump: safeDump
};
exports.default = jsYaml;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1y1hX":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$f909 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$f909.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxRuntime = require("react/jsx-runtime");
var _react = require("react");
var _graphView = require("./graph-view");
var _reactBootstrap = require("react-bootstrap");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var NFAView1 = function(_super) {
    __extends(NFAView, _super);
    function NFAView(props) {
        var _this = _super.call(this, props) || this;
        _this.onSelectNode = function(node) {
            try {
                _this.props.gnfa.ripState(node.label);
                _this.forceUpdate();
                _this.props.setError(null);
            } catch (e) {
                if (_this.props.setError) _this.props.setError(e.message);
                else console.error(e);
            }
        };
        return _this;
    }
    NFAView.prototype.componentDidMount = function() {
    // console.log(this.props.gnfa.getGraph())
    };
    NFAView.prototype.render = function() {
        return _jsxRuntime.jsxs(_jsxRuntime.Fragment, {
            children: [
                _jsxRuntime.jsx(_graphView.GraphView, {
                    graph: this.props.gnfa.getGraph(),
                    onSelectNode: this.onSelectNode,
                    height: "700px"
                }, void 0),
                _jsxRuntime.jsxs(_reactBootstrap.Alert, __assign({
                    variant: "info"
                }, {
                    children: [
                        _jsxRuntime.jsx(_reactBootstrap.Alert.Heading, {
                            children: "Info"
                        }, void 0),
                        _jsxRuntime.jsxs("ul", {
                            children: [
                                _jsxRuntime.jsx("li", {
                                    children: "for rip state, click on the node in the graph new graph will be generated"
                                }, void 0),
                                _jsxRuntime.jsx("li", {
                                    children: "virtual start state is @ and virtual end state is # these states can't be riped"
                                }, void 0),
                                _jsxRuntime.jsx("li", {
                                    children: "the final expression between the start and end state is the expression of the NFA"
                                }, void 0)
                            ]
                        }, void 0)
                    ]
                }), void 0)
            ]
        }, void 0);
    };
    return NFAView;
}(_react.Component);
exports.default = NFAView1;

  $parcel$ReactRefreshHelpers$f909.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-runtime":"6Ds2u","react":"4mchR","./graph-view":"bLJIf","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"9pz13","react-bootstrap":"9qMdX"}],"bLJIf":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$40d8 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$40d8.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GraphView", ()=>GraphView
);
var _jsxRuntime = require("react/jsx-runtime");
var _reactGraphVis = require("react-graph-vis");
var _reactGraphVisDefault = parcelHelpers.interopDefault(_reactGraphVis);
var options = {
    autoResize: true,
    layout: {
        hierarchical: false
    },
    edges: {
        color: "#700b97",
        width: 1.2,
        smooth: {
            enabled: true,
            type: "discrete",
            roundness: 0.9
        },
        font: {
            color: "#000000",
            size: 12,
            face: 'cascadia'
        }
    },
    physics: {
        enabled: false
    },
    height: "500px",
    nodes: {
        color: "#8e05c2",
        font: {
            color: "#fff",
            face: 'cascadia'
        }
    },
    interaction: {
        hover: true,
        hoverConnectedEdges: true,
        selectable: true,
        selectConnectedEdges: true
    }
};
var GraphView = function(_a) {
    var graph = _a.graph, onSelectNode = _a.onSelectNode, height = _a.height;
    var normalizedEdgesLabeled = graph.edges.map(function(edge) {
        return {
            from: edge.from,
            to: edge.to,
            label: edge.label + new Array(edge.label.length + 1).join(' ')
        };
    });
    if (height) options.height = height;
    var events = {
        select: function(event) {
            if (event.nodes.length > 0) {
                if (onSelectNode) {
                    var node = graph.nodes.find(function(n) {
                        return n.id === event.nodes[0];
                    });
                    onSelectNode(node);
                }
            }
        }
    };
    return _jsxRuntime.jsx(_reactGraphVisDefault.default, {
        graph: {
            nodes: graph.nodes,
            edges: normalizedEdgesLabeled
        },
        options: options,
        events: events
    }, void 0);
};
_c = GraphView;
var _c;
$RefreshReg$(_c, "GraphView");

  $parcel$ReactRefreshHelpers$40d8.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-runtime":"6Ds2u","react-graph-vis":"is1WD","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"9pz13"}],"is1WD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _react = require("react");
var _react2 = _interopRequireDefault(_react);
var _defaultsDeep = require("lodash/fp/defaultsDeep");
var _defaultsDeep2 = _interopRequireDefault(_defaultsDeep);
var _isEqual = require("lodash/isEqual");
var _isEqual2 = _interopRequireDefault(_isEqual);
var _differenceWith = require("lodash/differenceWith");
var _differenceWith2 = _interopRequireDefault(_differenceWith);
var _visData = require("vis-data");
var _visNetwork = require("vis-network");
var _uuid = require("uuid");
var _uuid2 = _interopRequireDefault(_uuid);
var _propTypes = require("prop-types");
var _propTypes2 = _interopRequireDefault(_propTypes);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
var Graph1 = function(_Component) {
    _inherits(Graph, _Component);
    function Graph(props) {
        _classCallCheck(this, Graph);
        var _this = _possibleConstructorReturn(this, (Graph.__proto__ || Object.getPrototypeOf(Graph)).call(this, props));
        var identifier = props.identifier;
        _this.updateGraph = _this.updateGraph.bind(_this);
        _this.state = {
            identifier: identifier !== undefined ? identifier : _uuid2.default.v4()
        };
        _this.container = _react2.default.createRef();
        return _this;
    }
    _createClass(Graph, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.edges = new _visData.DataSet();
                this.edges.add(this.props.graph.edges);
                this.nodes = new _visData.DataSet();
                this.nodes.add(this.props.graph.nodes);
                this.updateGraph();
            }
        },
        {
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(nextProps, nextState) {
                var nodesChange = !(0, _isEqual2.default)(this.props.graph.nodes, nextProps.graph.nodes);
                var edgesChange = !(0, _isEqual2.default)(this.props.graph.edges, nextProps.graph.edges);
                var optionsChange = !(0, _isEqual2.default)(this.props.options, nextProps.options);
                var eventsChange = !(0, _isEqual2.default)(this.props.events, nextProps.events);
                if (nodesChange) {
                    var idIsEqual = function idIsEqual(n1, n2) {
                        return n1.id === n2.id;
                    };
                    var nodesRemoved = (0, _differenceWith2.default)(this.props.graph.nodes, nextProps.graph.nodes, idIsEqual);
                    var nodesAdded = (0, _differenceWith2.default)(nextProps.graph.nodes, this.props.graph.nodes, idIsEqual);
                    var nodesChanged = (0, _differenceWith2.default)((0, _differenceWith2.default)(nextProps.graph.nodes, this.props.graph.nodes, _isEqual2.default), nodesAdded);
                    this.patchNodes({
                        nodesRemoved: nodesRemoved,
                        nodesAdded: nodesAdded,
                        nodesChanged: nodesChanged
                    });
                }
                if (edgesChange) {
                    var edgesRemoved = (0, _differenceWith2.default)(this.props.graph.edges, nextProps.graph.edges, _isEqual2.default);
                    var edgesAdded = (0, _differenceWith2.default)(nextProps.graph.edges, this.props.graph.edges, _isEqual2.default);
                    var edgesChanged = (0, _differenceWith2.default)((0, _differenceWith2.default)(nextProps.graph.edges, this.props.graph.edges, _isEqual2.default), edgesAdded);
                    this.patchEdges({
                        edgesRemoved: edgesRemoved,
                        edgesAdded: edgesAdded,
                        edgesChanged: edgesChanged
                    });
                }
                if (optionsChange) this.Network.setOptions(nextProps.options);
                if (eventsChange) {
                    var events = this.props.events || {
                    };
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for(var _iterator = Object.keys(events)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var eventName = _step.value;
                            this.Network.off(eventName, events[eventName]);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) _iterator.return();
                        } finally{
                            if (_didIteratorError) throw _iteratorError;
                        }
                    }
                    events = nextProps.events || {
                    };
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;
                    try {
                        for(var _iterator2 = Object.keys(events)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                            var _eventName = _step2.value;
                            this.Network.on(_eventName, events[_eventName]);
                        }
                    } catch (err1) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err1;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return) _iterator2.return();
                        } finally{
                            if (_didIteratorError2) throw _iteratorError2;
                        }
                    }
                }
                return false;
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
                this.updateGraph();
            }
        },
        {
            key: "patchEdges",
            value: function patchEdges(_ref) {
                var edgesRemoved = _ref.edgesRemoved, edgesAdded = _ref.edgesAdded, edgesChanged = _ref.edgesChanged;
                this.edges.remove(edgesRemoved);
                this.edges.add(edgesAdded);
                this.edges.update(edgesChanged);
            }
        },
        {
            key: "patchNodes",
            value: function patchNodes(_ref2) {
                var nodesRemoved = _ref2.nodesRemoved, nodesAdded = _ref2.nodesAdded, nodesChanged = _ref2.nodesChanged;
                this.nodes.remove(nodesRemoved);
                this.nodes.add(nodesAdded);
                this.nodes.update(nodesChanged);
            }
        },
        {
            key: "updateGraph",
            value: function updateGraph() {
                var defaultOptions = {
                    physics: {
                        stabilization: false
                    },
                    autoResize: false,
                    edges: {
                        smooth: false,
                        color: "#000000",
                        width: 0.5,
                        arrows: {
                            to: {
                                enabled: true,
                                scaleFactor: 0.5
                            }
                        }
                    }
                };
                // merge user provied options with our default ones
                var options = (0, _defaultsDeep2.default)(defaultOptions, this.props.options);
                this.Network = new _visNetwork.Network(this.container.current, Object.assign({
                }, this.props.graph, {
                    edges: this.edges,
                    nodes: this.nodes
                }), options);
                if (this.props.getNetwork) this.props.getNetwork(this.Network);
                if (this.props.getNodes) this.props.getNodes(this.nodes);
                if (this.props.getEdges) this.props.getEdges(this.edges);
                // Add user provied events to network
                var events = this.props.events || {
                };
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;
                try {
                    for(var _iterator3 = Object.keys(events)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true){
                        var eventName = _step3.value;
                        this.Network.on(eventName, events[eventName]);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) _iterator3.return();
                    } finally{
                        if (_didIteratorError3) throw _iteratorError3;
                    }
                }
            }
        },
        {
            key: "render",
            value: function render() {
                var identifier = this.state.identifier;
                var style = this.props.style;
                return _react2.default.createElement("div", {
                    id: identifier,
                    ref: this.container,
                    style: style
                }, identifier);
            }
        }
    ]);
    return Graph;
}(_react.Component);
Graph1.defaultProps = {
    graph: {
    },
    style: {
        width: "100%",
        height: "100%"
    }
};
Graph1.propTypes = {
    graph: _propTypes2.default.object,
    style: _propTypes2.default.object,
    getNetwork: _propTypes2.default.func,
    getNodes: _propTypes2.default.func,
    getEdges: _propTypes2.default.func
};
exports.default = Graph1;

},{"react":"4mchR","lodash/fp/defaultsDeep":"eCrUK","lodash/isEqual":"8TVWM","lodash/differenceWith":"b2UFz","vis-data":"ahINw","vis-network":"b4TeA","uuid":"l0t0w","prop-types":"2bysO"}],"eCrUK":[function(require,module,exports) {
var convert = require('./convert'), func = convert('defaultsDeep', require('../defaultsDeep'));
func.placeholder = require('./placeholder');
module.exports = func;

},{"./convert":"351HK","../defaultsDeep":"blLPP","./placeholder":"5xGmw"}],"351HK":[function(require,module,exports) {
var baseConvert = require('./_baseConvert'), util = require('./_util');
/**
 * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last
 * version with conversion `options` applied. If `name` is an object its methods
 * will be converted.
 *
 * @param {string} name The name of the function to wrap.
 * @param {Function} [func] The function to wrap.
 * @param {Object} [options] The options object. See `baseConvert` for more details.
 * @returns {Function|Object} Returns the converted function or object.
 */ function convert(name, func, options) {
    return baseConvert(util, name, func, options);
}
module.exports = convert;

},{"./_baseConvert":"3VsiR","./_util":"bmOKI"}],"3VsiR":[function(require,module,exports) {
var mapping = require('./_mapping'), fallbackHolder = require('./placeholder');
/** Built-in value reference. */ var push = Array.prototype.push;
/**
 * Creates a function, with an arity of `n`, that invokes `func` with the
 * arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} n The arity of the new function.
 * @returns {Function} Returns the new function.
 */ function baseArity(func, n) {
    return n == 2 ? function(a, b) {
        return func.apply(undefined, arguments);
    } : function(a) {
        return func.apply(undefined, arguments);
    };
}
/**
 * Creates a function that invokes `func`, with up to `n` arguments, ignoring
 * any additional arguments.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @param {number} n The arity cap.
 * @returns {Function} Returns the new function.
 */ function baseAry(func, n) {
    return n == 2 ? function(a, b) {
        return func(a, b);
    } : function(a) {
        return func(a);
    };
}
/**
 * Creates a clone of `array`.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the cloned array.
 */ function cloneArray(array) {
    var length = array ? array.length : 0, result = Array(length);
    while(length--)result[length] = array[length];
    return result;
}
/**
 * Creates a function that clones a given object using the assignment `func`.
 *
 * @private
 * @param {Function} func The assignment function.
 * @returns {Function} Returns the new cloner function.
 */ function createCloner(func) {
    return function(object) {
        return func({
        }, object);
    };
}
/**
 * A specialized version of `_.spread` which flattens the spread array into
 * the arguments of the invoked `func`.
 *
 * @private
 * @param {Function} func The function to spread arguments over.
 * @param {number} start The start position of the spread.
 * @returns {Function} Returns the new function.
 */ function flatSpread(func, start) {
    return function() {
        var length = arguments.length, lastIndex = length - 1, args = Array(length);
        while(length--)args[length] = arguments[length];
        var array = args[start], otherArgs = args.slice(0, start);
        if (array) push.apply(otherArgs, array);
        if (start != lastIndex) push.apply(otherArgs, args.slice(start + 1));
        return func.apply(this, otherArgs);
    };
}
/**
 * Creates a function that wraps `func` and uses `cloner` to clone the first
 * argument it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} cloner The function to clone arguments.
 * @returns {Function} Returns the new immutable function.
 */ function wrapImmutable(func, cloner) {
    return function() {
        var length = arguments.length;
        if (!length) return;
        var args = Array(length);
        while(length--)args[length] = arguments[length];
        var result = args[0] = cloner.apply(undefined, args);
        func.apply(undefined, args);
        return result;
    };
}
/**
 * The base implementation of `convert` which accepts a `util` object of methods
 * required to perform conversions.
 *
 * @param {Object} util The util object.
 * @param {string} name The name of the function to convert.
 * @param {Function} func The function to convert.
 * @param {Object} [options] The options object.
 * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
 * @param {boolean} [options.curry=true] Specify currying.
 * @param {boolean} [options.fixed=true] Specify fixed arity.
 * @param {boolean} [options.immutable=true] Specify immutable operations.
 * @param {boolean} [options.rearg=true] Specify rearranging arguments.
 * @returns {Function|Object} Returns the converted function or object.
 */ function baseConvert(util, name1, func1, options1) {
    var isLib = typeof name1 == 'function', isObj = name1 === Object(name1);
    if (isObj) {
        options1 = func1;
        func1 = name1;
        name1 = undefined;
    }
    if (func1 == null) throw new TypeError;
    options1 || (options1 = {
    });
    var config = {
        'cap': 'cap' in options1 ? options1.cap : true,
        'curry': 'curry' in options1 ? options1.curry : true,
        'fixed': 'fixed' in options1 ? options1.fixed : true,
        'immutable': 'immutable' in options1 ? options1.immutable : true,
        'rearg': 'rearg' in options1 ? options1.rearg : true
    };
    var defaultHolder = isLib ? func1 : fallbackHolder, forceCurry = 'curry' in options1 && options1.curry, forceFixed = 'fixed' in options1 && options1.fixed, forceRearg = 'rearg' in options1 && options1.rearg, pristine = isLib ? func1.runInContext() : undefined;
    var helpers = isLib ? func1 : {
        'ary': util.ary,
        'assign': util.assign,
        'clone': util.clone,
        'curry': util.curry,
        'forEach': util.forEach,
        'isArray': util.isArray,
        'isError': util.isError,
        'isFunction': util.isFunction,
        'isWeakMap': util.isWeakMap,
        'iteratee': util.iteratee,
        'keys': util.keys,
        'rearg': util.rearg,
        'toInteger': util.toInteger,
        'toPath': util.toPath
    };
    var ary = helpers.ary, assign = helpers.assign, clone = helpers.clone, curry = helpers.curry, each = helpers.forEach, isArray = helpers.isArray, isError = helpers.isError, isFunction = helpers.isFunction, isWeakMap = helpers.isWeakMap, keys = helpers.keys, rearg1 = helpers.rearg, toInteger = helpers.toInteger, toPath = helpers.toPath;
    var aryMethodKeys = keys(mapping.aryMethod);
    var wrappers = {
        'castArray': function(castArray) {
            return function() {
                var value = arguments[0];
                return isArray(value) ? castArray(cloneArray(value)) : castArray.apply(undefined, arguments);
            };
        },
        'iteratee': function(iteratee) {
            return function() {
                var func = arguments[0], arity = arguments[1], result = iteratee(func, arity), length = result.length;
                if (config.cap && typeof arity == 'number') {
                    arity = arity > 2 ? arity - 2 : 1;
                    return length && length <= arity ? result : baseAry(result, arity);
                }
                return result;
            };
        },
        'mixin': function(mixin) {
            return function(source) {
                var func = this;
                if (!isFunction(func)) return mixin(func, Object(source));
                var pairs = [];
                each(keys(source), function(key) {
                    if (isFunction(source[key])) pairs.push([
                        key,
                        func.prototype[key]
                    ]);
                });
                mixin(func, Object(source));
                each(pairs, function(pair) {
                    var value = pair[1];
                    if (isFunction(value)) func.prototype[pair[0]] = value;
                    else delete func.prototype[pair[0]];
                });
                return func;
            };
        },
        'nthArg': function(nthArg) {
            return function(n) {
                var arity = n < 0 ? 1 : toInteger(n) + 1;
                return curry(nthArg(n), arity);
            };
        },
        'rearg': function(rearg) {
            return function(func, indexes) {
                var arity = indexes ? indexes.length : 0;
                return curry(rearg(func, indexes), arity);
            };
        },
        'runInContext': function(runInContext) {
            return function(context) {
                return baseConvert(util, runInContext(context), options1);
            };
        }
    };
    /*--------------------------------------------------------------------------*/ /**
   * Casts `func` to a function with an arity capped iteratee if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @returns {Function} Returns the cast function.
   */ function castCap(name, func) {
        if (config.cap) {
            var indexes = mapping.iterateeRearg[name];
            if (indexes) return iterateeRearg(func, indexes);
            var n = !isLib && mapping.iterateeAry[name];
            if (n) return iterateeAry(func, n);
        }
        return func;
    }
    /**
   * Casts `func` to a curried function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */ function castCurry(name, func, n) {
        return forceCurry || config.curry && n > 1 ? curry(func, n) : func;
    }
    /**
   * Casts `func` to a fixed arity function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the cast function.
   */ function castFixed(name, func, n) {
        if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
            var data = mapping.methodSpread[name], start = data && data.start;
            return start === undefined ? ary(func, n) : flatSpread(func, start);
        }
        return func;
    }
    /**
   * Casts `func` to an rearged function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */ function castRearg(name, func, n) {
        return config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]) ? rearg1(func, mapping.methodRearg[name] || mapping.aryRearg[n]) : func;
    }
    /**
   * Creates a clone of `object` by `path`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {Array|string} path The path to clone by.
   * @returns {Object} Returns the cloned object.
   */ function cloneByPath(object, path) {
        path = toPath(path);
        var index = -1, length = path.length, lastIndex = length - 1, result = clone(Object(object)), nested = result;
        while(nested != null && ++index < length){
            var key = path[index], value = nested[key];
            if (value != null && !(isFunction(value) || isError(value) || isWeakMap(value))) nested[key] = clone(index == lastIndex ? value : Object(value));
            nested = nested[key];
        }
        return result;
    }
    /**
   * Converts `lodash` to an immutable auto-curried iteratee-first data-last
   * version with conversion `options` applied.
   *
   * @param {Object} [options] The options object. See `baseConvert` for more details.
   * @returns {Function} Returns the converted `lodash`.
   */ function convertLib(options) {
        return _.runInContext.convert(options)(undefined);
    }
    /**
   * Create a converter function for `func` of `name`.
   *
   * @param {string} name The name of the function to convert.
   * @param {Function} func The function to convert.
   * @returns {Function} Returns the new converter function.
   */ function createConverter(name, func) {
        var realName = mapping.aliasToReal[name] || name, methodName = mapping.remap[realName] || realName, oldOptions = options1;
        return function(options) {
            var newUtil = isLib ? pristine : helpers, newFunc = isLib ? pristine[methodName] : func, newOptions = assign(assign({
            }, oldOptions), options);
            return baseConvert(newUtil, realName, newFunc, newOptions);
        };
    }
    /**
   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
   * arguments, ignoring any additional arguments.
   *
   * @private
   * @param {Function} func The function to cap iteratee arguments for.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the new function.
   */ function iterateeAry(func2, n) {
        return overArg(func2, function(func) {
            return typeof func == 'function' ? baseAry(func, n) : func;
        });
    }
    /**
   * Creates a function that wraps `func` to invoke its iteratee with arguments
   * arranged according to the specified `indexes` where the argument value at
   * the first index is provided as the first argument, the argument value at
   * the second index is provided as the second argument, and so on.
   *
   * @private
   * @param {Function} func The function to rearrange iteratee arguments for.
   * @param {number[]} indexes The arranged argument indexes.
   * @returns {Function} Returns the new function.
   */ function iterateeRearg(func3, indexes) {
        return overArg(func3, function(func) {
            var n = indexes.length;
            return baseArity(rearg1(baseAry(func, n), indexes), n);
        });
    }
    /**
   * Creates a function that invokes `func` with its first argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */ function overArg(func, transform) {
        return function() {
            var length = arguments.length;
            if (!length) return func();
            var args = Array(length);
            while(length--)args[length] = arguments[length];
            var index = config.rearg ? 0 : length - 1;
            args[index] = transform(args[index]);
            return func.apply(undefined, args);
        };
    }
    /**
   * Creates a function that wraps `func` and applys the conversions
   * rules by `name`.
   *
   * @private
   * @param {string} name The name of the function to wrap.
   * @param {Function} func The function to wrap.
   * @returns {Function} Returns the converted function.
   */ function wrap(name, func, placeholder) {
        var result, realName = mapping.aliasToReal[name] || name, wrapped = func, wrapper = wrappers[realName];
        if (wrapper) wrapped = wrapper(func);
        else if (config.immutable) {
            if (mapping.mutate.array[realName]) wrapped = wrapImmutable(func, cloneArray);
            else if (mapping.mutate.object[realName]) wrapped = wrapImmutable(func, createCloner(func));
            else if (mapping.mutate.set[realName]) wrapped = wrapImmutable(func, cloneByPath);
        }
        each(aryMethodKeys, function(aryKey) {
            each(mapping.aryMethod[aryKey], function(otherName) {
                if (realName == otherName) {
                    var data = mapping.methodSpread[realName], afterRearg = data && data.afterRearg;
                    result = afterRearg ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey) : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);
                    result = castCap(realName, result);
                    result = castCurry(realName, result, aryKey);
                    return false;
                }
            });
            return !result;
        });
        result || (result = wrapped);
        if (result == func) result = forceCurry ? curry(result, 1) : function() {
            return func.apply(this, arguments);
        };
        result.convert = createConverter(realName, func);
        result.placeholder = func.placeholder = placeholder;
        return result;
    }
    /*--------------------------------------------------------------------------*/ if (!isObj) return wrap(name1, func1, defaultHolder);
    var _ = func1;
    // Convert methods by ary cap.
    var pairs1 = [];
    each(aryMethodKeys, function(aryKey) {
        each(mapping.aryMethod[aryKey], function(key) {
            var func = _[mapping.remap[key] || key];
            if (func) pairs1.push([
                key,
                wrap(key, func, _)
            ]);
        });
    });
    // Convert remaining methods.
    each(keys(_), function(key) {
        var func = _[key];
        if (typeof func == 'function') {
            var length = pairs1.length;
            while(length--){
                if (pairs1[length][0] == key) return;
            }
            func.convert = createConverter(key, func);
            pairs1.push([
                key,
                func
            ]);
        }
    });
    // Assign to `_` leaving `_.prototype` unchanged to allow chaining.
    each(pairs1, function(pair) {
        _[pair[0]] = pair[1];
    });
    _.convert = convertLib;
    _.placeholder = _;
    // Assign aliases.
    each(keys(_), function(key) {
        each(mapping.realToAlias[key] || [], function(alias) {
            _[alias] = _[key];
        });
    });
    return _;
}
module.exports = baseConvert;

},{"./_mapping":"jbRFB","./placeholder":"5xGmw"}],"jbRFB":[function(require,module,exports) {
/** Used to map aliases to their real names. */ exports.aliasToReal = {
    // Lodash aliases.
    'each': 'forEach',
    'eachRight': 'forEachRight',
    'entries': 'toPairs',
    'entriesIn': 'toPairsIn',
    'extend': 'assignIn',
    'extendAll': 'assignInAll',
    'extendAllWith': 'assignInAllWith',
    'extendWith': 'assignInWith',
    'first': 'head',
    // Methods that are curried variants of others.
    'conforms': 'conformsTo',
    'matches': 'isMatch',
    'property': 'get',
    // Ramda aliases.
    '__': 'placeholder',
    'F': 'stubFalse',
    'T': 'stubTrue',
    'all': 'every',
    'allPass': 'overEvery',
    'always': 'constant',
    'any': 'some',
    'anyPass': 'overSome',
    'apply': 'spread',
    'assoc': 'set',
    'assocPath': 'set',
    'complement': 'negate',
    'compose': 'flowRight',
    'contains': 'includes',
    'dissoc': 'unset',
    'dissocPath': 'unset',
    'dropLast': 'dropRight',
    'dropLastWhile': 'dropRightWhile',
    'equals': 'isEqual',
    'identical': 'eq',
    'indexBy': 'keyBy',
    'init': 'initial',
    'invertObj': 'invert',
    'juxt': 'over',
    'omitAll': 'omit',
    'nAry': 'ary',
    'path': 'get',
    'pathEq': 'matchesProperty',
    'pathOr': 'getOr',
    'paths': 'at',
    'pickAll': 'pick',
    'pipe': 'flow',
    'pluck': 'map',
    'prop': 'get',
    'propEq': 'matchesProperty',
    'propOr': 'getOr',
    'props': 'at',
    'symmetricDifference': 'xor',
    'symmetricDifferenceBy': 'xorBy',
    'symmetricDifferenceWith': 'xorWith',
    'takeLast': 'takeRight',
    'takeLastWhile': 'takeRightWhile',
    'unapply': 'rest',
    'unnest': 'flatten',
    'useWith': 'overArgs',
    'where': 'conformsTo',
    'whereEq': 'isMatch',
    'zipObj': 'zipObject'
};
/** Used to map ary to method names. */ exports.aryMethod = {
    '1': [
        'assignAll',
        'assignInAll',
        'attempt',
        'castArray',
        'ceil',
        'create',
        'curry',
        'curryRight',
        'defaultsAll',
        'defaultsDeepAll',
        'floor',
        'flow',
        'flowRight',
        'fromPairs',
        'invert',
        'iteratee',
        'memoize',
        'method',
        'mergeAll',
        'methodOf',
        'mixin',
        'nthArg',
        'over',
        'overEvery',
        'overSome',
        'rest',
        'reverse',
        'round',
        'runInContext',
        'spread',
        'template',
        'trim',
        'trimEnd',
        'trimStart',
        'uniqueId',
        'words',
        'zipAll'
    ],
    '2': [
        'add',
        'after',
        'ary',
        'assign',
        'assignAllWith',
        'assignIn',
        'assignInAllWith',
        'at',
        'before',
        'bind',
        'bindAll',
        'bindKey',
        'chunk',
        'cloneDeepWith',
        'cloneWith',
        'concat',
        'conformsTo',
        'countBy',
        'curryN',
        'curryRightN',
        'debounce',
        'defaults',
        'defaultsDeep',
        'defaultTo',
        'delay',
        'difference',
        'divide',
        'drop',
        'dropRight',
        'dropRightWhile',
        'dropWhile',
        'endsWith',
        'eq',
        'every',
        'filter',
        'find',
        'findIndex',
        'findKey',
        'findLast',
        'findLastIndex',
        'findLastKey',
        'flatMap',
        'flatMapDeep',
        'flattenDepth',
        'forEach',
        'forEachRight',
        'forIn',
        'forInRight',
        'forOwn',
        'forOwnRight',
        'get',
        'groupBy',
        'gt',
        'gte',
        'has',
        'hasIn',
        'includes',
        'indexOf',
        'intersection',
        'invertBy',
        'invoke',
        'invokeMap',
        'isEqual',
        'isMatch',
        'join',
        'keyBy',
        'lastIndexOf',
        'lt',
        'lte',
        'map',
        'mapKeys',
        'mapValues',
        'matchesProperty',
        'maxBy',
        'meanBy',
        'merge',
        'mergeAllWith',
        'minBy',
        'multiply',
        'nth',
        'omit',
        'omitBy',
        'overArgs',
        'pad',
        'padEnd',
        'padStart',
        'parseInt',
        'partial',
        'partialRight',
        'partition',
        'pick',
        'pickBy',
        'propertyOf',
        'pull',
        'pullAll',
        'pullAt',
        'random',
        'range',
        'rangeRight',
        'rearg',
        'reject',
        'remove',
        'repeat',
        'restFrom',
        'result',
        'sampleSize',
        'some',
        'sortBy',
        'sortedIndex',
        'sortedIndexOf',
        'sortedLastIndex',
        'sortedLastIndexOf',
        'sortedUniqBy',
        'split',
        'spreadFrom',
        'startsWith',
        'subtract',
        'sumBy',
        'take',
        'takeRight',
        'takeRightWhile',
        'takeWhile',
        'tap',
        'throttle',
        'thru',
        'times',
        'trimChars',
        'trimCharsEnd',
        'trimCharsStart',
        'truncate',
        'union',
        'uniqBy',
        'uniqWith',
        'unset',
        'unzipWith',
        'without',
        'wrap',
        'xor',
        'zip',
        'zipObject',
        'zipObjectDeep'
    ],
    '3': [
        'assignInWith',
        'assignWith',
        'clamp',
        'differenceBy',
        'differenceWith',
        'findFrom',
        'findIndexFrom',
        'findLastFrom',
        'findLastIndexFrom',
        'getOr',
        'includesFrom',
        'indexOfFrom',
        'inRange',
        'intersectionBy',
        'intersectionWith',
        'invokeArgs',
        'invokeArgsMap',
        'isEqualWith',
        'isMatchWith',
        'flatMapDepth',
        'lastIndexOfFrom',
        'mergeWith',
        'orderBy',
        'padChars',
        'padCharsEnd',
        'padCharsStart',
        'pullAllBy',
        'pullAllWith',
        'rangeStep',
        'rangeStepRight',
        'reduce',
        'reduceRight',
        'replace',
        'set',
        'slice',
        'sortedIndexBy',
        'sortedLastIndexBy',
        'transform',
        'unionBy',
        'unionWith',
        'update',
        'xorBy',
        'xorWith',
        'zipWith'
    ],
    '4': [
        'fill',
        'setWith',
        'updateWith'
    ]
};
/** Used to map ary to rearg configs. */ exports.aryRearg = {
    '2': [
        1,
        0
    ],
    '3': [
        2,
        0,
        1
    ],
    '4': [
        3,
        2,
        0,
        1
    ]
};
/** Used to map method names to their iteratee ary. */ exports.iterateeAry = {
    'dropRightWhile': 1,
    'dropWhile': 1,
    'every': 1,
    'filter': 1,
    'find': 1,
    'findFrom': 1,
    'findIndex': 1,
    'findIndexFrom': 1,
    'findKey': 1,
    'findLast': 1,
    'findLastFrom': 1,
    'findLastIndex': 1,
    'findLastIndexFrom': 1,
    'findLastKey': 1,
    'flatMap': 1,
    'flatMapDeep': 1,
    'flatMapDepth': 1,
    'forEach': 1,
    'forEachRight': 1,
    'forIn': 1,
    'forInRight': 1,
    'forOwn': 1,
    'forOwnRight': 1,
    'map': 1,
    'mapKeys': 1,
    'mapValues': 1,
    'partition': 1,
    'reduce': 2,
    'reduceRight': 2,
    'reject': 1,
    'remove': 1,
    'some': 1,
    'takeRightWhile': 1,
    'takeWhile': 1,
    'times': 1,
    'transform': 2
};
/** Used to map method names to iteratee rearg configs. */ exports.iterateeRearg = {
    'mapKeys': [
        1
    ],
    'reduceRight': [
        1,
        0
    ]
};
/** Used to map method names to rearg configs. */ exports.methodRearg = {
    'assignInAllWith': [
        1,
        0
    ],
    'assignInWith': [
        1,
        2,
        0
    ],
    'assignAllWith': [
        1,
        0
    ],
    'assignWith': [
        1,
        2,
        0
    ],
    'differenceBy': [
        1,
        2,
        0
    ],
    'differenceWith': [
        1,
        2,
        0
    ],
    'getOr': [
        2,
        1,
        0
    ],
    'intersectionBy': [
        1,
        2,
        0
    ],
    'intersectionWith': [
        1,
        2,
        0
    ],
    'isEqualWith': [
        1,
        2,
        0
    ],
    'isMatchWith': [
        2,
        1,
        0
    ],
    'mergeAllWith': [
        1,
        0
    ],
    'mergeWith': [
        1,
        2,
        0
    ],
    'padChars': [
        2,
        1,
        0
    ],
    'padCharsEnd': [
        2,
        1,
        0
    ],
    'padCharsStart': [
        2,
        1,
        0
    ],
    'pullAllBy': [
        2,
        1,
        0
    ],
    'pullAllWith': [
        2,
        1,
        0
    ],
    'rangeStep': [
        1,
        2,
        0
    ],
    'rangeStepRight': [
        1,
        2,
        0
    ],
    'setWith': [
        3,
        1,
        2,
        0
    ],
    'sortedIndexBy': [
        2,
        1,
        0
    ],
    'sortedLastIndexBy': [
        2,
        1,
        0
    ],
    'unionBy': [
        1,
        2,
        0
    ],
    'unionWith': [
        1,
        2,
        0
    ],
    'updateWith': [
        3,
        1,
        2,
        0
    ],
    'xorBy': [
        1,
        2,
        0
    ],
    'xorWith': [
        1,
        2,
        0
    ],
    'zipWith': [
        1,
        2,
        0
    ]
};
/** Used to map method names to spread configs. */ exports.methodSpread = {
    'assignAll': {
        'start': 0
    },
    'assignAllWith': {
        'start': 0
    },
    'assignInAll': {
        'start': 0
    },
    'assignInAllWith': {
        'start': 0
    },
    'defaultsAll': {
        'start': 0
    },
    'defaultsDeepAll': {
        'start': 0
    },
    'invokeArgs': {
        'start': 2
    },
    'invokeArgsMap': {
        'start': 2
    },
    'mergeAll': {
        'start': 0
    },
    'mergeAllWith': {
        'start': 0
    },
    'partial': {
        'start': 1
    },
    'partialRight': {
        'start': 1
    },
    'without': {
        'start': 1
    },
    'zipAll': {
        'start': 0
    }
};
/** Used to identify methods which mutate arrays or objects. */ exports.mutate = {
    'array': {
        'fill': true,
        'pull': true,
        'pullAll': true,
        'pullAllBy': true,
        'pullAllWith': true,
        'pullAt': true,
        'remove': true,
        'reverse': true
    },
    'object': {
        'assign': true,
        'assignAll': true,
        'assignAllWith': true,
        'assignIn': true,
        'assignInAll': true,
        'assignInAllWith': true,
        'assignInWith': true,
        'assignWith': true,
        'defaults': true,
        'defaultsAll': true,
        'defaultsDeep': true,
        'defaultsDeepAll': true,
        'merge': true,
        'mergeAll': true,
        'mergeAllWith': true,
        'mergeWith': true
    },
    'set': {
        'set': true,
        'setWith': true,
        'unset': true,
        'update': true,
        'updateWith': true
    }
};
/** Used to map real names to their aliases. */ exports.realToAlias = (function() {
    var hasOwnProperty = Object.prototype.hasOwnProperty, object = exports.aliasToReal, result = {
    };
    for(var key in object){
        var value = object[key];
        if (hasOwnProperty.call(result, value)) result[value].push(key);
        else result[value] = [
            key
        ];
    }
    return result;
})();
/** Used to map method names to other names. */ exports.remap = {
    'assignAll': 'assign',
    'assignAllWith': 'assignWith',
    'assignInAll': 'assignIn',
    'assignInAllWith': 'assignInWith',
    'curryN': 'curry',
    'curryRightN': 'curryRight',
    'defaultsAll': 'defaults',
    'defaultsDeepAll': 'defaultsDeep',
    'findFrom': 'find',
    'findIndexFrom': 'findIndex',
    'findLastFrom': 'findLast',
    'findLastIndexFrom': 'findLastIndex',
    'getOr': 'get',
    'includesFrom': 'includes',
    'indexOfFrom': 'indexOf',
    'invokeArgs': 'invoke',
    'invokeArgsMap': 'invokeMap',
    'lastIndexOfFrom': 'lastIndexOf',
    'mergeAll': 'merge',
    'mergeAllWith': 'mergeWith',
    'padChars': 'pad',
    'padCharsEnd': 'padEnd',
    'padCharsStart': 'padStart',
    'propertyOf': 'get',
    'rangeStep': 'range',
    'rangeStepRight': 'rangeRight',
    'restFrom': 'rest',
    'spreadFrom': 'spread',
    'trimChars': 'trim',
    'trimCharsEnd': 'trimEnd',
    'trimCharsStart': 'trimStart',
    'zipAll': 'zip'
};
/** Used to track methods that skip fixing their arity. */ exports.skipFixed = {
    'castArray': true,
    'flow': true,
    'flowRight': true,
    'iteratee': true,
    'mixin': true,
    'rearg': true,
    'runInContext': true
};
/** Used to track methods that skip rearranging arguments. */ exports.skipRearg = {
    'add': true,
    'assign': true,
    'assignIn': true,
    'bind': true,
    'bindKey': true,
    'concat': true,
    'difference': true,
    'divide': true,
    'eq': true,
    'gt': true,
    'gte': true,
    'isEqual': true,
    'lt': true,
    'lte': true,
    'matchesProperty': true,
    'merge': true,
    'multiply': true,
    'overArgs': true,
    'partial': true,
    'partialRight': true,
    'propertyOf': true,
    'random': true,
    'range': true,
    'rangeRight': true,
    'subtract': true,
    'zip': true,
    'zipObject': true,
    'zipObjectDeep': true
};

},{}],"5xGmw":[function(require,module,exports) {
/**
 * The default argument placeholder value for methods.
 *
 * @type {Object}
 */ module.exports = {
};

},{}],"bmOKI":[function(require,module,exports) {
module.exports = {
    'ary': require('../ary'),
    'assign': require('../_baseAssign'),
    'clone': require('../clone'),
    'curry': require('../curry'),
    'forEach': require('../_arrayEach'),
    'isArray': require('../isArray'),
    'isError': require('../isError'),
    'isFunction': require('../isFunction'),
    'isWeakMap': require('../isWeakMap'),
    'iteratee': require('../iteratee'),
    'keys': require('../_baseKeys'),
    'rearg': require('../rearg'),
    'toInteger': require('../toInteger'),
    'toPath': require('../toPath')
};

},{"../ary":"f2hyg","../_baseAssign":"cVfMQ","../clone":"bclwq","../curry":"fPjKL","../_arrayEach":"h7Isi","../isArray":"kFpV8","../isError":"l1B3O","../isFunction":"hgsN6","../isWeakMap":"6dKuH","../iteratee":"9gD9e","../_baseKeys":"g9BND","../rearg":"4BLgP","../toInteger":"kQ4wG","../toPath":"fJgd9"}],"f2hyg":[function(require,module,exports) {
var createWrap = require('./_createWrap');
/** Used to compose bitmasks for function metadata. */ var WRAP_ARY_FLAG = 128;
/**
 * Creates a function that invokes `func`, with up to `n` arguments,
 * ignoring any additional arguments.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @param {number} [n=func.length] The arity cap.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
 * // => [6, 8, 10]
 */ function ary(func, n, guard) {
    n = guard ? undefined : n;
    n = func && n == null ? func.length : n;
    return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
}
module.exports = ary;

},{"./_createWrap":"J2bG5"}],"J2bG5":[function(require,module,exports) {
var baseSetData = require('./_baseSetData'), createBind = require('./_createBind'), createCurry = require('./_createCurry'), createHybrid = require('./_createHybrid'), createPartial = require('./_createPartial'), getData = require('./_getData'), mergeData = require('./_mergeData'), setData = require('./_setData'), setWrapToString = require('./_setWrapToString'), toInteger = require('./toInteger');
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *    1 - `_.bind`
 *    2 - `_.bindKey`
 *    4 - `_.curry` or `_.curryRight` of a bound function
 *    8 - `_.curry`
 *   16 - `_.curryRight`
 *   32 - `_.partial`
 *   64 - `_.partialRight`
 *  128 - `_.rearg`
 *  256 - `_.ary`
 *  512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
    if (!isBindKey && typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    var length = partials ? partials.length : 0;
    if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
    }
    ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
    arity = arity === undefined ? arity : toInteger(arity);
    length -= holders ? holders.length : 0;
    if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials, holdersRight = holders;
        partials = holders = undefined;
    }
    var data = isBindKey ? undefined : getData(func);
    var newData = [
        func,
        bitmask,
        thisArg,
        partials,
        holders,
        partialsRight,
        holdersRight,
        argPos,
        ary,
        arity
    ];
    if (data) mergeData(newData, data);
    func = newData[0];
    bitmask = newData[1];
    thisArg = newData[2];
    partials = newData[3];
    holders = newData[4];
    arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
    if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
    if (!bitmask || bitmask == WRAP_BIND_FLAG) var result = createBind(func, bitmask, thisArg);
    else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) result = createCurry(func, bitmask, arity);
    else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) result = createPartial(func, bitmask, thisArg, partials);
    else result = createHybrid.apply(undefined, newData);
    var setter = data ? baseSetData : setData;
    return setWrapToString(setter(result, newData), func, bitmask);
}
module.exports = createWrap;

},{"./_baseSetData":"l858Q","./_createBind":"e06an","./_createCurry":"2h9ZH","./_createHybrid":"8H9Hr","./_createPartial":"h2GTU","./_getData":"a0cy0","./_mergeData":"9eYbq","./_setData":"kAk3b","./_setWrapToString":"kGmdx","./toInteger":"kQ4wG"}],"l858Q":[function(require,module,exports) {
var identity = require('./identity'), metaMap = require('./_metaMap');
/**
 * The base implementation of `setData` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */ var baseSetData = !metaMap ? identity : function(func, data) {
    metaMap.set(func, data);
    return func;
};
module.exports = baseSetData;

},{"./identity":"gD41M","./_metaMap":"jr8J1"}],"gD41M":[function(require,module,exports) {
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */ function identity(value) {
    return value;
}
module.exports = identity;

},{}],"jr8J1":[function(require,module,exports) {
var WeakMap = require('./_WeakMap');
/** Used to store function metadata. */ var metaMap = WeakMap && new WeakMap;
module.exports = metaMap;

},{"./_WeakMap":"3Ssbw"}],"3Ssbw":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var WeakMap = getNative(root, 'WeakMap');
module.exports = WeakMap;

},{"./_getNative":"kCKt4","./_root":"11IUn"}],"kCKt4":[function(require,module,exports) {
var baseIsNative = require('./_baseIsNative'), getValue = require('./_getValue');
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
module.exports = getNative;

},{"./_baseIsNative":"l27Wa","./_getValue":"4cBDF"}],"l27Wa":[function(require,module,exports) {
var isFunction = require('./isFunction'), isMasked = require('./_isMasked'), isObject = require('./isObject'), toSource = require('./_toSource');
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) return false;
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
module.exports = baseIsNative;

},{"./isFunction":"hgsN6","./_isMasked":"eQIOI","./isObject":"euXL6","./_toSource":"lfgIG"}],"hgsN6":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObject = require('./isObject');
/** `Object#toString` result references. */ var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!isObject(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
module.exports = isFunction;

},{"./_baseGetTag":"0i2U0","./isObject":"euXL6"}],"0i2U0":[function(require,module,exports) {
var Symbol = require('./_Symbol'), getRawTag = require('./_getRawTag'), objectToString = require('./_objectToString');
/** `Object#toString` result references. */ var nullTag = '[object Null]', undefinedTag = '[object Undefined]';
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
module.exports = baseGetTag;

},{"./_Symbol":"xWebb","./_getRawTag":"dGPaO","./_objectToString":"aobqC"}],"xWebb":[function(require,module,exports) {
var root = require('./_root');
/** Built-in value references. */ var Symbol = root.Symbol;
module.exports = Symbol;

},{"./_root":"11IUn"}],"11IUn":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

},{"./_freeGlobal":"349pR"}],"349pR":[function(require,module,exports) {
var global = arguments[3];
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
module.exports = freeGlobal;

},{}],"dGPaO":[function(require,module,exports) {
var Symbol = require('./_Symbol');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
module.exports = getRawTag;

},{"./_Symbol":"xWebb"}],"aobqC":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
module.exports = objectToString;

},{}],"euXL6":[function(require,module,exports) {
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
}
module.exports = isObject;

},{}],"eQIOI":[function(require,module,exports) {
var coreJsData = require('./_coreJsData');
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
module.exports = isMasked;

},{"./_coreJsData":"6WqWC"}],"6WqWC":[function(require,module,exports) {
var root = require('./_root');
/** Used to detect overreaching core-js shims. */ var coreJsData = root['__core-js_shared__'];
module.exports = coreJsData;

},{"./_root":"11IUn"}],"lfgIG":[function(require,module,exports) {
/** Used for built-in method references. */ var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {
        }
        try {
            return func + '';
        } catch (e1) {
        }
    }
    return '';
}
module.exports = toSource;

},{}],"4cBDF":[function(require,module,exports) {
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
module.exports = getValue;

},{}],"e06an":[function(require,module,exports) {
var createCtor = require('./_createCtor'), root = require('./_root');
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1;
/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createBind(func, bitmask, thisArg) {
    var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
    function wrapper() {
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
    }
    return wrapper;
}
module.exports = createBind;

},{"./_createCtor":"aQnWE","./_root":"11IUn"}],"aQnWE":[function(require,module,exports) {
var baseCreate = require('./_baseCreate'), isObject = require('./isObject');
/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */ function createCtor(Ctor) {
    return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch(args.length){
            case 0:
                return new Ctor;
            case 1:
                return new Ctor(args[0]);
            case 2:
                return new Ctor(args[0], args[1]);
            case 3:
                return new Ctor(args[0], args[1], args[2]);
            case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
    };
}
module.exports = createCtor;

},{"./_baseCreate":"lQ1a5","./isObject":"euXL6"}],"lQ1a5":[function(require,module,exports) {
var isObject = require('./isObject');
/** Built-in value references. */ var objectCreate = Object.create;
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */ var baseCreate = function() {
    function object() {
    }
    return function(proto) {
        if (!isObject(proto)) return {
        };
        if (objectCreate) return objectCreate(proto);
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
    };
}();
module.exports = baseCreate;

},{"./isObject":"euXL6"}],"2h9ZH":[function(require,module,exports) {
var apply = require('./_apply'), createCtor = require('./_createCtor'), createHybrid = require('./_createHybrid'), createRecurry = require('./_createRecurry'), getHolder = require('./_getHolder'), replaceHolders = require('./_replaceHolders'), root = require('./_root');
/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createCurry(func, bitmask, arity) {
    var Ctor = createCtor(func);
    function wrapper() {
        var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
        while(index--)args[index] = arguments[index];
        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
        length -= holders.length;
        if (length < arity) return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return apply(fn, this, args);
    }
    return wrapper;
}
module.exports = createCurry;

},{"./_apply":"9Ynrd","./_createCtor":"aQnWE","./_createHybrid":"8H9Hr","./_createRecurry":"3zlc7","./_getHolder":"aRuqK","./_replaceHolders":"6Zso4","./_root":"11IUn"}],"9Ynrd":[function(require,module,exports) {
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */ function apply(func, thisArg, args) {
    switch(args.length){
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
}
module.exports = apply;

},{}],"8H9Hr":[function(require,module,exports) {
var composeArgs = require('./_composeArgs'), composeArgsRight = require('./_composeArgsRight'), countHolders = require('./_countHolders'), createCtor = require('./_createCtor'), createRecurry = require('./_createRecurry'), getHolder = require('./_getHolder'), reorder = require('./_reorder'), replaceHolders = require('./_replaceHolders'), root = require('./_root');
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_ARY_FLAG = 128, WRAP_FLIP_FLAG = 512;
/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
    var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
    function wrapper() {
        var length = arguments.length, args = Array(length), index = length;
        while(index--)args[index] = arguments[index];
        if (isCurried) var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
        if (partials) args = composeArgs(args, partials, holders, isCurried);
        if (partialsRight) args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        length -= holdersCount;
        if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
        }
        var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
        length = args.length;
        if (argPos) args = reorder(args, argPos);
        else if (isFlip && length > 1) args.reverse();
        if (isAry && ary < length) args.length = ary;
        if (this && this !== root && this instanceof wrapper) fn = Ctor || createCtor(fn);
        return fn.apply(thisBinding, args);
    }
    return wrapper;
}
module.exports = createHybrid;

},{"./_composeArgs":"9Cvjt","./_composeArgsRight":"76gde","./_countHolders":"kSFR6","./_createCtor":"aQnWE","./_createRecurry":"3zlc7","./_getHolder":"aRuqK","./_reorder":"cfFjO","./_replaceHolders":"6Zso4","./_root":"11IUn"}],"9Cvjt":[function(require,module,exports) {
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */ function composeArgs(args, partials, holders, isCurried) {
    var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
    while(++leftIndex < leftLength)result[leftIndex] = partials[leftIndex];
    while(++argsIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[holders[argsIndex]] = args[argsIndex];
    while(rangeLength--)result[leftIndex++] = args[argsIndex++];
    return result;
}
module.exports = composeArgs;

},{}],"76gde":[function(require,module,exports) {
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */ function composeArgsRight(args, partials, holders, isCurried) {
    var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
    while(++argsIndex < rangeLength)result[argsIndex] = args[argsIndex];
    var offset = argsIndex;
    while(++rightIndex < rightLength)result[offset + rightIndex] = partials[rightIndex];
    while(++holdersIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[offset + holders[holdersIndex]] = args[argsIndex++];
    return result;
}
module.exports = composeArgsRight;

},{}],"kSFR6":[function(require,module,exports) {
/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */ function countHolders(array, placeholder) {
    var length = array.length, result = 0;
    while(length--)if (array[length] === placeholder) ++result;
    return result;
}
module.exports = countHolders;

},{}],"3zlc7":[function(require,module,exports) {
var isLaziable = require('./_isLaziable'), setData = require('./_setData'), setWrapToString = require('./_setWrapToString');
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64;
/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
    var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
    bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
    bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
    if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
    var newData = [
        func,
        bitmask,
        thisArg,
        newPartials,
        newHolders,
        newPartialsRight,
        newHoldersRight,
        argPos,
        ary,
        arity
    ];
    var result = wrapFunc.apply(undefined, newData);
    if (isLaziable(func)) setData(result, newData);
    result.placeholder = placeholder;
    return setWrapToString(result, func, bitmask);
}
module.exports = createRecurry;

},{"./_isLaziable":"gKS8T","./_setData":"kAk3b","./_setWrapToString":"kGmdx"}],"gKS8T":[function(require,module,exports) {
var LazyWrapper = require('./_LazyWrapper'), getData = require('./_getData'), getFuncName = require('./_getFuncName'), lodash = require('./wrapperLodash');
/**
 * Checks if `func` has a lazy counterpart.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
 *  else `false`.
 */ function isLaziable(func) {
    var funcName = getFuncName(func), other = lodash[funcName];
    if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) return false;
    if (func === other) return true;
    var data = getData(other);
    return !!data && func === data[0];
}
module.exports = isLaziable;

},{"./_LazyWrapper":"gjW1q","./_getData":"a0cy0","./_getFuncName":"a51G4","./wrapperLodash":"5bOyh"}],"gjW1q":[function(require,module,exports) {
var baseCreate = require('./_baseCreate'), baseLodash = require('./_baseLodash');
/** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295;
/**
 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
 *
 * @private
 * @constructor
 * @param {*} value The value to wrap.
 */ function LazyWrapper(value) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__dir__ = 1;
    this.__filtered__ = false;
    this.__iteratees__ = [];
    this.__takeCount__ = MAX_ARRAY_LENGTH;
    this.__views__ = [];
}
// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype = baseCreate(baseLodash.prototype);
LazyWrapper.prototype.constructor = LazyWrapper;
module.exports = LazyWrapper;

},{"./_baseCreate":"lQ1a5","./_baseLodash":"QRzPV"}],"QRzPV":[function(require,module,exports) {
/**
 * The function whose prototype chain sequence wrappers inherit from.
 *
 * @private
 */ function baseLodash() {
// No operation performed.
}
module.exports = baseLodash;

},{}],"a0cy0":[function(require,module,exports) {
var metaMap = require('./_metaMap'), noop = require('./noop');
/**
 * Gets metadata for `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {*} Returns the metadata for `func`.
 */ var getData = !metaMap ? noop : function(func) {
    return metaMap.get(func);
};
module.exports = getData;

},{"./_metaMap":"jr8J1","./noop":"9LAbl"}],"9LAbl":[function(require,module,exports) {
/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */ function noop() {
// No operation performed.
}
module.exports = noop;

},{}],"a51G4":[function(require,module,exports) {
var realNames = require('./_realNames');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the name of `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {string} Returns the function name.
 */ function getFuncName(func) {
    var result = func.name + '', array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
    while(length--){
        var data = array[length], otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) return data.name;
    }
    return result;
}
module.exports = getFuncName;

},{"./_realNames":"3Y7kN"}],"3Y7kN":[function(require,module,exports) {
/** Used to lookup unminified function names. */ var realNames = {
};
module.exports = realNames;

},{}],"5bOyh":[function(require,module,exports) {
var LazyWrapper = require('./_LazyWrapper'), LodashWrapper = require('./_LodashWrapper'), baseLodash = require('./_baseLodash'), isArray = require('./isArray'), isObjectLike = require('./isObjectLike'), wrapperClone = require('./_wrapperClone');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates a `lodash` object which wraps `value` to enable implicit method
 * chain sequences. Methods that operate on and return arrays, collections,
 * and functions can be chained together. Methods that retrieve a single value
 * or may return a primitive value will automatically end the chain sequence
 * and return the unwrapped value. Otherwise, the value must be unwrapped
 * with `_#value`.
 *
 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
 * enabled using `_.chain`.
 *
 * The execution of chained methods is lazy, that is, it's deferred until
 * `_#value` is implicitly or explicitly called.
 *
 * Lazy evaluation allows several methods to support shortcut fusion.
 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
 * the creation of intermediate arrays and can greatly reduce the number of
 * iteratee executions. Sections of a chain sequence qualify for shortcut
 * fusion if the section is applied to an array and iteratees accept only
 * one argument. The heuristic for whether a section qualifies for shortcut
 * fusion is subject to change.
 *
 * Chaining is supported in custom builds as long as the `_#value` method is
 * directly or indirectly included in the build.
 *
 * In addition to lodash methods, wrappers have `Array` and `String` methods.
 *
 * The wrapper `Array` methods are:
 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
 *
 * The wrapper `String` methods are:
 * `replace` and `split`
 *
 * The wrapper methods that support shortcut fusion are:
 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
 *
 * The chainable wrapper methods are:
 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
 * `zipObject`, `zipObjectDeep`, and `zipWith`
 *
 * The wrapper methods that are **not** chainable by default are:
 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
 * `upperFirst`, `value`, and `words`
 *
 * @name _
 * @constructor
 * @category Seq
 * @param {*} value The value to wrap in a `lodash` instance.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var wrapped = _([1, 2, 3]);
 *
 * // Returns an unwrapped value.
 * wrapped.reduce(_.add);
 * // => 6
 *
 * // Returns a wrapped value.
 * var squares = wrapped.map(square);
 *
 * _.isArray(squares);
 * // => false
 *
 * _.isArray(squares.value());
 * // => true
 */ function lodash(value) {
    if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) return value;
        if (hasOwnProperty.call(value, '__wrapped__')) return wrapperClone(value);
    }
    return new LodashWrapper(value);
}
// Ensure wrappers are instances of `baseLodash`.
lodash.prototype = baseLodash.prototype;
lodash.prototype.constructor = lodash;
module.exports = lodash;

},{"./_LazyWrapper":"gjW1q","./_LodashWrapper":"j0ZLt","./_baseLodash":"QRzPV","./isArray":"kFpV8","./isObjectLike":"fDYnb","./_wrapperClone":"5GOCQ"}],"j0ZLt":[function(require,module,exports) {
var baseCreate = require('./_baseCreate'), baseLodash = require('./_baseLodash');
/**
 * The base constructor for creating `lodash` wrapper objects.
 *
 * @private
 * @param {*} value The value to wrap.
 * @param {boolean} [chainAll] Enable explicit method chain sequences.
 */ function LodashWrapper(value, chainAll) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__chain__ = !!chainAll;
    this.__index__ = 0;
    this.__values__ = undefined;
}
LodashWrapper.prototype = baseCreate(baseLodash.prototype);
LodashWrapper.prototype.constructor = LodashWrapper;
module.exports = LodashWrapper;

},{"./_baseCreate":"lQ1a5","./_baseLodash":"QRzPV"}],"kFpV8":[function(require,module,exports) {
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
module.exports = isArray;

},{}],"fDYnb":[function(require,module,exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
module.exports = isObjectLike;

},{}],"5GOCQ":[function(require,module,exports) {
var LazyWrapper = require('./_LazyWrapper'), LodashWrapper = require('./_LodashWrapper'), copyArray = require('./_copyArray');
/**
 * Creates a clone of `wrapper`.
 *
 * @private
 * @param {Object} wrapper The wrapper to clone.
 * @returns {Object} Returns the cloned wrapper.
 */ function wrapperClone(wrapper) {
    if (wrapper instanceof LazyWrapper) return wrapper.clone();
    var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
    result.__actions__ = copyArray(wrapper.__actions__);
    result.__index__ = wrapper.__index__;
    result.__values__ = wrapper.__values__;
    return result;
}
module.exports = wrapperClone;

},{"./_LazyWrapper":"gjW1q","./_LodashWrapper":"j0ZLt","./_copyArray":"65Sii"}],"65Sii":[function(require,module,exports) {
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */ function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while(++index < length)array[index] = source[index];
    return array;
}
module.exports = copyArray;

},{}],"kAk3b":[function(require,module,exports) {
var baseSetData = require('./_baseSetData'), shortOut = require('./_shortOut');
/**
 * Sets metadata for `func`.
 *
 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
 * period of time, it will trip its breaker and transition to an identity
 * function to avoid garbage collection pauses in V8. See
 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
 * for more details.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */ var setData = shortOut(baseSetData);
module.exports = setData;

},{"./_baseSetData":"l858Q","./_shortOut":"6y9Lx"}],"6y9Lx":[function(require,module,exports) {
/** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeNow = Date.now;
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */ function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
            if (++count >= HOT_COUNT) return arguments[0];
        } else count = 0;
        return func.apply(undefined, arguments);
    };
}
module.exports = shortOut;

},{}],"kGmdx":[function(require,module,exports) {
var getWrapDetails = require('./_getWrapDetails'), insertWrapDetails = require('./_insertWrapDetails'), setToString = require('./_setToString'), updateWrapDetails = require('./_updateWrapDetails');
/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */ function setWrapToString(wrapper, reference, bitmask) {
    var source = reference + '';
    return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
}
module.exports = setWrapToString;

},{"./_getWrapDetails":"liEYp","./_insertWrapDetails":"iIhn5","./_setToString":"lfgeu","./_updateWrapDetails":"3Uvbg"}],"liEYp":[function(require,module,exports) {
/** Used to match wrap detail comments. */ var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */ function getWrapDetails(source) {
    var match = source.match(reWrapDetails);
    return match ? match[1].split(reSplitDetails) : [];
}
module.exports = getWrapDetails;

},{}],"iIhn5":[function(require,module,exports) {
/** Used to match wrap detail comments. */ var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;
/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */ function insertWrapDetails(source, details) {
    var length = details.length;
    if (!length) return source;
    var lastIndex = length - 1;
    details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
    details = details.join(length > 2 ? ', ' : ' ');
    return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
}
module.exports = insertWrapDetails;

},{}],"lfgeu":[function(require,module,exports) {
var baseSetToString = require('./_baseSetToString'), shortOut = require('./_shortOut');
/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var setToString = shortOut(baseSetToString);
module.exports = setToString;

},{"./_baseSetToString":"5vMn3","./_shortOut":"6y9Lx"}],"5vMn3":[function(require,module,exports) {
var constant = require('./constant'), defineProperty = require('./_defineProperty'), identity = require('./identity');
/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
    });
};
module.exports = baseSetToString;

},{"./constant":"fYAeW","./_defineProperty":"fjMdD","./identity":"gD41M"}],"fYAeW":[function(require,module,exports) {
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */ function constant(value) {
    return function() {
        return value;
    };
}
module.exports = constant;

},{}],"fjMdD":[function(require,module,exports) {
var getNative = require('./_getNative');
var defineProperty = function() {
    try {
        var func = getNative(Object, 'defineProperty');
        func({
        }, '', {
        });
        return func;
    } catch (e) {
    }
}();
module.exports = defineProperty;

},{"./_getNative":"kCKt4"}],"3Uvbg":[function(require,module,exports) {
var arrayEach = require('./_arrayEach'), arrayIncludes = require('./_arrayIncludes');
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
/** Used to associate wrap methods with their bit flags. */ var wrapFlags = [
    [
        'ary',
        WRAP_ARY_FLAG
    ],
    [
        'bind',
        WRAP_BIND_FLAG
    ],
    [
        'bindKey',
        WRAP_BIND_KEY_FLAG
    ],
    [
        'curry',
        WRAP_CURRY_FLAG
    ],
    [
        'curryRight',
        WRAP_CURRY_RIGHT_FLAG
    ],
    [
        'flip',
        WRAP_FLIP_FLAG
    ],
    [
        'partial',
        WRAP_PARTIAL_FLAG
    ],
    [
        'partialRight',
        WRAP_PARTIAL_RIGHT_FLAG
    ],
    [
        'rearg',
        WRAP_REARG_FLAG
    ]
];
/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */ function updateWrapDetails(details, bitmask) {
    arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if (bitmask & pair[1] && !arrayIncludes(details, value)) details.push(value);
    });
    return details.sort();
}
module.exports = updateWrapDetails;

},{"./_arrayEach":"h7Isi","./_arrayIncludes":"2kAUv"}],"h7Isi":[function(require,module,exports) {
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */ function arrayEach(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (iteratee(array[index], index, array) === false) break;
    }
    return array;
}
module.exports = arrayEach;

},{}],"2kAUv":[function(require,module,exports) {
var baseIndexOf = require('./_baseIndexOf');
/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */ function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
}
module.exports = arrayIncludes;

},{"./_baseIndexOf":"d84ME"}],"d84ME":[function(require,module,exports) {
var baseFindIndex = require('./_baseFindIndex'), baseIsNaN = require('./_baseIsNaN'), strictIndexOf = require('./_strictIndexOf');
/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
}
module.exports = baseIndexOf;

},{"./_baseFindIndex":"4y31n","./_baseIsNaN":"hCQOi","./_strictIndexOf":"jjNnP"}],"4y31n":[function(require,module,exports) {
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while(fromRight ? index-- : ++index < length){
        if (predicate(array[index], index, array)) return index;
    }
    return -1;
}
module.exports = baseFindIndex;

},{}],"hCQOi":[function(require,module,exports) {
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */ function baseIsNaN(value) {
    return value !== value;
}
module.exports = baseIsNaN;

},{}],"jjNnP":[function(require,module,exports) {
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1, length = array.length;
    while(++index < length){
        if (array[index] === value) return index;
    }
    return -1;
}
module.exports = strictIndexOf;

},{}],"aRuqK":[function(require,module,exports) {
/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */ function getHolder(func) {
    var object = func;
    return object.placeholder;
}
module.exports = getHolder;

},{}],"cfFjO":[function(require,module,exports) {
var copyArray = require('./_copyArray'), isIndex = require('./_isIndex');
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */ function reorder(array, indexes) {
    var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
    while(length--){
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
    }
    return array;
}
module.exports = reorder;

},{"./_copyArray":"65Sii","./_isIndex":"cM06B"}],"cM06B":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
module.exports = isIndex;

},{}],"6Zso4":[function(require,module,exports) {
/** Used as the internal argument placeholder. */ var PLACEHOLDER = '__lodash_placeholder__';
/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */ function replaceHolders(array, placeholder) {
    var index = -1, length = array.length, resIndex = 0, result = [];
    while(++index < length){
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
        }
    }
    return result;
}
module.exports = replaceHolders;

},{}],"h2GTU":[function(require,module,exports) {
var apply = require('./_apply'), createCtor = require('./_createCtor'), root = require('./_root');
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1;
/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */ function createPartial(func, bitmask, thisArg, partials) {
    var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
    function wrapper() {
        var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        while(++leftIndex < leftLength)args[leftIndex] = partials[leftIndex];
        while(argsLength--)args[leftIndex++] = arguments[++argsIndex];
        return apply(fn, isBind ? thisArg : this, args);
    }
    return wrapper;
}
module.exports = createPartial;

},{"./_apply":"9Ynrd","./_createCtor":"aQnWE","./_root":"11IUn"}],"9eYbq":[function(require,module,exports) {
var composeArgs = require('./_composeArgs'), composeArgsRight = require('./_composeArgsRight'), replaceHolders = require('./_replaceHolders');
/** Used as the internal argument placeholder. */ var PLACEHOLDER = '__lodash_placeholder__';
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * Merges the function metadata of `source` into `data`.
 *
 * Merging metadata reduces the number of wrappers used to invoke a function.
 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
 * may be applied regardless of execution order. Methods like `_.ary` and
 * `_.rearg` modify function arguments, making the order in which they are
 * executed important, preventing the merging of metadata. However, we make
 * an exception for a safe combined case where curried functions have `_.ary`
 * and or `_.rearg` applied.
 *
 * @private
 * @param {Array} data The destination metadata.
 * @param {Array} source The source metadata.
 * @returns {Array} Returns `data`.
 */ function mergeData(data, source) {
    var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
    var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
    // Exit early if metadata can't be merged.
    if (!(isCommon || isCombo)) return data;
    // Use source `thisArg` if available.
    if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
    }
    // Compose partial arguments.
    var value = source[3];
    if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
    }
    // Compose partial right arguments.
    value = source[5];
    if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
    }
    // Use source `argPos` if available.
    value = source[7];
    if (value) data[7] = value;
    // Use source `ary` if it's smaller.
    if (srcBitmask & WRAP_ARY_FLAG) data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
    // Use source `arity` if one is not provided.
    if (data[9] == null) data[9] = source[9];
    // Use source `func` and merge bitmasks.
    data[0] = source[0];
    data[1] = newBitmask;
    return data;
}
module.exports = mergeData;

},{"./_composeArgs":"9Cvjt","./_composeArgsRight":"76gde","./_replaceHolders":"6Zso4"}],"kQ4wG":[function(require,module,exports) {
var toFinite = require('./toFinite');
/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */ function toInteger(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
}
module.exports = toInteger;

},{"./toFinite":"jM0Iy"}],"jM0Iy":[function(require,module,exports) {
var toNumber = require('./toNumber');
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_INTEGER = 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */ function toFinite(value) {
    if (!value) return value === 0 ? value : 0;
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
}
module.exports = toFinite;

},{"./toNumber":"fGewd"}],"fGewd":[function(require,module,exports) {
var baseTrim = require('./_baseTrim'), isObject = require('./isObject'), isSymbol = require('./isSymbol');
/** Used as references for various `Number` constants. */ var NAN = 0 / 0;
/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */ function toNumber(value) {
    if (typeof value == 'number') return value;
    if (isSymbol(value)) return NAN;
    if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
    }
    if (typeof value != 'string') return value === 0 ? value : +value;
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
module.exports = toNumber;

},{"./_baseTrim":"1Bcdw","./isObject":"euXL6","./isSymbol":"bepog"}],"1Bcdw":[function(require,module,exports) {
var trimmedEndIndex = require('./_trimmedEndIndex');
/** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */ function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
}
module.exports = baseTrim;

},{"./_trimmedEndIndex":"dmbhm"}],"dmbhm":[function(require,module,exports) {
/** Used to match a single whitespace character. */ var reWhitespace = /\s/;
/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */ function trimmedEndIndex(string) {
    var index = string.length;
    while(index-- && reWhitespace.test(string.charAt(index)));
    return index;
}
module.exports = trimmedEndIndex;

},{}],"bepog":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
module.exports = isSymbol;

},{"./_baseGetTag":"0i2U0","./isObjectLike":"fDYnb"}],"cVfMQ":[function(require,module,exports) {
var copyObject = require('./_copyObject'), keys = require('./keys');
/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
}
module.exports = baseAssign;

},{"./_copyObject":"7Xk60","./keys":"5kkas"}],"7Xk60":[function(require,module,exports) {
var assignValue = require('./_assignValue'), baseAssignValue = require('./_baseAssignValue');
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */ function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {
    });
    var index = -1, length = props.length;
    while(++index < length){
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        if (newValue === undefined) newValue = source[key];
        if (isNew) baseAssignValue(object, key, newValue);
        else assignValue(object, key, newValue);
    }
    return object;
}
module.exports = copyObject;

},{"./_assignValue":"hUbr0","./_baseAssignValue":"1HqjL"}],"hUbr0":[function(require,module,exports) {
var baseAssignValue = require('./_baseAssignValue'), eq = require('./eq');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
module.exports = assignValue;

},{"./_baseAssignValue":"1HqjL","./eq":"6gSTc"}],"1HqjL":[function(require,module,exports) {
var defineProperty = require('./_defineProperty');
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
    });
    else object[key] = value;
}
module.exports = baseAssignValue;

},{"./_defineProperty":"fjMdD"}],"6gSTc":[function(require,module,exports) {
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
module.exports = eq;

},{}],"5kkas":[function(require,module,exports) {
var arrayLikeKeys = require('./_arrayLikeKeys'), baseKeys = require('./_baseKeys'), isArrayLike = require('./isArrayLike');
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
module.exports = keys;

},{"./_arrayLikeKeys":"hybpk","./_baseKeys":"g9BND","./isArrayLike":"1oaHP"}],"hybpk":[function(require,module,exports) {
var baseTimes = require('./_baseTimes'), isArguments = require('./isArguments'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isIndex = require('./_isIndex'), isTypedArray = require('./isTypedArray');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    isIndex(key, length)))) result.push(key);
    return result;
}
module.exports = arrayLikeKeys;

},{"./_baseTimes":"5FnyB","./isArguments":"lmClg","./isArray":"kFpV8","./isBuffer":"5iXbq","./_isIndex":"cM06B","./isTypedArray":"kkG0l"}],"5FnyB":[function(require,module,exports) {
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n)result[index] = iteratee(index);
    return result;
}
module.exports = baseTimes;

},{}],"lmClg":[function(require,module,exports) {
var baseIsArguments = require('./_baseIsArguments'), isObjectLike = require('./isObjectLike');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = baseIsArguments(function() {
    return arguments;
}()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
module.exports = isArguments;

},{"./_baseIsArguments":"9iHTo","./isObjectLike":"fDYnb"}],"9iHTo":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
}
module.exports = baseIsArguments;

},{"./_baseGetTag":"0i2U0","./isObjectLike":"fDYnb"}],"5iXbq":[function(require,module,exports) {
var root = require('./_root'), stubFalse = require('./stubFalse');
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;

},{"./_root":"11IUn","./stubFalse":"jgg0s"}],"jgg0s":[function(require,module,exports) {
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
module.exports = stubFalse;

},{}],"kkG0l":[function(require,module,exports) {
var baseIsTypedArray = require('./_baseIsTypedArray'), baseUnary = require('./_baseUnary'), nodeUtil = require('./_nodeUtil');
/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;

},{"./_baseIsTypedArray":"iqfDQ","./_baseUnary":"g0s9S","./_nodeUtil":"b47VH"}],"iqfDQ":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isLength = require('./isLength'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {
};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
module.exports = baseIsTypedArray;

},{"./_baseGetTag":"0i2U0","./isLength":"g0eIg","./isObjectLike":"fDYnb"}],"g0eIg":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
module.exports = isLength;

},{}],"g0s9S":[function(require,module,exports) {
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
module.exports = baseUnary;

},{}],"b47VH":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {
    }
}();
module.exports = nodeUtil;

},{"./_freeGlobal":"349pR"}],"g9BND":[function(require,module,exports) {
var isPrototype = require('./_isPrototype'), nativeKeys = require('./_nativeKeys');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!isPrototype(object)) return nativeKeys(object);
    var result = [];
    for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);
    return result;
}
module.exports = baseKeys;

},{"./_isPrototype":"6PYDZ","./_nativeKeys":"4jxWd"}],"6PYDZ":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
module.exports = isPrototype;

},{}],"4jxWd":[function(require,module,exports) {
var overArg = require('./_overArg');
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;

},{"./_overArg":"bQdhf"}],"bQdhf":[function(require,module,exports) {
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
module.exports = overArg;

},{}],"1oaHP":[function(require,module,exports) {
var isFunction = require('./isFunction'), isLength = require('./isLength');
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
module.exports = isArrayLike;

},{"./isFunction":"hgsN6","./isLength":"g0eIg"}],"bclwq":[function(require,module,exports) {
var baseClone = require('./_baseClone');
/** Used to compose bitmasks for cloning. */ var CLONE_SYMBOLS_FLAG = 4;
/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */ function clone(value) {
    return baseClone(value, CLONE_SYMBOLS_FLAG);
}
module.exports = clone;

},{"./_baseClone":"am7Et"}],"am7Et":[function(require,module,exports) {
var Stack = require('./_Stack'), arrayEach = require('./_arrayEach'), assignValue = require('./_assignValue'), baseAssign = require('./_baseAssign'), baseAssignIn = require('./_baseAssignIn'), cloneBuffer = require('./_cloneBuffer'), copyArray = require('./_copyArray'), copySymbols = require('./_copySymbols'), copySymbolsIn = require('./_copySymbolsIn'), getAllKeys = require('./_getAllKeys'), getAllKeysIn = require('./_getAllKeysIn'), getTag = require('./_getTag'), initCloneArray = require('./_initCloneArray'), initCloneByTag = require('./_initCloneByTag'), initCloneObject = require('./_initCloneObject'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isMap = require('./isMap'), isObject = require('./isObject'), isSet = require('./isSet'), keys = require('./keys'), keysIn = require('./keysIn');
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {
};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */ function baseClone(value, bitmask, customizer, key1, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) result = object ? customizer(value, key1, object, stack) : customizer(value);
    if (result !== undefined) return result;
    if (!isObject(value)) return value;
    var isArr = isArray(value);
    if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) return copyArray(value, result);
    } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) return cloneBuffer(value, isDeep);
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {
            } : initCloneObject(value);
            if (!isDeep) return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        } else {
            if (!cloneableTags[tag]) return object ? value : {
            };
            result = initCloneByTag(value, tag, isDeep);
        }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack);
    var stacked = stack.get(value);
    if (stacked) return stacked;
    stack.set(value, result);
    if (isSet(value)) value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
    else if (isMap(value)) value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function(subValue, key) {
        if (props) {
            key = subValue;
            subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
}
module.exports = baseClone;

},{"./_Stack":"dftg4","./_arrayEach":"h7Isi","./_assignValue":"hUbr0","./_baseAssign":"cVfMQ","./_baseAssignIn":"5b8Mp","./_cloneBuffer":"5BeSP","./_copyArray":"65Sii","./_copySymbols":"9n3lt","./_copySymbolsIn":"hJOHB","./_getAllKeys":"8Kki6","./_getAllKeysIn":"4stk9","./_getTag":"bG1PE","./_initCloneArray":"ctyNI","./_initCloneByTag":"b5A24","./_initCloneObject":"gbRWl","./isArray":"kFpV8","./isBuffer":"5iXbq","./isMap":"19oUs","./isObject":"euXL6","./isSet":"dTDei","./keys":"5kkas","./keysIn":"iUI0U"}],"dftg4":[function(require,module,exports) {
var ListCache = require('./_ListCache'), stackClear = require('./_stackClear'), stackDelete = require('./_stackDelete'), stackGet = require('./_stackGet'), stackHas = require('./_stackHas'), stackSet = require('./_stackSet');
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
}
// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;

},{"./_ListCache":"hAKMT","./_stackClear":"ijn01","./_stackDelete":"gbSdR","./_stackGet":"es5S6","./_stackHas":"hYfRX","./_stackSet":"iPZfa"}],"hAKMT":[function(require,module,exports) {
var listCacheClear = require('./_listCacheClear'), listCacheDelete = require('./_listCacheDelete'), listCacheGet = require('./_listCacheGet'), listCacheHas = require('./_listCacheHas'), listCacheSet = require('./_listCacheSet');
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;

},{"./_listCacheClear":"hgUYk","./_listCacheDelete":"3OxlN","./_listCacheGet":"9eM5i","./_listCacheHas":"gvOcg","./_listCacheSet":"eB1OV"}],"hgUYk":[function(require,module,exports) {
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
module.exports = listCacheClear;

},{}],"3OxlN":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/** Built-in value references. */ var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else splice.call(data, index, 1);
    --this.size;
    return true;
}
module.exports = listCacheDelete;

},{"./_assocIndexOf":"1J3EE"}],"1J3EE":[function(require,module,exports) {
var eq = require('./eq');
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) return length;
    }
    return -1;
}
module.exports = assocIndexOf;

},{"./eq":"6gSTc"}],"9eM5i":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
module.exports = listCacheGet;

},{"./_assocIndexOf":"1J3EE"}],"gvOcg":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
module.exports = listCacheHas;

},{"./_assocIndexOf":"1J3EE"}],"eB1OV":[function(require,module,exports) {
var assocIndexOf = require('./_assocIndexOf');
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
module.exports = listCacheSet;

},{"./_assocIndexOf":"1J3EE"}],"ijn01":[function(require,module,exports) {
var ListCache = require('./_ListCache');
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
}
module.exports = stackClear;

},{"./_ListCache":"hAKMT"}],"gbSdR":[function(require,module,exports) {
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function stackDelete(key) {
    var data = this.__data__, result = data['delete'](key);
    this.size = data.size;
    return result;
}
module.exports = stackDelete;

},{}],"es5S6":[function(require,module,exports) {
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function stackGet(key) {
    return this.__data__.get(key);
}
module.exports = stackGet;

},{}],"hYfRX":[function(require,module,exports) {
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function stackHas(key) {
    return this.__data__.has(key);
}
module.exports = stackHas;

},{}],"iPZfa":[function(require,module,exports) {
var ListCache = require('./_ListCache'), Map = require('./_Map'), MapCache = require('./_MapCache');
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
module.exports = stackSet;

},{"./_ListCache":"hAKMT","./_Map":"6yVwu","./_MapCache":"j7pxA"}],"6yVwu":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Map = getNative(root, 'Map');
module.exports = Map;

},{"./_getNative":"kCKt4","./_root":"11IUn"}],"j7pxA":[function(require,module,exports) {
var mapCacheClear = require('./_mapCacheClear'), mapCacheDelete = require('./_mapCacheDelete'), mapCacheGet = require('./_mapCacheGet'), mapCacheHas = require('./_mapCacheHas'), mapCacheSet = require('./_mapCacheSet');
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;

},{"./_mapCacheClear":"ds24B","./_mapCacheDelete":"q2iOv","./_mapCacheGet":"8F6m5","./_mapCacheHas":"kVBTF","./_mapCacheSet":"69lPZ"}],"ds24B":[function(require,module,exports) {
var Hash = require('./_Hash'), ListCache = require('./_ListCache'), Map = require('./_Map');
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
    };
}
module.exports = mapCacheClear;

},{"./_Hash":"gp3n4","./_ListCache":"hAKMT","./_Map":"6yVwu"}],"gp3n4":[function(require,module,exports) {
var hashClear = require('./_hashClear'), hashDelete = require('./_hashDelete'), hashGet = require('./_hashGet'), hashHas = require('./_hashHas'), hashSet = require('./_hashSet');
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;

},{"./_hashClear":"7Bme4","./_hashDelete":"fCndF","./_hashGet":"e3vpg","./_hashHas":"1s7AW","./_hashSet":"4TCKZ"}],"7Bme4":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {
    };
    this.size = 0;
}
module.exports = hashClear;

},{"./_nativeCreate":"8pQd6"}],"8pQd6":[function(require,module,exports) {
var getNative = require('./_getNative');
/* Built-in method references that are verified to be native. */ var nativeCreate = getNative(Object, 'create');
module.exports = nativeCreate;

},{"./_getNative":"kCKt4"}],"fCndF":[function(require,module,exports) {
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = hashDelete;

},{}],"e3vpg":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
module.exports = hashGet;

},{"./_nativeCreate":"8pQd6"}],"1s7AW":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
module.exports = hashHas;

},{"./_nativeCreate":"8pQd6"}],"4TCKZ":[function(require,module,exports) {
var nativeCreate = require('./_nativeCreate');
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
module.exports = hashSet;

},{"./_nativeCreate":"8pQd6"}],"q2iOv":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = mapCacheDelete;

},{"./_getMapData":"g3Xzr"}],"g3Xzr":[function(require,module,exports) {
var isKeyable = require('./_isKeyable');
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
module.exports = getMapData;

},{"./_isKeyable":"4w1bD"}],"4w1bD":[function(require,module,exports) {
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
module.exports = isKeyable;

},{}],"8F6m5":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
module.exports = mapCacheGet;

},{"./_getMapData":"g3Xzr"}],"kVBTF":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
module.exports = mapCacheHas;

},{"./_getMapData":"g3Xzr"}],"69lPZ":[function(require,module,exports) {
var getMapData = require('./_getMapData');
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
module.exports = mapCacheSet;

},{"./_getMapData":"g3Xzr"}],"5b8Mp":[function(require,module,exports) {
var copyObject = require('./_copyObject'), keysIn = require('./keysIn');
/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
}
module.exports = baseAssignIn;

},{"./_copyObject":"7Xk60","./keysIn":"iUI0U"}],"iUI0U":[function(require,module,exports) {
var arrayLikeKeys = require('./_arrayLikeKeys'), baseKeysIn = require('./_baseKeysIn'), isArrayLike = require('./isArrayLike');
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */ function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}
module.exports = keysIn;

},{"./_arrayLikeKeys":"hybpk","./_baseKeysIn":"9eoPQ","./isArrayLike":"1oaHP"}],"9eoPQ":[function(require,module,exports) {
var isObject = require('./isObject'), isPrototype = require('./_isPrototype'), nativeKeysIn = require('./_nativeKeysIn');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeysIn(object) {
    if (!isObject(object)) return nativeKeysIn(object);
    var isProto = isPrototype(object), result = [];
    for(var key in object)if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
    return result;
}
module.exports = baseKeysIn;

},{"./isObject":"euXL6","./_isPrototype":"6PYDZ","./_nativeKeysIn":"6d8Ad"}],"6d8Ad":[function(require,module,exports) {
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function nativeKeysIn(object) {
    var result = [];
    if (object != null) for(var key in Object(object))result.push(key);
    return result;
}
module.exports = nativeKeysIn;

},{}],"5BeSP":[function(require,module,exports) {
var root = require('./_root');
/** Detect free variable `exports`. */ var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */ function cloneBuffer(buffer, isDeep) {
    if (isDeep) return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
module.exports = cloneBuffer;

},{"./_root":"11IUn"}],"9n3lt":[function(require,module,exports) {
var copyObject = require('./_copyObject'), getSymbols = require('./_getSymbols');
/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
}
module.exports = copySymbols;

},{"./_copyObject":"7Xk60","./_getSymbols":"eW8Tx"}],"eW8Tx":[function(require,module,exports) {
var arrayFilter = require('./_arrayFilter'), stubArray = require('./stubArray');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) return [];
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
    });
};
module.exports = getSymbols;

},{"./_arrayFilter":"7JFuv","./stubArray":"glJ5Q"}],"7JFuv":[function(require,module,exports) {
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */ function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while(++index < length){
        var value = array[index];
        if (predicate(value, index, array)) result[resIndex++] = value;
    }
    return result;
}
module.exports = arrayFilter;

},{}],"glJ5Q":[function(require,module,exports) {
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */ function stubArray() {
    return [];
}
module.exports = stubArray;

},{}],"hJOHB":[function(require,module,exports) {
var copyObject = require('./_copyObject'), getSymbolsIn = require('./_getSymbolsIn');
/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
}
module.exports = copySymbolsIn;

},{"./_copyObject":"7Xk60","./_getSymbolsIn":"1RDQB"}],"1RDQB":[function(require,module,exports) {
var arrayPush = require('./_arrayPush'), getPrototype = require('./_getPrototype'), getSymbols = require('./_getSymbols'), stubArray = require('./stubArray');
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    var result = [];
    while(object){
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
    }
    return result;
};
module.exports = getSymbolsIn;

},{"./_arrayPush":"jhdIB","./_getPrototype":"b9B0W","./_getSymbols":"eW8Tx","./stubArray":"glJ5Q"}],"jhdIB":[function(require,module,exports) {
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */ function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while(++index < length)array[offset + index] = values[index];
    return array;
}
module.exports = arrayPush;

},{}],"b9B0W":[function(require,module,exports) {
var overArg = require('./_overArg');
/** Built-in value references. */ var getPrototype = overArg(Object.getPrototypeOf, Object);
module.exports = getPrototype;

},{"./_overArg":"bQdhf"}],"8Kki6":[function(require,module,exports) {
var baseGetAllKeys = require('./_baseGetAllKeys'), getSymbols = require('./_getSymbols'), keys = require('./keys');
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
}
module.exports = getAllKeys;

},{"./_baseGetAllKeys":"7FSz8","./_getSymbols":"eW8Tx","./keys":"5kkas"}],"7FSz8":[function(require,module,exports) {
var arrayPush = require('./_arrayPush'), isArray = require('./isArray');
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}
module.exports = baseGetAllKeys;

},{"./_arrayPush":"jhdIB","./isArray":"kFpV8"}],"4stk9":[function(require,module,exports) {
var baseGetAllKeys = require('./_baseGetAllKeys'), getSymbolsIn = require('./_getSymbolsIn'), keysIn = require('./keysIn');
/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
}
module.exports = getAllKeysIn;

},{"./_baseGetAllKeys":"7FSz8","./_getSymbolsIn":"1RDQB","./keysIn":"iUI0U"}],"bG1PE":[function(require,module,exports) {
var DataView = require('./_DataView'), Map = require('./_Map'), Promise = require('./_Promise'), Set = require('./_Set'), WeakMap = require('./_WeakMap'), baseGetTag = require('./_baseGetTag'), toSource = require('./_toSource');
/** `Object#toString` result references. */ var mapTag = '[object Map]', objectTag = '[object Object]', promiseTag = '[object Promise]', setTag = '[object Set]', weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ var getTag = baseGetTag;
// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) getTag = function(value) {
    var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
    if (ctorString) switch(ctorString){
        case dataViewCtorString:
            return dataViewTag;
        case mapCtorString:
            return mapTag;
        case promiseCtorString:
            return promiseTag;
        case setCtorString:
            return setTag;
        case weakMapCtorString:
            return weakMapTag;
    }
    return result;
};
module.exports = getTag;

},{"./_DataView":"6de8c","./_Map":"6yVwu","./_Promise":"ebS8G","./_Set":"4PD4x","./_WeakMap":"3Ssbw","./_baseGetTag":"0i2U0","./_toSource":"lfgIG"}],"6de8c":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var DataView = getNative(root, 'DataView');
module.exports = DataView;

},{"./_getNative":"kCKt4","./_root":"11IUn"}],"ebS8G":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Promise = getNative(root, 'Promise');
module.exports = Promise;

},{"./_getNative":"kCKt4","./_root":"11IUn"}],"4PD4x":[function(require,module,exports) {
var getNative = require('./_getNative'), root = require('./_root');
/* Built-in method references that are verified to be native. */ var Set = getNative(root, 'Set');
module.exports = Set;

},{"./_getNative":"kCKt4","./_root":"11IUn"}],"ctyNI":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */ function initCloneArray(array) {
    var length = array.length, result = new array.constructor(length);
    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
    }
    return result;
}
module.exports = initCloneArray;

},{}],"b5A24":[function(require,module,exports) {
var cloneArrayBuffer = require('./_cloneArrayBuffer'), cloneDataView = require('./_cloneDataView'), cloneRegExp = require('./_cloneRegExp'), cloneSymbol = require('./_cloneSymbol'), cloneTypedArray = require('./_cloneTypedArray');
/** `Object#toString` result references. */ var boolTag = '[object Boolean]', dateTag = '[object Date]', mapTag = '[object Map]', numberTag = '[object Number]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch(tag){
        case arrayBufferTag:
            return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
            return new Ctor(+object);
        case dataViewTag:
            return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
            return cloneTypedArray(object, isDeep);
        case mapTag:
            return new Ctor;
        case numberTag:
        case stringTag:
            return new Ctor(object);
        case regexpTag:
            return cloneRegExp(object);
        case setTag:
            return new Ctor;
        case symbolTag:
            return cloneSymbol(object);
    }
}
module.exports = initCloneByTag;

},{"./_cloneArrayBuffer":"lwepG","./_cloneDataView":"aJQUw","./_cloneRegExp":"bBlSZ","./_cloneSymbol":"kJ0j6","./_cloneTypedArray":"24CE7"}],"lwepG":[function(require,module,exports) {
var Uint8Array = require('./_Uint8Array');
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */ function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
}
module.exports = cloneArrayBuffer;

},{"./_Uint8Array":"kckJG"}],"kckJG":[function(require,module,exports) {
var root = require('./_root');
/** Built-in value references. */ var Uint8Array = root.Uint8Array;
module.exports = Uint8Array;

},{"./_root":"11IUn"}],"aJQUw":[function(require,module,exports) {
var cloneArrayBuffer = require('./_cloneArrayBuffer');
/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */ function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
module.exports = cloneDataView;

},{"./_cloneArrayBuffer":"lwepG"}],"bBlSZ":[function(require,module,exports) {
/** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */ function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
}
module.exports = cloneRegExp;

},{}],"kJ0j6":[function(require,module,exports) {
var Symbol = require('./_Symbol');
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */ function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {
    };
}
module.exports = cloneSymbol;

},{"./_Symbol":"xWebb"}],"24CE7":[function(require,module,exports) {
var cloneArrayBuffer = require('./_cloneArrayBuffer');
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */ function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
module.exports = cloneTypedArray;

},{"./_cloneArrayBuffer":"lwepG"}],"gbRWl":[function(require,module,exports) {
var baseCreate = require('./_baseCreate'), getPrototype = require('./_getPrototype'), isPrototype = require('./_isPrototype');
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {
    };
}
module.exports = initCloneObject;

},{"./_baseCreate":"lQ1a5","./_getPrototype":"b9B0W","./_isPrototype":"6PYDZ"}],"19oUs":[function(require,module,exports) {
var baseIsMap = require('./_baseIsMap'), baseUnary = require('./_baseUnary'), nodeUtil = require('./_nodeUtil');
/* Node.js helper references. */ var nodeIsMap = nodeUtil && nodeUtil.isMap;
/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */ var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
module.exports = isMap;

},{"./_baseIsMap":"eTrFu","./_baseUnary":"g0s9S","./_nodeUtil":"b47VH"}],"eTrFu":[function(require,module,exports) {
var getTag = require('./_getTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var mapTag = '[object Map]';
/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */ function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag;
}
module.exports = baseIsMap;

},{"./_getTag":"bG1PE","./isObjectLike":"fDYnb"}],"dTDei":[function(require,module,exports) {
var baseIsSet = require('./_baseIsSet'), baseUnary = require('./_baseUnary'), nodeUtil = require('./_nodeUtil');
/* Node.js helper references. */ var nodeIsSet = nodeUtil && nodeUtil.isSet;
/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */ var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
module.exports = isSet;

},{"./_baseIsSet":"fTKwU","./_baseUnary":"g0s9S","./_nodeUtil":"b47VH"}],"fTKwU":[function(require,module,exports) {
var getTag = require('./_getTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var setTag = '[object Set]';
/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */ function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag;
}
module.exports = baseIsSet;

},{"./_getTag":"bG1PE","./isObjectLike":"fDYnb"}],"fPjKL":[function(require,module,exports) {
var createWrap = require('./_createWrap');
/** Used to compose bitmasks for function metadata. */ var WRAP_CURRY_FLAG = 8;
/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */ function curry(func, arity, guard) {
    arity = guard ? undefined : arity;
    var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
    result.placeholder = curry.placeholder;
    return result;
}
// Assign default placeholders.
curry.placeholder = {
};
module.exports = curry;

},{"./_createWrap":"J2bG5"}],"l1B3O":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObjectLike = require('./isObjectLike'), isPlainObject = require('./isPlainObject');
/** `Object#toString` result references. */ var domExcTag = '[object DOMException]', errorTag = '[object Error]';
/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */ function isError(value) {
    if (!isObjectLike(value)) return false;
    var tag = baseGetTag(value);
    return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
}
module.exports = isError;

},{"./_baseGetTag":"0i2U0","./isObjectLike":"fDYnb","./isPlainObject":"eBABE"}],"eBABE":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), getPrototype = require('./_getPrototype'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var objectTag = '[object Object]';
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */ function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
    var proto = getPrototype(value);
    if (proto === null) return true;
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
module.exports = isPlainObject;

},{"./_baseGetTag":"0i2U0","./_getPrototype":"b9B0W","./isObjectLike":"fDYnb"}],"6dKuH":[function(require,module,exports) {
var getTag = require('./_getTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var weakMapTag = '[object WeakMap]';
/**
 * Checks if `value` is classified as a `WeakMap` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
 * @example
 *
 * _.isWeakMap(new WeakMap);
 * // => true
 *
 * _.isWeakMap(new Map);
 * // => false
 */ function isWeakMap(value) {
    return isObjectLike(value) && getTag(value) == weakMapTag;
}
module.exports = isWeakMap;

},{"./_getTag":"bG1PE","./isObjectLike":"fDYnb"}],"9gD9e":[function(require,module,exports) {
var baseClone = require('./_baseClone'), baseIteratee = require('./_baseIteratee');
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1;
/**
 * Creates a function that invokes `func` with the arguments of the created
 * function. If `func` is a property name, the created function returns the
 * property value for a given element. If `func` is an array or object, the
 * created function returns `true` for elements that contain the equivalent
 * source properties, otherwise it returns `false`.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Util
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @returns {Function} Returns the callback.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, _.iteratee(['user', 'fred']));
 * // => [{ 'user': 'fred', 'age': 40 }]
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, _.iteratee('user'));
 * // => ['barney', 'fred']
 *
 * // Create custom iteratee shorthands.
 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
 *     return func.test(string);
 *   };
 * });
 *
 * _.filter(['abc', 'def'], /ef/);
 * // => ['def']
 */ function iteratee(func) {
    return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
}
module.exports = iteratee;

},{"./_baseClone":"am7Et","./_baseIteratee":"dZOiR"}],"dZOiR":[function(require,module,exports) {
var baseMatches = require('./_baseMatches'), baseMatchesProperty = require('./_baseMatchesProperty'), identity = require('./identity'), isArray = require('./isArray'), property = require('./property');
/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */ function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') return value;
    if (value == null) return identity;
    if (typeof value == 'object') return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    return property(value);
}
module.exports = baseIteratee;

},{"./_baseMatches":"ekXFb","./_baseMatchesProperty":"kq8V3","./identity":"gD41M","./isArray":"kFpV8","./property":"i2lWi"}],"ekXFb":[function(require,module,exports) {
var baseIsMatch = require('./_baseIsMatch'), getMatchData = require('./_getMatchData'), matchesStrictComparable = require('./_matchesStrictComparable');
/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
    };
}
module.exports = baseMatches;

},{"./_baseIsMatch":"cRvjN","./_getMatchData":"4lson","./_matchesStrictComparable":"loNil"}],"cRvjN":[function(require,module,exports) {
var Stack = require('./_Stack'), baseIsEqual = require('./_baseIsEqual');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */ function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length = index, noCustomizer = !customizer;
    if (object == null) return !length;
    object = Object(object);
    while(index--){
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
    }
    while(++index < length){
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) return false;
        } else {
            var stack = new Stack;
            if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
            if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
        }
    }
    return true;
}
module.exports = baseIsMatch;

},{"./_Stack":"dftg4","./_baseIsEqual":"gCWQL"}],"gCWQL":[function(require,module,exports) {
var baseIsEqualDeep = require('./_baseIsEqualDeep'), isObjectLike = require('./isObjectLike');
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */ function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) return true;
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}
module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":"c1lD8","./isObjectLike":"fDYnb"}],"c1lD8":[function(require,module,exports) {
var Stack = require('./_Stack'), equalArrays = require('./_equalArrays'), equalByTag = require('./_equalByTag'), equalObjects = require('./_equalObjects'), getTag = require('./_getTag'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isTypedArray = require('./isTypedArray');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', objectTag = '[object Object]';
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) return false;
        objIsArr = true;
        objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
        if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
    }
    if (!isSameTag) return false;
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
module.exports = baseIsEqualDeep;

},{"./_Stack":"dftg4","./_equalArrays":"3htr2","./_equalByTag":"6umoV","./_equalObjects":"a03np","./_getTag":"bG1PE","./isArray":"kFpV8","./isBuffer":"5iXbq","./isTypedArray":"kkG0l"}],"3htr2":[function(require,module,exports) {
var SetCache = require('./_SetCache'), arraySome = require('./_arraySome'), cacheHas = require('./_cacheHas');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
    stack.set(array, other);
    stack.set(other, array);
    // Ignore non-index properties.
    while(++index < arrLength){
        var arrValue = array[index], othValue1 = other[index];
        if (customizer) var compared = isPartial ? customizer(othValue1, arrValue, index, other, array, stack) : customizer(arrValue, othValue1, index, array, other, stack);
        if (compared !== undefined) {
            if (compared) continue;
            result = false;
            break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
            })) {
                result = false;
                break;
            }
        } else if (!(arrValue === othValue1 || equalFunc(arrValue, othValue1, bitmask, customizer, stack))) {
            result = false;
            break;
        }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
}
module.exports = equalArrays;

},{"./_SetCache":"g0RS0","./_arraySome":"df8z7","./_cacheHas":"gEHFB"}],"g0RS0":[function(require,module,exports) {
var MapCache = require('./_MapCache'), setCacheAdd = require('./_setCacheAdd'), setCacheHas = require('./_setCacheHas');
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */ function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache;
    while(++index < length)this.add(values[index]);
}
// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
module.exports = SetCache;

},{"./_MapCache":"j7pxA","./_setCacheAdd":"dfpGu","./_setCacheHas":"90Y2k"}],"dfpGu":[function(require,module,exports) {
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */ function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
}
module.exports = setCacheAdd;

},{}],"90Y2k":[function(require,module,exports) {
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */ function setCacheHas(value) {
    return this.__data__.has(value);
}
module.exports = setCacheHas;

},{}],"df8z7":[function(require,module,exports) {
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */ function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (predicate(array[index], index, array)) return true;
    }
    return false;
}
module.exports = arraySome;

},{}],"gEHFB":[function(require,module,exports) {
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function cacheHas(cache, key) {
    return cache.has(key);
}
module.exports = cacheHas;

},{}],"6umoV":[function(require,module,exports) {
var Symbol = require('./_Symbol'), Uint8Array = require('./_Uint8Array'), eq = require('./eq'), equalArrays = require('./_equalArrays'), mapToArray = require('./_mapToArray'), setToArray = require('./_setToArray');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */ var boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', mapTag = '[object Map]', numberTag = '[object Number]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]';
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch(tag){
        case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
            object = object.buffer;
            other = other.buffer;
        case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) return false;
            return true;
        case boolTag:
        case dateTag:
        case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);
        case errorTag:
            return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + '';
        case mapTag:
            var convert = mapToArray;
        case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) return false;
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) return stacked == other;
            bitmask |= COMPARE_UNORDERED_FLAG;
            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;
        case symbolTag:
            if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
    }
    return false;
}
module.exports = equalByTag;

},{"./_Symbol":"xWebb","./_Uint8Array":"kckJG","./eq":"6gSTc","./_equalArrays":"3htr2","./_mapToArray":"8D0Eg","./_setToArray":"2kMNQ"}],"8D0Eg":[function(require,module,exports) {
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */ function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
        result[++index] = [
            key,
            value
        ];
    });
    return result;
}
module.exports = mapToArray;

},{}],"2kMNQ":[function(require,module,exports) {
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */ function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
        result[++index] = value;
    });
    return result;
}
module.exports = setToArray;

},{}],"a03np":[function(require,module,exports) {
var getAllKeys = require('./_getAllKeys');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) return false;
    var index = objLength;
    while(index--){
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) return objStacked == other && othStacked == object;
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while(++index < objLength){
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
        }
        skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) result = false;
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
}
module.exports = equalObjects;

},{"./_getAllKeys":"8Kki6"}],"4lson":[function(require,module,exports) {
var isStrictComparable = require('./_isStrictComparable'), keys = require('./keys');
/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */ function getMatchData(object) {
    var result = keys(object), length = result.length;
    while(length--){
        var key = result[length], value = object[key];
        result[length] = [
            key,
            value,
            isStrictComparable(value)
        ];
    }
    return result;
}
module.exports = getMatchData;

},{"./_isStrictComparable":"6xl9M","./keys":"5kkas"}],"6xl9M":[function(require,module,exports) {
var isObject = require('./isObject');
/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */ function isStrictComparable(value) {
    return value === value && !isObject(value);
}
module.exports = isStrictComparable;

},{"./isObject":"euXL6"}],"loNil":[function(require,module,exports) {
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function matchesStrictComparable(key, srcValue) {
    return function(object) {
        if (object == null) return false;
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
}
module.exports = matchesStrictComparable;

},{}],"kq8V3":[function(require,module,exports) {
var baseIsEqual = require('./_baseIsEqual'), get = require('./get'), hasIn = require('./hasIn'), isKey = require('./_isKey'), isStrictComparable = require('./_isStrictComparable'), matchesStrictComparable = require('./_matchesStrictComparable'), toKey = require('./_toKey');
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
    return function(object) {
        var objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
}
module.exports = baseMatchesProperty;

},{"./_baseIsEqual":"gCWQL","./get":"efq1u","./hasIn":"k4DDz","./_isKey":"6I3o3","./_isStrictComparable":"6xl9M","./_matchesStrictComparable":"loNil","./_toKey":"30fQL"}],"efq1u":[function(require,module,exports) {
var baseGet = require('./_baseGet');
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */ function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
}
module.exports = get;

},{"./_baseGet":"3E2uu"}],"3E2uu":[function(require,module,exports) {
var castPath = require('./_castPath'), toKey = require('./_toKey');
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */ function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0, length = path.length;
    while(object != null && index < length)object = object[toKey(path[index++])];
    return index && index == length ? object : undefined;
}
module.exports = baseGet;

},{"./_castPath":"l9t5O","./_toKey":"30fQL"}],"l9t5O":[function(require,module,exports) {
var isArray = require('./isArray'), isKey = require('./_isKey'), stringToPath = require('./_stringToPath'), toString = require('./toString');
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */ function castPath(value, object) {
    if (isArray(value)) return value;
    return isKey(value, object) ? [
        value
    ] : stringToPath(toString(value));
}
module.exports = castPath;

},{"./isArray":"kFpV8","./_isKey":"6I3o3","./_stringToPath":"jkXOW","./toString":"lRX1t"}],"6I3o3":[function(require,module,exports) {
var isArray = require('./isArray'), isSymbol = require('./isSymbol');
/** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */ function isKey(value, object) {
    if (isArray(value)) return false;
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) return true;
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
module.exports = isKey;

},{"./isArray":"kFpV8","./isSymbol":"bepog"}],"jkXOW":[function(require,module,exports) {
var memoizeCapped = require('./_memoizeCapped');
/** Used to match property names within property paths. */ var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */ var stringToPath = memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */ ) result.push('');
    string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
});
module.exports = stringToPath;

},{"./_memoizeCapped":"1GBEl"}],"1GBEl":[function(require,module,exports) {
var memoize = require('./memoize');
/** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */ function memoizeCapped(func) {
    var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
        return key;
    });
    var cache = result.cache;
    return result;
}
module.exports = memoizeCapped;

},{"./memoize":"k514Y"}],"k514Y":[function(require,module,exports) {
var MapCache = require('./_MapCache');
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */ function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) return cache.get(key);
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
    };
    memoized.cache = new (memoize.Cache || MapCache);
    return memoized;
}
// Expose `MapCache`.
memoize.Cache = MapCache;
module.exports = memoize;

},{"./_MapCache":"j7pxA"}],"lRX1t":[function(require,module,exports) {
var baseToString = require('./_baseToString');
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */ function toString(value) {
    return value == null ? '' : baseToString(value);
}
module.exports = toString;

},{"./_baseToString":"hGQ1A"}],"hGQ1A":[function(require,module,exports) {
var Symbol = require('./_Symbol'), arrayMap = require('./_arrayMap'), isArray = require('./isArray'), isSymbol = require('./isSymbol');
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */ function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') return value;
    if (isArray(value)) // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
    if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : '';
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
module.exports = baseToString;

},{"./_Symbol":"xWebb","./_arrayMap":"62kux","./isArray":"kFpV8","./isSymbol":"bepog"}],"62kux":[function(require,module,exports) {
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while(++index < length)result[index] = iteratee(array[index], index, array);
    return result;
}
module.exports = arrayMap;

},{}],"30fQL":[function(require,module,exports) {
var isSymbol = require('./isSymbol');
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */ function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) return value;
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
module.exports = toKey;

},{"./isSymbol":"bepog"}],"k4DDz":[function(require,module,exports) {
var baseHasIn = require('./_baseHasIn'), hasPath = require('./_hasPath');
/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */ function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
}
module.exports = hasIn;

},{"./_baseHasIn":"gGFBF","./_hasPath":"iTR3P"}],"gGFBF":[function(require,module,exports) {
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */ function baseHasIn(object, key) {
    return object != null && key in Object(object);
}
module.exports = baseHasIn;

},{}],"iTR3P":[function(require,module,exports) {
var castPath = require('./_castPath'), isArguments = require('./isArguments'), isArray = require('./isArray'), isIndex = require('./_isIndex'), isLength = require('./isLength'), toKey = require('./_toKey');
/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */ function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1, length = path.length, result = false;
    while(++index < length){
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) break;
        object = object[key];
    }
    if (result || ++index != length) return result;
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}
module.exports = hasPath;

},{"./_castPath":"l9t5O","./isArguments":"lmClg","./isArray":"kFpV8","./_isIndex":"cM06B","./isLength":"g0eIg","./_toKey":"30fQL"}],"i2lWi":[function(require,module,exports) {
var baseProperty = require('./_baseProperty'), basePropertyDeep = require('./_basePropertyDeep'), isKey = require('./_isKey'), toKey = require('./_toKey');
/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */ function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}
module.exports = property;

},{"./_baseProperty":"3F0SW","./_basePropertyDeep":"i2nAK","./_isKey":"6I3o3","./_toKey":"30fQL"}],"3F0SW":[function(require,module,exports) {
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function baseProperty(key) {
    return function(object) {
        return object == null ? undefined : object[key];
    };
}
module.exports = baseProperty;

},{}],"i2nAK":[function(require,module,exports) {
var baseGet = require('./_baseGet');
/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyDeep(path) {
    return function(object) {
        return baseGet(object, path);
    };
}
module.exports = basePropertyDeep;

},{"./_baseGet":"3E2uu"}],"4BLgP":[function(require,module,exports) {
var createWrap = require('./_createWrap'), flatRest = require('./_flatRest');
/** Used to compose bitmasks for function metadata. */ var WRAP_REARG_FLAG = 256;
/**
 * Creates a function that invokes `func` with arguments arranged according
 * to the specified `indexes` where the argument value at the first index is
 * provided as the first argument, the argument value at the second index is
 * provided as the second argument, and so on.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to rearrange arguments for.
 * @param {...(number|number[])} indexes The arranged argument indexes.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var rearged = _.rearg(function(a, b, c) {
 *   return [a, b, c];
 * }, [2, 0, 1]);
 *
 * rearged('b', 'c', 'a')
 * // => ['a', 'b', 'c']
 */ var rearg = flatRest(function(func, indexes) {
    return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
});
module.exports = rearg;

},{"./_createWrap":"J2bG5","./_flatRest":"4tA2k"}],"4tA2k":[function(require,module,exports) {
var flatten = require('./flatten'), overRest = require('./_overRest'), setToString = require('./_setToString');
/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */ function flatRest(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
}
module.exports = flatRest;

},{"./flatten":"80UTO","./_overRest":"adVCS","./_setToString":"lfgeu"}],"80UTO":[function(require,module,exports) {
var baseFlatten = require('./_baseFlatten');
/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */ function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
}
module.exports = flatten;

},{"./_baseFlatten":"a4FWj"}],"a4FWj":[function(require,module,exports) {
var arrayPush = require('./_arrayPush'), isFlattenable = require('./_isFlattenable');
/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */ function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while(++index < length){
        var value = array[index];
        if (depth > 0 && predicate(value)) {
            if (depth > 1) // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
            else arrayPush(result, value);
        } else if (!isStrict) result[result.length] = value;
    }
    return result;
}
module.exports = baseFlatten;

},{"./_arrayPush":"jhdIB","./_isFlattenable":"3l1sp"}],"3l1sp":[function(require,module,exports) {
var Symbol = require('./_Symbol'), isArguments = require('./isArguments'), isArray = require('./isArray');
/** Built-in value references. */ var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;
/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */ function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}
module.exports = isFlattenable;

},{"./_Symbol":"xWebb","./isArguments":"lmClg","./isArray":"kFpV8"}],"adVCS":[function(require,module,exports) {
var apply = require('./_apply');
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */ function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while(++index < length)array[index] = args[start + index];
        index = -1;
        var otherArgs = Array(start + 1);
        while(++index < start)otherArgs[index] = args[index];
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
    };
}
module.exports = overRest;

},{"./_apply":"9Ynrd"}],"fJgd9":[function(require,module,exports) {
var arrayMap = require('./_arrayMap'), copyArray = require('./_copyArray'), isArray = require('./isArray'), isSymbol = require('./isSymbol'), stringToPath = require('./_stringToPath'), toKey = require('./_toKey'), toString = require('./toString');
/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */ function toPath(value) {
    if (isArray(value)) return arrayMap(value, toKey);
    return isSymbol(value) ? [
        value
    ] : copyArray(stringToPath(toString(value)));
}
module.exports = toPath;

},{"./_arrayMap":"62kux","./_copyArray":"65Sii","./isArray":"kFpV8","./isSymbol":"bepog","./_stringToPath":"jkXOW","./_toKey":"30fQL","./toString":"lRX1t"}],"blLPP":[function(require,module,exports) {
var apply = require('./_apply'), baseRest = require('./_baseRest'), customDefaultsMerge = require('./_customDefaultsMerge'), mergeWith = require('./mergeWith');
/**
 * This method is like `_.defaults` except that it recursively assigns
 * default properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaults
 * @example
 *
 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
 * // => { 'a': { 'b': 2, 'c': 3 } }
 */ var defaultsDeep = baseRest(function(args) {
    args.push(undefined, customDefaultsMerge);
    return apply(mergeWith, undefined, args);
});
module.exports = defaultsDeep;

},{"./_apply":"9Ynrd","./_baseRest":"kB6B3","./_customDefaultsMerge":"1lhXX","./mergeWith":"6wKiR"}],"kB6B3":[function(require,module,exports) {
var identity = require('./identity'), overRest = require('./_overRest'), setToString = require('./_setToString');
/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */ function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
}
module.exports = baseRest;

},{"./identity":"gD41M","./_overRest":"adVCS","./_setToString":"lfgeu"}],"1lhXX":[function(require,module,exports) {
var baseMerge = require('./_baseMerge'), isObject = require('./isObject');
/**
 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
 * objects into destination objects that are passed thru.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to merge.
 * @param {Object} object The parent object of `objValue`.
 * @param {Object} source The parent object of `srcValue`.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 * @returns {*} Returns the value to assign.
 */ function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
    if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
    }
    return objValue;
}
module.exports = customDefaultsMerge;

},{"./_baseMerge":"9D3SU","./isObject":"euXL6"}],"9D3SU":[function(require,module,exports) {
var Stack = require('./_Stack'), assignMergeValue = require('./_assignMergeValue'), baseFor = require('./_baseFor'), baseMergeDeep = require('./_baseMergeDeep'), isObject = require('./isObject'), keysIn = require('./keysIn'), safeGet = require('./_safeGet');
/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) return;
    baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
            if (newValue === undefined) newValue = srcValue;
            assignMergeValue(object, key, newValue);
        }
    }, keysIn);
}
module.exports = baseMerge;

},{"./_Stack":"dftg4","./_assignMergeValue":"2Fejd","./_baseFor":"ezhil","./_baseMergeDeep":"e6oUe","./isObject":"euXL6","./keysIn":"iUI0U","./_safeGet":"fBKj2"}],"2Fejd":[function(require,module,exports) {
var baseAssignValue = require('./_baseAssignValue'), eq = require('./eq');
/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
module.exports = assignMergeValue;

},{"./_baseAssignValue":"1HqjL","./eq":"6gSTc"}],"ezhil":[function(require,module,exports) {
var createBaseFor = require('./_createBaseFor');
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */ var baseFor = createBaseFor();
module.exports = baseFor;

},{"./_createBaseFor":"dPu0h"}],"dPu0h":[function(require,module,exports) {
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */ function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while(length--){
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) break;
        }
        return object;
    };
}
module.exports = createBaseFor;

},{}],"e6oUe":[function(require,module,exports) {
var assignMergeValue = require('./_assignMergeValue'), cloneBuffer = require('./_cloneBuffer'), cloneTypedArray = require('./_cloneTypedArray'), copyArray = require('./_copyArray'), initCloneObject = require('./_initCloneObject'), isArguments = require('./isArguments'), isArray = require('./isArray'), isArrayLikeObject = require('./isArrayLikeObject'), isBuffer = require('./isBuffer'), isFunction = require('./isFunction'), isObject = require('./isObject'), isPlainObject = require('./isPlainObject'), isTypedArray = require('./isTypedArray'), safeGet = require('./_safeGet'), toPlainObject = require('./toPlainObject');
/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
    if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;
    if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) newValue = objValue;
            else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
            else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
            } else newValue = [];
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) newValue = toPlainObject(objValue);
            else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
        } else isCommon = false;
    }
    if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
    }
    assignMergeValue(object, key, newValue);
}
module.exports = baseMergeDeep;

},{"./_assignMergeValue":"2Fejd","./_cloneBuffer":"5BeSP","./_cloneTypedArray":"24CE7","./_copyArray":"65Sii","./_initCloneObject":"gbRWl","./isArguments":"lmClg","./isArray":"kFpV8","./isArrayLikeObject":"51JJt","./isBuffer":"5iXbq","./isFunction":"hgsN6","./isObject":"euXL6","./isPlainObject":"eBABE","./isTypedArray":"kkG0l","./_safeGet":"fBKj2","./toPlainObject":"9G3c9"}],"51JJt":[function(require,module,exports) {
var isArrayLike = require('./isArrayLike'), isObjectLike = require('./isObjectLike');
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */ function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
}
module.exports = isArrayLikeObject;

},{"./isArrayLike":"1oaHP","./isObjectLike":"fDYnb"}],"fBKj2":[function(require,module,exports) {
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') return;
    if (key == '__proto__') return;
    return object[key];
}
module.exports = safeGet;

},{}],"9G3c9":[function(require,module,exports) {
var copyObject = require('./_copyObject'), keysIn = require('./keysIn');
/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */ function toPlainObject(value) {
    return copyObject(value, keysIn(value));
}
module.exports = toPlainObject;

},{"./_copyObject":"7Xk60","./keysIn":"iUI0U"}],"6wKiR":[function(require,module,exports) {
var baseMerge = require('./_baseMerge'), createAssigner = require('./_createAssigner');
/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
    baseMerge(object, source, srcIndex, customizer);
});
module.exports = mergeWith;

},{"./_baseMerge":"9D3SU","./_createAssigner":"b6uH1"}],"b6uH1":[function(require,module,exports) {
var baseRest = require('./_baseRest'), isIterateeCall = require('./_isIterateeCall');
/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */ function createAssigner(assigner) {
    return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
        }
        object = Object(object);
        while(++index < length){
            var source = sources[index];
            if (source) assigner(object, source, index, customizer);
        }
        return object;
    });
}
module.exports = createAssigner;

},{"./_baseRest":"kB6B3","./_isIterateeCall":"f0FzR"}],"f0FzR":[function(require,module,exports) {
var eq = require('./eq'), isArrayLike = require('./isArrayLike'), isIndex = require('./_isIndex'), isObject = require('./isObject');
/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */ function isIterateeCall(value, index, object) {
    if (!isObject(object)) return false;
    var type = typeof index;
    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) return eq(object[index], value);
    return false;
}
module.exports = isIterateeCall;

},{"./eq":"6gSTc","./isArrayLike":"1oaHP","./_isIndex":"cM06B","./isObject":"euXL6"}],"8TVWM":[function(require,module,exports) {
var baseIsEqual = require('./_baseIsEqual');
/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */ function isEqual(value, other) {
    return baseIsEqual(value, other);
}
module.exports = isEqual;

},{"./_baseIsEqual":"gCWQL"}],"b2UFz":[function(require,module,exports) {
var baseDifference = require('./_baseDifference'), baseFlatten = require('./_baseFlatten'), baseRest = require('./_baseRest'), isArrayLikeObject = require('./isArrayLikeObject'), last = require('./last');
/**
 * This method is like `_.difference` except that it accepts `comparator`
 * which is invoked to compare elements of `array` to `values`. The order and
 * references of result values are determined by the first array. The comparator
 * is invoked with two arguments: (arrVal, othVal).
 *
 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 *
 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
 * // => [{ 'x': 2, 'y': 1 }]
 */ var differenceWith = baseRest(function(array, values) {
    var comparator = last(values);
    if (isArrayLikeObject(comparator)) comparator = undefined;
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
});
module.exports = differenceWith;

},{"./_baseDifference":"8oc8u","./_baseFlatten":"a4FWj","./_baseRest":"kB6B3","./isArrayLikeObject":"51JJt","./last":"dNVrs"}],"8oc8u":[function(require,module,exports) {
var SetCache = require('./_SetCache'), arrayIncludes = require('./_arrayIncludes'), arrayIncludesWith = require('./_arrayIncludesWith'), arrayMap = require('./_arrayMap'), baseUnary = require('./_baseUnary'), cacheHas = require('./_cacheHas');
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */ function baseDifference(array, values, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
    if (!length) return result;
    if (iteratee) values = arrayMap(values, baseUnary(iteratee));
    if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
    }
    outer: while(++index < length){
        var value = array[index], computed = iteratee == null ? value : iteratee(value);
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while(valuesIndex--){
                if (values[valuesIndex] === computed) continue outer;
            }
            result.push(value);
        } else if (!includes(values, computed, comparator)) result.push(value);
    }
    return result;
}
module.exports = baseDifference;

},{"./_SetCache":"g0RS0","./_arrayIncludes":"2kAUv","./_arrayIncludesWith":"dam5C","./_arrayMap":"62kux","./_baseUnary":"g0s9S","./_cacheHas":"gEHFB"}],"dam5C":[function(require,module,exports) {
/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */ function arrayIncludesWith(array, value, comparator) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (comparator(value, array[index])) return true;
    }
    return false;
}
module.exports = arrayIncludesWith;

},{}],"dNVrs":[function(require,module,exports) {
/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */ function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
}
module.exports = last;

},{}],"ahINw":[function(require,module,exports) {
var global = arguments[3];
/**
 * vis-data
 * http://visjs.org/
 *
 * Manage unstructured data using DataSet. Add, update, and remove data, and listen for changes in the data.
 *
 * @version 7.1.2
 * @date    2021-01-08T20:37:11.601Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */ !function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define([
        "exports"
    ], e) : e((t = "undefined" != typeof globalThis ? globalThis : t || self).vis = t.vis || {
    });
}(this, function(t1) {
    var e1 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {
    };
    function r1(t) {
        var e = {
            exports: {
            }
        };
        return t(e, e.exports), e.exports;
    }
    var n1 = function(t) {
        return t && t.Math == Math && t;
    }, i1 = n1("object" == typeof globalThis && globalThis) || n1("object" == typeof window && window) || n1("object" == typeof self && self) || n1("object" == typeof e1 && e1) || function() {
        return this;
    }() || Function("return this")(), o1 = function(t) {
        try {
            return !!t();
        } catch (t2) {
            return !0;
        }
    }, a1 = !o1(function() {
        return 7 != Object.defineProperty({
        }, 1, {
            get: function() {
                return 7;
            }
        })[1];
    }), u1 = {
    }.propertyIsEnumerable, s1 = Object.getOwnPropertyDescriptor, c1 = {
        f: s1 && !u1.call({
            1: 2
        }, 1) ? function(t) {
            var e = s1(this, t);
            return !!e && e.enumerable;
        } : u1
    }, f1 = function(t, e) {
        return {
            enumerable: !(1 & t),
            configurable: !(2 & t),
            writable: !(4 & t),
            value: e
        };
    }, l1 = {
    }.toString, h1 = function(t) {
        return l1.call(t).slice(8, -1);
    }, p1 = "".split, v1 = o1(function() {
        return !Object("z").propertyIsEnumerable(0);
    }) ? function(t) {
        return "String" == h1(t) ? p1.call(t, "") : Object(t);
    } : Object, d1 = function(t) {
        if (null == t) throw TypeError("Can't call method on " + t);
        return t;
    }, y1 = function(t) {
        return v1(d1(t));
    }, g1 = function(t) {
        return "object" == typeof t ? null !== t : "function" == typeof t;
    }, m1 = function(t, e) {
        if (!g1(t)) return t;
        var r, n;
        if (e && "function" == typeof (r = t.toString) && !g1(n = r.call(t))) return n;
        if ("function" == typeof (r = t.valueOf) && !g1(n = r.call(t))) return n;
        if (!e && "function" == typeof (r = t.toString) && !g1(n = r.call(t))) return n;
        throw TypeError("Can't convert object to primitive value");
    }, b1 = {
    }.hasOwnProperty, _1 = function(t, e) {
        return b1.call(t, e);
    }, w1 = i1.document, E1 = g1(w1) && g1(w1.createElement), O1 = function(t) {
        return E1 ? w1.createElement(t) : {
        };
    }, T1 = !a1 && !o1(function() {
        return 7 != Object.defineProperty(O1("div"), "a", {
            get: function() {
                return 7;
            }
        }).a;
    }), S1 = Object.getOwnPropertyDescriptor, x1 = {
        f: a1 ? S1 : function(t, e) {
            if (t = y1(t), e = m1(e, !0), T1) try {
                return S1(t, e);
            } catch (t3) {
            }
            if (_1(t, e)) return f1(!c1.f.call(t, e), t[e]);
        }
    }, k1 = /#|\.prototype\./, A1 = function(t, e) {
        var r = I1[j1(t)];
        return r == D || r != P && ("function" == typeof e ? o1(e) : !!e);
    }, j1 = A1.normalize = function(t) {
        return String(t).replace(k1, ".").toLowerCase();
    }, I1 = A1.data = {
    }, P = A1.NATIVE = "N", D = A1.POLYFILL = "P", L = A1, C = {
    }, R = function(t) {
        if ("function" != typeof t) throw TypeError(String(t) + " is not a function");
        return t;
    }, M = function(t, e, r2) {
        if (R(t), void 0 === e) return t;
        switch(r2){
            case 0:
                return function() {
                    return t.call(e);
                };
            case 1:
                return function(r) {
                    return t.call(e, r);
                };
            case 2:
                return function(r, n) {
                    return t.call(e, r, n);
                };
            case 3:
                return function(r, n, i) {
                    return t.call(e, r, n, i);
                };
        }
        return function() {
            return t.apply(e, arguments);
        };
    }, N = function(t) {
        if (!g1(t)) throw TypeError(String(t) + " is not an object");
        return t;
    }, F = Object.defineProperty, z = {
        f: a1 ? F : function(t, e, r) {
            if (N(t), e = m1(e, !0), N(r), T1) try {
                return F(t, e, r);
            } catch (t4) {
            }
            if ("get" in r || "set" in r) throw TypeError("Accessors not supported");
            return "value" in r && (t[e] = r.value), t;
        }
    }, q = a1 ? function(t, e, r) {
        return z.f(t, e, f1(1, r));
    } : function(t, e, r) {
        return t[e] = r, t;
    }, Y = x1.f, U = function(t) {
        var e2 = function(e, r, n) {
            if (this instanceof t) {
                switch(arguments.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(e);
                    case 2:
                        return new t(e, r);
                }
                return new t(e, r, n);
            }
            return t.apply(this, arguments);
        };
        return e2.prototype = t.prototype, e2;
    }, X = function(t, e) {
        var r, n, o, a, u, s, c, f, l = t.target, h = t.global, p = t.stat, v = t.proto, d = h ? i1 : p ? i1[l] : (i1[l] || {
        }).prototype, y = h ? C : C[l] || (C[l] = {
        }), g = y.prototype;
        for(o in e)r = !L(h ? o : l + (p ? "." : "#") + o, t.forced) && d && _1(d, o), u = y[o], r && (s = t.noTargetGet ? (f = Y(d, o)) && f.value : d[o]), a = r && s ? s : e[o], r && typeof u == typeof a || (c = t.bind && r ? M(a, i1) : t.wrap && r ? U(a) : v && "function" == typeof a ? M(Function.call, a) : a, (t.sham || a && a.sham || u && u.sham) && q(c, "sham", !0), y[o] = c, v && (_1(C, n = l + "Prototype") || q(C, n, {
        }), C[n][o] = a, t.real && g && !g[o] && q(g, o, a)));
    }, V = Array.isArray || function(t) {
        return "Array" == h1(t);
    }, W = Math.ceil, G = Math.floor, H = function(t) {
        return isNaN(t = +t) ? 0 : (t > 0 ? G : W)(t);
    }, $ = Math.min, J = function(t) {
        return t > 0 ? $(H(t), 9007199254740991) : 0;
    }, Q = function(t, e, r, n, i, o, a, u) {
        for(var s, c = i, f = 0, l = !!a && M(a, u, 3); f < n;){
            if (f in r) {
                if (s = l ? l(r[f], f, e) : r[f], o > 0 && V(s)) c = Q(t, e, s, J(s.length), c, o - 1) - 1;
                else {
                    if (c >= 9007199254740991) throw TypeError("Exceed the acceptable array length");
                    t[c] = s;
                }
                c++;
            }
            f++;
        }
        return c;
    }, B = Q, K = function(t) {
        return Object(d1(t));
    }, Z = "__core-js_shared__", tt = i1[Z] || function(t, e) {
        try {
            q(i1, t, e);
        } catch (r) {
            i1[t] = e;
        }
        return e;
    }(Z, {
    }), et = r1(function(t) {
        (t.exports = function(t, e) {
            return tt[t] || (tt[t] = void 0 !== e ? e : {
            });
        })("versions", []).push({
            version: "3.7.0",
            mode: "pure",
            copyright: "© 2020 Denis Pushkarev (zloirock.ru)"
        });
    }), rt = 0, nt = Math.random(), it = function(t) {
        return "Symbol(" + String(void 0 === t ? "" : t) + ")_" + (++rt + nt).toString(36);
    }, ot = !!Object.getOwnPropertySymbols && !o1(function() {
        return !String(Symbol());
    }), at = ot && !Symbol.sham && "symbol" == typeof Symbol.iterator, ut = et("wks"), st = i1.Symbol, ct = at ? st : st && st.withoutSetter || it, ft = function(t) {
        return _1(ut, t) || (ot && _1(st, t) ? ut[t] = st[t] : ut[t] = ct("Symbol." + t)), ut[t];
    }, lt = ft("species"), ht = function(t, e) {
        var r;
        return V(t) && ("function" != typeof (r = t.constructor) || r !== Array && !V(r.prototype) ? g1(r) && null === (r = r[lt]) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === e ? 0 : e);
    };
    X({
        target: "Array",
        proto: !0
    }, {
        flatMap: function(t) {
            var e, r = K(this), n = J(r.length);
            return R(t), (e = ht(r, 0)).length = B(e, r, r, n, 0, 1, t, arguments.length > 1 ? arguments[1] : void 0), e;
        }
    });
    var pt, vt, dt = function(t) {
        return C[t + "Prototype"];
    }, yt = dt("Array").flatMap, gt = Array.prototype, mt = function(t) {
        var e = t.flatMap;
        return t === gt || t instanceof Array && e === gt.flatMap ? yt : e;
    }, bt = [].push, _t = function(t) {
        var e = 1 == t, r = 2 == t, n = 3 == t, i = 4 == t, o = 6 == t, a = 5 == t || o;
        return function(u, s, c, f) {
            for(var l, h, p = K(u), d = v1(p), y = M(s, c, 3), g = J(d.length), m = 0, b = f || ht, _ = e ? b(u, g) : r ? b(u, 0) : void 0; g > m; m++)if ((a || m in d) && (h = y(l = d[m], m, p), t)) {
                if (e) _[m] = h;
                else if (h) switch(t){
                    case 3:
                        return !0;
                    case 5:
                        return l;
                    case 6:
                        return m;
                    case 2:
                        bt.call(_, l);
                }
                else if (i) return !1;
            }
            return o ? -1 : n || i ? i : _;
        };
    }, wt = {
        forEach: _t(0),
        map: _t(1),
        filter: _t(2),
        some: _t(3),
        every: _t(4),
        find: _t(5),
        findIndex: _t(6)
    }, Et = function(t) {
        return "function" == typeof t ? t : void 0;
    }, Ot = function(t, e) {
        return arguments.length < 2 ? Et(C[t]) || Et(i1[t]) : C[t] && C[t][e] || i1[t] && i1[t][e];
    }, Tt = Ot("navigator", "userAgent") || "", St = i1.process, xt = St && St.versions, kt = xt && xt.v8;
    kt ? vt = (pt = kt.split("."))[0] + pt[1] : Tt && (!(pt = Tt.match(/Edge\/(\d+)/)) || pt[1] >= 74) && (pt = Tt.match(/Chrome\/(\d+)/)) && (vt = pt[1]);
    var At = vt && +vt, jt = ft("species"), It = function(t) {
        return At >= 51 || !o1(function() {
            var e = [];
            return (e.constructor = {
            })[jt] = function() {
                return {
                    foo: 1
                };
            }, 1 !== e[t](Boolean).foo;
        });
    }, Pt = Object.defineProperty, Dt = {
    }, Lt = function(t) {
        throw t;
    }, Ct = function(t5, e) {
        if (_1(Dt, t5)) return Dt[t5];
        e || (e = {
        });
        var r = [][t5], n = !!_1(e, "ACCESSORS") && e.ACCESSORS, i = _1(e, 0) ? e[0] : Lt, u = _1(e, 1) ? e[1] : void 0;
        return Dt[t5] = !!r && !o1(function() {
            if (n && !a1) return !0;
            var t = {
                length: -1
            };
            n ? Pt(t, 1, {
                enumerable: !0,
                get: Lt
            }) : t[1] = 1, r.call(t, i, u);
        });
    }, Rt = wt.map, Mt = It("map"), Nt = Ct("map");
    X({
        target: "Array",
        proto: !0,
        forced: !Mt || !Nt
    }, {
        map: function(t) {
            return Rt(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Ft = dt("Array").map, zt = Array.prototype, qt = function(t) {
        var e = t.map;
        return t === zt || t instanceof Array && e === zt.map ? Ft : e;
    }, Yt = wt.filter, Ut = It("filter"), Xt = Ct("filter");
    X({
        target: "Array",
        proto: !0,
        forced: !Ut || !Xt
    }, {
        filter: function(t) {
            return Yt(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Vt = dt("Array").filter, Wt = Array.prototype, Gt = function(t) {
        var e = t.filter;
        return t === Wt || t instanceof Array && e === Wt.filter ? Vt : e;
    }, Ht = function(t) {
        return function(e, r, n, i) {
            R(r);
            var o = K(e), a = v1(o), u = J(o.length), s = t ? u - 1 : 0, c = t ? -1 : 1;
            if (n < 2) for(;;){
                if (s in a) {
                    i = a[s], s += c;
                    break;
                }
                if (s += c, t ? s < 0 : u <= s) throw TypeError("Reduce of empty array with no initial value");
            }
            for(; t ? s >= 0 : u > s; s += c)s in a && (i = r(i, a[s], s, o));
            return i;
        };
    }, $t = {
        left: Ht(!1),
        right: Ht(!0)
    }, Jt = function(t, e) {
        var r = [][t];
        return !!r && o1(function() {
            r.call(null, e || function() {
                throw 1;
            }, 1);
        });
    }, Qt = "process" == h1(i1.process), Bt = $t.left, Kt = Jt("reduce"), Zt = Ct("reduce", {
        1: 0
    });
    X({
        target: "Array",
        proto: !0,
        forced: !Kt || !Zt || !Qt && At > 79 && At < 83
    }, {
        reduce: function(t) {
            return Bt(this, t, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var te = dt("Array").reduce, ee = Array.prototype, re = function(t) {
        var e = t.reduce;
        return t === ee || t instanceof Array && e === ee.reduce ? te : e;
    }, ne = [].slice, ie = {
    }, oe = function(t, e, r) {
        if (!(e in ie)) {
            for(var n = [], i = 0; i < e; i++)n[i] = "a[" + i + "]";
            ie[e] = Function("C,a", "return new C(" + n.join(",") + ")");
        }
        return ie[e](t, r);
    }, ae = Function.bind || function(t) {
        var e = R(this), r = ne.call(arguments, 1), n = function() {
            var i = r.concat(ne.call(arguments));
            return this instanceof n ? oe(e, i.length, i) : e.apply(t, i);
        };
        return g1(e.prototype) && (n.prototype = e.prototype), n;
    };
    X({
        target: "Function",
        proto: !0
    }, {
        bind: ae
    });
    var ue = dt("Function").bind, se = Function.prototype, ce = function(t) {
        var e = t.bind;
        return t === se || t instanceof Function && e === se.bind ? ue : e;
    };
    var fe = function(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    };
    X({
        target: "Object",
        stat: !0,
        forced: !a1,
        sham: !a1
    }, {
        defineProperty: z.f
    });
    var le = r1(function(t6) {
        var e = C.Object, r3 = t6.exports = function(t, r, n) {
            return e.defineProperty(t, r, n);
        };
        e.defineProperty.sham && (r3.sham = !0);
    }), he = le;
    function pe(t, e) {
        for(var r = 0; r < e.length; r++){
            var n = e[r];
            n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), he(t, n.key, n);
        }
    }
    var ve = function(t, e, r) {
        return e && pe(t.prototype, e), r && pe(t, r), t;
    };
    var de = function() {
        function t7(e, r, n) {
            var i, o, a;
            fe(this, t7), this._source = e, this._transformers = r, this._target = n, this._listeners = {
                add: ce(i = this._add).call(i, this),
                remove: ce(o = this._remove).call(o, this),
                update: ce(a = this._update).call(a, this)
            };
        }
        return ve(t7, [
            {
                key: "all",
                value: function() {
                    return this._target.update(this._transformItems(this._source.get())), this;
                }
            },
            {
                key: "start",
                value: function() {
                    return this._source.on("add", this._listeners.add), this._source.on("remove", this._listeners.remove), this._source.on("update", this._listeners.update), this;
                }
            },
            {
                key: "stop",
                value: function() {
                    return this._source.off("add", this._listeners.add), this._source.off("remove", this._listeners.remove), this._source.off("update", this._listeners.update), this;
                }
            },
            {
                key: "_transformItems",
                value: function(t8) {
                    var e3;
                    return re(e3 = this._transformers).call(e3, function(t, e) {
                        return e(t);
                    }, t8);
                }
            },
            {
                key: "_add",
                value: function(t, e) {
                    null != e && this._target.add(this._transformItems(this._source.get(e.items)));
                }
            },
            {
                key: "_update",
                value: function(t, e) {
                    null != e && this._target.update(this._transformItems(this._source.get(e.items)));
                }
            },
            {
                key: "_remove",
                value: function(t, e) {
                    null != e && this._target.remove(this._transformItems(e.oldData));
                }
            }
        ]), t7;
    }(), ye = function() {
        function t9(e) {
            fe(this, t9), this._source = e, this._transformers = [];
        }
        return ve(t9, [
            {
                key: "filter",
                value: function(t) {
                    return this._transformers.push(function(e) {
                        return Gt(e).call(e, t);
                    }), this;
                }
            },
            {
                key: "map",
                value: function(t) {
                    return this._transformers.push(function(e) {
                        return qt(e).call(e, t);
                    }), this;
                }
            },
            {
                key: "flatMap",
                value: function(t) {
                    return this._transformers.push(function(e) {
                        return mt(e).call(e, t);
                    }), this;
                }
            },
            {
                key: "to",
                value: function(t) {
                    return new de(this._source, this._transformers, t);
                }
            }
        ]), t9;
    }(), ge = le, me = Math.max, be = Math.min, _e = function(t, e) {
        var r = H(t);
        return r < 0 ? me(r + e, 0) : be(r, e);
    }, we = function(t) {
        return function(e, r, n) {
            var i, o = y1(e), a = J(o.length), u = _e(n, a);
            if (t && r != r) {
                for(; a > u;)if ((i = o[u++]) != i) return !0;
            } else for(; a > u; u++)if ((t || u in o) && o[u] === r) return t || u || 0;
            return !t && -1;
        };
    }, Ee = {
        includes: we(!0),
        indexOf: we(!1)
    }, Oe = {
    }, Te = Ee.indexOf, Se = function(t, e) {
        var r, n = y1(t), i = 0, o = [];
        for(r in n)!_1(Oe, r) && _1(n, r) && o.push(r);
        for(; e.length > i;)_1(n, r = e[i++]) && (~Te(o, r) || o.push(r));
        return o;
    }, xe = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
    ], ke = Object.keys || function(t) {
        return Se(t, xe);
    }, Ae = a1 ? Object.defineProperties : function(t, e) {
        N(t);
        for(var r, n = ke(e), i = n.length, o = 0; i > o;)z.f(t, r = n[o++], e[r]);
        return t;
    };
    X({
        target: "Object",
        stat: !0,
        forced: !a1,
        sham: !a1
    }, {
        defineProperties: Ae
    });
    var je = r1(function(t10) {
        var e = C.Object, r4 = t10.exports = function(t, r) {
            return e.defineProperties(t, r);
        };
        e.defineProperties.sham && (r4.sham = !0);
    }), Ie = xe.concat("length", "prototype"), Pe = {
        f: Object.getOwnPropertyNames || function(t) {
            return Se(t, Ie);
        }
    }, De = {
        f: Object.getOwnPropertySymbols
    }, Le = Ot("Reflect", "ownKeys") || function(t) {
        var e = Pe.f(N(t)), r = De.f;
        return r ? e.concat(r(t)) : e;
    }, Ce = function(t, e, r) {
        var n = m1(e);
        n in t ? z.f(t, n, f1(0, r)) : t[n] = r;
    };
    X({
        target: "Object",
        stat: !0,
        sham: !a1
    }, {
        getOwnPropertyDescriptors: function(t) {
            for(var e, r, n = y1(t), i = x1.f, o = Le(n), a = {
            }, u = 0; o.length > u;)void 0 !== (r = i(n, e = o[u++])) && Ce(a, e, r);
            return a;
        }
    });
    var Re = C.Object.getOwnPropertyDescriptors, Me = x1.f, Ne = o1(function() {
        Me(1);
    });
    X({
        target: "Object",
        stat: !0,
        forced: !a1 || Ne,
        sham: !a1
    }, {
        getOwnPropertyDescriptor: function(t, e) {
            return Me(y1(t), e);
        }
    });
    var Fe, ze = r1(function(t11) {
        var e = C.Object, r5 = t11.exports = function(t, r) {
            return e.getOwnPropertyDescriptor(t, r);
        };
        e.getOwnPropertyDescriptor.sham && (r5.sham = !0);
    }), qe = Ot("document", "documentElement"), Ye = et("keys"), Ue = function(t) {
        return Ye[t] || (Ye[t] = it(t));
    }, Xe = Ue("IE_PROTO"), Ve = function() {
    }, We = function(t) {
        return "<script>" + t + "</" + "script>";
    }, Ge = function() {
        try {
            Fe = document.domain && new ActiveXObject("htmlfile");
        } catch (t12) {
        }
        var t13, e4;
        Ge = Fe ? (function(t) {
            t.write(We("")), t.close();
            var e = t.parentWindow.Object;
            return t = null, e;
        })(Fe) : ((e4 = O1("iframe")).style.display = "none", qe.appendChild(e4), e4.src = String("javascript:"), (t13 = e4.contentWindow.document).open(), t13.write(We("document.F=Object")), t13.close(), t13.F);
        for(var r = xe.length; r--;)delete Ge.prototype[xe[r]];
        return Ge();
    };
    Oe[Xe] = !0;
    var He = Object.create || function(t, e) {
        var r;
        return null !== t ? (Ve.prototype = N(t), r = new Ve, Ve.prototype = null, r[Xe] = t) : r = Ge(), void 0 === e ? r : Ae(r, e);
    }, $e = Pe.f, Je = {
    }.toString, Qe = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [], Be = {
        f: function(t14) {
            return Qe && "[object Window]" == Je.call(t14) ? (function(t) {
                try {
                    return $e(t);
                } catch (t15) {
                    return Qe.slice();
                }
            })(t14) : $e(y1(t14));
        }
    }, Ke = function(t, e, r, n) {
        n && n.enumerable ? t[e] = r : q(t, e, r);
    }, Ze = {
        f: ft
    }, tr = z.f, er = function(t) {
        var e = C.Symbol || (C.Symbol = {
        });
        _1(e, t) || tr(e, t, {
            value: Ze.f(t)
        });
    }, rr = {
    };
    rr[ft("toStringTag")] = "z";
    var nr = "[object z]" === String(rr), ir = ft("toStringTag"), or = "Arguments" == h1(function() {
        return arguments;
    }()), ar = nr ? h1 : function(t16) {
        var e, r, n;
        return void 0 === t16 ? "Undefined" : null === t16 ? "Null" : "string" == typeof (r = function(t, e) {
            try {
                return t[e];
            } catch (t17) {
            }
        }(e = Object(t16), ir)) ? r : or ? h1(e) : "Object" == (n = h1(e)) && "function" == typeof e.callee ? "Arguments" : n;
    }, ur = nr ? {
    }.toString : function() {
        return "[object " + ar(this) + "]";
    }, sr = z.f, cr = ft("toStringTag"), fr = function(t, e, r, n) {
        if (t) {
            var i = r ? t : t.prototype;
            _1(i, cr) || sr(i, cr, {
                configurable: !0,
                value: e
            }), n && !nr && q(i, "toString", ur);
        }
    }, lr = Function.toString;
    "function" != typeof tt.inspectSource && (tt.inspectSource = function(t) {
        return lr.call(t);
    });
    var hr, pr, vr, dr = tt.inspectSource, yr = i1.WeakMap, gr = "function" == typeof yr && /native code/.test(dr(yr)), mr = i1.WeakMap;
    if (gr) {
        var br = tt.state || (tt.state = new mr), _r = br.get, wr = br.has, Er = br.set;
        hr = function(t, e) {
            return e.facade = t, Er.call(br, t, e), e;
        }, pr = function(t) {
            return _r.call(br, t) || {
            };
        }, vr = function(t) {
            return wr.call(br, t);
        };
    } else {
        var Or = Ue("state");
        Oe[Or] = !0, hr = function(t, e) {
            return e.facade = t, q(t, Or, e), e;
        }, pr = function(t) {
            return _1(t, Or) ? t[Or] : {
            };
        }, vr = function(t) {
            return _1(t, Or);
        };
    }
    var Tr = {
        set: hr,
        get: pr,
        has: vr,
        enforce: function(t) {
            return vr(t) ? pr(t) : hr(t, {
            });
        },
        getterFor: function(t) {
            return function(e) {
                var r;
                if (!g1(e) || (r = pr(e)).type !== t) throw TypeError("Incompatible receiver, " + t + " required");
                return r;
            };
        }
    }, Sr = wt.forEach, xr = Ue("hidden"), kr = "Symbol", Ar = ft("toPrimitive"), jr = Tr.set, Ir = Tr.getterFor(kr), Pr = Object.prototype, Dr = i1.Symbol, Lr = Ot("JSON", "stringify"), Cr = x1.f, Rr = z.f, Mr = Be.f, Nr = c1.f, Fr = et("symbols"), zr = et("op-symbols"), qr = et("string-to-symbol-registry"), Yr = et("symbol-to-string-registry"), Ur = et("wks"), Xr = i1.QObject, Vr = !Xr || !Xr.prototype || !Xr.prototype.findChild, Wr = a1 && o1(function() {
        return 7 != He(Rr({
        }, "a", {
            get: function() {
                return Rr(this, "a", {
                    value: 7
                }).a;
            }
        })).a;
    }) ? function(t, e, r) {
        var n = Cr(Pr, e);
        n && delete Pr[e], Rr(t, e, r), n && t !== Pr && Rr(Pr, e, n);
    } : Rr, Gr = function(t, e) {
        var r = Fr[t] = He(Dr.prototype);
        return jr(r, {
            type: kr,
            tag: t,
            description: e
        }), a1 || (r.description = e), r;
    }, Hr = at ? function(t) {
        return "symbol" == typeof t;
    } : function(t) {
        return Object(t) instanceof Dr;
    }, $r = function(t, e, r) {
        t === Pr && $r(zr, e, r), N(t);
        var n = m1(e, !0);
        return N(r), _1(Fr, n) ? (r.enumerable ? (_1(t, xr) && t[xr][n] && (t[xr][n] = !1), r = He(r, {
            enumerable: f1(0, !1)
        })) : (_1(t, xr) || Rr(t, xr, f1(1, {
        })), t[xr][n] = !0), Wr(t, n, r)) : Rr(t, n, r);
    }, Jr = function(t, e5) {
        N(t);
        var r = y1(e5), n = ke(r).concat(Zr(r));
        return Sr(n, function(e) {
            a1 && !Qr.call(r, e) || $r(t, e, r[e]);
        }), t;
    }, Qr = function(t) {
        var e = m1(t, !0), r = Nr.call(this, e);
        return !(this === Pr && _1(Fr, e) && !_1(zr, e)) && (!(r || !_1(this, e) || !_1(Fr, e) || _1(this, xr) && this[xr][e]) || r);
    }, Br = function(t, e) {
        var r = y1(t), n = m1(e, !0);
        if (r !== Pr || !_1(Fr, n) || _1(zr, n)) {
            var i = Cr(r, n);
            return !i || !_1(Fr, n) || _1(r, xr) && r[xr][n] || (i.enumerable = !0), i;
        }
    }, Kr = function(t18) {
        var e = Mr(y1(t18)), r = [];
        return Sr(e, function(t) {
            _1(Fr, t) || _1(Oe, t) || r.push(t);
        }), r;
    }, Zr = function(t19) {
        var e = t19 === Pr, r = Mr(e ? zr : y1(t19)), n = [];
        return Sr(r, function(t) {
            !_1(Fr, t) || e && !_1(Pr, t) || n.push(Fr[t]);
        }), n;
    };
    if (ot || (Ke((Dr = function() {
        if (this instanceof Dr) throw TypeError("Symbol is not a constructor");
        var t20 = arguments.length && void 0 !== arguments[0] ? String(arguments[0]) : void 0, e = it(t20), r = function(t) {
            this === Pr && r.call(zr, t), _1(this, xr) && _1(this[xr], e) && (this[xr][e] = !1), Wr(this, e, f1(1, t));
        };
        return a1 && Vr && Wr(Pr, e, {
            configurable: !0,
            set: r
        }), Gr(e, t20);
    }).prototype, "toString", function() {
        return Ir(this).tag;
    }), Ke(Dr, "withoutSetter", function(t) {
        return Gr(it(t), t);
    }), c1.f = Qr, z.f = $r, x1.f = Br, Pe.f = Be.f = Kr, De.f = Zr, Ze.f = function(t) {
        return Gr(ft(t), t);
    }, a1 && Rr(Dr.prototype, "description", {
        configurable: !0,
        get: function() {
            return Ir(this).description;
        }
    })), X({
        global: !0,
        wrap: !0,
        forced: !ot,
        sham: !ot
    }, {
        Symbol: Dr
    }), Sr(ke(Ur), function(t) {
        er(t);
    }), X({
        target: kr,
        stat: !0,
        forced: !ot
    }, {
        for: function(t) {
            var e = String(t);
            if (_1(qr, e)) return qr[e];
            var r = Dr(e);
            return qr[e] = r, Yr[r] = e, r;
        },
        keyFor: function(t) {
            if (!Hr(t)) throw TypeError(t + " is not a symbol");
            if (_1(Yr, t)) return Yr[t];
        },
        useSetter: function() {
            Vr = !0;
        },
        useSimple: function() {
            Vr = !1;
        }
    }), X({
        target: "Object",
        stat: !0,
        forced: !ot,
        sham: !a1
    }, {
        create: function(t, e) {
            return void 0 === e ? He(t) : Jr(He(t), e);
        },
        defineProperty: $r,
        defineProperties: Jr,
        getOwnPropertyDescriptor: Br
    }), X({
        target: "Object",
        stat: !0,
        forced: !ot
    }, {
        getOwnPropertyNames: Kr,
        getOwnPropertySymbols: Zr
    }), X({
        target: "Object",
        stat: !0,
        forced: o1(function() {
            De.f(1);
        })
    }, {
        getOwnPropertySymbols: function(t) {
            return De.f(K(t));
        }
    }), Lr) {
        var tn = !ot || o1(function() {
            var t = Dr();
            return "[null]" != Lr([
                t
            ]) || "{}" != Lr({
                a: t
            }) || "{}" != Lr(Object(t));
        });
        X({
            target: "JSON",
            stat: !0,
            forced: tn
        }, {
            stringify: function(t21, e6, r) {
                for(var n, i = [
                    t21
                ], o = 1; arguments.length > o;)i.push(arguments[o++]);
                if (n = e6, (g1(e6) || void 0 !== t21) && !Hr(t21)) return V(e6) || (e6 = function(t, e) {
                    if ("function" == typeof n && (e = n.call(this, t, e)), !Hr(e)) return e;
                }), i[1] = e6, Lr.apply(null, i);
            }
        });
    }
    Dr.prototype[Ar] || q(Dr.prototype, Ar, Dr.prototype.valueOf), fr(Dr, kr), Oe[xr] = !0;
    var en, rn, nn, on = C.Object.getOwnPropertySymbols, an = {
    }, un = !o1(function() {
        function t() {
        }
        return t.prototype.constructor = null, Object.getPrototypeOf(new t) !== t.prototype;
    }), sn = Ue("IE_PROTO"), cn = Object.prototype, fn = un ? Object.getPrototypeOf : function(t) {
        return t = K(t), _1(t, sn) ? t[sn] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? cn : null;
    }, ln = (ft("iterator"), !1);
    [].keys && ("next" in (nn = [].keys()) ? (rn = fn(fn(nn))) !== Object.prototype && (en = rn) : ln = !0), null == en && (en = {
    });
    var hn = {
        IteratorPrototype: en,
        BUGGY_SAFARI_ITERATORS: ln
    }, pn = hn.IteratorPrototype, vn = function() {
        return this;
    }, dn = Object.setPrototypeOf || ("__proto__" in {
    } ? function() {
        var t23, e = !1, r6 = {
        };
        try {
            (t23 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(r6, []), e = r6 instanceof Array;
        } catch (t22) {
        }
        return function(r, n) {
            return N(r), (function(t) {
                if (!g1(t) && null !== t) throw TypeError("Can't set " + String(t) + " as a prototype");
            })(n), e ? t23.call(r, n) : r.__proto__ = n, r;
        };
    }() : void 0), yn = hn.IteratorPrototype, gn = hn.BUGGY_SAFARI_ITERATORS, mn = ft("iterator"), bn = "keys", _n = "values", wn = "entries", En = function() {
        return this;
    }, On = function(t24, e7, r7, n2, i, o, a) {
        !function(t, e, r) {
            var n = e + " Iterator";
            t.prototype = He(pn, {
                next: f1(1, r)
            }), fr(t, n, !1, !0), an[n] = vn;
        }(r7, e7, n2);
        var u, s, c, l = function(t) {
            if (t === i && y) return y;
            if (!gn && t in v) return v[t];
            switch(t){
                case bn:
                case _n:
                case wn:
                    return function() {
                        return new r7(this, t);
                    };
            }
            return function() {
                return new r7(this);
            };
        }, h = e7 + " Iterator", p = !1, v = t24.prototype, d = v[mn] || v["@@iterator"] || i && v[i], y = !gn && d || l(i), g = "Array" == e7 && v.entries || d;
        if (g && (u = fn(g.call(new t24)), yn !== Object.prototype && u.next && (fr(u, h, !0, !0), an[h] = En)), i == _n && d && d.name !== _n && (p = !0, y = function() {
            return d.call(this);
        }), a && v[mn] !== y && q(v, mn, y), an[e7] = y, i) {
            if (s = {
                values: l(_n),
                keys: o ? y : l(bn),
                entries: l(wn)
            }, a) for(c in s)(gn || p || !(c in v)) && Ke(v, c, s[c]);
            else X({
                target: e7,
                proto: !0,
                forced: gn || p
            }, s);
        }
        return s;
    }, Tn = "Array Iterator", Sn = Tr.set, xn = Tr.getterFor(Tn);
    On(Array, "Array", function(t, e) {
        Sn(this, {
            type: Tn,
            target: y1(t),
            index: 0,
            kind: e
        });
    }, function() {
        var t = xn(this), e = t.target, r = t.kind, n = t.index++;
        return !e || n >= e.length ? (t.target = void 0, {
            value: void 0,
            done: !0
        }) : "keys" == r ? {
            value: n,
            done: !1
        } : "values" == r ? {
            value: e[n],
            done: !1
        } : {
            value: [
                n,
                e[n]
            ],
            done: !1
        };
    }, "values");
    an.Arguments = an.Array;
    var kn = ft("toStringTag");
    for(var An in {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    }){
        var jn = i1[An], In = jn && jn.prototype;
        In && ar(In) !== kn && q(In, kn, An), an[An] = an.Array;
    }
    var Pn = function(t) {
        return function(e, r) {
            var n, i, o = String(d1(e)), a = H(r), u = o.length;
            return a < 0 || a >= u ? t ? "" : void 0 : (n = o.charCodeAt(a)) < 55296 || n > 56319 || a + 1 === u || (i = o.charCodeAt(a + 1)) < 56320 || i > 57343 ? t ? o.charAt(a) : n : t ? o.slice(a, a + 2) : i - 56320 + (n - 55296 << 10) + 65536;
        };
    }, Dn = {
        codeAt: Pn(!1),
        charAt: Pn(!0)
    }.charAt, Ln = "String Iterator", Cn = Tr.set, Rn = Tr.getterFor(Ln);
    On(String, "String", function(t) {
        Cn(this, {
            type: Ln,
            string: String(t),
            index: 0
        });
    }, function() {
        var t, e = Rn(this), r = e.string, n = e.index;
        return n >= r.length ? {
            value: void 0,
            done: !0
        } : (t = Dn(r, n), e.index += t.length, {
            value: t,
            done: !1
        });
    });
    var Mn = ft("iterator"), Nn = function(t) {
        if (null != t) return t[Mn] || t["@@iterator"] || an[ar(t)];
    }, Fn = function(t) {
        var e = Nn(t);
        if ("function" != typeof e) throw TypeError(String(t) + " is not iterable");
        return N(e.call(t));
    }, zn = Nn, qn = function(t) {
        var e = t.return;
        if (void 0 !== e) return N(e.call(t)).value;
    }, Yn = function(t, e, r, n) {
        try {
            return n ? e(N(r)[0], r[1]) : e(r);
        } catch (e8) {
            throw qn(t), e8;
        }
    }, Un = ft("iterator"), Xn = Array.prototype, Vn = function(t) {
        return void 0 !== t && (an.Array === t || Xn[Un] === t);
    }, Wn = ft("iterator"), Gn = !1;
    try {
        var Hn = 0, $n = {
            next: function() {
                return {
                    done: !!Hn++
                };
            },
            return: function() {
                Gn = !0;
            }
        };
        $n[Wn] = function() {
            return this;
        }, Array.from($n, function() {
            throw 2;
        });
    } catch (t25) {
    }
    var Jn = !function(t, e) {
        if (!e && !Gn) return !1;
        var r = !1;
        try {
            var n = {
            };
            n[Wn] = function() {
                return {
                    next: function() {
                        return {
                            done: r = !0
                        };
                    }
                };
            }, t(n);
        } catch (t26) {
        }
        return r;
    }(function(t) {
        Array.from(t);
    });
    X({
        target: "Array",
        stat: !0,
        forced: Jn
    }, {
        from: function(t) {
            var e, r, n, i, o, a, u = K(t), s = "function" == typeof this ? this : Array, c = arguments.length, f = c > 1 ? arguments[1] : void 0, l = void 0 !== f, h = Nn(u), p = 0;
            if (l && (f = M(f, c > 2 ? arguments[2] : void 0, 2)), null == h || s == Array && Vn(h)) for(r = new s(e = J(u.length)); e > p; p++)a = l ? f(u[p], p) : u[p], Ce(r, p, a);
            else for(o = (i = h.call(u)).next, r = new s; !(n = o.call(i)).done; p++)a = l ? Yn(i, f, [
                n.value,
                p
            ], !0) : n.value, Ce(r, p, a);
            return r.length = p, r;
        }
    });
    var Qn = C.Array.from, Bn = Qn;
    X({
        target: "Array",
        proto: !0
    }, {
        fill: function(t) {
            for(var e = K(this), r = J(e.length), n = arguments.length, i = _e(n > 1 ? arguments[1] : void 0, r), o = n > 2 ? arguments[2] : void 0, a = void 0 === o ? r : _e(o, r); a > i;)e[i++] = t;
            return e;
        }
    });
    dt("Array").fill;
    var Kn = [].slice, Zn = /MSIE .\./.test(Tt), ti = function(t) {
        return function(e, r) {
            var n = arguments.length > 2, i = n ? Kn.call(arguments, 2) : void 0;
            return t(n ? function() {
                ("function" == typeof e ? e : Function(e)).apply(this, i);
            } : e, r);
        };
    };
    X({
        global: !0,
        bind: !0,
        forced: Zn
    }, {
        setTimeout: ti(i1.setTimeout),
        setInterval: ti(i1.setInterval)
    });
    var ei = C.setTimeout, ri = Ot("JSON", "stringify"), ni = /[\uD800-\uDFFF]/g, ii = /^[\uD800-\uDBFF]$/, oi = /^[\uDC00-\uDFFF]$/, ai = function(t, e, r) {
        var n = r.charAt(e - 1), i = r.charAt(e + 1);
        return ii.test(t) && !oi.test(i) || oi.test(t) && !ii.test(n) ? "\\u" + t.charCodeAt(0).toString(16) : t;
    }, ui = o1(function() {
        return '"\\udf06\\ud834"' !== ri("\udf06\ud834") || '"\\udead"' !== ri("\udead");
    });
    ri && X({
        target: "JSON",
        stat: !0,
        forced: ui
    }, {
        stringify: function(t, e, r) {
            var n = ri.apply(null, arguments);
            return "string" == typeof n ? n.replace(ni, ai) : n;
        }
    }), C.JSON || (C.JSON = {
        stringify: JSON.stringify
    });
    var si = function(t, e, r) {
        return C.JSON.stringify.apply(null, arguments);
    };
    X({
        target: "Object",
        stat: !0,
        sham: !a1
    }, {
        create: He
    });
    var ci = C.Object, fi = function(t, e) {
        return ci.create(t, e);
    }, li = fi;
    var hi, pi = function(t, e, r) {
        return e in t ? he(t, e, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = r, t;
    }, vi = "\t\n\v\f\r                　\u2028\u2029\ufeff", di = "[" + vi + "]", yi = RegExp("^" + di + di + "*"), gi = RegExp(di + di + "*$"), mi = function(t) {
        return function(e) {
            var r = String(d1(e));
            return 1 & t && (r = r.replace(yi, "")), 2 & t && (r = r.replace(gi, "")), r;
        };
    }, bi = {
        start: mi(1),
        end: mi(2),
        trim: mi(3)
    }, _i = bi.trim;
    X({
        target: "String",
        proto: !0,
        forced: (hi = "trim", o1(function() {
            return !!vi[hi]() || "​᠎" != "​᠎"[hi]() || vi[hi].name !== hi;
        }))
    }, {
        trim: function() {
            return _i(this);
        }
    });
    dt("String").trim;
    var wi = Ee.indexOf, Ei = [].indexOf, Oi = !!Ei && 1 / [
        1
    ].indexOf(1, -0) < 0, Ti = Jt("indexOf"), Si = Ct("indexOf", {
        ACCESSORS: !0,
        1: 0
    });
    X({
        target: "Array",
        proto: !0,
        forced: Oi || !Ti || !Si
    }, {
        indexOf: function(t) {
            return Oi ? Ei.apply(this, arguments) || 0 : wi(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    dt("Array").indexOf;
    var xi = bi.trim, ki = i1.parseInt, Ai = /^[+-]?0[Xx]/, ji = 8 !== ki(vi + "08") || 22 !== ki(vi + "0x16") ? function(t, e) {
        var r = xi(String(t));
        return ki(r, e >>> 0 || (Ai.test(r) ? 16 : 10));
    } : ki;
    X({
        global: !0,
        forced: parseInt != ji
    }, {
        parseInt: ji
    });
    var Ii = c1.f, Pi = function(t) {
        return function(e) {
            for(var r, n = y1(e), i = ke(n), o = i.length, u = 0, s = []; o > u;)r = i[u++], a1 && !Ii.call(n, r) || s.push(t ? [
                r,
                n[r]
            ] : n[r]);
            return s;
        };
    }, Di = {
        entries: Pi(!0),
        values: Pi(!1)
    }.values;
    X({
        target: "Object",
        stat: !0
    }, {
        values: function(t) {
            return Di(t);
        }
    });
    C.Object.values;
    var Li = o1(function() {
        fn(1);
    });
    X({
        target: "Object",
        stat: !0,
        forced: Li,
        sham: !un
    }, {
        getPrototypeOf: function(t) {
            return fn(K(t));
        }
    });
    var Ci = C.Object.getPrototypeOf, Ri = Ee.includes, Mi = Ct("indexOf", {
        ACCESSORS: !0,
        1: 0
    });
    X({
        target: "Array",
        proto: !0,
        forced: !Mi
    }, {
        includes: function(t) {
            return Ri(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    dt("Array").includes;
    var Ni = ft("match"), Fi = function(t27) {
        if ((function(t) {
            var e;
            return g1(t) && (void 0 !== (e = t[Ni]) ? !!e : "RegExp" == h1(t));
        })(t27)) throw TypeError("The method doesn't accept regular expressions");
        return t27;
    }, zi = ft("match");
    X({
        target: "String",
        proto: !0,
        forced: !function(t) {
            var e = /./;
            try {
                "/./"[t](e);
            } catch (r) {
                try {
                    return e[zi] = !1, "/./"[t](e);
                } catch (t) {
                }
            }
            return !1;
        }("includes")
    }, {
        includes: function(t) {
            return !!~String(d1(this)).indexOf(Fi(t), arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    dt("String").includes;
    var qi = Object.assign, Yi = Object.defineProperty, Ui = !qi || o1(function() {
        if (a1 && 1 !== qi({
            b: 1
        }, qi(Yi({
        }, "a", {
            enumerable: !0,
            get: function() {
                Yi(this, "b", {
                    value: 3,
                    enumerable: !1
                });
            }
        }), {
            b: 2
        })).b) return !0;
        var t28 = {
        }, e = {
        }, r = Symbol(), n = "abcdefghijklmnopqrst";
        return t28[r] = 7, n.split("").forEach(function(t) {
            e[t] = t;
        }), 7 != qi({
        }, t28)[r] || ke(qi({
        }, e)).join("") != n;
    }) ? function(t, e) {
        for(var r = K(t), n = arguments.length, i = 1, o = De.f, u = c1.f; n > i;)for(var s, f = v1(arguments[i++]), l = o ? ke(f).concat(o(f)) : ke(f), h = l.length, p = 0; h > p;)s = l[p++], a1 && !u.call(f, s) || (r[s] = f[s]);
        return r;
    } : qi;
    X({
        target: "Object",
        stat: !0,
        forced: Object.assign !== Ui
    }, {
        assign: Ui
    });
    var Xi = C.Object.assign, Vi = It("splice"), Wi = Ct("splice", {
        ACCESSORS: !0,
        0: 0,
        1: 2
    }), Gi = Math.max, Hi = Math.min, $i = 9007199254740991, Ji = "Maximum allowed length exceeded";
    X({
        target: "Array",
        proto: !0,
        forced: !Vi || !Wi
    }, {
        splice: function(t, e) {
            var r, n, i, o, a, u, s = K(this), c = J(s.length), f = _e(t, c), l = arguments.length;
            if (0 === l ? r = n = 0 : 1 === l ? (r = 0, n = c - f) : (r = l - 2, n = Hi(Gi(H(e), 0), c - f)), c + r - n > $i) throw TypeError(Ji);
            for(i = ht(s, n), o = 0; o < n; o++)(a = f + o) in s && Ce(i, o, s[a]);
            if (i.length = n, r < n) {
                for(o = f; o < c - n; o++)u = o + r, (a = o + n) in s ? s[u] = s[a] : delete s[u];
                for(o = c; o > c - n + r; o--)delete s[o - 1];
            } else if (r > n) for(o = c - n; o > f; o--)u = o + r - 1, (a = o + n - 1) in s ? s[u] = s[a] : delete s[u];
            for(o = 0; o < r; o++)s[o + f] = arguments[o + 2];
            return s.length = c - n + r, i;
        }
    });
    var Qi = dt("Array").splice, Bi = Array.prototype, Ki = function(t) {
        var e = t.splice;
        return t === Bi || t instanceof Array && e === Bi.splice ? Qi : e;
    }, Zi = [].reverse, to = [
        1,
        2
    ];
    X({
        target: "Array",
        proto: !0,
        forced: String(to) === String(to.reverse())
    }, {
        reverse: function() {
            return V(this) && (this.length = this.length), Zi.call(this);
        }
    });
    var eo = dt("Array").reverse, ro = Array.prototype, no = function(t) {
        var e = t.reverse;
        return t === ro || t instanceof Array && e === ro.reverse ? eo : e;
    }, io = wt.forEach, oo = Jt("forEach"), ao = Ct("forEach"), uo = oo && ao ? [].forEach : function(t) {
        return io(this, t, arguments.length > 1 ? arguments[1] : void 0);
    };
    X({
        target: "Array",
        proto: !0,
        forced: [].forEach != uo
    }, {
        forEach: uo
    });
    var so = dt("Array").forEach, co = Array.prototype, fo = {
        DOMTokenList: !0,
        NodeList: !0
    }, lo = function(t) {
        var e = t.forEach;
        return t === co || t instanceof Array && e === co.forEach || fo.hasOwnProperty(ar(t)) ? so : e;
    };
    X({
        target: "Array",
        stat: !0
    }, {
        isArray: V
    });
    var ho = C.Array.isArray, po = ho;
    var vo = function(t) {
        if (po(t)) return t;
    }, yo = ft("iterator"), go = function(t) {
        var e = Object(t);
        return void 0 !== e[yo] || "@@iterator" in e || an.hasOwnProperty(ar(e));
    }, mo = ft("isConcatSpreadable"), bo = 9007199254740991, _o = "Maximum allowed index exceeded", wo = At >= 51 || !o1(function() {
        var t = [];
        return t[mo] = !1, t.concat()[0] !== t;
    }), Eo = It("concat"), Oo = function(t) {
        if (!g1(t)) return !1;
        var e = t[mo];
        return void 0 !== e ? !!e : V(t);
    };
    X({
        target: "Array",
        proto: !0,
        forced: !wo || !Eo
    }, {
        concat: function(t) {
            var e, r, n, i, o, a = K(this), u = ht(a, 0), s = 0;
            for(e = -1, n = arguments.length; e < n; e++)if (Oo(o = -1 === e ? a : arguments[e])) {
                if (s + (i = J(o.length)) > bo) throw TypeError(_o);
                for(r = 0; r < i; r++, s++)r in o && Ce(u, s, o[r]);
            } else {
                if (s >= bo) throw TypeError(_o);
                Ce(u, s++, o);
            }
            return u.length = s, u;
        }
    }), er("asyncIterator"), er("hasInstance"), er("isConcatSpreadable"), er("iterator"), er("match"), er("matchAll"), er("replace"), er("search"), er("species"), er("split"), er("toPrimitive"), er("toStringTag"), er("unscopables"), fr(i1.JSON, "JSON", !0);
    var To = C.Symbol;
    er("asyncDispose"), er("dispose"), er("observable"), er("patternMatch"), er("replaceAll");
    var So = To;
    var xo = function(t, e) {
        if (void 0 !== So && go(Object(t))) {
            var r = [], n = !0, i = !1, o = void 0;
            try {
                for(var a, u = Fn(t); !(n = (a = u.next()).done) && (r.push(a.value), !e || r.length !== e); n = !0);
            } catch (t) {
                i = !0, o = t;
            } finally{
                try {
                    n || null == u.return || u.return();
                } finally{
                    if (i) throw o;
                }
            }
            return r;
        }
    }, ko = Qn, Ao = It("slice"), jo = Ct("slice", {
        ACCESSORS: !0,
        0: 0,
        1: 2
    }), Io = ft("species"), Po = [].slice, Do = Math.max;
    X({
        target: "Array",
        proto: !0,
        forced: !Ao || !jo
    }, {
        slice: function(t, e) {
            var r, n, i, o = y1(this), a = J(o.length), u = _e(t, a), s = _e(void 0 === e ? a : e, a);
            if (V(o) && ("function" != typeof (r = o.constructor) || r !== Array && !V(r.prototype) ? g1(r) && null === (r = r[Io]) && (r = void 0) : r = void 0, r === Array || void 0 === r)) return Po.call(o, u, s);
            for(n = new (void 0 === r ? Array : r)(Do(s - u, 0)), i = 0; u < s; u++, i++)u in o && Ce(n, i, o[u]);
            return n.length = i, n;
        }
    });
    var Lo = dt("Array").slice, Co = Array.prototype, Ro = function(t) {
        var e = t.slice;
        return t === Co || t instanceof Array && e === Co.slice ? Lo : e;
    }, Mo = Ro;
    var No = function(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    };
    var Fo = function(t, e) {
        var r;
        if (t) {
            if ("string" == typeof t) return No(t, e);
            var n = Mo(r = Object.prototype.toString.call(t)).call(r, 8, -1);
            return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? ko(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? No(t, e) : void 0;
        }
    };
    var zo = function() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    };
    var qo = function(t, e) {
        return vo(t) || xo(t, e) || Fo(t, e) || zo();
    };
    X({
        target: "Date",
        stat: !0
    }, {
        now: function() {
            return (new Date).getTime();
        }
    });
    C.Date.now;
    var Yo = o1(function() {
        ke(1);
    });
    X({
        target: "Object",
        stat: !0,
        forced: Yo
    }, {
        keys: function(t) {
            return ke(K(t));
        }
    });
    var Uo = C.Object.keys, Xo = ho, Vo = Ze.f("iterator"), Wo = Vo, Go = r1(function(t29) {
        function e(r) {
            return t29.exports = e = "function" == typeof So && "symbol" == typeof Wo ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof So && t.constructor === So && t !== So.prototype ? "symbol" : typeof t;
            }, e(r);
        }
        t29.exports = e;
    });
    X({
        target: "Reflect",
        stat: !0
    }, {
        ownKeys: Le
    });
    var Ho = C.Reflect.ownKeys, $o = Ro;
    var Jo = function(t) {
        if (po(t)) return No(t);
    };
    var Qo = function(t) {
        if (void 0 !== So && go(Object(t))) return ko(t);
    };
    var Bo = function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    };
    var Ko = function(t) {
        return Jo(t) || Qo(t) || Fo(t) || Bo();
    }, Zo = dt("Array").concat, ta = Array.prototype, ea = function(t) {
        var e = t.concat;
        return t === ta || t instanceof Array && e === ta.concat ? Zo : e;
    }, ra = To, na = r1(function(t30) {
        function e9(t31) {
            if (t31) return (function(t) {
                for(var r in e9.prototype)t[r] = e9.prototype[r];
                return t;
            })(t31);
        }
        t30.exports = e9, e9.prototype.on = e9.prototype.addEventListener = function(t, e) {
            return this._callbacks = this._callbacks || {
            }, (this._callbacks["$" + t] = this._callbacks["$" + t] || []).push(e), this;
        }, e9.prototype.once = function(t, e) {
            function r() {
                this.off(t, r), e.apply(this, arguments);
            }
            return r.fn = e, this.on(t, r), this;
        }, e9.prototype.off = e9.prototype.removeListener = e9.prototype.removeAllListeners = e9.prototype.removeEventListener = function(t, e) {
            if (this._callbacks = this._callbacks || {
            }, 0 == arguments.length) return this._callbacks = {
            }, this;
            var r, n = this._callbacks["$" + t];
            if (!n) return this;
            if (1 == arguments.length) return delete this._callbacks["$" + t], this;
            for(var i = 0; i < n.length; i++)if ((r = n[i]) === e || r.fn === e) {
                n.splice(i, 1);
                break;
            }
            return 0 === n.length && delete this._callbacks["$" + t], this;
        }, e9.prototype.emit = function(t) {
            this._callbacks = this._callbacks || {
            };
            for(var e = new Array(arguments.length - 1), r = this._callbacks["$" + t], n = 1; n < arguments.length; n++)e[n - 1] = arguments[n];
            if (r) {
                n = 0;
                for(var i = (r = r.slice(0)).length; n < i; ++n)r[n].apply(this, e);
            }
            return this;
        }, e9.prototype.listeners = function(t) {
            return this._callbacks = this._callbacks || {
            }, this._callbacks["$" + t] || [];
        }, e9.prototype.hasListeners = function(t) {
            return !!this.listeners(t).length;
        };
    });
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
	 * http://naver.github.io/egjs
	 *
	 * Forked By Naver egjs
	 * Copyright (c) hammerjs
	 * Licensed under the MIT license */ function ia() {
        return (ia = Object.assign || function(t) {
            for(var e = 1; e < arguments.length; e++){
                var r = arguments[e];
                for(var n in r)Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
            }
            return t;
        }).apply(this, arguments);
    }
    function oa(t, e) {
        t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
    }
    function aa(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t;
    }
    var ua, sa = "function" != typeof Object.assign ? function(t) {
        if (null == t) throw new TypeError("Cannot convert undefined or null to object");
        for(var e = Object(t), r = 1; r < arguments.length; r++){
            var n = arguments[r];
            if (null != n) for(var i in n)n.hasOwnProperty(i) && (e[i] = n[i]);
        }
        return e;
    } : Object.assign, ca = [
        "",
        "webkit",
        "Moz",
        "MS",
        "ms",
        "o"
    ], fa = "undefined" == typeof document ? {
        style: {
        }
    } : document.createElement("div"), la = Math.round, ha = Math.abs, pa = Date.now;
    function va(t, e) {
        for(var r, n, i = e[0].toUpperCase() + e.slice(1), o = 0; o < ca.length;){
            if ((n = (r = ca[o]) ? r + i : e) in t) return n;
            o++;
        }
    }
    ua = "undefined" == typeof window ? {
    } : window;
    var da = va(fa.style, "touchAction"), ya = void 0 !== da;
    var ga = "compute", ma = "auto", ba = "manipulation", _a = "none", wa = "pan-x", Ea = "pan-y", Oa = function() {
        if (!ya) return !1;
        var t = {
        }, e = ua.CSS && ua.CSS.supports;
        return [
            "auto",
            "manipulation",
            "pan-y",
            "pan-x",
            "pan-x pan-y",
            "none"
        ].forEach(function(r) {
            return t[r] = !e || ua.CSS.supports("touch-action", r);
        }), t;
    }(), Ta = "ontouchstart" in ua, Sa = void 0 !== va(ua, "PointerEvent"), xa = Ta && /mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent), ka = "touch", Aa = "mouse", ja = 16, Ia = 24, Pa = [
        "x",
        "y"
    ], Da = [
        "clientX",
        "clientY"
    ];
    function La(t, e, r) {
        var n;
        if (t) {
            if (t.forEach) t.forEach(e, r);
            else if (void 0 !== t.length) for(n = 0; n < t.length;)e.call(r, t[n], n, t), n++;
            else for(n in t)t.hasOwnProperty(n) && e.call(r, t[n], n, t);
        }
    }
    function Ca(t, e) {
        return "function" == typeof t ? t.apply(e && e[0] || void 0, e) : t;
    }
    function Ra(t, e) {
        return t.indexOf(e) > -1;
    }
    var Ma = function() {
        function t32(t, e) {
            this.manager = t, this.set(e);
        }
        var e10 = t32.prototype;
        return e10.set = function(t) {
            t === ga && (t = this.compute()), ya && this.manager.element.style && Oa[t] && (this.manager.element.style[da] = t), this.actions = t.toLowerCase().trim();
        }, e10.update = function() {
            this.set(this.manager.options.touchAction);
        }, e10.compute = function() {
            var t33 = [];
            return La(this.manager.recognizers, function(e) {
                Ca(e.options.enable, [
                    e
                ]) && (t33 = t33.concat(e.getTouchAction()));
            }), (function(t) {
                if (Ra(t, _a)) return _a;
                var e = Ra(t, wa), r = Ra(t, Ea);
                return e && r ? _a : e || r ? e ? wa : Ea : Ra(t, ba) ? ba : ma;
            })(t33.join(" "));
        }, e10.preventDefaults = function(t) {
            var e = t.srcEvent, r = t.offsetDirection;
            if (this.manager.session.prevented) e.preventDefault();
            else {
                var n = this.actions, i = Ra(n, _a) && !Oa.none, o = Ra(n, Ea) && !Oa["pan-y"], a = Ra(n, wa) && !Oa["pan-x"];
                if (i) {
                    var u = 1 === t.pointers.length, s = t.distance < 2, c = t.deltaTime < 250;
                    if (u && s && c) return;
                }
                if (!a || !o) return i || o && 6 & r || a && r & Ia ? this.preventSrc(e) : void 0;
            }
        }, e10.preventSrc = function(t) {
            this.manager.session.prevented = !0, t.preventDefault();
        }, t32;
    }();
    function Na(t, e) {
        for(; t;){
            if (t === e) return !0;
            t = t.parentNode;
        }
        return !1;
    }
    function Fa(t) {
        var e = t.length;
        if (1 === e) return {
            x: la(t[0].clientX),
            y: la(t[0].clientY)
        };
        for(var r = 0, n = 0, i = 0; i < e;)r += t[i].clientX, n += t[i].clientY, i++;
        return {
            x: la(r / e),
            y: la(n / e)
        };
    }
    function za(t) {
        for(var e = [], r = 0; r < t.pointers.length;)e[r] = {
            clientX: la(t.pointers[r].clientX),
            clientY: la(t.pointers[r].clientY)
        }, r++;
        return {
            timeStamp: pa(),
            pointers: e,
            center: Fa(e),
            deltaX: t.deltaX,
            deltaY: t.deltaY
        };
    }
    function qa(t, e, r) {
        r || (r = Pa);
        var n = e[r[0]] - t[r[0]], i = e[r[1]] - t[r[1]];
        return Math.sqrt(n * n + i * i);
    }
    function Ya(t, e, r) {
        r || (r = Pa);
        var n = e[r[0]] - t[r[0]], i = e[r[1]] - t[r[1]];
        return 180 * Math.atan2(i, n) / Math.PI;
    }
    function Ua(t, e) {
        return t === e ? 1 : ha(t) >= ha(e) ? t < 0 ? 2 : 4 : e < 0 ? 8 : ja;
    }
    function Xa(t, e, r) {
        return {
            x: e / t || 0,
            y: r / t || 0
        };
    }
    function Va(t34, e11) {
        var r8 = t34.session, n3 = e11.pointers, i2 = n3.length;
        r8.firstInput || (r8.firstInput = za(e11)), i2 > 1 && !r8.firstMultiple ? r8.firstMultiple = za(e11) : 1 === i2 && (r8.firstMultiple = !1);
        var o2 = r8.firstInput, a2 = r8.firstMultiple, u2 = a2 ? a2.center : o2.center, s2 = e11.center = Fa(n3);
        e11.timeStamp = pa(), e11.deltaTime = e11.timeStamp - o2.timeStamp, e11.angle = Ya(u2, s2), e11.distance = qa(u2, s2), (function(t, e) {
            var r = e.center, n = t.offsetDelta || {
            }, i = t.prevDelta || {
            }, o = t.prevInput || {
            };
            1 !== e.eventType && 4 !== o.eventType || (i = t.prevDelta = {
                x: o.deltaX || 0,
                y: o.deltaY || 0
            }, n = t.offsetDelta = {
                x: r.x,
                y: r.y
            }), e.deltaX = i.x + (r.x - n.x), e.deltaY = i.y + (r.y - n.y);
        })(r8, e11), e11.offsetDirection = Ua(e11.deltaX, e11.deltaY);
        var c2, f2, l = Xa(e11.deltaTime, e11.deltaX, e11.deltaY);
        e11.overallVelocityX = l.x, e11.overallVelocityY = l.y, e11.overallVelocity = ha(l.x) > ha(l.y) ? l.x : l.y, e11.scale = a2 ? (c2 = a2.pointers, qa((f2 = n3)[0], f2[1], Da) / qa(c2[0], c2[1], Da)) : 1, e11.rotation = a2 ? (function(t, e) {
            return Ya(e[1], e[0], Da) + Ya(t[1], t[0], Da);
        })(a2.pointers, n3) : 0, e11.maxPointers = r8.prevInput ? e11.pointers.length > r8.prevInput.maxPointers ? e11.pointers.length : r8.prevInput.maxPointers : e11.pointers.length, (function(t, e) {
            var r, n, i, o, a = t.lastInterval || e, u = e.timeStamp - a.timeStamp;
            if (8 !== e.eventType && (u > 25 || void 0 === a.velocity)) {
                var s = e.deltaX - a.deltaX, c = e.deltaY - a.deltaY, f = Xa(u, s, c);
                n = f.x, i = f.y, r = ha(f.x) > ha(f.y) ? f.x : f.y, o = Ua(s, c), t.lastInterval = e;
            } else r = a.velocity, n = a.velocityX, i = a.velocityY, o = a.direction;
            e.velocity = r, e.velocityX = n, e.velocityY = i, e.direction = o;
        })(r8, e11);
        var h, p = t34.element, v = e11.srcEvent;
        Na(h = v.composedPath ? v.composedPath()[0] : v.path ? v.path[0] : v.target, p) && (p = h), e11.target = p;
    }
    function Wa(t, e, r) {
        var n = r.pointers.length, i = r.changedPointers.length, o = 1 & e && n - i == 0, a = 12 & e && n - i == 0;
        r.isFirst = !!o, r.isFinal = !!a, o && (t.session = {
        }), r.eventType = e, Va(t, r), t.emit("hammer.input", r), t.recognize(r), t.session.prevInput = r;
    }
    function Ga(t) {
        return t.trim().split(/\s+/g);
    }
    function Ha(t, e12, r) {
        La(Ga(e12), function(e) {
            t.addEventListener(e, r, !1);
        });
    }
    function $a(t, e13, r) {
        La(Ga(e13), function(e) {
            t.removeEventListener(e, r, !1);
        });
    }
    function Ja(t) {
        var e = t.ownerDocument || t;
        return e.defaultView || e.parentWindow || window;
    }
    var Qa = function() {
        function t35(t, e15) {
            var r = this;
            this.manager = t, this.callback = e15, this.element = t.element, this.target = t.options.inputTarget, this.domHandler = function(e) {
                Ca(t.options.enable, [
                    t
                ]) && r.handler(e);
            }, this.init();
        }
        var e14 = t35.prototype;
        return e14.handler = function() {
        }, e14.init = function() {
            this.evEl && Ha(this.element, this.evEl, this.domHandler), this.evTarget && Ha(this.target, this.evTarget, this.domHandler), this.evWin && Ha(Ja(this.element), this.evWin, this.domHandler);
        }, e14.destroy = function() {
            this.evEl && $a(this.element, this.evEl, this.domHandler), this.evTarget && $a(this.target, this.evTarget, this.domHandler), this.evWin && $a(Ja(this.element), this.evWin, this.domHandler);
        }, t35;
    }();
    function Ba(t, e, r) {
        if (t.indexOf && !r) return t.indexOf(e);
        for(var n = 0; n < t.length;){
            if (r && t[n][r] == e || !r && t[n] === e) return n;
            n++;
        }
        return -1;
    }
    var Ka = {
        pointerdown: 1,
        pointermove: 2,
        pointerup: 4,
        pointercancel: 8,
        pointerout: 8
    }, Za = {
        2: ka,
        3: "pen",
        4: Aa,
        5: "kinect"
    }, tu = "pointerdown", eu = "pointermove pointerup pointercancel";
    ua.MSPointerEvent && !ua.PointerEvent && (tu = "MSPointerDown", eu = "MSPointerMove MSPointerUp MSPointerCancel");
    var ru = function(t36) {
        function e16() {
            var r, n = e16.prototype;
            return n.evEl = tu, n.evWin = eu, (r = t36.apply(this, arguments) || this).store = r.manager.session.pointerEvents = [], r;
        }
        return oa(e16, t36), e16.prototype.handler = function(t) {
            var e = this.store, r = !1, n = t.type.toLowerCase().replace("ms", ""), i = Ka[n], o = Za[t.pointerType] || t.pointerType, a = o === ka, u = Ba(e, t.pointerId, "pointerId");
            1 & i && (0 === t.button || a) ? u < 0 && (e.push(t), u = e.length - 1) : 12 & i && (r = !0), u < 0 || (e[u] = t, this.callback(this.manager, i, {
                pointers: e,
                changedPointers: [
                    t
                ],
                pointerType: o,
                srcEvent: t
            }), r && e.splice(u, 1));
        }, e16;
    }(Qa);
    function nu(t) {
        return Array.prototype.slice.call(t, 0);
    }
    function iu(t37, e, r9) {
        for(var n = [], i = [], o = 0; o < t37.length;){
            var a = e ? t37[o][e] : t37[o];
            Ba(i, a) < 0 && n.push(t37[o]), i[o] = a, o++;
        }
        return r9 && (n = e ? n.sort(function(t, r) {
            return t[e] > r[e];
        }) : n.sort()), n;
    }
    var ou = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, au = "touchstart touchmove touchend touchcancel", uu = function(t38) {
        function e17() {
            var r;
            return e17.prototype.evTarget = au, (r = t38.apply(this, arguments) || this).targetIds = {
            }, r;
        }
        return oa(e17, t38), e17.prototype.handler = function(t) {
            var e = ou[t.type], r = su.call(this, t, e);
            r && this.callback(this.manager, e, {
                pointers: r[0],
                changedPointers: r[1],
                pointerType: ka,
                srcEvent: t
            });
        }, e17;
    }(Qa);
    function su(t39, e) {
        var r, n, i = nu(t39.touches), o = this.targetIds;
        if (3 & e && 1 === i.length) return o[i[0].identifier] = !0, [
            i,
            i
        ];
        var a = nu(t39.changedTouches), u = [], s = this.target;
        if (n = i.filter(function(t) {
            return Na(t.target, s);
        }), 1 === e) for(r = 0; r < n.length;)o[n[r].identifier] = !0, r++;
        for(r = 0; r < a.length;)o[a[r].identifier] && u.push(a[r]), 12 & e && delete o[a[r].identifier], r++;
        return u.length ? [
            iu(n.concat(u), "identifier", !0),
            u
        ] : void 0;
    }
    var cu = {
        mousedown: 1,
        mousemove: 2,
        mouseup: 4
    }, fu = "mousedown", lu = "mousemove mouseup", hu = function(t40) {
        function e18() {
            var r, n = e18.prototype;
            return n.evEl = fu, n.evWin = lu, (r = t40.apply(this, arguments) || this).pressed = !1, r;
        }
        return oa(e18, t40), e18.prototype.handler = function(t) {
            var e = cu[t.type];
            1 & e && 0 === t.button && (this.pressed = !0), 2 & e && 1 !== t.which && (e = 4), this.pressed && (4 & e && (this.pressed = !1), this.callback(this.manager, e, {
                pointers: [
                    t
                ],
                changedPointers: [
                    t
                ],
                pointerType: Aa,
                srcEvent: t
            }));
        }, e18;
    }(Qa);
    function pu(t41) {
        var e = t41.changedPointers[0];
        if (e.identifier === this.primaryTouch) {
            var r = {
                x: e.clientX,
                y: e.clientY
            }, n = this.lastTouches;
            this.lastTouches.push(r);
            setTimeout(function() {
                var t = n.indexOf(r);
                t > -1 && n.splice(t, 1);
            }, 2500);
        }
    }
    function vu(t, e) {
        1 & t ? (this.primaryTouch = e.changedPointers[0].identifier, pu.call(this, e)) : 12 & t && pu.call(this, e);
    }
    function du(t) {
        for(var e = t.srcEvent.clientX, r = t.srcEvent.clientY, n = 0; n < this.lastTouches.length; n++){
            var i = this.lastTouches[n], o = Math.abs(e - i.x), a = Math.abs(r - i.y);
            if (o <= 25 && a <= 25) return !0;
        }
        return !1;
    }
    var yu = function() {
        return (function(t42) {
            function e19(e20, r10) {
                var n;
                return (n = t42.call(this, e20, r10) || this).handler = function(t, e, r) {
                    var i = r.pointerType === ka, o = r.pointerType === Aa;
                    if (!(o && r.sourceCapabilities && r.sourceCapabilities.firesTouchEvents)) {
                        if (i) vu.call(aa(aa(n)), e, r);
                        else if (o && du.call(aa(aa(n)), r)) return;
                        n.callback(t, e, r);
                    }
                }, n.touch = new uu(n.manager, n.handler), n.mouse = new hu(n.manager, n.handler), n.primaryTouch = null, n.lastTouches = [], n;
            }
            return oa(e19, t42), e19.prototype.destroy = function() {
                this.touch.destroy(), this.mouse.destroy();
            }, e19;
        })(Qa);
    }();
    function gu(t, e, r) {
        return !!Array.isArray(t) && (La(t, r[e], r), !0);
    }
    var mu = 32, bu = 1;
    function _u(t, e) {
        var r = e.manager;
        return r ? r.get(t) : t;
    }
    function wu(t) {
        return 16 & t ? "cancel" : 8 & t ? "end" : 4 & t ? "move" : 2 & t ? "start" : "";
    }
    var Eu = function() {
        function t43(t) {
            void 0 === t && (t = {
            }), this.options = ia({
                enable: !0
            }, t), this.id = bu++, this.manager = null, this.state = 1, this.simultaneous = {
            }, this.requireFail = [];
        }
        var e21 = t43.prototype;
        return e21.set = function(t) {
            return sa(this.options, t), this.manager && this.manager.touchAction.update(), this;
        }, e21.recognizeWith = function(t) {
            if (gu(t, "recognizeWith", this)) return this;
            var e = this.simultaneous;
            return e[(t = _u(t, this)).id] || (e[t.id] = t, t.recognizeWith(this)), this;
        }, e21.dropRecognizeWith = function(t) {
            return gu(t, "dropRecognizeWith", this) || (t = _u(t, this), delete this.simultaneous[t.id]), this;
        }, e21.requireFailure = function(t) {
            if (gu(t, "requireFailure", this)) return this;
            var e = this.requireFail;
            return -1 === Ba(e, t = _u(t, this)) && (e.push(t), t.requireFailure(this)), this;
        }, e21.dropRequireFailure = function(t) {
            if (gu(t, "dropRequireFailure", this)) return this;
            t = _u(t, this);
            var e = Ba(this.requireFail, t);
            return e > -1 && this.requireFail.splice(e, 1), this;
        }, e21.hasRequireFailures = function() {
            return this.requireFail.length > 0;
        }, e21.canRecognizeWith = function(t) {
            return !!this.simultaneous[t.id];
        }, e21.emit = function(t) {
            var e = this, r11 = this.state;
            function n(r) {
                e.manager.emit(r, t);
            }
            r11 < 8 && n(e.options.event + wu(r11)), n(e.options.event), t.additionalEvent && n(t.additionalEvent), r11 >= 8 && n(e.options.event + wu(r11));
        }, e21.tryEmit = function(t) {
            if (this.canEmit()) return this.emit(t);
            this.state = mu;
        }, e21.canEmit = function() {
            for(var t = 0; t < this.requireFail.length;){
                if (!(33 & this.requireFail[t].state)) return !1;
                t++;
            }
            return !0;
        }, e21.recognize = function(t) {
            var e = sa({
            }, t);
            if (!Ca(this.options.enable, [
                this,
                e
            ])) return this.reset(), void (this.state = mu);
            56 & this.state && (this.state = 1), this.state = this.process(e), 30 & this.state && this.tryEmit(e);
        }, e21.process = function(t) {
        }, e21.getTouchAction = function() {
        }, e21.reset = function() {
        }, t43;
    }(), Ou = function(t44) {
        function e22(e) {
            var r;
            return void 0 === e && (e = {
            }), (r = t44.call(this, ia({
                event: "tap",
                pointers: 1,
                taps: 1,
                interval: 300,
                time: 250,
                threshold: 9,
                posThreshold: 10
            }, e)) || this).pTime = !1, r.pCenter = !1, r._timer = null, r._input = null, r.count = 0, r;
        }
        oa(e22, t44);
        var r12 = e22.prototype;
        return r12.getTouchAction = function() {
            return [
                ba
            ];
        }, r12.process = function(t) {
            var e = this, r = this.options, n = t.pointers.length === r.pointers, i = t.distance < r.threshold, o = t.deltaTime < r.time;
            if (this.reset(), 1 & t.eventType && 0 === this.count) return this.failTimeout();
            if (i && o && n) {
                if (4 !== t.eventType) return this.failTimeout();
                var a = !this.pTime || t.timeStamp - this.pTime < r.interval, u = !this.pCenter || qa(this.pCenter, t.center) < r.posThreshold;
                if (this.pTime = t.timeStamp, this.pCenter = t.center, u && a ? this.count += 1 : this.count = 1, this._input = t, 0 === this.count % r.taps) return this.hasRequireFailures() ? (this._timer = setTimeout(function() {
                    e.state = 8, e.tryEmit();
                }, r.interval), 2) : 8;
            }
            return mu;
        }, r12.failTimeout = function() {
            var t = this;
            return this._timer = setTimeout(function() {
                t.state = mu;
            }, this.options.interval), mu;
        }, r12.reset = function() {
            clearTimeout(this._timer);
        }, r12.emit = function() {
            8 === this.state && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
        }, e22;
    }(Eu), Tu = function(t45) {
        function e23(e) {
            return void 0 === e && (e = {
            }), t45.call(this, ia({
                pointers: 1
            }, e)) || this;
        }
        oa(e23, t45);
        var r13 = e23.prototype;
        return r13.attrTest = function(t) {
            var e = this.options.pointers;
            return 0 === e || t.pointers.length === e;
        }, r13.process = function(t) {
            var e = this.state, r = t.eventType, n = 6 & e, i = this.attrTest(t);
            return n && (8 & r || !i) ? 16 | e : n || i ? 4 & r ? 8 | e : 2 & e ? 4 | e : 2 : mu;
        }, e23;
    }(Eu);
    function Su(t) {
        return t === ja ? "down" : 8 === t ? "up" : 2 === t ? "left" : 4 === t ? "right" : "";
    }
    var xu = function(t46) {
        function e24(e) {
            var r;
            return void 0 === e && (e = {
            }), (r = t46.call(this, ia({
                event: "pan",
                threshold: 10,
                pointers: 1,
                direction: 30
            }, e)) || this).pX = null, r.pY = null, r;
        }
        oa(e24, t46);
        var r14 = e24.prototype;
        return r14.getTouchAction = function() {
            var t = this.options.direction, e = [];
            return 6 & t && e.push(Ea), t & Ia && e.push(wa), e;
        }, r14.directionTest = function(t) {
            var e = this.options, r = !0, n = t.distance, i = t.direction, o = t.deltaX, a = t.deltaY;
            return i & e.direction || (6 & e.direction ? (i = 0 === o ? 1 : o < 0 ? 2 : 4, r = o !== this.pX, n = Math.abs(t.deltaX)) : (i = 0 === a ? 1 : a < 0 ? 8 : ja, r = a !== this.pY, n = Math.abs(t.deltaY))), t.direction = i, r && n > e.threshold && i & e.direction;
        }, r14.attrTest = function(t) {
            return Tu.prototype.attrTest.call(this, t) && (2 & this.state || !(2 & this.state) && this.directionTest(t));
        }, r14.emit = function(e) {
            this.pX = e.deltaX, this.pY = e.deltaY;
            var r = Su(e.direction);
            r && (e.additionalEvent = this.options.event + r), t46.prototype.emit.call(this, e);
        }, e24;
    }(Tu), ku = function(t47) {
        function e25(e) {
            return void 0 === e && (e = {
            }), t47.call(this, ia({
                event: "swipe",
                threshold: 10,
                velocity: 0.3,
                direction: 30,
                pointers: 1
            }, e)) || this;
        }
        oa(e25, t47);
        var r15 = e25.prototype;
        return r15.getTouchAction = function() {
            return xu.prototype.getTouchAction.call(this);
        }, r15.attrTest = function(e) {
            var r, n = this.options.direction;
            return 30 & n ? r = e.overallVelocity : 6 & n ? r = e.overallVelocityX : n & Ia && (r = e.overallVelocityY), t47.prototype.attrTest.call(this, e) && n & e.offsetDirection && e.distance > this.options.threshold && e.maxPointers === this.options.pointers && ha(r) > this.options.velocity && 4 & e.eventType;
        }, r15.emit = function(t) {
            var e = Su(t.offsetDirection);
            e && this.manager.emit(this.options.event + e, t), this.manager.emit(this.options.event, t);
        }, e25;
    }(Tu), Au = function(t) {
        function e26(e) {
            return void 0 === e && (e = {
            }), t.call(this, ia({
                event: "pinch",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        oa(e26, t);
        var r16 = e26.prototype;
        return r16.getTouchAction = function() {
            return [
                _a
            ];
        }, r16.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.scale - 1) > this.options.threshold || 2 & this.state);
        }, r16.emit = function(e) {
            if (1 !== e.scale) {
                var r = e.scale < 1 ? "in" : "out";
                e.additionalEvent = this.options.event + r;
            }
            t.prototype.emit.call(this, e);
        }, e26;
    }(Tu), ju = function(t) {
        function e27(e) {
            return void 0 === e && (e = {
            }), t.call(this, ia({
                event: "rotate",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        oa(e27, t);
        var r = e27.prototype;
        return r.getTouchAction = function() {
            return [
                _a
            ];
        }, r.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.rotation) > this.options.threshold || 2 & this.state);
        }, e27;
    }(Tu), Iu = function(t48) {
        function e28(e) {
            var r;
            return void 0 === e && (e = {
            }), (r = t48.call(this, ia({
                event: "press",
                pointers: 1,
                time: 251,
                threshold: 9
            }, e)) || this)._timer = null, r._input = null, r;
        }
        oa(e28, t48);
        var r17 = e28.prototype;
        return r17.getTouchAction = function() {
            return [
                ma
            ];
        }, r17.process = function(t) {
            var e = this, r = this.options, n = t.pointers.length === r.pointers, i = t.distance < r.threshold, o = t.deltaTime > r.time;
            if (this._input = t, !i || !n || 12 & t.eventType && !o) this.reset();
            else if (1 & t.eventType) this.reset(), this._timer = setTimeout(function() {
                e.state = 8, e.tryEmit();
            }, r.time);
            else if (4 & t.eventType) return 8;
            return mu;
        }, r17.reset = function() {
            clearTimeout(this._timer);
        }, r17.emit = function(t) {
            8 === this.state && (t && 4 & t.eventType ? this.manager.emit(this.options.event + "up", t) : (this._input.timeStamp = pa(), this.manager.emit(this.options.event, this._input)));
        }, e28;
    }(Eu), Pu = {
        domEvents: !1,
        touchAction: ga,
        enable: !0,
        inputTarget: null,
        inputClass: null,
        cssProps: {
            userSelect: "none",
            touchSelect: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
        }
    }, Du = [
        [
            ju,
            {
                enable: !1
            }
        ],
        [
            Au,
            {
                enable: !1
            },
            [
                "rotate"
            ]
        ],
        [
            ku,
            {
                direction: 6
            }
        ],
        [
            xu,
            {
                direction: 6
            },
            [
                "swipe"
            ]
        ],
        [
            Ou
        ],
        [
            Ou,
            {
                event: "doubletap",
                taps: 2
            },
            [
                "tap"
            ]
        ],
        [
            Iu
        ]
    ];
    function Lu(t, e) {
        var r, n = t.element;
        n.style && (La(t.options.cssProps, function(i, o) {
            r = va(n.style, o), e ? (t.oldCssProps[r] = n.style[r], n.style[r] = i) : n.style[r] = t.oldCssProps[r] || "";
        }), e || (t.oldCssProps = {
        }));
    }
    var Cu = function() {
        function t49(t50, e30) {
            var r, n = this;
            this.options = sa({
            }, Pu, e30 || {
            }), this.options.inputTarget = this.options.inputTarget || t50, this.handlers = {
            }, this.session = {
            }, this.recognizers = [], this.oldCssProps = {
            }, this.element = t50, this.input = new ((r = this).options.inputClass || (Sa ? ru : (xa ? uu : (Ta ? yu : hu))))(r, Wa), this.touchAction = new Ma(this, this.options.touchAction), Lu(this, !0), La(this.options.recognizers, function(t) {
                var e = n.add(new t[0](t[1]));
                t[2] && e.recognizeWith(t[2]), t[3] && e.requireFailure(t[3]);
            }, this);
        }
        var e29 = t49.prototype;
        return e29.set = function(t) {
            return sa(this.options, t), t.touchAction && this.touchAction.update(), t.inputTarget && (this.input.destroy(), this.input.target = t.inputTarget, this.input.init()), this;
        }, e29.stop = function(t) {
            this.session.stopped = t ? 2 : 1;
        }, e29.recognize = function(t) {
            var e = this.session;
            if (!e.stopped) {
                var r;
                this.touchAction.preventDefaults(t);
                var n = this.recognizers, i = e.curRecognizer;
                (!i || i && 8 & i.state) && (e.curRecognizer = null, i = null);
                for(var o = 0; o < n.length;)r = n[o], 2 === e.stopped || i && r !== i && !r.canRecognizeWith(i) ? r.reset() : r.recognize(t), !i && 14 & r.state && (e.curRecognizer = r, i = r), o++;
            }
        }, e29.get = function(t) {
            if (t instanceof Eu) return t;
            for(var e = this.recognizers, r = 0; r < e.length; r++)if (e[r].options.event === t) return e[r];
            return null;
        }, e29.add = function(t) {
            if (gu(t, "add", this)) return this;
            var e = this.get(t.options.event);
            return e && this.remove(e), this.recognizers.push(t), t.manager = this, this.touchAction.update(), t;
        }, e29.remove = function(t) {
            if (gu(t, "remove", this)) return this;
            var e = this.get(t);
            if (t) {
                var r = this.recognizers, n = Ba(r, e);
                -1 !== n && (r.splice(n, 1), this.touchAction.update());
            }
            return this;
        }, e29.on = function(t, e) {
            if (void 0 === t || void 0 === e) return this;
            var r = this.handlers;
            return La(Ga(t), function(t) {
                r[t] = r[t] || [], r[t].push(e);
            }), this;
        }, e29.off = function(t, e) {
            if (void 0 === t) return this;
            var r = this.handlers;
            return La(Ga(t), function(t) {
                e ? r[t] && r[t].splice(Ba(r[t], e), 1) : delete r[t];
            }), this;
        }, e29.emit = function(t51, e31) {
            this.options.domEvents && (function(t, e) {
                var r = document.createEvent("Event");
                r.initEvent(t, !0, !0), r.gesture = e, e.target.dispatchEvent(r);
            })(t51, e31);
            var r18 = this.handlers[t51] && this.handlers[t51].slice();
            if (r18 && r18.length) {
                e31.type = t51, e31.preventDefault = function() {
                    e31.srcEvent.preventDefault();
                };
                for(var n = 0; n < r18.length;)r18[n](e31), n++;
            }
        }, e29.destroy = function() {
            this.element && Lu(this, !1), this.handlers = {
            }, this.session = {
            }, this.input.destroy(), this.element = null;
        }, t49;
    }(), Ru = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, Mu = "touchstart", Nu = "touchstart touchmove touchend touchcancel", Fu = function(t52) {
        function e32() {
            var r, n = e32.prototype;
            return n.evTarget = Mu, n.evWin = Nu, (r = t52.apply(this, arguments) || this).started = !1, r;
        }
        return oa(e32, t52), e32.prototype.handler = function(t) {
            var e = Ru[t.type];
            if (1 === e && (this.started = !0), this.started) {
                var r = zu.call(this, t, e);
                12 & e && r[0].length - r[1].length == 0 && (this.started = !1), this.callback(this.manager, e, {
                    pointers: r[0],
                    changedPointers: r[1],
                    pointerType: ka,
                    srcEvent: t
                });
            }
        }, e32;
    }(Qa);
    function zu(t, e) {
        var r = nu(t.touches), n = nu(t.changedTouches);
        return 12 & e && (r = iu(r.concat(n), "identifier", !0)), [
            r,
            n
        ];
    }
    function qu(t, e33, r19) {
        var n = "DEPRECATED METHOD: " + e33 + "\n" + r19 + " AT \n";
        return function() {
            var e = new Error("get-stack-trace"), r = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace", i = window.console && (window.console.warn || window.console.log);
            return i && i.call(window.console, n, r), t.apply(this, arguments);
        };
    }
    var Yu = qu(function(t, e, r) {
        for(var n = Object.keys(e), i = 0; i < n.length;)(!r || r && void 0 === t[n[i]]) && (t[n[i]] = e[n[i]]), i++;
        return t;
    }, "extend", "Use `assign`."), Uu = qu(function(t, e) {
        return Yu(t, e, !0);
    }, "merge", "Use `assign`.");
    function Xu(t, e, r) {
        var n, i = e.prototype;
        (n = t.prototype = Object.create(i)).constructor = t, n._super = i, r && sa(n, r);
    }
    function Vu(t, e) {
        return function() {
            return t.apply(e, arguments);
        };
    }
    var Wu = function() {
        var t53 = function(t, e) {
            return void 0 === e && (e = {
            }), new Cu(t, ia({
                recognizers: Du.concat()
            }, e));
        };
        return t53.VERSION = "2.0.17-rc", t53.DIRECTION_ALL = 30, t53.DIRECTION_DOWN = ja, t53.DIRECTION_LEFT = 2, t53.DIRECTION_RIGHT = 4, t53.DIRECTION_UP = 8, t53.DIRECTION_HORIZONTAL = 6, t53.DIRECTION_VERTICAL = Ia, t53.DIRECTION_NONE = 1, t53.DIRECTION_DOWN = ja, t53.INPUT_START = 1, t53.INPUT_MOVE = 2, t53.INPUT_END = 4, t53.INPUT_CANCEL = 8, t53.STATE_POSSIBLE = 1, t53.STATE_BEGAN = 2, t53.STATE_CHANGED = 4, t53.STATE_ENDED = 8, t53.STATE_RECOGNIZED = 8, t53.STATE_CANCELLED = 16, t53.STATE_FAILED = mu, t53.Manager = Cu, t53.Input = Qa, t53.TouchAction = Ma, t53.TouchInput = uu, t53.MouseInput = hu, t53.PointerEventInput = ru, t53.TouchMouseInput = yu, t53.SingleTouchInput = Fu, t53.Recognizer = Eu, t53.AttrRecognizer = Tu, t53.Tap = Ou, t53.Pan = xu, t53.Swipe = ku, t53.Pinch = Au, t53.Rotate = ju, t53.Press = Iu, t53.on = Ha, t53.off = $a, t53.each = La, t53.merge = Uu, t53.extend = Yu, t53.bindFn = Vu, t53.assign = sa, t53.inherit = Xu, t53.bindFn = Vu, t53.prefixed = va, t53.toArray = nu, t53.inArray = Ba, t53.uniqueArray = iu, t53.splitStr = Ga, t53.boolOrFn = Ca, t53.hasParent = Na, t53.addEventListeners = Ha, t53.removeEventListeners = $a, t53.defaults = sa({
        }, Pu, {
            preset: Du
        }), t53;
    }();
    function Gu(t54, e34) {
        var r20;
        if (void 0 === ra || null == zn(t54)) {
            if (Xo(t54) || (r20 = (function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return Hu(t, e);
                var n = $o(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return Bn(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Hu(t, e);
            })(t54)) || e34 && t54 && "number" == typeof t54.length) {
                r20 && (t54 = r20);
                var n4 = 0, i = function() {
                };
                return {
                    s: i,
                    n: function() {
                        return n4 >= t54.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t54[n4++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: i
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o, a = !0, u = !1;
        return {
            s: function() {
                r20 = Fn(t54);
            },
            n: function() {
                var t = r20.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, o = t;
            },
            f: function() {
                try {
                    a || null == r20.return || r20.return();
                } finally{
                    if (u) throw o;
                }
            }
        };
    }
    function Hu(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    var $u = ra("DELETE");
    function Ju() {
        var t = Qu.apply(void 0, arguments);
        return Ku(t), t;
    }
    function Qu() {
        for(var t = arguments.length, e = new Array(t), r = 0; r < t; r++)e[r] = arguments[r];
        if (e.length < 2) return e[0];
        var n;
        if (e.length > 2) return Qu.apply(void 0, ea(n = [
            Ju(e[0], e[1])
        ]).call(n, Ko($o(e).call(e, 2))));
        var i, o = e[0], a = e[1], u = Gu(Ho(a));
        try {
            for(u.s(); !(i = u.n()).done;){
                var s = i.value;
                Object.prototype.propertyIsEnumerable.call(a, s) && (a[s] === $u ? delete o[s] : null === o[s] || null === a[s] || "object" !== Go(o[s]) || "object" !== Go(a[s]) || Xo(o[s]) || Xo(a[s]) ? o[s] = Bu(a[s]) : o[s] = Qu(o[s], a[s]));
            }
        } catch (t55) {
            u.e(t55);
        } finally{
            u.f();
        }
        return o;
    }
    function Bu(t56) {
        return Xo(t56) ? qt(t56).call(t56, function(t) {
            return Bu(t);
        }) : "object" === Go(t56) && null !== t56 ? Qu({
        }, t56) : t56;
    }
    function Ku(t) {
        for(var e = 0, r = Uo(t); e < r.length; e++){
            var n = r[e];
            t[n] === $u ? delete t[n] : "object" === Go(t[n]) && null !== t[n] && Ku(t[n]);
        }
    }
    var Zu = "undefined" != typeof window ? window.Hammer || Wu : function() {
        var t;
        return {
            on: t = function() {
            },
            off: t,
            destroy: t,
            emit: t,
            get: function() {
                return {
                    set: t
                };
            }
        };
    };
    function ts(t57) {
        var e35, r = this;
        this._cleanupQueue = [], this.active = !1, this._dom = {
            container: t57,
            overlay: document.createElement("div")
        }, this._dom.overlay.classList.add("vis-overlay"), this._dom.container.appendChild(this._dom.overlay), this._cleanupQueue.push(function() {
            r._dom.overlay.parentNode.removeChild(r._dom.overlay);
        });
        var n = Zu(this._dom.overlay);
        n.on("tap", ce(e35 = this._onTapOverlay).call(e35, this)), this._cleanupQueue.push(function() {
            n.destroy();
        });
        var i = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        lo(i).call(i, function(t58) {
            n.on(t58, function(t) {
                t.srcEvent.stopPropagation();
            });
        }), document && document.body && (this._onClick = function(e36) {
            (function(t, e) {
                for(; t;){
                    if (t === e) return !0;
                    t = t.parentNode;
                }
                return !1;
            })(e36.target, t57) || r.deactivate();
        }, document.body.addEventListener("click", this._onClick), this._cleanupQueue.push(function() {
            document.body.removeEventListener("click", r._onClick);
        })), this._escListener = function(t) {
            ("key" in t ? "Escape" === t.key : 27 === t.keyCode) && r.deactivate();
        };
    }
    na(ts.prototype), ts.current = null, ts.prototype.destroy = function() {
        var t, e;
        this.deactivate();
        var r, n = Gu(no(t = Ki(e = this._cleanupQueue).call(e, 0)).call(t));
        try {
            for(n.s(); !(r = n.n()).done;)(0, r.value)();
        } catch (t59) {
            n.e(t59);
        } finally{
            n.f();
        }
    }, ts.prototype.activate = function() {
        ts.current && ts.current.deactivate(), ts.current = this, this.active = !0, this._dom.overlay.style.display = "none", this._dom.container.classList.add("vis-active"), this.emit("change"), this.emit("activate"), document.body.addEventListener("keydown", this._escListener);
    }, ts.prototype.deactivate = function() {
        this.active = !1, this._dom.overlay.style.display = "block", this._dom.container.classList.remove("vis-active"), document.body.removeEventListener("keydown", this._escListener), this.emit("change"), this.emit("deactivate");
    }, ts.prototype._onTapOverlay = function(t) {
        this.activate(), t.srcEvent.stopPropagation();
    };
    var es = Ot("Reflect", "construct"), rs = o1(function() {
        function t() {
        }
        return !(es(function() {
        }, [], t) instanceof t);
    }), ns = !o1(function() {
        es(function() {
        });
    }), is = rs || ns;
    X({
        target: "Reflect",
        stat: !0,
        forced: is,
        sham: is
    }, {
        construct: function(t, e) {
            R(t), N(e);
            var r = arguments.length < 3 ? t : R(arguments[2]);
            if (ns && !rs) return es(t, e, r);
            if (t == r) {
                switch(e.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(e[0]);
                    case 2:
                        return new t(e[0], e[1]);
                    case 3:
                        return new t(e[0], e[1], e[2]);
                    case 4:
                        return new t(e[0], e[1], e[2], e[3]);
                }
                var n = [
                    null
                ];
                return n.push.apply(n, e), new (ae.apply(t, n));
            }
            var i = r.prototype, o = He(g1(i) ? i : Object.prototype), a = Function.apply.call(t, o, e);
            return g1(a) ? a : o;
        }
    });
    var os = C.Reflect.construct, as = dt("Array").entries, us = Array.prototype, ss = {
        DOMTokenList: !0,
        NodeList: !0
    }, cs = function(t) {
        var e = t.entries;
        return t === us || t instanceof Array && e === us.entries || ss.hasOwnProperty(ar(t)) ? as : e;
    }, fs = r1(function(t60) {
        var e37 = function(t61) {
            var e38, r21 = Object.prototype, n5 = r21.hasOwnProperty, i3 = "function" == typeof Symbol ? Symbol : {
            }, o3 = i3.iterator || "@@iterator", a3 = i3.asyncIterator || "@@asyncIterator", u3 = i3.toStringTag || "@@toStringTag";
            function s3(t, e, r) {
                return Object.defineProperty(t, e, {
                    value: r,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }), t[e];
            }
            try {
                s3({
                }, "");
            } catch (t62) {
                s3 = function(t, e, r) {
                    return t[e] = r;
                };
            }
            function c3(t63, e39, r22, n6) {
                var i4 = e39 && e39.prototype instanceof y ? e39 : y, o4 = Object.create(i4.prototype), a4 = new A(n6 || []);
                return o4._invoke = (function(t, e, r) {
                    var n = l2;
                    return function(i, o) {
                        if (n === p) throw new Error("Generator is already running");
                        if (n === v) {
                            if ("throw" === i) throw o;
                            return I();
                        }
                        for(r.method = i, r.arg = o;;){
                            var a = r.delegate;
                            if (a) {
                                var u = S(a, r);
                                if (u) {
                                    if (u === d) continue;
                                    return u;
                                }
                            }
                            if ("next" === r.method) r.sent = r._sent = r.arg;
                            else if ("throw" === r.method) {
                                if (n === l2) throw n = v, r.arg;
                                r.dispatchException(r.arg);
                            } else "return" === r.method && r.abrupt("return", r.arg);
                            n = p;
                            var s = f(t, e, r);
                            if ("normal" === s.type) {
                                if (n = r.done ? v : h, s.arg === d) continue;
                                return {
                                    value: s.arg,
                                    done: r.done
                                };
                            }
                            "throw" === s.type && (n = v, r.method = "throw", r.arg = s.arg);
                        }
                    };
                })(t63, r22, a4), o4;
            }
            function f(t, e, r) {
                try {
                    return {
                        type: "normal",
                        arg: t.call(e, r)
                    };
                } catch (t64) {
                    return {
                        type: "throw",
                        arg: t64
                    };
                }
            }
            t61.wrap = c3;
            var l2 = "suspendedStart", h = "suspendedYield", p = "executing", v = "completed", d = {
            };
            function y() {
            }
            function g() {
            }
            function m() {
            }
            var b = {
            };
            b[o3] = function() {
                return this;
            };
            var _ = Object.getPrototypeOf, w = _ && _(_(j([])));
            w && w !== r21 && n5.call(w, o3) && (b = w);
            var E = m.prototype = y.prototype = Object.create(b);
            function O(t65) {
                [
                    "next",
                    "throw",
                    "return"
                ].forEach(function(e) {
                    s3(t65, e, function(t) {
                        return this._invoke(e, t);
                    });
                });
            }
            function T(t66, e40) {
                function r(i, o, a, u) {
                    var s = f(t66[i], t66, o);
                    if ("throw" !== s.type) {
                        var c = s.arg, l = c.value;
                        return l && "object" == typeof l && n5.call(l, "__await") ? e40.resolve(l.__await).then(function(t) {
                            r("next", t, a, u);
                        }, function(t) {
                            r("throw", t, a, u);
                        }) : e40.resolve(l).then(function(t) {
                            c.value = t, a(c);
                        }, function(t) {
                            return r("throw", t, a, u);
                        });
                    }
                    u(s.arg);
                }
                var i5;
                this._invoke = function(t, n) {
                    function o() {
                        return new e40(function(e, i) {
                            r(t, n, e, i);
                        });
                    }
                    return i5 = i5 ? i5.then(o, o) : o();
                };
            }
            function S(t, r) {
                var n = t.iterator[r.method];
                if (n === e38) {
                    if (r.delegate = null, "throw" === r.method) {
                        if (t.iterator.return && (r.method = "return", r.arg = e38, S(t, r), "throw" === r.method)) return d;
                        r.method = "throw", r.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }
                    return d;
                }
                var i = f(n, t.iterator, r.arg);
                if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, d;
                var o = i.arg;
                return o ? o.done ? (r[t.resultName] = o.value, r.next = t.nextLoc, "return" !== r.method && (r.method = "next", r.arg = e38), r.delegate = null, d) : o : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, d);
            }
            function x(t) {
                var e = {
                    tryLoc: t[0]
                };
                1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
            }
            function k(t) {
                var e = t.completion || {
                };
                e.type = "normal", delete e.arg, t.completion = e;
            }
            function A(t) {
                this.tryEntries = [
                    {
                        tryLoc: "root"
                    }
                ], t.forEach(x, this), this.reset(!0);
            }
            function j(t) {
                if (t) {
                    var r23 = t[o3];
                    if (r23) return r23.call(t);
                    if ("function" == typeof t.next) return t;
                    if (!isNaN(t.length)) {
                        var i = -1, a = function r() {
                            for(; ++i < t.length;)if (n5.call(t, i)) return r.value = t[i], r.done = !1, r;
                            return r.value = e38, r.done = !0, r;
                        };
                        return a.next = a;
                    }
                }
                return {
                    next: I
                };
            }
            function I() {
                return {
                    value: e38,
                    done: !0
                };
            }
            return g.prototype = E.constructor = m, m.constructor = g, g.displayName = s3(m, u3, "GeneratorFunction"), t61.isGeneratorFunction = function(t) {
                var e = "function" == typeof t && t.constructor;
                return !!e && (e === g || "GeneratorFunction" === (e.displayName || e.name));
            }, t61.mark = function(t) {
                return Object.setPrototypeOf ? Object.setPrototypeOf(t, m) : (t.__proto__ = m, s3(t, u3, "GeneratorFunction")), t.prototype = Object.create(E), t;
            }, t61.awrap = function(t) {
                return {
                    __await: t
                };
            }, O(T.prototype), T.prototype[a3] = function() {
                return this;
            }, t61.AsyncIterator = T, t61.async = function(e, r, n, i, o) {
                void 0 === o && (o = Promise);
                var a = new T(c3(e, r, n, i), o);
                return t61.isGeneratorFunction(r) ? a : a.next().then(function(t) {
                    return t.done ? t.value : a.next();
                });
            }, O(E), s3(E, u3, "Generator"), E[o3] = function() {
                return this;
            }, E.toString = function() {
                return "[object Generator]";
            }, t61.keys = function(t) {
                var e = [];
                for(var r24 in t)e.push(r24);
                return e.reverse(), function r() {
                    for(; e.length;){
                        var n = e.pop();
                        if (n in t) return r.value = n, r.done = !1, r;
                    }
                    return r.done = !0, r;
                };
            }, t61.values = j, A.prototype = {
                constructor: A,
                reset: function(t) {
                    if (this.prev = 0, this.next = 0, this.sent = this._sent = e38, this.done = !1, this.delegate = null, this.method = "next", this.arg = e38, this.tryEntries.forEach(k), !t) for(var r in this)"t" === r.charAt(0) && n5.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = e38);
                },
                stop: function() {
                    this.done = !0;
                    var t = this.tryEntries[0].completion;
                    if ("throw" === t.type) throw t.arg;
                    return this.rval;
                },
                dispatchException: function(t) {
                    if (this.done) throw t;
                    var r = this;
                    function i6(n, i) {
                        return u.type = "throw", u.arg = t, r.next = n, i && (r.method = "next", r.arg = e38), !!i;
                    }
                    for(var o = this.tryEntries.length - 1; o >= 0; --o){
                        var a = this.tryEntries[o], u = a.completion;
                        if ("root" === a.tryLoc) return i6("end");
                        if (a.tryLoc <= this.prev) {
                            var s = n5.call(a, "catchLoc"), c = n5.call(a, "finallyLoc");
                            if (s && c) {
                                if (this.prev < a.catchLoc) return i6(a.catchLoc, !0);
                                if (this.prev < a.finallyLoc) return i6(a.finallyLoc);
                            } else if (s) {
                                if (this.prev < a.catchLoc) return i6(a.catchLoc, !0);
                            } else {
                                if (!c) throw new Error("try statement without catch or finally");
                                if (this.prev < a.finallyLoc) return i6(a.finallyLoc);
                            }
                        }
                    }
                },
                abrupt: function(t, e) {
                    for(var r = this.tryEntries.length - 1; r >= 0; --r){
                        var i = this.tryEntries[r];
                        if (i.tryLoc <= this.prev && n5.call(i, "finallyLoc") && this.prev < i.finallyLoc) {
                            var o = i;
                            break;
                        }
                    }
                    o && ("break" === t || "continue" === t) && o.tryLoc <= e && e <= o.finallyLoc && (o = null);
                    var a = o ? o.completion : {
                    };
                    return a.type = t, a.arg = e, o ? (this.method = "next", this.next = o.finallyLoc, d) : this.complete(a);
                },
                complete: function(t, e) {
                    if ("throw" === t.type) throw t.arg;
                    return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), d;
                },
                finish: function(t) {
                    for(var e = this.tryEntries.length - 1; e >= 0; --e){
                        var r = this.tryEntries[e];
                        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), k(r), d;
                    }
                },
                catch: function(t) {
                    for(var e = this.tryEntries.length - 1; e >= 0; --e){
                        var r = this.tryEntries[e];
                        if (r.tryLoc === t) {
                            var n = r.completion;
                            if ("throw" === n.type) {
                                var i = n.arg;
                                k(r);
                            }
                            return i;
                        }
                    }
                    throw new Error("illegal catch attempt");
                },
                delegateYield: function(t, r, n) {
                    return this.delegate = {
                        iterator: j(t),
                        resultName: r,
                        nextLoc: n
                    }, "next" === this.method && (this.arg = e38), d;
                }
            }, t61;
        }(t60.exports);
        try {
            regeneratorRuntime = e37;
        } catch (t) {
            Function("r", "regeneratorRuntime = r")(e37);
        }
    }), ls = Vo, hs = dt("Array").values, ps = Array.prototype, vs = {
        DOMTokenList: !0,
        NodeList: !0
    }, ds = function(t) {
        var e = t.values;
        return t === ps || t instanceof Array && e === ps.values || vs.hasOwnProperty(ar(t)) ? hs : e;
    }, ys = [], gs = ys.sort, ms = o1(function() {
        ys.sort(void 0);
    }), bs = o1(function() {
        ys.sort(null);
    }), _s = Jt("sort");
    X({
        target: "Array",
        proto: !0,
        forced: ms || !bs || !_s
    }, {
        sort: function(t) {
            return void 0 === t ? gs.call(K(this)) : gs.call(K(this), R(t));
        }
    });
    var ws = dt("Array").sort, Es = Array.prototype, Os = function(t) {
        var e = t.sort;
        return t === Es || t instanceof Array && e === Es.sort ? ws : e;
    }, Ts = dt("Array").keys, Ss = Array.prototype, xs = {
        DOMTokenList: !0,
        NodeList: !0
    }, ks = function(t) {
        var e = t.keys;
        return t === Ss || t instanceof Array && e === Ss.keys || xs.hasOwnProperty(ar(t)) ? Ts : e;
    }, As = wt.some, js = Jt("some"), Is = Ct("some");
    X({
        target: "Array",
        proto: !0,
        forced: !js || !Is
    }, {
        some: function(t) {
            return As(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Ps = dt("Array").some, Ds = Array.prototype, Ls = function(t) {
        var e = t.some;
        return t === Ds || t instanceof Array && e === Ds.some ? Ps : e;
    }, Cs = !o1(function() {
        return Object.isExtensible(Object.preventExtensions({
        }));
    }), Rs = r1(function(t67) {
        var e41 = z.f, r = it("meta"), n = 0, i = Object.isExtensible || function() {
            return !0;
        }, o = function(t) {
            e41(t, r, {
                value: {
                    objectID: "O" + ++n,
                    weakData: {
                    }
                }
            });
        }, a = t67.exports = {
            REQUIRED: !1,
            fastKey: function(t, e) {
                if (!g1(t)) return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;
                if (!_1(t, r)) {
                    if (!i(t)) return "F";
                    if (!e) return "E";
                    o(t);
                }
                return t[r].objectID;
            },
            getWeakData: function(t, e) {
                if (!_1(t, r)) {
                    if (!i(t)) return !0;
                    if (!e) return !1;
                    o(t);
                }
                return t[r].weakData;
            },
            onFreeze: function(t) {
                return Cs && a.REQUIRED && i(t) && !_1(t, r) && o(t), t;
            }
        };
        Oe[r] = !0;
    }), Ms = function(t, e) {
        this.stopped = t, this.result = e;
    }, Ns = function(t68, e, r) {
        var n, i, o, a, u, s, c, f = r && r.that, l = !(!r || !r.AS_ENTRIES), h = !(!r || !r.IS_ITERATOR), p = !(!r || !r.INTERRUPTED), v = M(e, f, 1 + l + p), d = function(t) {
            return n && qn(n), new Ms(!0, t);
        }, y = function(t) {
            return l ? (N(t), p ? v(t[0], t[1], d) : v(t[0], t[1])) : p ? v(t, d) : v(t);
        };
        if (h) n = t68;
        else {
            if ("function" != typeof (i = Nn(t68))) throw TypeError("Target is not iterable");
            if (Vn(i)) {
                for(o = 0, a = J(t68.length); a > o; o++)if ((u = y(t68[o])) && u instanceof Ms) return u;
                return new Ms(!1);
            }
            n = i.call(t68);
        }
        for(s = n.next; !(c = s.call(n)).done;){
            try {
                u = y(c.value);
            } catch (t) {
                throw qn(n), t;
            }
            if ("object" == typeof u && u && u instanceof Ms) return u;
        }
        return new Ms(!1);
    }, Fs = function(t, e, r) {
        if (!(t instanceof e)) throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation");
        return t;
    }, zs = z.f, qs = wt.forEach, Ys = Tr.set, Us = Tr.getterFor, Xs = function(t69, e42, r25) {
        var n7, u = -1 !== t69.indexOf("Map"), s = -1 !== t69.indexOf("Weak"), c = u ? "set" : "add", f = i1[t69], l = f && f.prototype, h = {
        };
        if (a1 && "function" == typeof f && (s || l.forEach && !o1(function() {
            (new f).entries().next();
        }))) {
            n7 = e42(function(e, r) {
                Ys(Fs(e, n7, t69), {
                    type: t69,
                    collection: new f
                }), null != r && Ns(r, e[c], {
                    that: e,
                    AS_ENTRIES: u
                });
            });
            var p = Us(t69);
            qs([
                "add",
                "clear",
                "delete",
                "forEach",
                "get",
                "has",
                "set",
                "keys",
                "values",
                "entries"
            ], function(t) {
                var e = "add" == t || "set" == t;
                !(t in l) || s && "clear" == t || q(n7.prototype, t, function(r, n) {
                    var i = p(this).collection;
                    if (!e && s && !g1(r)) return "get" == t && void 0;
                    var o = i[t](0 === r ? 0 : r, n);
                    return e ? this : o;
                });
            }), s || zs(n7.prototype, "size", {
                configurable: !0,
                get: function() {
                    return p(this).collection.size;
                }
            });
        } else n7 = r25.getConstructor(e42, t69, u, c), Rs.REQUIRED = !0;
        return fr(n7, t69, !1, !0), h[t69] = n7, X({
            global: !0,
            forced: !0
        }, h), s || r25.setStrong(n7, t69, u), n7;
    }, Vs = function(t, e, r) {
        for(var n in e)r && r.unsafe && t[n] ? t[n] = e[n] : Ke(t, n, e[n], r);
        return t;
    }, Ws = ft("species"), Gs = z.f, Hs = Rs.fastKey, $s = Tr.set, Js = Tr.getterFor, Qs = {
        getConstructor: function(t70, e43, r26, n8) {
            var i7 = t70(function(t, o) {
                Fs(t, i7, e43), $s(t, {
                    type: e43,
                    index: He(null),
                    first: void 0,
                    last: void 0,
                    size: 0
                }), a1 || (t.size = 0), null != o && Ns(o, t[n8], {
                    that: t,
                    AS_ENTRIES: r26
                });
            }), o5 = Js(e43), u4 = function(t, e, r) {
                var n, i, u = o5(t), c = s(t, e);
                return c ? c.value = r : (u.last = c = {
                    index: i = Hs(e, !0),
                    key: e,
                    value: r,
                    previous: n = u.last,
                    next: void 0,
                    removed: !1
                }, u.first || (u.first = c), n && (n.next = c), a1 ? u.size++ : t.size++, "F" !== i && (u.index[i] = c)), t;
            }, s = function(t, e) {
                var r, n = o5(t), i = Hs(e);
                if ("F" !== i) return n.index[i];
                for(r = n.first; r; r = r.next)if (r.key == e) return r;
            };
            return Vs(i7.prototype, {
                clear: function() {
                    for(var t = o5(this), e = t.index, r = t.first; r;)r.removed = !0, r.previous && (r.previous = r.previous.next = void 0), delete e[r.index], r = r.next;
                    t.first = t.last = void 0, a1 ? t.size = 0 : this.size = 0;
                },
                delete: function(t) {
                    var e = this, r = o5(e), n = s(e, t);
                    if (n) {
                        var i = n.next, u = n.previous;
                        delete r.index[n.index], n.removed = !0, u && (u.next = i), i && (i.previous = u), r.first == n && (r.first = i), r.last == n && (r.last = u), a1 ? r.size-- : e.size--;
                    }
                    return !!n;
                },
                forEach: function(t) {
                    for(var e, r = o5(this), n = M(t, arguments.length > 1 ? arguments[1] : void 0, 3); e = e ? e.next : r.first;)for(n(e.value, e.key, this); e && e.removed;)e = e.previous;
                },
                has: function(t) {
                    return !!s(this, t);
                }
            }), Vs(i7.prototype, r26 ? {
                get: function(t) {
                    var e = s(this, t);
                    return e && e.value;
                },
                set: function(t, e) {
                    return u4(this, 0 === t ? 0 : t, e);
                }
            } : {
                add: function(t) {
                    return u4(this, t = 0 === t ? 0 : t, t);
                }
            }), a1 && Gs(i7.prototype, "size", {
                get: function() {
                    return o5(this).size;
                }
            }), i7;
        },
        setStrong: function(t71, e44, r27) {
            var n = e44 + " Iterator", i = Js(e44), o = Js(n);
            On(t71, e44, function(t, e) {
                $s(this, {
                    type: n,
                    target: t,
                    state: i(t),
                    kind: e,
                    last: void 0
                });
            }, function() {
                for(var t = o(this), e = t.kind, r = t.last; r && r.removed;)r = r.previous;
                return t.target && (t.last = r = r ? r.next : t.state.first) ? "keys" == e ? {
                    value: r.key,
                    done: !1
                } : "values" == e ? {
                    value: r.value,
                    done: !1
                } : {
                    value: [
                        r.key,
                        r.value
                    ],
                    done: !1
                } : (t.target = void 0, {
                    value: void 0,
                    done: !0
                });
            }, r27 ? "entries" : "values", !r27, !0), (function(t) {
                var e = Ot(t), r = z.f;
                a1 && e && !e[Ws] && r(e, Ws, {
                    configurable: !0,
                    get: function() {
                        return this;
                    }
                });
            })(e44);
        }
    }, Bs = (Xs("Map", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, Qs), C.Map), Ks = fi;
    X({
        target: "Object",
        stat: !0
    }, {
        setPrototypeOf: dn
    });
    var Zs = C.Object.setPrototypeOf, tc = r1(function(t72) {
        function e45(r, n) {
            return t72.exports = e45 = Zs || function(t, e) {
                return t.__proto__ = e, t;
            }, e45(r, n);
        }
        t72.exports = e45;
    });
    var ec = function(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Ks(e && e.prototype, {
            constructor: {
                value: t,
                writable: !0,
                configurable: !0
            }
        }), e && tc(t, e);
    };
    var rc = function(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t;
    };
    var nc, ic = function(t, e) {
        return !e || "object" !== Go(e) && "function" != typeof e ? rc(t) : e;
    }, oc = Ci, ac = r1(function(t73) {
        function e(r) {
            return t73.exports = e = Zs ? oc : function(t) {
                return t.__proto__ || oc(t);
            }, e(r);
        }
        t73.exports = e;
    }), uc = new Uint8Array(16);
    function sc() {
        if (!nc && !(nc = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto))) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        return nc(uc);
    }
    var cc = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    function fc(t) {
        return "string" == typeof t && cc.test(t);
    }
    for(var lc = [], hc = 0; hc < 256; ++hc)lc.push((hc + 256).toString(16).substr(1));
    function pc(t, e, r28) {
        var n = (t = t || {
        }).random || (t.rng || sc)();
        if (n[6] = 15 & n[6] | 64, n[8] = 63 & n[8] | 128, e) {
            r28 = r28 || 0;
            for(var i = 0; i < 16; ++i)e[r28 + i] = n[i];
            return e;
        }
        return (function(t) {
            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r = (lc[t[e + 0]] + lc[t[e + 1]] + lc[t[e + 2]] + lc[t[e + 3]] + "-" + lc[t[e + 4]] + lc[t[e + 5]] + "-" + lc[t[e + 6]] + lc[t[e + 7]] + "-" + lc[t[e + 8]] + lc[t[e + 9]] + "-" + lc[t[e + 10]] + lc[t[e + 11]] + lc[t[e + 12]] + lc[t[e + 13]] + lc[t[e + 14]] + lc[t[e + 15]]).toLowerCase();
            if (!fc(r)) throw TypeError("Stringified UUID is invalid");
            return r;
        })(n);
    }
    function vc(t) {
        return "string" == typeof t || "number" == typeof t;
    }
    var dc = function() {
        function t74(e) {
            fe(this, t74), this._queue = [], this._timeout = null, this._extended = null, this.delay = null, this.max = 1 / 0, this.setOptions(e);
        }
        return ve(t74, [
            {
                key: "setOptions",
                value: function(t) {
                    t && void 0 !== t.delay && (this.delay = t.delay), t && void 0 !== t.max && (this.max = t.max), this._flushIfNeeded();
                }
            },
            {
                key: "destroy",
                value: function() {
                    if (this.flush(), this._extended) {
                        for(var t = this._extended.object, e = this._extended.methods, r = 0; r < e.length; r++){
                            var n = e[r];
                            n.original ? t[n.name] = n.original : delete t[n.name];
                        }
                        this._extended = null;
                    }
                }
            },
            {
                key: "replace",
                value: function(t75, e46) {
                    var r = this, n = t75[e46];
                    if (!n) throw new Error("Method " + e46 + " undefined");
                    t75[e46] = function() {
                        for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
                        r.queue({
                            args: e,
                            fn: n,
                            context: this
                        });
                    };
                }
            },
            {
                key: "queue",
                value: function(t) {
                    "function" == typeof t ? this._queue.push({
                        fn: t
                    }) : this._queue.push(t), this._flushIfNeeded();
                }
            },
            {
                key: "_flushIfNeeded",
                value: function() {
                    var t = this;
                    this._queue.length > this.max && this.flush(), null != this._timeout && (clearTimeout(this._timeout), this._timeout = null), this.queue.length > 0 && "number" == typeof this.delay && (this._timeout = ei(function() {
                        t.flush();
                    }, this.delay));
                }
            },
            {
                key: "flush",
                value: function() {
                    var t76, e;
                    lo(t76 = Ki(e = this._queue).call(e, 0)).call(t76, function(t) {
                        t.fn.apply(t.context || t.fn, t.args || []);
                    });
                }
            }
        ], [
            {
                key: "extend",
                value: function(e, r) {
                    var n = new t74(r);
                    if (void 0 !== e.flush) throw new Error("Target object already has a property flush");
                    e.flush = function() {
                        n.flush();
                    };
                    var i = [
                        {
                            name: "flush",
                            original: void 0
                        }
                    ];
                    if (r && r.replace) for(var o = 0; o < r.replace.length; o++){
                        var a = r.replace[o];
                        i.push({
                            name: a,
                            original: e[a]
                        }), n.replace(e, a);
                    }
                    return n._extended = {
                        object: e,
                        methods: i
                    }, n;
                }
            }
        ]), t74;
    }(), yc = function() {
        function t77() {
            fe(this, t77), this._subscribers = {
                "*": [],
                add: [],
                remove: [],
                update: []
            }, this.subscribe = t77.prototype.on, this.unsubscribe = t77.prototype.off;
        }
        return ve(t77, [
            {
                key: "_trigger",
                value: function(t, e, r) {
                    var n9, i;
                    if ("*" === t) throw new Error("Cannot trigger event *");
                    lo(n9 = ea(i = []).call(i, Ko(this._subscribers[t]), Ko(this._subscribers["*"]))).call(n9, function(n) {
                        n(t, e, null != r ? r : null);
                    });
                }
            },
            {
                key: "on",
                value: function(t, e) {
                    "function" == typeof e && this._subscribers[t].push(e);
                }
            },
            {
                key: "off",
                value: function(t78, e) {
                    var r;
                    this._subscribers[t78] = Gt(r = this._subscribers[t78]).call(r, function(t) {
                        return t !== e;
                    });
                }
            }
        ]), t77;
    }(), gc = (Xs("Set", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, Qs), C.Set);
    function mc(t79, e47) {
        var r29;
        if (void 0 === ra || null == zn(t79)) {
            if (Xo(t79) || (r29 = (function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return bc(t, e);
                var n = $o(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return Bn(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return bc(t, e);
            })(t79)) || e47 && t79 && "number" == typeof t79.length) {
                r29 && (t79 = r29);
                var n10 = 0, i = function() {
                };
                return {
                    s: i,
                    n: function() {
                        return n10 >= t79.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t79[n10++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: i
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o, a = !0, u = !1;
        return {
            s: function() {
                r29 = Fn(t79);
            },
            n: function() {
                var t = r29.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, o = t;
            },
            f: function() {
                try {
                    a || null == r29.return || r29.return();
                } finally{
                    if (u) throw o;
                }
            }
        };
    }
    function bc(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    var _c = function() {
        function t80(e) {
            fe(this, t80), this._pairs = e;
        }
        return ve(t80, [
            {
                key: ls,
                value: fs.mark(function t81() {
                    var e, r, n, i, o;
                    return fs.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = mc(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = qo(r.value, 2), i = n[0], o = n[1], t.next = 7, [
                                    i,
                                    o
                                ];
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t81, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "entries",
                value: fs.mark(function t82() {
                    var e, r, n, i, o;
                    return fs.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = mc(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = qo(r.value, 2), i = n[0], o = n[1], t.next = 7, [
                                    i,
                                    o
                                ];
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t82, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "keys",
                value: fs.mark(function t83() {
                    var e, r, n, i;
                    return fs.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = mc(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = qo(r.value, 1), i = n[0], t.next = 7, i;
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t83, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "values",
                value: fs.mark(function t84() {
                    var e, r, n, i;
                    return fs.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = mc(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = qo(r.value, 2), i = n[1], t.next = 7, i;
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t84, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "toIdArray",
                value: function() {
                    var t85;
                    return qt(t85 = Ko(this._pairs)).call(t85, function(t) {
                        return t[0];
                    });
                }
            },
            {
                key: "toItemArray",
                value: function() {
                    var t86;
                    return qt(t86 = Ko(this._pairs)).call(t86, function(t) {
                        return t[1];
                    });
                }
            },
            {
                key: "toEntryArray",
                value: function() {
                    return Ko(this._pairs);
                }
            },
            {
                key: "toObjectMap",
                value: function() {
                    var t, e = li(null), r = mc(this._pairs);
                    try {
                        for(r.s(); !(t = r.n()).done;){
                            var n = qo(t.value, 2), i = n[0], o = n[1];
                            e[i] = o;
                        }
                    } catch (t87) {
                        r.e(t87);
                    } finally{
                        r.f();
                    }
                    return e;
                }
            },
            {
                key: "toMap",
                value: function() {
                    return new Bs(this._pairs);
                }
            },
            {
                key: "toIdSet",
                value: function() {
                    return new gc(this.toIdArray());
                }
            },
            {
                key: "toItemSet",
                value: function() {
                    return new gc(this.toItemArray());
                }
            },
            {
                key: "cache",
                value: function() {
                    return new t80(Ko(this._pairs));
                }
            },
            {
                key: "distinct",
                value: function(t) {
                    var e, r = new gc, n = mc(this._pairs);
                    try {
                        for(n.s(); !(e = n.n()).done;){
                            var i = qo(e.value, 2), o = i[0], a = i[1];
                            r.add(t(a, o));
                        }
                    } catch (t88) {
                        n.e(t88);
                    } finally{
                        n.f();
                    }
                    return r;
                }
            },
            {
                key: "filter",
                value: function(e) {
                    var r = this._pairs;
                    return new t80(pi({
                    }, ls, fs.mark(function t89() {
                        var n, i, o, a, u;
                        return fs.wrap(function(t) {
                            for(;;)switch(t.prev = t.next){
                                case 0:
                                    n = mc(r), t.prev = 1, n.s();
                                case 3:
                                    if ((i = n.n()).done) {
                                        t.next = 10;
                                        break;
                                    }
                                    if (o = qo(i.value, 2), a = o[0], u = o[1], !e(u, a)) {
                                        t.next = 8;
                                        break;
                                    }
                                    return t.next = 8, [
                                        a,
                                        u
                                    ];
                                case 8:
                                    t.next = 3;
                                    break;
                                case 10:
                                    t.next = 15;
                                    break;
                                case 12:
                                    t.prev = 12, t.t0 = t.catch(1), n.e(t.t0);
                                case 15:
                                    return t.prev = 15, n.f(), t.finish(15);
                                case 18:
                                case "end":
                                    return t.stop();
                            }
                        }, t89, null, [
                            [
                                1,
                                12,
                                15,
                                18
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "forEach",
                value: function(t) {
                    var e, r = mc(this._pairs);
                    try {
                        for(r.s(); !(e = r.n()).done;){
                            var n = qo(e.value, 2), i = n[0];
                            t(n[1], i);
                        }
                    } catch (t90) {
                        r.e(t90);
                    } finally{
                        r.f();
                    }
                }
            },
            {
                key: "map",
                value: function(e) {
                    var r = this._pairs;
                    return new t80(pi({
                    }, ls, fs.mark(function t91() {
                        var n, i, o, a, u;
                        return fs.wrap(function(t) {
                            for(;;)switch(t.prev = t.next){
                                case 0:
                                    n = mc(r), t.prev = 1, n.s();
                                case 3:
                                    if ((i = n.n()).done) {
                                        t.next = 9;
                                        break;
                                    }
                                    return o = qo(i.value, 2), a = o[0], u = o[1], t.next = 7, [
                                        a,
                                        e(u, a)
                                    ];
                                case 7:
                                    t.next = 3;
                                    break;
                                case 9:
                                    t.next = 14;
                                    break;
                                case 11:
                                    t.prev = 11, t.t0 = t.catch(1), n.e(t.t0);
                                case 14:
                                    return t.prev = 14, n.f(), t.finish(14);
                                case 17:
                                case "end":
                                    return t.stop();
                            }
                        }, t91, null, [
                            [
                                1,
                                11,
                                14,
                                17
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "max",
                value: function(t) {
                    var e = Fn(this._pairs), r = e.next();
                    if (r.done) return null;
                    for(var n = r.value[1], i = t(r.value[1], r.value[0]); !(r = e.next()).done;){
                        var o = qo(r.value, 2), a = o[0], u = o[1], s = t(u, a);
                        s > i && (i = s, n = u);
                    }
                    return n;
                }
            },
            {
                key: "min",
                value: function(t) {
                    var e = Fn(this._pairs), r = e.next();
                    if (r.done) return null;
                    for(var n = r.value[1], i = t(r.value[1], r.value[0]); !(r = e.next()).done;){
                        var o = qo(r.value, 2), a = o[0], u = o[1], s = t(u, a);
                        s < i && (i = s, n = u);
                    }
                    return n;
                }
            },
            {
                key: "reduce",
                value: function(t, e) {
                    var r, n = mc(this._pairs);
                    try {
                        for(n.s(); !(r = n.n()).done;){
                            var i = qo(r.value, 2), o = i[0];
                            e = t(e, i[1], o);
                        }
                    } catch (t92) {
                        n.e(t92);
                    } finally{
                        n.f();
                    }
                    return e;
                }
            },
            {
                key: "sort",
                value: function(e) {
                    var r30 = this;
                    return new t80(pi({
                    }, ls, function() {
                        var t93;
                        return Fn(Os(t93 = Ko(r30._pairs)).call(t93, function(t, r) {
                            var n = qo(t, 2), i = n[0], o = n[1], a = qo(r, 2), u = a[0], s = a[1];
                            return e(o, s, i, u);
                        }));
                    }));
                }
            }
        ]), t80;
    }();
    function wc(t, e48) {
        var r = Uo(t);
        if (on) {
            var n = on(t);
            e48 && (n = Gt(n).call(n, function(e) {
                return ze(t, e).enumerable;
            })), r.push.apply(r, n);
        }
        return r;
    }
    function Ec(t) {
        for(var e49 = 1; e49 < arguments.length; e49++){
            var r, n = null != arguments[e49] ? arguments[e49] : {
            };
            if (e49 % 2) lo(r = wc(Object(n), !0)).call(r, function(e) {
                pi(t, e, n[e]);
            });
            else if (Re) je(t, Re(n));
            else {
                var i;
                lo(i = wc(Object(n))).call(i, function(e) {
                    ge(t, e, ze(n, e));
                });
            }
        }
        return t;
    }
    function Oc(t94, e50) {
        var r31;
        if (void 0 === ra || null == zn(t94)) {
            if (Xo(t94) || (r31 = (function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return Tc(t, e);
                var n = $o(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return Bn(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Tc(t, e);
            })(t94)) || e50 && t94 && "number" == typeof t94.length) {
                r31 && (t94 = r31);
                var n11 = 0, i = function() {
                };
                return {
                    s: i,
                    n: function() {
                        return n11 >= t94.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t94[n11++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: i
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o, a = !0, u = !1;
        return {
            s: function() {
                r31 = Fn(t94);
            },
            n: function() {
                var t = r31.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, o = t;
            },
            f: function() {
                try {
                    a || null == r31.return || r31.return();
                } finally{
                    if (u) throw o;
                }
            }
        };
    }
    function Tc(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    function Sc(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !os) return !1;
            if (os.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Date.prototype.toString.call(os(Date, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var r, n = ac(t);
            if (e) {
                var i = ac(this).constructor;
                r = os(n, arguments, i);
            } else r = n.apply(this, arguments);
            return ic(this, r);
        };
    }
    var xc = function(t95) {
        ec(r32, t95);
        var e51 = Sc(r32);
        function r32(t, n) {
            var i;
            return fe(this, r32), (i = e51.call(this))._queue = null, t && !Xo(t) && (n = t, t = []), i._options = n || {
            }, i._data = new Bs, i.length = 0, i._idProp = i._options.fieldId || "id", t && t.length && i.add(t), i.setOptions(n), i;
        }
        return ve(r32, [
            {
                key: "setOptions",
                value: function(t) {
                    t && void 0 !== t.queue && (!1 === t.queue ? this._queue && (this._queue.destroy(), this._queue = null) : (this._queue || (this._queue = dc.extend(this, {
                        replace: [
                            "add",
                            "update",
                            "remove"
                        ]
                    })), t.queue && "object" === Go(t.queue) && this._queue.setOptions(t.queue)));
                }
            },
            {
                key: "add",
                value: function(t96, e) {
                    var r, n = this, i = [];
                    if (Xo(t96)) {
                        var o = qt(t96).call(t96, function(t) {
                            return t[n._idProp];
                        });
                        if (Ls(o).call(o, function(t) {
                            return n._data.has(t);
                        })) throw new Error("A duplicate id was found in the parameter array.");
                        for(var a = 0, u = t96.length; a < u; a++)r = this._addItem(t96[a]), i.push(r);
                    } else {
                        if (!t96 || "object" !== Go(t96)) throw new Error("Unknown dataType");
                        r = this._addItem(t96), i.push(r);
                    }
                    return i.length && this._trigger("add", {
                        items: i
                    }, e), i;
                }
            },
            {
                key: "update",
                value: function(t97, e52) {
                    var r = this, n = [], i = [], o = [], a = [], u = this._idProp, s4 = function(t) {
                        var e = t[u];
                        if (null != e && r._data.has(e)) {
                            var s = t, c = Xi({
                            }, r._data.get(e)), f = r._updateItem(s);
                            i.push(f), a.push(s), o.push(c);
                        } else {
                            var l = r._addItem(t);
                            n.push(l);
                        }
                    };
                    if (Xo(t97)) for(var c4 = 0, f3 = t97.length; c4 < f3; c4++)t97[c4] && "object" === Go(t97[c4]) ? s4(t97[c4]) : console.warn("Ignoring input item, which is not an object at index " + c4);
                    else {
                        if (!t97 || "object" !== Go(t97)) throw new Error("Unknown dataType");
                        s4(t97);
                    }
                    if (n.length && this._trigger("add", {
                        items: n
                    }, e52), i.length) {
                        var l3 = {
                            items: i,
                            oldData: o,
                            data: a
                        };
                        this._trigger("update", l3, e52);
                    }
                    return ea(n).call(n, i);
                }
            },
            {
                key: "updateOnly",
                value: function(t98, e53) {
                    var r33, n12 = this;
                    Xo(t98) || (t98 = [
                        t98
                    ]);
                    var i8 = qt(r33 = qt(t98).call(t98, function(t) {
                        var e = n12._data.get(t[n12._idProp]);
                        if (null == e) throw new Error("Updating non-existent items is not allowed.");
                        return {
                            oldData: e,
                            update: t
                        };
                    })).call(r33, function(t99) {
                        var e54 = t99.oldData, r34 = t99.update, i9 = e54[n12._idProp], o = function(t) {
                            for(var e, r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++)n[i - 1] = arguments[i];
                            return Ju.apply(void 0, ea(e = [
                                {
                                },
                                t
                            ]).call(e, n));
                        }(e54, r34);
                        return n12._data.set(i9, o), {
                            id: i9,
                            oldData: e54,
                            updatedData: o
                        };
                    });
                    if (i8.length) {
                        var o6 = {
                            items: qt(i8).call(i8, function(t) {
                                return t.id;
                            }),
                            oldData: qt(i8).call(i8, function(t) {
                                return t.oldData;
                            }),
                            data: qt(i8).call(i8, function(t) {
                                return t.updatedData;
                            })
                        };
                        return this._trigger("update", o6, e53), o6.items;
                    }
                    return [];
                }
            },
            {
                key: "get",
                value: function(t, e) {
                    var r = void 0, n = void 0, i = void 0;
                    vc(t) ? (r = t, i = e) : Xo(t) ? (n = t, i = e) : i = t;
                    var o, a = i && "Object" === i.returnType ? "Object" : "Array", u = i && Gt(i), s = [], c = void 0, f = void 0, l = void 0;
                    if (null != r) (c = this._data.get(r)) && u && !u(c) && (c = void 0);
                    else if (null != n) for(var h = 0, p = n.length; h < p; h++)null == (c = this._data.get(n[h])) || u && !u(c) || s.push(c);
                    else for(var v, d = 0, y = (f = Ko(ks(v = this._data).call(v))).length; d < y; d++)l = f[d], null == (c = this._data.get(l)) || u && !u(c) || s.push(c);
                    if (i && i.order && null == r && this._sort(s, i.order), i && i.fields) {
                        var g = i.fields;
                        if (null != r && null != c) c = this._filterFields(c, g);
                        else for(var m = 0, b = s.length; m < b; m++)s[m] = this._filterFields(s[m], g);
                    }
                    if ("Object" == a) {
                        for(var _ = {
                        }, w = 0, E = s.length; w < E; w++){
                            var O = s[w];
                            _[O[this._idProp]] = O;
                        }
                        return _;
                    }
                    return null != r ? null !== (o = c) && void 0 !== o ? o : null : s;
                }
            },
            {
                key: "getIds",
                value: function(t) {
                    var e = this._data, r = t && Gt(t), n = t && t.order, i = Ko(ks(e).call(e)), o = [];
                    if (r) {
                        if (n) {
                            for(var a = [], u = 0, s = i.length; u < s; u++){
                                var c = i[u], f = this._data.get(c);
                                null != f && r(f) && a.push(f);
                            }
                            this._sort(a, n);
                            for(var l = 0, h = a.length; l < h; l++)o.push(a[l][this._idProp]);
                        } else for(var p = 0, v = i.length; p < v; p++){
                            var d = i[p], y = this._data.get(d);
                            null != y && r(y) && o.push(y[this._idProp]);
                        }
                    } else if (n) {
                        for(var g = [], m = 0, b = i.length; m < b; m++){
                            var _ = i[m];
                            g.push(e.get(_));
                        }
                        this._sort(g, n);
                        for(var w = 0, E = g.length; w < E; w++)o.push(g[w][this._idProp]);
                    } else for(var O = 0, T = i.length; O < T; O++){
                        var S = i[O], x = e.get(S);
                        null != x && o.push(x[this._idProp]);
                    }
                    return o;
                }
            },
            {
                key: "getDataSet",
                value: function() {
                    return this;
                }
            },
            {
                key: "forEach",
                value: function(t, e) {
                    var r = e && Gt(e), n = this._data, i = Ko(ks(n).call(n));
                    if (e && e.order) for(var o = this.get(e), a = 0, u = o.length; a < u; a++){
                        var s = o[a];
                        t(s, s[this._idProp]);
                    }
                    else for(var c = 0, f = i.length; c < f; c++){
                        var l = i[c], h = this._data.get(l);
                        null == h || r && !r(h) || t(h, l);
                    }
                }
            },
            {
                key: "map",
                value: function(t, e) {
                    for(var r = e && Gt(e), n = [], i = this._data, o = Ko(ks(i).call(i)), a = 0, u = o.length; a < u; a++){
                        var s = o[a], c = this._data.get(s);
                        null == c || r && !r(c) || n.push(t(c, s));
                    }
                    return e && e.order && this._sort(n, e.order), n;
                }
            },
            {
                key: "_filterFields",
                value: function(t, e55) {
                    var r;
                    return t ? re(r = Xo(e55) ? e55 : Uo(e55)).call(r, function(e, r) {
                        return e[r] = t[r], e;
                    }, {
                    }) : t;
                }
            },
            {
                key: "_sort",
                value: function(t100, e56) {
                    if ("string" == typeof e56) {
                        var r = e56;
                        Os(t100).call(t100, function(t, e) {
                            var n = t[r], i = e[r];
                            return n > i ? 1 : n < i ? -1 : 0;
                        });
                    } else {
                        if ("function" != typeof e56) throw new TypeError("Order must be a function or a string");
                        Os(t100).call(t100, e56);
                    }
                }
            },
            {
                key: "remove",
                value: function(t, e) {
                    for(var r = [], n = [], i = Xo(t) ? t : [
                        t
                    ], o = 0, a = i.length; o < a; o++){
                        var u = this._remove(i[o]);
                        if (u) {
                            var s = u[this._idProp];
                            null != s && (r.push(s), n.push(u));
                        }
                    }
                    return r.length && this._trigger("remove", {
                        items: r,
                        oldData: n
                    }, e), r;
                }
            },
            {
                key: "_remove",
                value: function(t) {
                    var e;
                    if (vc(t) ? e = t : t && "object" === Go(t) && (e = t[this._idProp]), null != e && this._data.has(e)) {
                        var r = this._data.get(e) || null;
                        return this._data.delete(e), --this.length, r;
                    }
                    return null;
                }
            },
            {
                key: "clear",
                value: function(t) {
                    for(var e, r = Ko(ks(e = this._data).call(e)), n = [], i = 0, o = r.length; i < o; i++)n.push(this._data.get(r[i]));
                    return this._data.clear(), this.length = 0, this._trigger("remove", {
                        items: r,
                        oldData: n
                    }, t), r;
                }
            },
            {
                key: "max",
                value: function(t) {
                    var e, r, n = null, i = null, o = Oc(ds(e = this._data).call(e));
                    try {
                        for(o.s(); !(r = o.n()).done;){
                            var a = r.value, u = a[t];
                            "number" == typeof u && (null == i || u > i) && (n = a, i = u);
                        }
                    } catch (t101) {
                        o.e(t101);
                    } finally{
                        o.f();
                    }
                    return n || null;
                }
            },
            {
                key: "min",
                value: function(t) {
                    var e, r, n = null, i = null, o = Oc(ds(e = this._data).call(e));
                    try {
                        for(o.s(); !(r = o.n()).done;){
                            var a = r.value, u = a[t];
                            "number" == typeof u && (null == i || u < i) && (n = a, i = u);
                        }
                    } catch (t102) {
                        o.e(t102);
                    } finally{
                        o.f();
                    }
                    return n || null;
                }
            },
            {
                key: "distinct",
                value: function(t) {
                    for(var e = this._data, r = Ko(ks(e).call(e)), n = [], i = 0, o = 0, a = r.length; o < a; o++){
                        for(var u = r[o], s = e.get(u)[t], c = !1, f = 0; f < i; f++)if (n[f] == s) {
                            c = !0;
                            break;
                        }
                        c || void 0 === s || (n[i] = s, i++);
                    }
                    return n;
                }
            },
            {
                key: "_addItem",
                value: function(t103) {
                    var e = function(t, e) {
                        return null == t[e] && (t[e] = pc()), t;
                    }(t103, this._idProp), r = e[this._idProp];
                    if (this._data.has(r)) throw new Error("Cannot add item: item with id " + r + " already exists");
                    return this._data.set(r, e), ++this.length, r;
                }
            },
            {
                key: "_updateItem",
                value: function(t) {
                    var e = t[this._idProp];
                    if (null == e) throw new Error("Cannot update item: item has no id (item: " + si(t) + ")");
                    var r = this._data.get(e);
                    if (!r) throw new Error("Cannot update item: no item with id " + e + " found");
                    return this._data.set(e, Ec(Ec({
                    }, r), t)), e;
                }
            },
            {
                key: "stream",
                value: function(t) {
                    if (t) {
                        var e = this._data;
                        return new _c(pi({
                        }, ls, fs.mark(function r36() {
                            var n, i, o, a;
                            return fs.wrap(function(r) {
                                for(;;)switch(r.prev = r.next){
                                    case 0:
                                        n = Oc(t), r.prev = 1, n.s();
                                    case 3:
                                        if ((i = n.n()).done) {
                                            r.next = 11;
                                            break;
                                        }
                                        if (o = i.value, null == (a = e.get(o))) {
                                            r.next = 9;
                                            break;
                                        }
                                        return r.next = 9, [
                                            o,
                                            a
                                        ];
                                    case 9:
                                        r.next = 3;
                                        break;
                                    case 11:
                                        r.next = 16;
                                        break;
                                    case 13:
                                        r.prev = 13, r.t0 = r.catch(1), n.e(r.t0);
                                    case 16:
                                        return r.prev = 16, n.f(), r.finish(16);
                                    case 19:
                                    case "end":
                                        return r.stop();
                                }
                            }, r36, null, [
                                [
                                    1,
                                    13,
                                    16,
                                    19
                                ]
                            ]);
                        })));
                    }
                    var r35;
                    return new _c(pi({
                    }, ls, ce(r35 = cs(this._data)).call(r35, this._data)));
                }
            },
            {
                key: "idProp",
                get: function() {
                    return this._idProp;
                }
            }
        ]), r32;
    }(yc);
    function kc(t104, e57) {
        var r37;
        if (void 0 === ra || null == zn(t104)) {
            if (Xo(t104) || (r37 = (function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return Ac(t, e);
                var n = $o(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return Bn(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Ac(t, e);
            })(t104)) || e57 && t104 && "number" == typeof t104.length) {
                r37 && (t104 = r37);
                var n13 = 0, i = function() {
                };
                return {
                    s: i,
                    n: function() {
                        return n13 >= t104.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t104[n13++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: i
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o, a = !0, u = !1;
        return {
            s: function() {
                r37 = Fn(t104);
            },
            n: function() {
                var t = r37.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, o = t;
            },
            f: function() {
                try {
                    a || null == r37.return || r37.return();
                } finally{
                    if (u) throw o;
                }
            }
        };
    }
    function Ac(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    function jc(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !os) return !1;
            if (os.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Date.prototype.toString.call(os(Date, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var r, n = ac(t);
            if (e) {
                var i = ac(this).constructor;
                r = os(n, arguments, i);
            } else r = n.apply(this, arguments);
            return ic(this, r);
        };
    }
    var Ic = function(t105) {
        ec(r38, t105);
        var e58 = jc(r38);
        function r38(t, n) {
            var i, o;
            return fe(this, r38), (o = e58.call(this)).length = 0, o._ids = new gc, o._options = n || {
            }, o._listener = ce(i = o._onEvent).call(i, rc(o)), o.setData(t), o;
        }
        return ve(r38, [
            {
                key: "setData",
                value: function(t) {
                    if (this._data) {
                        this._data.off && this._data.off("*", this._listener);
                        var e = this._data.getIds({
                            filter: Gt(this._options)
                        }), r = this._data.get(e);
                        this._ids.clear(), this.length = 0, this._trigger("remove", {
                            items: e,
                            oldData: r
                        });
                    }
                    if (null != t) {
                        this._data = t;
                        for(var n = this._data.getIds({
                            filter: Gt(this._options)
                        }), i = 0, o = n.length; i < o; i++){
                            var a = n[i];
                            this._ids.add(a);
                        }
                        this.length = n.length, this._trigger("add", {
                            items: n
                        });
                    } else this._data = new xc;
                    this._data.on && this._data.on("*", this._listener);
                }
            },
            {
                key: "refresh",
                value: function() {
                    for(var t = this._data.getIds({
                        filter: Gt(this._options)
                    }), e = Ko(this._ids), r = {
                    }, n = [], i = [], o = [], a = 0, u = t.length; a < u; a++){
                        var s = t[a];
                        r[s] = !0, this._ids.has(s) || (n.push(s), this._ids.add(s));
                    }
                    for(var c = 0, f = e.length; c < f; c++){
                        var l = e[c], h = this._data.get(l);
                        null == h ? console.error("If you see this, report it please.") : r[l] || (i.push(l), o.push(h), this._ids.delete(l));
                    }
                    this.length += n.length - i.length, n.length && this._trigger("add", {
                        items: n
                    }), i.length && this._trigger("remove", {
                        items: i,
                        oldData: o
                    });
                }
            },
            {
                key: "get",
                value: function(t106, e) {
                    if (null == this._data) return null;
                    var r, n = null;
                    vc(t106) || Xo(t106) ? (n = t106, r = e) : r = t106;
                    var i = Xi({
                    }, this._options, r), o = Gt(this._options), a = r && Gt(r);
                    return o && a && (i.filter = function(t) {
                        return o(t) && a(t);
                    }), null == n ? this._data.get(i) : this._data.get(n, i);
                }
            },
            {
                key: "getIds",
                value: function(t107) {
                    if (this._data.length) {
                        var e, r = Gt(this._options), n = null != t107 ? Gt(t107) : null;
                        return e = n ? r ? function(t) {
                            return r(t) && n(t);
                        } : n : r, this._data.getIds({
                            filter: e,
                            order: t107 && t107.order
                        });
                    }
                    return [];
                }
            },
            {
                key: "forEach",
                value: function(t108, e) {
                    if (this._data) {
                        var r, n, i = Gt(this._options), o = e && Gt(e);
                        n = o ? i ? function(t) {
                            return i(t) && o(t);
                        } : o : i, lo(r = this._data).call(r, t108, {
                            filter: n,
                            order: e && e.order
                        });
                    }
                }
            },
            {
                key: "map",
                value: function(t109, e) {
                    if (this._data) {
                        var r, n, i = Gt(this._options), o = e && Gt(e);
                        return n = o ? i ? function(t) {
                            return i(t) && o(t);
                        } : o : i, qt(r = this._data).call(r, t109, {
                            filter: n,
                            order: e && e.order
                        });
                    }
                    return [];
                }
            },
            {
                key: "getDataSet",
                value: function() {
                    return this._data.getDataSet();
                }
            },
            {
                key: "stream",
                value: function(t) {
                    var e;
                    return this._data.stream(t || pi({
                    }, ls, ce(e = ks(this._ids)).call(e, this._ids)));
                }
            },
            {
                key: "dispose",
                value: function() {
                    var t;
                    null !== (t = this._data) && void 0 !== t && t.off && this._data.off("*", this._listener);
                    var e, n = "This data view has already been disposed of.", i = {
                        get: function() {
                            throw new Error(n);
                        },
                        set: function() {
                            throw new Error(n);
                        },
                        configurable: !1
                    }, o = kc(Ho(r38.prototype));
                    try {
                        for(o.s(); !(e = o.n()).done;){
                            var a = e.value;
                            ge(this, a, i);
                        }
                    } catch (t110) {
                        o.e(t110);
                    } finally{
                        o.f();
                    }
                }
            },
            {
                key: "_onEvent",
                value: function(t, e, r) {
                    if (e && e.items && this._data) {
                        var n = e.items, i = [], o = [], a = [], u = [], s = [], c = [];
                        switch(t){
                            case "add":
                                for(var f = 0, l = n.length; f < l; f++){
                                    var h = n[f];
                                    this.get(h) && (this._ids.add(h), i.push(h));
                                }
                                break;
                            case "update":
                                for(var p = 0, v = n.length; p < v; p++){
                                    var d = n[p];
                                    this.get(d) ? this._ids.has(d) ? (o.push(d), s.push(e.data[p]), u.push(e.oldData[p])) : (this._ids.add(d), i.push(d)) : this._ids.has(d) && (this._ids.delete(d), a.push(d), c.push(e.oldData[p]));
                                }
                                break;
                            case "remove":
                                for(var y = 0, g = n.length; y < g; y++){
                                    var m = n[y];
                                    this._ids.has(m) && (this._ids.delete(m), a.push(m), c.push(e.oldData[y]));
                                }
                        }
                        this.length += i.length - a.length, i.length && this._trigger("add", {
                            items: i
                        }, r), o.length && this._trigger("update", {
                            items: o,
                            oldData: u,
                            data: s
                        }, r), a.length && this._trigger("remove", {
                            items: a,
                            oldData: c
                        }, r);
                    }
                }
            },
            {
                key: "idProp",
                get: function() {
                    return this.getDataSet().idProp;
                }
            }
        ]), r38;
    }(yc);
    function Pc(t, e) {
        return "object" === Go(e) && null !== e && t === e.idProp && "function" == typeof e.add && "function" == typeof e.clear && "function" == typeof e.distinct && "function" == typeof lo(e) && "function" == typeof e.get && "function" == typeof e.getDataSet && "function" == typeof e.getIds && "number" == typeof e.length && "function" == typeof qt(e) && "function" == typeof e.max && "function" == typeof e.min && "function" == typeof e.off && "function" == typeof e.on && "function" == typeof e.remove && "function" == typeof e.setOptions && "function" == typeof e.stream && "function" == typeof e.update && "function" == typeof e.updateOnly;
    }
    t1.DELETE = $u, t1.DataSet = xc, t1.DataStream = _c, t1.DataView = Ic, t1.Queue = dc, t1.createNewDataPipeFrom = function(t) {
        return new ye(t);
    }, t1.isDataSetLike = Pc, t1.isDataViewLike = function(t, e) {
        return "object" === Go(e) && null !== e && t === e.idProp && "function" == typeof lo(e) && "function" == typeof e.get && "function" == typeof e.getDataSet && "function" == typeof e.getIds && "number" == typeof e.length && "function" == typeof qt(e) && "function" == typeof e.off && "function" == typeof e.on && "function" == typeof e.stream && Pc(t, e.getDataSet());
    }, Object.defineProperty(t1, "__esModule", {
        value: !0
    });
});

},{}],"b4TeA":[function(require,module,exports) {
var global = arguments[3];
/**
 * vis-network
 * https://visjs.github.io/vis-network/
 *
 * A dynamic, browser-based visualization library.
 *
 * @version 9.1.0
 * @date    2021-08-29T08:43:14.666Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */ !function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? e(exports, require("vis-data/peer/umd/vis-data.js")) : "function" == typeof define && define.amd ? define([
        "exports",
        "vis-data/peer/umd/vis-data.js"
    ], e) : e((t = "undefined" != typeof globalThis ? globalThis : t || self).vis = t.vis || {
    }, t.vis);
}(this, function(t1, e1) {
    var i1 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {
    }, o1 = function(t) {
        return t && t.Math == Math && t;
    }, n1 = o1("object" == typeof globalThis && globalThis) || o1("object" == typeof window && window) || o1("object" == typeof self && self) || o1("object" == typeof i1 && i1) || function() {
        return this;
    }() || Function("return this")(), r1 = {
    }, s1 = function(t) {
        try {
            return !!t();
        } catch (t2) {
            return !0;
        }
    }, a1 = !s1(function() {
        return 7 != Object.defineProperty({
        }, 1, {
            get: function() {
                return 7;
            }
        })[1];
    }), h1 = {
    }, d1 = {
    }.propertyIsEnumerable, l1 = Object.getOwnPropertyDescriptor, c1 = l1 && !d1.call({
        1: 2
    }, 1);
    h1.f = c1 ? function(t) {
        var e = l1(this, t);
        return !!e && e.enumerable;
    } : d1;
    var u1, f1, p1 = function(t, e) {
        return {
            enumerable: !(1 & t),
            configurable: !(2 & t),
            writable: !(4 & t),
            value: e
        };
    }, v1 = {
    }.toString, g1 = function(t) {
        return v1.call(t).slice(8, -1);
    }, y1 = g1, m1 = "".split, b1 = s1(function() {
        return !Object("z").propertyIsEnumerable(0);
    }) ? function(t) {
        return "String" == y1(t) ? m1.call(t, "") : Object(t);
    } : Object, w1 = function(t) {
        if (null == t) throw TypeError("Can't call method on " + t);
        return t;
    }, k1 = b1, _1 = w1, x1 = function(t) {
        return k1(_1(t));
    }, E1 = function(t) {
        return "object" == typeof t ? null !== t : "function" == typeof t;
    }, O1 = {
    }, C1 = O1, S1 = n1, T1 = function(t) {
        return "function" == typeof t ? t : void 0;
    }, M1 = function(t, e) {
        return arguments.length < 2 ? T1(C1[t]) || T1(S1[t]) : C1[t] && C1[t][e] || S1[t] && S1[t][e];
    }, P1 = M1("navigator", "userAgent") || "", D1 = n1, B = P1, I = D1.process, z = D1.Deno, F = I && I.versions || z && z.version, N = F && F.v8;
    N ? f1 = (u1 = N.split("."))[0] < 4 ? 1 : u1[0] + u1[1] : B && (!(u1 = B.match(/Edge\/(\d+)/)) || u1[1] >= 74) && (u1 = B.match(/Chrome\/(\d+)/)) && (f1 = u1[1]);
    var A = f1 && +f1, R = A, j = s1, L = !!Object.getOwnPropertySymbols && !j(function() {
        var t = Symbol();
        return !String(t) || !(Object(t) instanceof Symbol) || !Symbol.sham && R && R < 41;
    }), H = L && !Symbol.sham && "symbol" == typeof Symbol.iterator, W = M1, V = H ? function(t) {
        return "symbol" == typeof t;
    } : function(t) {
        var e = W("Symbol");
        return "function" == typeof e && Object(t) instanceof e;
    }, q = E1, U = {
        exports: {
        }
    }, Y = n1, X = function(t, e) {
        try {
            Object.defineProperty(Y, t, {
                value: e,
                configurable: !0,
                writable: !0
            });
        } catch (i) {
            Y[t] = e;
        }
        return e;
    }, G = "__core-js_shared__", K = n1[G] || X(G, {
    }), $ = K;
    (U.exports = function(t, e) {
        return $[t] || ($[t] = void 0 !== e ? e : {
        });
    })("versions", []).push({
        version: "3.16.1",
        mode: "pure",
        copyright: "© 2021 Denis Pushkarev (zloirock.ru)"
    });
    var Z = w1, Q = function(t) {
        return Object(Z(t));
    }, J = Q, tt = {
    }.hasOwnProperty, et = Object.hasOwn || function(t, e) {
        return tt.call(J(t), e);
    }, it = 0, ot = Math.random(), nt = function(t) {
        return "Symbol(" + String(void 0 === t ? "" : t) + ")_" + (++it + ot).toString(36);
    }, rt = n1, st = U.exports, at = et, ht = nt, dt = L, lt = H, ct = st("wks"), ut = rt.Symbol, ft = lt ? ut : ut && ut.withoutSetter || ht, pt = function(t) {
        return at(ct, t) && (dt || "string" == typeof ct[t]) || (dt && at(ut, t) ? ct[t] = ut[t] : ct[t] = ft("Symbol." + t)), ct[t];
    }, vt = E1, gt = V, yt = function(t, e) {
        var i, o;
        if ("string" === e && "function" == typeof (i = t.toString) && !q(o = i.call(t))) return o;
        if ("function" == typeof (i = t.valueOf) && !q(o = i.call(t))) return o;
        if ("string" !== e && "function" == typeof (i = t.toString) && !q(o = i.call(t))) return o;
        throw TypeError("Can't convert object to primitive value");
    }, mt = pt("toPrimitive"), bt = function(t, e) {
        if (!vt(t) || gt(t)) return t;
        var i, o = t[mt];
        if (void 0 !== o) {
            if (void 0 === e && (e = "default"), i = o.call(t, e), !vt(i) || gt(i)) return i;
            throw TypeError("Can't convert object to primitive value");
        }
        return void 0 === e && (e = "number"), yt(t, e);
    }, wt = V, kt = function(t) {
        var e = bt(t, "string");
        return wt(e) ? e : String(e);
    }, _t = E1, xt = n1.document, Et = _t(xt) && _t(xt.createElement), Ot = function(t) {
        return Et ? xt.createElement(t) : {
        };
    }, Ct = Ot, St = !a1 && !s1(function() {
        return 7 != Object.defineProperty(Ct("div"), "a", {
            get: function() {
                return 7;
            }
        }).a;
    }), Tt = a1, Mt = h1, Pt = p1, Dt = x1, Bt = kt, It = et, zt = St, Ft = Object.getOwnPropertyDescriptor;
    r1.f = Tt ? Ft : function(t, e) {
        if (t = Dt(t), e = Bt(e), zt) try {
            return Ft(t, e);
        } catch (t3) {
        }
        if (It(t, e)) return Pt(!Mt.f.call(t, e), t[e]);
    };
    var Nt = s1, At = /#|\.prototype\./, Rt = function(t, e) {
        var i = Lt[jt(t)];
        return i == Wt || i != Ht && ("function" == typeof e ? Nt(e) : !!e);
    }, jt = Rt.normalize = function(t) {
        return String(t).replace(At, ".").toLowerCase();
    }, Lt = Rt.data = {
    }, Ht = Rt.NATIVE = "N", Wt = Rt.POLYFILL = "P", Vt = Rt, qt = function(t) {
        if ("function" != typeof t) throw TypeError(String(t) + " is not a function");
        return t;
    }, Ut = qt, Yt = function(t, e, i2) {
        if (Ut(t), void 0 === e) return t;
        switch(i2){
            case 0:
                return function() {
                    return t.call(e);
                };
            case 1:
                return function(i) {
                    return t.call(e, i);
                };
            case 2:
                return function(i, o) {
                    return t.call(e, i, o);
                };
            case 3:
                return function(i, o, n) {
                    return t.call(e, i, o, n);
                };
        }
        return function() {
            return t.apply(e, arguments);
        };
    }, Xt = {
    }, Gt = E1, Kt = function(t) {
        if (!Gt(t)) throw TypeError(String(t) + " is not an object");
        return t;
    }, $t = a1, Zt = St, Qt = Kt, Jt = kt, te = Object.defineProperty;
    Xt.f = $t ? te : function(t, e, i) {
        if (Qt(t), e = Jt(e), Qt(i), Zt) try {
            return te(t, e, i);
        } catch (t4) {
        }
        if ("get" in i || "set" in i) throw TypeError("Accessors not supported");
        return "value" in i && (t[e] = i.value), t;
    };
    var ee = Xt, ie = p1, oe = a1 ? function(t, e, i) {
        return ee.f(t, e, ie(1, i));
    } : function(t, e, i) {
        return t[e] = i, t;
    }, ne = n1, re = r1.f, se = Vt, ae = O1, he = Yt, de = oe, le = et, ce = function(t) {
        var e2 = function(e, i, o) {
            if (this instanceof t) {
                switch(arguments.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(e);
                    case 2:
                        return new t(e, i);
                }
                return new t(e, i, o);
            }
            return t.apply(this, arguments);
        };
        return e2.prototype = t.prototype, e2;
    }, ue = function(t, e) {
        var i, o, n, r, s, a, h, d, l = t.target, c = t.global, u = t.stat, f = t.proto, p = c ? ne : u ? ne[l] : (ne[l] || {
        }).prototype, v = c ? ae : ae[l] || (ae[l] = {
        }), g = v.prototype;
        for(n in e)i = !se(c ? n : l + (u ? "." : "#") + n, t.forced) && p && le(p, n), s = v[n], i && (a = t.noTargetGet ? (d = re(p, n)) && d.value : p[n]), r = i && a ? a : e[n], i && typeof s == typeof r || (h = t.bind && i ? he(r, ne) : t.wrap && i ? ce(r) : f && "function" == typeof r ? he(Function.call, r) : r, (t.sham || r && r.sham || s && s.sham) && de(h, "sham", !0), v[n] = h, f && (le(ae, o = l + "Prototype") || de(ae, o, {
        }), ae[o][n] = r, t.real && g && !g[n] && de(g, n, r)));
    }, fe = Math.ceil, pe = Math.floor, ve = function(t) {
        return isNaN(t = +t) ? 0 : (t > 0 ? pe : fe)(t);
    }, ge = ve, ye = Math.min, me = function(t) {
        return t > 0 ? ye(ge(t), 9007199254740991) : 0;
    }, be = ve, we = Math.max, ke = Math.min, _e = function(t, e) {
        var i = be(t);
        return i < 0 ? we(i + e, 0) : ke(i, e);
    }, xe = x1, Ee = me, Oe = _e, Ce = function(t) {
        return function(e, i, o) {
            var n, r = xe(e), s = Ee(r.length), a = Oe(o, s);
            if (t && i != i) {
                for(; s > a;)if ((n = r[a++]) != n) return !0;
            } else for(; s > a; a++)if ((t || a in r) && r[a] === i) return t || a || 0;
            return !t && -1;
        };
    }, Se = {
        includes: Ce(!0),
        indexOf: Ce(!1)
    }, Te = {
    }, Me = et, Pe = x1, De = Se.indexOf, Be = Te, Ie = function(t, e) {
        var i, o = Pe(t), n = 0, r = [];
        for(i in o)!Me(Be, i) && Me(o, i) && r.push(i);
        for(; e.length > n;)Me(o, i = e[n++]) && (~De(r, i) || r.push(i));
        return r;
    }, ze = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
    ], Fe = Ie, Ne = ze, Ae = Object.keys || function(t) {
        return Fe(t, Ne);
    }, Re = {
    };
    Re.f = Object.getOwnPropertySymbols;
    var je = a1, Le = s1, He = Ae, We = Re, Ve = h1, qe = Q, Ue = b1, Ye = Object.assign, Xe = Object.defineProperty, Ge = !Ye || Le(function() {
        if (je && 1 !== Ye({
            b: 1
        }, Ye(Xe({
        }, "a", {
            enumerable: !0,
            get: function() {
                Xe(this, "b", {
                    value: 3,
                    enumerable: !1
                });
            }
        }), {
            b: 2
        })).b) return !0;
        var t5 = {
        }, e = {
        }, i = Symbol(), o = "abcdefghijklmnopqrst";
        return t5[i] = 7, o.split("").forEach(function(t) {
            e[t] = t;
        }), 7 != Ye({
        }, t5)[i] || He(Ye({
        }, e)).join("") != o;
    }) ? function(t, e) {
        for(var i = qe(t), o = arguments.length, n = 1, r = We.f, s = Ve.f; o > n;)for(var a, h = Ue(arguments[n++]), d = r ? He(h).concat(r(h)) : He(h), l = d.length, c = 0; l > c;)a = d[c++], je && !s.call(h, a) || (i[a] = h[a]);
        return i;
    } : Ye;
    ue({
        target: "Object",
        stat: !0,
        forced: Object.assign !== Ge
    }, {
        assign: Ge
    });
    var Ke = O1.Object.assign, $e = qt, Ze = E1, Qe = [].slice, Je = {
    }, ti = function(t, e, i) {
        if (!(e in Je)) {
            for(var o = [], n = 0; n < e; n++)o[n] = "a[" + n + "]";
            Je[e] = Function("C,a", "return new C(" + o.join(",") + ")");
        }
        return Je[e](t, i);
    }, ei = Function.bind || function(t) {
        var e = $e(this), i = Qe.call(arguments, 1), o = function() {
            var n = i.concat(Qe.call(arguments));
            return this instanceof o ? ti(e, n.length, n) : e.apply(t, n);
        };
        return Ze(e.prototype) && (o.prototype = e.prototype), o;
    };
    ue({
        target: "Function",
        proto: !0
    }, {
        bind: ei
    });
    var ii = O1, oi = function(t) {
        return ii[t + "Prototype"];
    }, ni = oi("Function").bind, ri = Function.prototype, si = function(t) {
        var e = t.bind;
        return t === ri || t instanceof Function && e === ri.bind ? ni : e;
    };
    function ai(t, e, i, o) {
        t.beginPath(), t.arc(e, i, o, 0, 2 * Math.PI, !1), t.closePath();
    }
    function hi(t, e, i, o, n, r) {
        var s = Math.PI / 180;
        o - 2 * r < 0 && (r = o / 2), n - 2 * r < 0 && (r = n / 2), t.beginPath(), t.moveTo(e + r, i), t.lineTo(e + o - r, i), t.arc(e + o - r, i + r, r, 270 * s, 360 * s, !1), t.lineTo(e + o, i + n - r), t.arc(e + o - r, i + n - r, r, 0, 90 * s, !1), t.lineTo(e + r, i + n), t.arc(e + r, i + n - r, r, 90 * s, 180 * s, !1), t.lineTo(e, i + r), t.arc(e + r, i + r, r, 180 * s, 270 * s, !1), t.closePath();
    }
    function di(t, e, i, o, n) {
        var r = 0.5522848, s = o / 2 * r, a = n / 2 * r, h = e + o, d = i + n, l = e + o / 2, c = i + n / 2;
        t.beginPath(), t.moveTo(e, c), t.bezierCurveTo(e, c - a, l - s, i, l, i), t.bezierCurveTo(l + s, i, h, c - a, h, c), t.bezierCurveTo(h, c + a, l + s, d, l, d), t.bezierCurveTo(l - s, d, e, c + a, e, c), t.closePath();
    }
    function li(t, e, i, o, n) {
        var r = n * (1 / 3), s = 0.5522848, a = o / 2 * s, h = r / 2 * s, d = e + o, l = i + r, c = e + o / 2, u = i + r / 2, f = i + (n - r / 2), p = i + n;
        t.beginPath(), t.moveTo(d, u), t.bezierCurveTo(d, u + h, c + a, l, c, l), t.bezierCurveTo(c - a, l, e, u + h, e, u), t.bezierCurveTo(e, u - h, c - a, i, c, i), t.bezierCurveTo(c + a, i, d, u - h, d, u), t.lineTo(d, f), t.bezierCurveTo(d, f + h, c + a, p, c, p), t.bezierCurveTo(c - a, p, e, f + h, e, f), t.lineTo(e, u);
    }
    function ci(t, e, i, o, n, r) {
        t.beginPath(), t.moveTo(e, i);
        for(var s = r.length, a = o - e, h = n - i, d = h / a, l = Math.sqrt(a * a + h * h), c = 0, u = !0, f = 0, p = +r[0]; l >= 0.1;)(p = +r[(c++) % s]) > l && (p = l), f = Math.sqrt(p * p / (1 + d * d)), e += f = a < 0 ? -f : f, i += d * f, !0 === u ? t.lineTo(e, i) : t.moveTo(e, i), l -= p, u = !u;
    }
    var ui = {
        circle: ai,
        dashedLine: ci,
        database: li,
        diamond: function(t, e, i, o) {
            t.beginPath(), t.lineTo(e, i + o), t.lineTo(e + o, i), t.lineTo(e, i - o), t.lineTo(e - o, i), t.closePath();
        },
        ellipse: di,
        ellipse_vis: di,
        hexagon: function(t, e, i, o) {
            t.beginPath();
            var n = 2 * Math.PI / 6;
            t.moveTo(e + o, i);
            for(var r = 1; r < 6; r++)t.lineTo(e + o * Math.cos(n * r), i + o * Math.sin(n * r));
            t.closePath();
        },
        roundRect: hi,
        square: function(t, e, i, o) {
            t.beginPath(), t.rect(e - o, i - o, 2 * o, 2 * o), t.closePath();
        },
        star: function(t, e, i, o) {
            t.beginPath(), i += 0.1 * (o *= 0.82);
            for(var n = 0; n < 10; n++){
                var r = n % 2 == 0 ? 1.3 * o : 0.5 * o;
                t.lineTo(e + r * Math.sin(2 * n * Math.PI / 10), i - r * Math.cos(2 * n * Math.PI / 10));
            }
            t.closePath();
        },
        triangle: function(t, e, i, o) {
            t.beginPath(), i += 0.275 * (o *= 1.15);
            var n = 2 * o, r = n / 2, s = Math.sqrt(3) / 6 * n, a = Math.sqrt(n * n - r * r);
            t.moveTo(e, i - (a - s)), t.lineTo(e + r, i + s), t.lineTo(e - r, i + s), t.lineTo(e, i - (a - s)), t.closePath();
        },
        triangleDown: function(t, e, i, o) {
            t.beginPath(), i -= 0.275 * (o *= 1.15);
            var n = 2 * o, r = n / 2, s = Math.sqrt(3) / 6 * n, a = Math.sqrt(n * n - r * r);
            t.moveTo(e, i + (a - s)), t.lineTo(e + r, i - s), t.lineTo(e - r, i - s), t.lineTo(e, i + (a - s)), t.closePath();
        }
    };
    var fi = {
        exports: {
        }
    };
    !function(t6) {
        function e3(t7) {
            if (t7) return (function(t) {
                for(var i in e3.prototype)t[i] = e3.prototype[i];
                return t;
            })(t7);
        }
        t6.exports = e3, e3.prototype.on = e3.prototype.addEventListener = function(t, e) {
            return this._callbacks = this._callbacks || {
            }, (this._callbacks["$" + t] = this._callbacks["$" + t] || []).push(e), this;
        }, e3.prototype.once = function(t, e) {
            function i() {
                this.off(t, i), e.apply(this, arguments);
            }
            return i.fn = e, this.on(t, i), this;
        }, e3.prototype.off = e3.prototype.removeListener = e3.prototype.removeAllListeners = e3.prototype.removeEventListener = function(t, e) {
            if (this._callbacks = this._callbacks || {
            }, 0 == arguments.length) return this._callbacks = {
            }, this;
            var i, o = this._callbacks["$" + t];
            if (!o) return this;
            if (1 == arguments.length) return delete this._callbacks["$" + t], this;
            for(var n = 0; n < o.length; n++)if ((i = o[n]) === e || i.fn === e) {
                o.splice(n, 1);
                break;
            }
            return 0 === o.length && delete this._callbacks["$" + t], this;
        }, e3.prototype.emit = function(t) {
            this._callbacks = this._callbacks || {
            };
            for(var e = new Array(arguments.length - 1), i = this._callbacks["$" + t], o = 1; o < arguments.length; o++)e[o - 1] = arguments[o];
            if (i) {
                o = 0;
                for(var n = (i = i.slice(0)).length; o < n; ++o)i[o].apply(this, e);
            }
            return this;
        }, e3.prototype.listeners = function(t) {
            return this._callbacks = this._callbacks || {
            }, this._callbacks["$" + t] || [];
        }, e3.prototype.hasListeners = function(t) {
            return !!this.listeners(t).length;
        };
    }(fi);
    var pi = fi.exports, vi = V, gi = function(t) {
        if (vi(t)) throw TypeError("Cannot convert a Symbol value to a string");
        return String(t);
    }, yi = ve, mi = gi, bi = w1, wi = function(t) {
        return function(e, i) {
            var o, n, r = mi(bi(e)), s = yi(i), a = r.length;
            return s < 0 || s >= a ? t ? "" : void 0 : (o = r.charCodeAt(s)) < 55296 || o > 56319 || s + 1 === a || (n = r.charCodeAt(s + 1)) < 56320 || n > 57343 ? t ? r.charAt(s) : o : t ? r.slice(s, s + 2) : n - 56320 + (o - 55296 << 10) + 65536;
        };
    }, ki = {
        codeAt: wi(!1),
        charAt: wi(!0)
    }, _i = K, xi = Function.toString;
    "function" != typeof _i.inspectSource && (_i.inspectSource = function(t) {
        return xi.call(t);
    });
    var Ei, Oi, Ci, Si = _i.inspectSource, Ti = n1.WeakMap, Mi = "function" == typeof Ti && /native code/.test(Si(Ti)), Pi = U.exports, Di = nt, Bi = Pi("keys"), Ii = function(t) {
        return Bi[t] || (Bi[t] = Di(t));
    }, zi = Mi, Fi = E1, Ni = oe, Ai = et, Ri = K, ji = Ii, Li = Te, Hi = "Object already initialized", Wi = n1.WeakMap;
    if (zi || Ri.state) {
        var Vi = Ri.state || (Ri.state = new Wi), qi = Vi.get, Ui = Vi.has, Yi = Vi.set;
        Ei = function(t, e) {
            if (Ui.call(Vi, t)) throw new TypeError(Hi);
            return e.facade = t, Yi.call(Vi, t, e), e;
        }, Oi = function(t) {
            return qi.call(Vi, t) || {
            };
        }, Ci = function(t) {
            return Ui.call(Vi, t);
        };
    } else {
        var Xi = ji("state");
        Li[Xi] = !0, Ei = function(t, e) {
            if (Ai(t, Xi)) throw new TypeError(Hi);
            return e.facade = t, Ni(t, Xi, e), e;
        }, Oi = function(t) {
            return Ai(t, Xi) ? t[Xi] : {
            };
        }, Ci = function(t) {
            return Ai(t, Xi);
        };
    }
    var Gi, Ki, $i, Zi = {
        set: Ei,
        get: Oi,
        has: Ci,
        enforce: function(t) {
            return Ci(t) ? Oi(t) : Ei(t, {
            });
        },
        getterFor: function(t) {
            return function(e) {
                var i;
                if (!Fi(e) || (i = Oi(e)).type !== t) throw TypeError("Incompatible receiver, " + t + " required");
                return i;
            };
        }
    }, Qi = !s1(function() {
        function t() {
        }
        return t.prototype.constructor = null, Object.getPrototypeOf(new t) !== t.prototype;
    }), Ji = et, to = Q, eo = Qi, io = Ii("IE_PROTO"), oo = Object.prototype, no = eo ? Object.getPrototypeOf : function(t) {
        return t = to(t), Ji(t, io) ? t[io] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? oo : null;
    }, ro = s1, so = no, ao = oe, ho = et, lo = pt("iterator"), co = !1;
    [].keys && ("next" in ($i = [].keys()) ? (Ki = so(so($i))) !== Object.prototype && (Gi = Ki) : co = !0);
    var uo = null == Gi || ro(function() {
        var t = {
        };
        return Gi[lo].call(t) !== t;
    });
    uo && (Gi = {
    }), uo && !ho(Gi, lo) && ao(Gi, lo, function() {
        return this;
    });
    var fo, po = {
        IteratorPrototype: Gi,
        BUGGY_SAFARI_ITERATORS: co
    }, vo = Xt, go = Kt, yo = Ae, mo = a1 ? Object.defineProperties : function(t, e) {
        go(t);
        for(var i, o = yo(e), n = o.length, r = 0; n > r;)vo.f(t, i = o[r++], e[i]);
        return t;
    }, bo = M1("document", "documentElement"), wo = Kt, ko = mo, _o = ze, xo = Te, Eo = bo, Oo = Ot, Co = Ii("IE_PROTO"), So = function() {
    }, To = function(t) {
        return "<script>" + t + "</" + "script>";
    }, Mo = function(t) {
        t.write(To("")), t.close();
        var e = t.parentWindow.Object;
        return t = null, e;
    }, Po = function() {
        try {
            fo = new ActiveXObject("htmlfile");
        } catch (t8) {
        }
        Po = document.domain && fo ? Mo(fo) : (function() {
            var t, e = Oo("iframe");
            if (e.style) return e.style.display = "none", Eo.appendChild(e), e.src = String("javascript:"), (t = e.contentWindow.document).open(), t.write(To("document.F=Object")), t.close(), t.F;
        })() || Mo(fo);
        for(var t9 = _o.length; t9--;)delete Po.prototype[_o[t9]];
        return Po();
    };
    xo[Co] = !0;
    var Do = Object.create || function(t, e) {
        var i;
        return null !== t ? (So.prototype = wo(t), i = new So, So.prototype = null, i[Co] = t) : i = Po(), void 0 === e ? i : ko(i, e);
    }, Bo = {
    };
    Bo[pt("toStringTag")] = "z";
    var Io = "[object z]" === String(Bo), zo = Io, Fo = g1, No = pt("toStringTag"), Ao = "Arguments" == Fo(function() {
        return arguments;
    }()), Ro = zo ? Fo : function(t10) {
        var e, i, o;
        return void 0 === t10 ? "Undefined" : null === t10 ? "Null" : "string" == typeof (i = function(t, e) {
            try {
                return t[e];
            } catch (t11) {
            }
        }(e = Object(t10), No)) ? i : Ao ? Fo(e) : "Object" == (o = Fo(e)) && "function" == typeof e.callee ? "Arguments" : o;
    }, jo = Ro, Lo = Io ? {
    }.toString : function() {
        return "[object " + jo(this) + "]";
    }, Ho = Io, Wo = Xt.f, Vo = oe, qo = et, Uo = Lo, Yo = pt("toStringTag"), Xo = function(t, e, i, o) {
        if (t) {
            var n = i ? t : t.prototype;
            qo(n, Yo) || Wo(n, Yo, {
                configurable: !0,
                value: e
            }), o && !Ho && Vo(n, "toString", Uo);
        }
    }, Go = {
    }, Ko = po.IteratorPrototype, $o = Do, Zo = p1, Qo = Xo, Jo = Go, tn = function() {
        return this;
    }, en = E1, on = Kt, nn = function(t) {
        if (!en(t) && null !== t) throw TypeError("Can't set " + String(t) + " as a prototype");
        return t;
    }, rn = Object.setPrototypeOf || ("__proto__" in {
    } ? function() {
        var t, e = !1, i3 = {
        };
        try {
            (t = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(i3, []), e = i3 instanceof Array;
        } catch (t12) {
        }
        return function(i, o) {
            return on(i), nn(o), e ? t.call(i, o) : i.__proto__ = o, i;
        };
    }() : void 0), sn = oe, an = function(t, e, i, o) {
        o && o.enumerable ? t[e] = i : sn(t, e, i);
    }, hn = ue, dn = function(t, e, i) {
        var o = e + " Iterator";
        return t.prototype = $o(Ko, {
            next: Zo(1, i)
        }), Qo(t, o, !1, !0), Jo[o] = tn, t;
    }, ln = no, cn = Xo, un = oe, fn = an, pn = Go, vn = po.IteratorPrototype, gn = po.BUGGY_SAFARI_ITERATORS, yn = pt("iterator"), mn = "keys", bn = "values", wn = "entries", kn = function() {
        return this;
    }, _n = function(t13, e, i, o, n, r, s) {
        dn(i, e, o);
        var a, h, d, l = function(t) {
            if (t === n && v) return v;
            if (!gn && t in f) return f[t];
            switch(t){
                case mn:
                case bn:
                case wn:
                    return function() {
                        return new i(this, t);
                    };
            }
            return function() {
                return new i(this);
            };
        }, c = e + " Iterator", u = !1, f = t13.prototype, p = f[yn] || f["@@iterator"] || n && f[n], v = !gn && p || l(n), g = "Array" == e && f.entries || p;
        if (g && (a = ln(g.call(new t13)), vn !== Object.prototype && a.next && (cn(a, c, !0, !0), pn[c] = kn)), n == bn && p && p.name !== bn && (u = !0, v = function() {
            return p.call(this);
        }), s && f[yn] !== v && un(f, yn, v), pn[e] = v, n) {
            if (h = {
                values: l(bn),
                keys: r ? v : l(mn),
                entries: l(wn)
            }, s) for(d in h)(gn || u || !(d in f)) && fn(f, d, h[d]);
            else hn({
                target: e,
                proto: !0,
                forced: gn || u
            }, h);
        }
        return h;
    }, xn = ki.charAt, En = gi, On = Zi, Cn = _n, Sn = "String Iterator", Tn = On.set, Mn = On.getterFor(Sn);
    Cn(String, "String", function(t) {
        Tn(this, {
            type: Sn,
            string: En(t),
            index: 0
        });
    }, function() {
        var t, e = Mn(this), i = e.string, o = e.index;
        return o >= i.length ? {
            value: void 0,
            done: !0
        } : (t = xn(i, o), e.index += t.length, {
            value: t,
            done: !1
        });
    });
    var Pn = Kt, Dn = function(t) {
        var e = t.return;
        if (void 0 !== e) return Pn(e.call(t)).value;
    }, Bn = Kt, In = Dn, zn = Go, Fn = pt("iterator"), Nn = Array.prototype, An = function(t) {
        return void 0 !== t && (zn.Array === t || Nn[Fn] === t);
    }, Rn = kt, jn = Xt, Ln = p1, Hn = function(t, e, i) {
        var o = Rn(e);
        o in t ? jn.f(t, o, Ln(0, i)) : t[o] = i;
    }, Wn = Ro, Vn = Go, qn = pt("iterator"), Un = function(t) {
        if (null != t) return t[qn] || t["@@iterator"] || Vn[Wn(t)];
    }, Yn = Yt, Xn = Q, Gn = function(t, e, i, o) {
        try {
            return o ? e(Bn(i)[0], i[1]) : e(i);
        } catch (e4) {
            throw In(t), e4;
        }
    }, Kn = An, $n = me, Zn = Hn, Qn = Un, Jn = pt("iterator"), tr = !1;
    try {
        var er = 0, ir = {
            next: function() {
                return {
                    done: !!er++
                };
            },
            return: function() {
                tr = !0;
            }
        };
        ir[Jn] = function() {
            return this;
        }, Array.from(ir, function() {
            throw 2;
        });
    } catch (t14) {
    }
    var or = function(t) {
        var e, i, o, n, r, s, a = Xn(t), h = "function" == typeof this ? this : Array, d = arguments.length, l = d > 1 ? arguments[1] : void 0, c = void 0 !== l, u = Qn(a), f = 0;
        if (c && (l = Yn(l, d > 2 ? arguments[2] : void 0, 2)), null == u || h == Array && Kn(u)) for(i = new h(e = $n(a.length)); e > f; f++)s = c ? l(a[f], f) : a[f], Zn(i, f, s);
        else for(r = (n = u.call(a)).next, i = new h; !(o = r.call(n)).done; f++)s = c ? Gn(n, l, [
            o.value,
            f
        ], !0) : o.value, Zn(i, f, s);
        return i.length = f, i;
    };
    ue({
        target: "Array",
        stat: !0,
        forced: !function(t, e) {
            if (!e && !tr) return !1;
            var i = !1;
            try {
                var o = {
                };
                o[Jn] = function() {
                    return {
                        next: function() {
                            return {
                                done: i = !0
                            };
                        }
                    };
                }, t(o);
            } catch (t15) {
            }
            return i;
        }(function(t) {
            Array.from(t);
        })
    }, {
        from: or
    });
    var nr = O1.Array.from, rr = nr, sr = x1, ar = Go, hr = Zi, dr = _n, lr = "Array Iterator", cr = hr.set, ur = hr.getterFor(lr);
    dr(Array, "Array", function(t, e) {
        cr(this, {
            type: lr,
            target: sr(t),
            index: 0,
            kind: e
        });
    }, function() {
        var t = ur(this), e = t.target, i = t.kind, o = t.index++;
        return !e || o >= e.length ? (t.target = void 0, {
            value: void 0,
            done: !0
        }) : "keys" == i ? {
            value: o,
            done: !1
        } : "values" == i ? {
            value: e[o],
            done: !1
        } : {
            value: [
                o,
                e[o]
            ],
            done: !1
        };
    }, "values"), ar.Arguments = ar.Array;
    var fr = Un, pr = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    }, vr = n1, gr = Ro, yr = oe, mr = Go, br = pt("toStringTag");
    for(var wr in pr){
        var kr = vr[wr], _r = kr && kr.prototype;
        _r && gr(_r) !== br && yr(_r, br, wr), mr[wr] = mr.Array;
    }
    var xr = fr, Er = g1, Or = Array.isArray || function(t) {
        return "Array" == Er(t);
    }, Cr = {
    }, Sr = Ie, Tr = ze.concat("length", "prototype");
    Cr.f = Object.getOwnPropertyNames || function(t) {
        return Sr(t, Tr);
    };
    var Mr = {
    }, Pr = x1, Dr = Cr.f, Br = {
    }.toString, Ir = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    Mr.f = function(t16) {
        return Ir && "[object Window]" == Br.call(t16) ? (function(t) {
            try {
                return Dr(t);
            } catch (t17) {
                return Ir.slice();
            }
        })(t16) : Dr(Pr(t16));
    };
    var zr = {
    }, Fr = pt;
    zr.f = Fr;
    var Nr = O1, Ar = et, Rr = zr, jr = Xt.f, Lr = function(t) {
        var e = Nr.Symbol || (Nr.Symbol = {
        });
        Ar(e, t) || jr(e, t, {
            value: Rr.f(t)
        });
    }, Hr = E1, Wr = Or, Vr = pt("species"), qr = function(t) {
        var e;
        return Wr(t) && ("function" != typeof (e = t.constructor) || e !== Array && !Wr(e.prototype) ? Hr(e) && null === (e = e[Vr]) && (e = void 0) : e = void 0), void 0 === e ? Array : e;
    }, Ur = function(t, e) {
        return new (qr(t))(0 === e ? 0 : e);
    }, Yr = Yt, Xr = b1, Gr = Q, Kr = me, $r = Ur, Zr = [].push, Qr = function(t) {
        var e = 1 == t, i = 2 == t, o = 3 == t, n = 4 == t, r = 6 == t, s = 7 == t, a = 5 == t || r;
        return function(h, d, l, c) {
            for(var u, f, p = Gr(h), v = Xr(p), g = Yr(d, l, 3), y = Kr(v.length), m = 0, b = c || $r, w = e ? b(h, y) : i || s ? b(h, 0) : void 0; y > m; m++)if ((a || m in v) && (f = g(u = v[m], m, p), t)) {
                if (e) w[m] = f;
                else if (f) switch(t){
                    case 3:
                        return !0;
                    case 5:
                        return u;
                    case 6:
                        return m;
                    case 2:
                        Zr.call(w, u);
                }
                else switch(t){
                    case 4:
                        return !1;
                    case 7:
                        Zr.call(w, u);
                }
            }
            return r ? -1 : o || n ? n : w;
        };
    }, Jr = {
        forEach: Qr(0),
        map: Qr(1),
        filter: Qr(2),
        some: Qr(3),
        every: Qr(4),
        find: Qr(5),
        findIndex: Qr(6),
        filterReject: Qr(7)
    }, ts = ue, es = n1, is = M1, os = a1, ns = L, rs = s1, ss = et, as = Or, hs = E1, ds = V, ls = Kt, cs = Q, us = x1, fs = kt, ps = gi, vs = p1, gs = Do, ys = Ae, ms = Cr, bs = Mr, ws = Re, ks = r1, _s = Xt, xs = h1, Es = oe, Os = an, Cs = U.exports, Ss = Te, Ts = nt, Ms = pt, Ps = zr, Ds = Lr, Bs = Xo, Is = Zi, zs = Jr.forEach, Fs = Ii("hidden"), Ns = "Symbol", As = Ms("toPrimitive"), Rs = Is.set, js = Is.getterFor(Ns), Ls = Object.prototype, Hs = es.Symbol, Ws = is("JSON", "stringify"), Vs = ks.f, qs = _s.f, Us = bs.f, Ys = xs.f, Xs = Cs("symbols"), Gs = Cs("op-symbols"), Ks = Cs("string-to-symbol-registry"), $s = Cs("symbol-to-string-registry"), Zs = Cs("wks"), Qs = es.QObject, Js = !Qs || !Qs.prototype || !Qs.prototype.findChild, ta = os && rs(function() {
        return 7 != gs(qs({
        }, "a", {
            get: function() {
                return qs(this, "a", {
                    value: 7
                }).a;
            }
        })).a;
    }) ? function(t, e, i) {
        var o = Vs(Ls, e);
        o && delete Ls[e], qs(t, e, i), o && t !== Ls && qs(Ls, e, o);
    } : qs, ea = function(t, e) {
        var i = Xs[t] = gs(Hs.prototype);
        return Rs(i, {
            type: Ns,
            tag: t,
            description: e
        }), os || (i.description = e), i;
    }, ia = function(t, e, i) {
        t === Ls && ia(Gs, e, i), ls(t);
        var o = fs(e);
        return ls(i), ss(Xs, o) ? (i.enumerable ? (ss(t, Fs) && t[Fs][o] && (t[Fs][o] = !1), i = gs(i, {
            enumerable: vs(0, !1)
        })) : (ss(t, Fs) || qs(t, Fs, vs(1, {
        })), t[Fs][o] = !0), ta(t, o, i)) : qs(t, o, i);
    }, oa = function(t, e5) {
        ls(t);
        var i = us(e5), o = ys(i).concat(aa(i));
        return zs(o, function(e) {
            os && !na.call(i, e) || ia(t, e, i[e]);
        }), t;
    }, na = function(t) {
        var e = fs(t), i = Ys.call(this, e);
        return !(this === Ls && ss(Xs, e) && !ss(Gs, e)) && (!(i || !ss(this, e) || !ss(Xs, e) || ss(this, Fs) && this[Fs][e]) || i);
    }, ra = function(t, e) {
        var i = us(t), o = fs(e);
        if (i !== Ls || !ss(Xs, o) || ss(Gs, o)) {
            var n = Vs(i, o);
            return !n || !ss(Xs, o) || ss(i, Fs) && i[Fs][o] || (n.enumerable = !0), n;
        }
    }, sa = function(t18) {
        var e = Us(us(t18)), i = [];
        return zs(e, function(t) {
            ss(Xs, t) || ss(Ss, t) || i.push(t);
        }), i;
    }, aa = function(t19) {
        var e = t19 === Ls, i = Us(e ? Gs : us(t19)), o = [];
        return zs(i, function(t) {
            !ss(Xs, t) || e && !ss(Ls, t) || o.push(Xs[t]);
        }), o;
    };
    (ns || (Os((Hs = function() {
        if (this instanceof Hs) throw TypeError("Symbol is not a constructor");
        var t20 = arguments.length && void 0 !== arguments[0] ? ps(arguments[0]) : void 0, e = Ts(t20), i = function(t) {
            this === Ls && i.call(Gs, t), ss(this, Fs) && ss(this[Fs], e) && (this[Fs][e] = !1), ta(this, e, vs(1, t));
        };
        return os && Js && ta(Ls, e, {
            configurable: !0,
            set: i
        }), ea(e, t20);
    }).prototype, "toString", function() {
        return js(this).tag;
    }), Os(Hs, "withoutSetter", function(t) {
        return ea(Ts(t), t);
    }), xs.f = na, _s.f = ia, ks.f = ra, ms.f = bs.f = sa, ws.f = aa, Ps.f = function(t) {
        return ea(Ms(t), t);
    }, os && qs(Hs.prototype, "description", {
        configurable: !0,
        get: function() {
            return js(this).description;
        }
    })), ts({
        global: !0,
        wrap: !0,
        forced: !ns,
        sham: !ns
    }, {
        Symbol: Hs
    }), zs(ys(Zs), function(t) {
        Ds(t);
    }), ts({
        target: Ns,
        stat: !0,
        forced: !ns
    }, {
        for: function(t) {
            var e = ps(t);
            if (ss(Ks, e)) return Ks[e];
            var i = Hs(e);
            return Ks[e] = i, $s[i] = e, i;
        },
        keyFor: function(t) {
            if (!ds(t)) throw TypeError(t + " is not a symbol");
            if (ss($s, t)) return $s[t];
        },
        useSetter: function() {
            Js = !0;
        },
        useSimple: function() {
            Js = !1;
        }
    }), ts({
        target: "Object",
        stat: !0,
        forced: !ns,
        sham: !os
    }, {
        create: function(t, e) {
            return void 0 === e ? gs(t) : oa(gs(t), e);
        },
        defineProperty: ia,
        defineProperties: oa,
        getOwnPropertyDescriptor: ra
    }), ts({
        target: "Object",
        stat: !0,
        forced: !ns
    }, {
        getOwnPropertyNames: sa,
        getOwnPropertySymbols: aa
    }), ts({
        target: "Object",
        stat: !0,
        forced: rs(function() {
            ws.f(1);
        })
    }, {
        getOwnPropertySymbols: function(t) {
            return ws.f(cs(t));
        }
    }), Ws) && ts({
        target: "JSON",
        stat: !0,
        forced: !ns || rs(function() {
            var t = Hs();
            return "[null]" != Ws([
                t
            ]) || "{}" != Ws({
                a: t
            }) || "{}" != Ws(Object(t));
        })
    }, {
        stringify: function(t21, e6, i) {
            for(var o, n = [
                t21
            ], r = 1; arguments.length > r;)n.push(arguments[r++]);
            if (o = e6, (hs(e6) || void 0 !== t21) && !ds(t21)) return as(e6) || (e6 = function(t, e) {
                if ("function" == typeof o && (e = o.call(this, t, e)), !ds(e)) return e;
            }), n[1] = e6, Ws.apply(null, n);
        }
    });
    Hs.prototype[As] || Es(Hs.prototype, As, Hs.prototype.valueOf), Bs(Hs, Ns), Ss[Fs] = !0;
    var ha = O1.Object.getOwnPropertySymbols, da = {
        exports: {
        }
    }, la = ue, ca = s1, ua = x1, fa = r1.f, pa = a1, va = ca(function() {
        fa(1);
    });
    la({
        target: "Object",
        stat: !0,
        forced: !pa || va,
        sham: !pa
    }, {
        getOwnPropertyDescriptor: function(t, e) {
            return fa(ua(t), e);
        }
    });
    var ga = O1.Object, ya = da.exports = function(t, e) {
        return ga.getOwnPropertyDescriptor(t, e);
    };
    ga.getOwnPropertyDescriptor.sham && (ya.sham = !0);
    var ma = da.exports, ba = ma, wa = Cr, ka = Re, _a = Kt, xa = M1("Reflect", "ownKeys") || function(t) {
        var e = wa.f(_a(t)), i = ka.f;
        return i ? e.concat(i(t)) : e;
    }, Ea = xa, Oa = x1, Ca = r1, Sa = Hn;
    ue({
        target: "Object",
        stat: !0,
        sham: !a1
    }, {
        getOwnPropertyDescriptors: function(t) {
            for(var e, i, o = Oa(t), n = Ca.f, r = Ea(o), s = {
            }, a = 0; r.length > a;)void 0 !== (i = n(o, e = r[a++])) && Sa(s, e, i);
            return s;
        }
    });
    var Ta = O1.Object.getOwnPropertyDescriptors, Ma = {
        exports: {
        }
    };
    ue({
        target: "Object",
        stat: !0,
        forced: !a1,
        sham: !a1
    }, {
        defineProperties: mo
    });
    var Pa = O1.Object, Da = Ma.exports = function(t, e) {
        return Pa.defineProperties(t, e);
    };
    Pa.defineProperties.sham && (Da.sham = !0);
    var Ba = Ma.exports, Ia = {
        exports: {
        }
    };
    ue({
        target: "Object",
        stat: !0,
        forced: !a1,
        sham: !a1
    }, {
        defineProperty: Xt.f
    });
    var za = O1.Object, Fa = Ia.exports = function(t, e, i) {
        return za.defineProperty(t, e, i);
    };
    za.defineProperty.sham && (Fa.sham = !0);
    var Na = Ia.exports, Aa = Na;
    function Ra(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }
    var ja = Na;
    function La(t, e) {
        for(var i = 0; i < e.length; i++){
            var o = e[i];
            o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), ja(t, o.key, o);
        }
    }
    function Ha(t, e, i) {
        return e && La(t.prototype, e), i && La(t, i), t;
    }
    function Wa(t, e, i) {
        return e in t ? ja(t, e, {
            value: i,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = i, t;
    }
    ue({
        target: "Array",
        stat: !0
    }, {
        isArray: Or
    });
    var Va = O1.Array.isArray, qa = Va;
    var Ua = s1, Ya = A, Xa = pt("species"), Ga = function(t) {
        return Ya >= 51 || !Ua(function() {
            var e = [];
            return (e.constructor = {
            })[Xa] = function() {
                return {
                    foo: 1
                };
            }, 1 !== e[t](Boolean).foo;
        });
    }, Ka = ue, $a = s1, Za = Or, Qa = E1, Ja = Q, th = me, eh = Hn, ih = Ur, oh = Ga, nh = A, rh = pt("isConcatSpreadable"), sh = 9007199254740991, ah = "Maximum allowed index exceeded", hh = nh >= 51 || !$a(function() {
        var t = [];
        return t[rh] = !1, t.concat()[0] !== t;
    }), dh = oh("concat"), lh = function(t) {
        if (!Qa(t)) return !1;
        var e = t[rh];
        return void 0 !== e ? !!e : Za(t);
    };
    Ka({
        target: "Array",
        proto: !0,
        forced: !hh || !dh
    }, {
        concat: function(t) {
            var e, i, o, n, r, s = Ja(this), a = ih(s, 0), h = 0;
            for(e = -1, o = arguments.length; e < o; e++)if (lh(r = -1 === e ? s : arguments[e])) {
                if (h + (n = th(r.length)) > sh) throw TypeError(ah);
                for(i = 0; i < n; i++, h++)i in r && eh(a, h, r[i]);
            } else {
                if (h >= sh) throw TypeError(ah);
                eh(a, h++, r);
            }
            return a.length = h, a;
        }
    }), Lr("asyncIterator"), Lr("hasInstance"), Lr("isConcatSpreadable"), Lr("iterator"), Lr("match"), Lr("matchAll"), Lr("replace"), Lr("search"), Lr("species"), Lr("split"), Lr("toPrimitive"), Lr("toStringTag"), Lr("unscopables"), Xo(n1.JSON, "JSON", !0);
    var ch = O1.Symbol;
    Lr("asyncDispose"), Lr("dispose"), Lr("matcher"), Lr("metadata"), Lr("observable"), Lr("patternMatch"), Lr("replaceAll");
    var uh = ch;
    var fh = ue, ph = E1, vh = Or, gh = _e, yh = me, mh = x1, bh = Hn, wh = pt, kh = Ga("slice"), _h = wh("species"), xh = [].slice, Eh = Math.max;
    fh({
        target: "Array",
        proto: !0,
        forced: !kh
    }, {
        slice: function(t, e) {
            var i, o, n, r = mh(this), s = yh(r.length), a = gh(t, s), h = gh(void 0 === e ? s : e, s);
            if (vh(r) && ("function" != typeof (i = r.constructor) || i !== Array && !vh(i.prototype) ? ph(i) && null === (i = i[_h]) && (i = void 0) : i = void 0, i === Array || void 0 === i)) return xh.call(r, a, h);
            for(o = new (void 0 === i ? Array : i)(Eh(h - a, 0)), n = 0; a < h; a++, n++)a in r && bh(o, n, r[a]);
            return o.length = n, o;
        }
    });
    var Oh = oi("Array").slice, Ch = Array.prototype, Sh = function(t) {
        var e = t.slice;
        return t === Ch || t instanceof Array && e === Ch.slice ? Oh : e;
    }, Th = Sh, Mh = nr;
    function Ph(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function Dh(t, e) {
        var i;
        if (t) {
            if ("string" == typeof t) return Ph(t, e);
            var o = Th(i = Object.prototype.toString.call(t)).call(i, 8, -1);
            return "Object" === o && t.constructor && (o = t.constructor.name), "Map" === o || "Set" === o ? Mh(t) : "Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o) ? Ph(t, e) : void 0;
        }
    }
    function Bh(t22, e7) {
        return (function(t) {
            if (qa(t)) return t;
        })(t22) || (function(t, e) {
            var i = null == t ? null : void 0 !== uh && xr(t) || t["@@iterator"];
            if (null != i) {
                var o, n, r = [], s = !0, a = !1;
                try {
                    for(i = i.call(t); !(s = (o = i.next()).done) && (r.push(o.value), !e || r.length !== e); s = !0);
                } catch (t) {
                    a = !0, n = t;
                } finally{
                    try {
                        s || null == i.return || i.return();
                    } finally{
                        if (a) throw n;
                    }
                }
                return r;
            }
        })(t22, e7) || Dh(t22, e7) || (function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        })();
    }
    var Ih = zr.f("iterator");
    function zh(t23) {
        return (zh = "function" == typeof uh && "symbol" == typeof Ih ? function(t) {
            return typeof t;
        } : function(t) {
            return t && "function" == typeof uh && t.constructor === uh && t !== uh.prototype ? "symbol" : typeof t;
        })(t23);
    }
    function Fh(t24) {
        return (function(t) {
            if (qa(t)) return Ph(t);
        })(t24) || (function(t) {
            if (void 0 !== uh && null != xr(t) || null != t["@@iterator"]) return Mh(t);
        })(t24) || Dh(t24) || (function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        })();
    }
    var Nh = ch, Ah = oi("Array").concat, Rh = Array.prototype, jh = function(t) {
        var e = t.concat;
        return t === Rh || t instanceof Array && e === Rh.concat ? Ah : e;
    }, Lh = Sh;
    ue({
        target: "Reflect",
        stat: !0
    }, {
        ownKeys: xa
    }), O1.Reflect.ownKeys;
    var Hh = Va, Wh = Jr.map;
    ue({
        target: "Array",
        proto: !0,
        forced: !Ga("map")
    }, {
        map: function(t) {
            return Wh(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Vh = oi("Array").map, qh = Array.prototype, Uh = function(t) {
        var e = t.map;
        return t === qh || t instanceof Array && e === qh.map ? Vh : e;
    }, Yh = Q, Xh = Ae;
    ue({
        target: "Object",
        stat: !0,
        forced: s1(function() {
            Xh(1);
        })
    }, {
        keys: function(t) {
            return Xh(Yh(t));
        }
    });
    var Gh = O1.Object.keys;
    ue({
        target: "Date",
        stat: !0
    }, {
        now: function() {
            return (new Date).getTime();
        }
    });
    var Kh = O1.Date.now, $h = s1, Zh = function(t, e) {
        var i = [][t];
        return !!i && $h(function() {
            i.call(null, e || function() {
                throw 1;
            }, 1);
        });
    }, Qh = Jr.forEach, Jh = Zh("forEach") ? [].forEach : function(t) {
        return Qh(this, t, arguments.length > 1 ? arguments[1] : void 0);
    };
    ue({
        target: "Array",
        proto: !0,
        forced: [].forEach != Jh
    }, {
        forEach: Jh
    });
    var td = oi("Array").forEach, ed = Ro, id = Array.prototype, od = {
        DOMTokenList: !0,
        NodeList: !0
    }, nd = function(t) {
        var e = t.forEach;
        return t === id || t instanceof Array && e === id.forEach || od.hasOwnProperty(ed(t)) ? td : e;
    }, rd = Or, sd = [].reverse, ad = [
        1,
        2
    ];
    ue({
        target: "Array",
        proto: !0,
        forced: String(ad) === String(ad.reverse())
    }, {
        reverse: function() {
            return rd(this) && (this.length = this.length), sd.call(this);
        }
    });
    var hd = oi("Array").reverse, dd = Array.prototype, ld = function(t) {
        var e = t.reverse;
        return t === dd || t instanceof Array && e === dd.reverse ? hd : e;
    }, cd = ue, ud = _e, fd = ve, pd = me, vd = Q, gd = Ur, yd = Hn, md = Ga("splice"), bd = Math.max, wd = Math.min, kd = 9007199254740991, _d = "Maximum allowed length exceeded";
    cd({
        target: "Array",
        proto: !0,
        forced: !md
    }, {
        splice: function(t, e) {
            var i, o, n, r, s, a, h = vd(this), d = pd(h.length), l = ud(t, d), c = arguments.length;
            if (0 === c ? i = o = 0 : 1 === c ? (i = 0, o = d - l) : (i = c - 2, o = wd(bd(fd(e), 0), d - l)), d + i - o > kd) throw TypeError(_d);
            for(n = gd(h, o), r = 0; r < o; r++)(s = l + r) in h && yd(n, r, h[s]);
            if (n.length = o, i < o) {
                for(r = l; r < d - o; r++)a = r + i, (s = r + o) in h ? h[a] = h[s] : delete h[a];
                for(r = d; r > d - o + i; r--)delete h[r - 1];
            } else if (i > o) for(r = d - o; r > l; r--)a = r + i - 1, (s = r + o - 1) in h ? h[a] = h[s] : delete h[a];
            for(r = 0; r < i; r++)h[r + l] = arguments[r + 2];
            return h.length = d - o + i, n;
        }
    });
    var xd = oi("Array").splice, Ed = Array.prototype, Od = function(t) {
        var e = t.splice;
        return t === Ed || t instanceof Array && e === Ed.splice ? xd : e;
    }, Cd = Se.includes;
    ue({
        target: "Array",
        proto: !0
    }, {
        includes: function(t) {
            return Cd(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Sd = oi("Array").includes, Td = E1, Md = g1, Pd = pt("match"), Dd = function(t) {
        var e;
        return Td(t) && (void 0 !== (e = t[Pd]) ? !!e : "RegExp" == Md(t));
    }, Bd = pt("match"), Id = function(t) {
        if (Dd(t)) throw TypeError("The method doesn't accept regular expressions");
        return t;
    }, zd = w1, Fd = gi;
    ue({
        target: "String",
        proto: !0,
        forced: !function(t) {
            var e = /./;
            try {
                "/./"[t](e);
            } catch (i) {
                try {
                    return e[Bd] = !1, "/./"[t](e);
                } catch (t) {
                }
            }
            return !1;
        }("includes")
    }, {
        includes: function(t) {
            return !!~Fd(zd(this)).indexOf(Fd(Id(t)), arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Nd = oi("String").includes, Ad = Sd, Rd = Nd, jd = Array.prototype, Ld = String.prototype, Hd = function(t) {
        var e = t.includes;
        return t === jd || t instanceof Array && e === jd.includes ? Ad : "string" == typeof t || t === Ld || t instanceof String && e === Ld.includes ? Rd : e;
    }, Wd = Q, Vd = no, qd = Qi;
    ue({
        target: "Object",
        stat: !0,
        forced: s1(function() {
            Vd(1);
        }),
        sham: !qd
    }, {
        getPrototypeOf: function(t) {
            return Vd(Wd(t));
        }
    });
    var Ud = O1.Object.getPrototypeOf, Yd = Ud, Xd = Jr.filter;
    ue({
        target: "Array",
        proto: !0,
        forced: !Ga("filter")
    }, {
        filter: function(t) {
            return Xd(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Gd = oi("Array").filter, Kd = Array.prototype, $d = function(t) {
        var e = t.filter;
        return t === Kd || t instanceof Array && e === Kd.filter ? Gd : e;
    }, Zd = a1, Qd = Ae, Jd = x1, tl = h1.f, el = function(t) {
        return function(e) {
            for(var i, o = Jd(e), n = Qd(o), r = n.length, s = 0, a = []; r > s;)i = n[s++], Zd && !tl.call(o, i) || a.push(t ? [
                i,
                o[i]
            ] : o[i]);
            return a;
        };
    }, il = {
        entries: el(!0),
        values: el(!1)
    }.values;
    ue({
        target: "Object",
        stat: !0
    }, {
        values: function(t) {
            return il(t);
        }
    }), O1.Object.values;
    var ol = "\t\n\v\f\r                　\u2028\u2029\ufeff", nl = w1, rl = gi, sl = "[\t\n\v\f\r                　\u2028\u2029\ufeff]", al = RegExp("^" + sl + sl + "*"), hl = RegExp(sl + sl + "*$"), dl = function(t) {
        return function(e) {
            var i = rl(nl(e));
            return 1 & t && (i = i.replace(al, "")), 2 & t && (i = i.replace(hl, "")), i;
        };
    }, ll = {
        start: dl(1),
        end: dl(2),
        trim: dl(3)
    }, cl = gi, ul = ll.trim, fl = ol, pl = n1.parseInt, vl = /^[+-]?0[Xx]/, gl = 8 !== pl(fl + "08") || 22 !== pl(fl + "0x16") ? function(t, e) {
        var i = ul(cl(t));
        return pl(i, e >>> 0 || (vl.test(i) ? 16 : 10));
    } : pl;
    ue({
        global: !0,
        forced: parseInt != gl
    }, {
        parseInt: gl
    });
    var yl = O1.parseInt, ml = ue, bl = Se.indexOf, wl = Zh, kl = [].indexOf, _l = !!kl && 1 / [
        1
    ].indexOf(1, -0) < 0, xl = wl("indexOf");
    ml({
        target: "Array",
        proto: !0,
        forced: _l || !xl
    }, {
        indexOf: function(t) {
            return _l ? kl.apply(this, arguments) || 0 : bl(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var El = oi("Array").indexOf, Ol = Array.prototype, Cl = function(t) {
        var e = t.indexOf;
        return t === Ol || t instanceof Array && e === Ol.indexOf ? El : e;
    }, Sl = s1, Tl = ol, Ml = ll.trim;
    ue({
        target: "String",
        proto: !0,
        forced: function(t) {
            return Sl(function() {
                return !!Tl[t]() || "​᠎" != "​᠎"[t]() || Tl[t].name !== t;
            });
        }("trim")
    }, {
        trim: function() {
            return Ml(this);
        }
    }), oi("String").trim, ue({
        target: "Object",
        stat: !0,
        sham: !a1
    }, {
        create: Do
    });
    var Pl = O1.Object, Dl = function(t, e) {
        return Pl.create(t, e);
    }, Bl = Dl, Il = ue, zl = s1, Fl = M1("JSON", "stringify"), Nl = /[\uD800-\uDFFF]/g, Al = /^[\uD800-\uDBFF]$/, Rl = /^[\uDC00-\uDFFF]$/, jl = function(t, e, i) {
        var o = i.charAt(e - 1), n = i.charAt(e + 1);
        return Al.test(t) && !Rl.test(n) || Rl.test(t) && !Al.test(o) ? "\\u" + t.charCodeAt(0).toString(16) : t;
    }, Ll = zl(function() {
        return '"\\udf06\\ud834"' !== Fl("\udf06\ud834") || '"\\udead"' !== Fl("\udead");
    });
    Fl && Il({
        target: "JSON",
        stat: !0,
        forced: Ll
    }, {
        stringify: function(t, e, i) {
            var o = Fl.apply(null, arguments);
            return "string" == typeof o ? o.replace(Nl, jl) : o;
        }
    });
    var Hl = O1;
    Hl.JSON || (Hl.JSON = {
        stringify: JSON.stringify
    });
    var Wl = function(t, e, i) {
        return Hl.JSON.stringify.apply(null, arguments);
    }, Vl = n1, ql = [].slice, Ul = function(t) {
        return function(e, i) {
            var o = arguments.length > 2, n = o ? ql.call(arguments, 2) : void 0;
            return t(o ? function() {
                ("function" == typeof e ? e : Function(e)).apply(this, n);
            } : e, i);
        };
    };
    ue({
        global: !0,
        bind: !0,
        forced: /MSIE .\./.test(P1)
    }, {
        setTimeout: Ul(Vl.setTimeout),
        setInterval: Ul(Vl.setInterval)
    });
    var Yl = O1.setTimeout, Xl = Q, Gl = _e, Kl = me;
    ue({
        target: "Array",
        proto: !0
    }, {
        fill: function(t) {
            for(var e = Xl(this), i = Kl(e.length), o = arguments.length, n = Gl(o > 1 ? arguments[1] : void 0, i), r = o > 2 ? arguments[2] : void 0, s = void 0 === r ? i : Gl(r, i); s > n;)e[n++] = t;
            return e;
        }
    });
    var $l = oi("Array").fill, Zl = Array.prototype, Ql = function(t) {
        var e = t.fill;
        return t === Zl || t instanceof Array && e === Zl.fill ? $l : e;
    };
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
	 * http://naver.github.io/egjs
	 *
	 * Forked By Naver egjs
	 * Copyright (c) hammerjs
	 * Licensed under the MIT license */ function Jl() {
        return (Jl = Object.assign || function(t) {
            for(var e = 1; e < arguments.length; e++){
                var i = arguments[e];
                for(var o in i)Object.prototype.hasOwnProperty.call(i, o) && (t[o] = i[o]);
            }
            return t;
        }).apply(this, arguments);
    }
    function tc(t, e) {
        t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
    }
    function ec(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t;
    }
    var ic, oc = "function" != typeof Object.assign ? function(t) {
        if (null == t) throw new TypeError("Cannot convert undefined or null to object");
        for(var e = Object(t), i = 1; i < arguments.length; i++){
            var o = arguments[i];
            if (null != o) for(var n in o)o.hasOwnProperty(n) && (e[n] = o[n]);
        }
        return e;
    } : Object.assign, nc = [
        "",
        "webkit",
        "Moz",
        "MS",
        "ms",
        "o"
    ], rc = "undefined" == typeof document ? {
        style: {
        }
    } : document.createElement("div"), sc = Math.round, ac = Math.abs, hc = Date.now;
    function dc(t, e) {
        for(var i, o, n = e[0].toUpperCase() + e.slice(1), r = 0; r < nc.length;){
            if ((o = (i = nc[r]) ? i + n : e) in t) return o;
            r++;
        }
    }
    ic = "undefined" == typeof window ? {
    } : window;
    var lc = dc(rc.style, "touchAction"), cc = void 0 !== lc;
    var uc = "compute", fc = "auto", pc = "manipulation", vc = "none", gc = "pan-x", yc = "pan-y", mc = function() {
        if (!cc) return !1;
        var t = {
        }, e = ic.CSS && ic.CSS.supports;
        return [
            "auto",
            "manipulation",
            "pan-y",
            "pan-x",
            "pan-x pan-y",
            "none"
        ].forEach(function(i) {
            return t[i] = !e || ic.CSS.supports("touch-action", i);
        }), t;
    }(), bc = "ontouchstart" in ic, wc = void 0 !== dc(ic, "PointerEvent"), kc = bc && /mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent), _c = "touch", xc = "mouse", Ec = 16, Oc = 24, Cc = [
        "x",
        "y"
    ], Sc = [
        "clientX",
        "clientY"
    ];
    function Tc(t, e, i) {
        var o;
        if (t) {
            if (t.forEach) t.forEach(e, i);
            else if (void 0 !== t.length) for(o = 0; o < t.length;)e.call(i, t[o], o, t), o++;
            else for(o in t)t.hasOwnProperty(o) && e.call(i, t[o], o, t);
        }
    }
    function Mc(t, e) {
        return "function" == typeof t ? t.apply(e && e[0] || void 0, e) : t;
    }
    function Pc(t, e) {
        return t.indexOf(e) > -1;
    }
    var Dc = function() {
        function t25(t, e) {
            this.manager = t, this.set(e);
        }
        var e8 = t25.prototype;
        return e8.set = function(t) {
            t === uc && (t = this.compute()), cc && this.manager.element.style && mc[t] && (this.manager.element.style[lc] = t), this.actions = t.toLowerCase().trim();
        }, e8.update = function() {
            this.set(this.manager.options.touchAction);
        }, e8.compute = function() {
            var t26 = [];
            return Tc(this.manager.recognizers, function(e) {
                Mc(e.options.enable, [
                    e
                ]) && (t26 = t26.concat(e.getTouchAction()));
            }), (function(t) {
                if (Pc(t, vc)) return vc;
                var e = Pc(t, gc), i = Pc(t, yc);
                return e && i ? vc : e || i ? e ? gc : yc : Pc(t, pc) ? pc : fc;
            })(t26.join(" "));
        }, e8.preventDefaults = function(t) {
            var e = t.srcEvent, i = t.offsetDirection;
            if (this.manager.session.prevented) e.preventDefault();
            else {
                var o = this.actions, n = Pc(o, vc) && !mc.none, r = Pc(o, yc) && !mc["pan-y"], s = Pc(o, gc) && !mc["pan-x"];
                if (n) {
                    var a = 1 === t.pointers.length, h = t.distance < 2, d = t.deltaTime < 250;
                    if (a && h && d) return;
                }
                if (!s || !r) return n || r && 6 & i || s && i & Oc ? this.preventSrc(e) : void 0;
            }
        }, e8.preventSrc = function(t) {
            this.manager.session.prevented = !0, t.preventDefault();
        }, t25;
    }();
    function Bc(t, e) {
        for(; t;){
            if (t === e) return !0;
            t = t.parentNode;
        }
        return !1;
    }
    function Ic(t) {
        var e = t.length;
        if (1 === e) return {
            x: sc(t[0].clientX),
            y: sc(t[0].clientY)
        };
        for(var i = 0, o = 0, n = 0; n < e;)i += t[n].clientX, o += t[n].clientY, n++;
        return {
            x: sc(i / e),
            y: sc(o / e)
        };
    }
    function zc(t) {
        for(var e = [], i = 0; i < t.pointers.length;)e[i] = {
            clientX: sc(t.pointers[i].clientX),
            clientY: sc(t.pointers[i].clientY)
        }, i++;
        return {
            timeStamp: hc(),
            pointers: e,
            center: Ic(e),
            deltaX: t.deltaX,
            deltaY: t.deltaY
        };
    }
    function Fc(t, e, i) {
        i || (i = Cc);
        var o = e[i[0]] - t[i[0]], n = e[i[1]] - t[i[1]];
        return Math.sqrt(o * o + n * n);
    }
    function Nc(t, e, i) {
        i || (i = Cc);
        var o = e[i[0]] - t[i[0]], n = e[i[1]] - t[i[1]];
        return 180 * Math.atan2(n, o) / Math.PI;
    }
    function Ac(t, e) {
        return t === e ? 1 : ac(t) >= ac(e) ? t < 0 ? 2 : 4 : e < 0 ? 8 : Ec;
    }
    function Rc(t, e, i) {
        return {
            x: e / t || 0,
            y: i / t || 0
        };
    }
    function jc(t27, e9) {
        var i4 = t27.session, o2 = e9.pointers, n2 = o2.length;
        i4.firstInput || (i4.firstInput = zc(e9)), n2 > 1 && !i4.firstMultiple ? i4.firstMultiple = zc(e9) : 1 === n2 && (i4.firstMultiple = !1);
        var r2 = i4.firstInput, s2 = i4.firstMultiple, a2 = s2 ? s2.center : r2.center, h2 = e9.center = Ic(o2);
        e9.timeStamp = hc(), e9.deltaTime = e9.timeStamp - r2.timeStamp, e9.angle = Nc(a2, h2), e9.distance = Fc(a2, h2), (function(t, e) {
            var i = e.center, o = t.offsetDelta || {
            }, n = t.prevDelta || {
            }, r = t.prevInput || {
            };
            1 !== e.eventType && 4 !== r.eventType || (n = t.prevDelta = {
                x: r.deltaX || 0,
                y: r.deltaY || 0
            }, o = t.offsetDelta = {
                x: i.x,
                y: i.y
            }), e.deltaX = n.x + (i.x - o.x), e.deltaY = n.y + (i.y - o.y);
        })(i4, e9), e9.offsetDirection = Ac(e9.deltaX, e9.deltaY);
        var d2, l2, c = Rc(e9.deltaTime, e9.deltaX, e9.deltaY);
        e9.overallVelocityX = c.x, e9.overallVelocityY = c.y, e9.overallVelocity = ac(c.x) > ac(c.y) ? c.x : c.y, e9.scale = s2 ? (d2 = s2.pointers, Fc((l2 = o2)[0], l2[1], Sc) / Fc(d2[0], d2[1], Sc)) : 1, e9.rotation = s2 ? (function(t, e) {
            return Nc(e[1], e[0], Sc) + Nc(t[1], t[0], Sc);
        })(s2.pointers, o2) : 0, e9.maxPointers = i4.prevInput ? e9.pointers.length > i4.prevInput.maxPointers ? e9.pointers.length : i4.prevInput.maxPointers : e9.pointers.length, (function(t, e) {
            var i, o, n, r, s = t.lastInterval || e, a = e.timeStamp - s.timeStamp;
            if (8 !== e.eventType && (a > 25 || void 0 === s.velocity)) {
                var h = e.deltaX - s.deltaX, d = e.deltaY - s.deltaY, l = Rc(a, h, d);
                o = l.x, n = l.y, i = ac(l.x) > ac(l.y) ? l.x : l.y, r = Ac(h, d), t.lastInterval = e;
            } else i = s.velocity, o = s.velocityX, n = s.velocityY, r = s.direction;
            e.velocity = i, e.velocityX = o, e.velocityY = n, e.direction = r;
        })(i4, e9);
        var u, f = t27.element, p = e9.srcEvent;
        Bc(u = p.composedPath ? p.composedPath()[0] : p.path ? p.path[0] : p.target, f) && (f = u), e9.target = f;
    }
    function Lc(t, e, i) {
        var o = i.pointers.length, n = i.changedPointers.length, r = 1 & e && o - n == 0, s = 12 & e && o - n == 0;
        i.isFirst = !!r, i.isFinal = !!s, r && (t.session = {
        }), i.eventType = e, jc(t, i), t.emit("hammer.input", i), t.recognize(i), t.session.prevInput = i;
    }
    function Hc(t) {
        return t.trim().split(/\s+/g);
    }
    function Wc(t, e10, i) {
        Tc(Hc(e10), function(e) {
            t.addEventListener(e, i, !1);
        });
    }
    function Vc(t, e11, i) {
        Tc(Hc(e11), function(e) {
            t.removeEventListener(e, i, !1);
        });
    }
    function qc(t) {
        var e = t.ownerDocument || t;
        return e.defaultView || e.parentWindow || window;
    }
    var Uc = function() {
        function t28(t, e13) {
            var i = this;
            this.manager = t, this.callback = e13, this.element = t.element, this.target = t.options.inputTarget, this.domHandler = function(e) {
                Mc(t.options.enable, [
                    t
                ]) && i.handler(e);
            }, this.init();
        }
        var e12 = t28.prototype;
        return e12.handler = function() {
        }, e12.init = function() {
            this.evEl && Wc(this.element, this.evEl, this.domHandler), this.evTarget && Wc(this.target, this.evTarget, this.domHandler), this.evWin && Wc(qc(this.element), this.evWin, this.domHandler);
        }, e12.destroy = function() {
            this.evEl && Vc(this.element, this.evEl, this.domHandler), this.evTarget && Vc(this.target, this.evTarget, this.domHandler), this.evWin && Vc(qc(this.element), this.evWin, this.domHandler);
        }, t28;
    }();
    function Yc(t, e, i) {
        if (t.indexOf && !i) return t.indexOf(e);
        for(var o = 0; o < t.length;){
            if (i && t[o][i] == e || !i && t[o] === e) return o;
            o++;
        }
        return -1;
    }
    var Xc = {
        pointerdown: 1,
        pointermove: 2,
        pointerup: 4,
        pointercancel: 8,
        pointerout: 8
    }, Gc = {
        2: _c,
        3: "pen",
        4: xc,
        5: "kinect"
    }, Kc = "pointerdown", $c = "pointermove pointerup pointercancel";
    ic.MSPointerEvent && !ic.PointerEvent && (Kc = "MSPointerDown", $c = "MSPointerMove MSPointerUp MSPointerCancel");
    var Zc = function(t29) {
        function e14() {
            var i, o = e14.prototype;
            return o.evEl = Kc, o.evWin = $c, (i = t29.apply(this, arguments) || this).store = i.manager.session.pointerEvents = [], i;
        }
        return tc(e14, t29), e14.prototype.handler = function(t) {
            var e = this.store, i = !1, o = t.type.toLowerCase().replace("ms", ""), n = Xc[o], r = Gc[t.pointerType] || t.pointerType, s = r === _c, a = Yc(e, t.pointerId, "pointerId");
            1 & n && (0 === t.button || s) ? a < 0 && (e.push(t), a = e.length - 1) : 12 & n && (i = !0), a < 0 || (e[a] = t, this.callback(this.manager, n, {
                pointers: e,
                changedPointers: [
                    t
                ],
                pointerType: r,
                srcEvent: t
            }), i && e.splice(a, 1));
        }, e14;
    }(Uc);
    function Qc(t) {
        return Array.prototype.slice.call(t, 0);
    }
    function Jc(t30, e, i5) {
        for(var o = [], n = [], r = 0; r < t30.length;){
            var s = e ? t30[r][e] : t30[r];
            Yc(n, s) < 0 && o.push(t30[r]), n[r] = s, r++;
        }
        return i5 && (o = e ? o.sort(function(t, i) {
            return t[e] > i[e];
        }) : o.sort()), o;
    }
    var tu = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, eu = "touchstart touchmove touchend touchcancel", iu = function(t31) {
        function e15() {
            var i;
            return e15.prototype.evTarget = eu, (i = t31.apply(this, arguments) || this).targetIds = {
            }, i;
        }
        return tc(e15, t31), e15.prototype.handler = function(t) {
            var e = tu[t.type], i = ou.call(this, t, e);
            i && this.callback(this.manager, e, {
                pointers: i[0],
                changedPointers: i[1],
                pointerType: _c,
                srcEvent: t
            });
        }, e15;
    }(Uc);
    function ou(t32, e) {
        var i, o, n = Qc(t32.touches), r = this.targetIds;
        if (3 & e && 1 === n.length) return r[n[0].identifier] = !0, [
            n,
            n
        ];
        var s = Qc(t32.changedTouches), a = [], h = this.target;
        if (o = n.filter(function(t) {
            return Bc(t.target, h);
        }), 1 === e) for(i = 0; i < o.length;)r[o[i].identifier] = !0, i++;
        for(i = 0; i < s.length;)r[s[i].identifier] && a.push(s[i]), 12 & e && delete r[s[i].identifier], i++;
        return a.length ? [
            Jc(o.concat(a), "identifier", !0),
            a
        ] : void 0;
    }
    var nu = {
        mousedown: 1,
        mousemove: 2,
        mouseup: 4
    }, ru = "mousedown", su = "mousemove mouseup", au = function(t33) {
        function e16() {
            var i, o = e16.prototype;
            return o.evEl = ru, o.evWin = su, (i = t33.apply(this, arguments) || this).pressed = !1, i;
        }
        return tc(e16, t33), e16.prototype.handler = function(t) {
            var e = nu[t.type];
            1 & e && 0 === t.button && (this.pressed = !0), 2 & e && 1 !== t.which && (e = 4), this.pressed && (4 & e && (this.pressed = !1), this.callback(this.manager, e, {
                pointers: [
                    t
                ],
                changedPointers: [
                    t
                ],
                pointerType: xc,
                srcEvent: t
            }));
        }, e16;
    }(Uc);
    function hu(t34) {
        var e = t34.changedPointers[0];
        if (e.identifier === this.primaryTouch) {
            var i = {
                x: e.clientX,
                y: e.clientY
            }, o = this.lastTouches;
            this.lastTouches.push(i);
            setTimeout(function() {
                var t = o.indexOf(i);
                t > -1 && o.splice(t, 1);
            }, 2500);
        }
    }
    function du(t, e) {
        1 & t ? (this.primaryTouch = e.changedPointers[0].identifier, hu.call(this, e)) : 12 & t && hu.call(this, e);
    }
    function lu(t) {
        for(var e = t.srcEvent.clientX, i = t.srcEvent.clientY, o = 0; o < this.lastTouches.length; o++){
            var n = this.lastTouches[o], r = Math.abs(e - n.x), s = Math.abs(i - n.y);
            if (r <= 25 && s <= 25) return !0;
        }
        return !1;
    }
    var cu = function() {
        return (function(t35) {
            function e17(e18, i6) {
                var o;
                return (o = t35.call(this, e18, i6) || this).handler = function(t, e, i) {
                    var n = i.pointerType === _c, r = i.pointerType === xc;
                    if (!(r && i.sourceCapabilities && i.sourceCapabilities.firesTouchEvents)) {
                        if (n) du.call(ec(ec(o)), e, i);
                        else if (r && lu.call(ec(ec(o)), i)) return;
                        o.callback(t, e, i);
                    }
                }, o.touch = new iu(o.manager, o.handler), o.mouse = new au(o.manager, o.handler), o.primaryTouch = null, o.lastTouches = [], o;
            }
            return tc(e17, t35), e17.prototype.destroy = function() {
                this.touch.destroy(), this.mouse.destroy();
            }, e17;
        })(Uc);
    }();
    function uu(t, e, i) {
        return !!Array.isArray(t) && (Tc(t, i[e], i), !0);
    }
    var fu = 32, pu = 1;
    function vu(t, e) {
        var i = e.manager;
        return i ? i.get(t) : t;
    }
    function gu(t) {
        return 16 & t ? "cancel" : 8 & t ? "end" : 4 & t ? "move" : 2 & t ? "start" : "";
    }
    var yu = function() {
        function t36(t) {
            void 0 === t && (t = {
            }), this.options = Jl({
                enable: !0
            }, t), this.id = pu++, this.manager = null, this.state = 1, this.simultaneous = {
            }, this.requireFail = [];
        }
        var e19 = t36.prototype;
        return e19.set = function(t) {
            return oc(this.options, t), this.manager && this.manager.touchAction.update(), this;
        }, e19.recognizeWith = function(t) {
            if (uu(t, "recognizeWith", this)) return this;
            var e = this.simultaneous;
            return e[(t = vu(t, this)).id] || (e[t.id] = t, t.recognizeWith(this)), this;
        }, e19.dropRecognizeWith = function(t) {
            return uu(t, "dropRecognizeWith", this) || (t = vu(t, this), delete this.simultaneous[t.id]), this;
        }, e19.requireFailure = function(t) {
            if (uu(t, "requireFailure", this)) return this;
            var e = this.requireFail;
            return -1 === Yc(e, t = vu(t, this)) && (e.push(t), t.requireFailure(this)), this;
        }, e19.dropRequireFailure = function(t) {
            if (uu(t, "dropRequireFailure", this)) return this;
            t = vu(t, this);
            var e = Yc(this.requireFail, t);
            return e > -1 && this.requireFail.splice(e, 1), this;
        }, e19.hasRequireFailures = function() {
            return this.requireFail.length > 0;
        }, e19.canRecognizeWith = function(t) {
            return !!this.simultaneous[t.id];
        }, e19.emit = function(t) {
            var e = this, i7 = this.state;
            function o(i) {
                e.manager.emit(i, t);
            }
            i7 < 8 && o(e.options.event + gu(i7)), o(e.options.event), t.additionalEvent && o(t.additionalEvent), i7 >= 8 && o(e.options.event + gu(i7));
        }, e19.tryEmit = function(t) {
            if (this.canEmit()) return this.emit(t);
            this.state = fu;
        }, e19.canEmit = function() {
            for(var t = 0; t < this.requireFail.length;){
                if (!(33 & this.requireFail[t].state)) return !1;
                t++;
            }
            return !0;
        }, e19.recognize = function(t) {
            var e = oc({
            }, t);
            if (!Mc(this.options.enable, [
                this,
                e
            ])) return this.reset(), void (this.state = fu);
            56 & this.state && (this.state = 1), this.state = this.process(e), 30 & this.state && this.tryEmit(e);
        }, e19.process = function(t) {
        }, e19.getTouchAction = function() {
        }, e19.reset = function() {
        }, t36;
    }(), mu = function(t37) {
        function e20(e) {
            var i;
            return void 0 === e && (e = {
            }), (i = t37.call(this, Jl({
                event: "tap",
                pointers: 1,
                taps: 1,
                interval: 300,
                time: 250,
                threshold: 9,
                posThreshold: 10
            }, e)) || this).pTime = !1, i.pCenter = !1, i._timer = null, i._input = null, i.count = 0, i;
        }
        tc(e20, t37);
        var i8 = e20.prototype;
        return i8.getTouchAction = function() {
            return [
                pc
            ];
        }, i8.process = function(t) {
            var e = this, i = this.options, o = t.pointers.length === i.pointers, n = t.distance < i.threshold, r = t.deltaTime < i.time;
            if (this.reset(), 1 & t.eventType && 0 === this.count) return this.failTimeout();
            if (n && r && o) {
                if (4 !== t.eventType) return this.failTimeout();
                var s = !this.pTime || t.timeStamp - this.pTime < i.interval, a = !this.pCenter || Fc(this.pCenter, t.center) < i.posThreshold;
                if (this.pTime = t.timeStamp, this.pCenter = t.center, a && s ? this.count += 1 : this.count = 1, this._input = t, 0 === this.count % i.taps) return this.hasRequireFailures() ? (this._timer = setTimeout(function() {
                    e.state = 8, e.tryEmit();
                }, i.interval), 2) : 8;
            }
            return fu;
        }, i8.failTimeout = function() {
            var t = this;
            return this._timer = setTimeout(function() {
                t.state = fu;
            }, this.options.interval), fu;
        }, i8.reset = function() {
            clearTimeout(this._timer);
        }, i8.emit = function() {
            8 === this.state && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
        }, e20;
    }(yu), bu = function(t38) {
        function e21(e) {
            return void 0 === e && (e = {
            }), t38.call(this, Jl({
                pointers: 1
            }, e)) || this;
        }
        tc(e21, t38);
        var i9 = e21.prototype;
        return i9.attrTest = function(t) {
            var e = this.options.pointers;
            return 0 === e || t.pointers.length === e;
        }, i9.process = function(t) {
            var e = this.state, i = t.eventType, o = 6 & e, n = this.attrTest(t);
            return o && (8 & i || !n) ? 16 | e : o || n ? 4 & i ? 8 | e : 2 & e ? 4 | e : 2 : fu;
        }, e21;
    }(yu);
    function wu(t) {
        return t === Ec ? "down" : 8 === t ? "up" : 2 === t ? "left" : 4 === t ? "right" : "";
    }
    var ku = function(t39) {
        function e22(e) {
            var i;
            return void 0 === e && (e = {
            }), (i = t39.call(this, Jl({
                event: "pan",
                threshold: 10,
                pointers: 1,
                direction: 30
            }, e)) || this).pX = null, i.pY = null, i;
        }
        tc(e22, t39);
        var i10 = e22.prototype;
        return i10.getTouchAction = function() {
            var t = this.options.direction, e = [];
            return 6 & t && e.push(yc), t & Oc && e.push(gc), e;
        }, i10.directionTest = function(t) {
            var e = this.options, i = !0, o = t.distance, n = t.direction, r = t.deltaX, s = t.deltaY;
            return n & e.direction || (6 & e.direction ? (n = 0 === r ? 1 : r < 0 ? 2 : 4, i = r !== this.pX, o = Math.abs(t.deltaX)) : (n = 0 === s ? 1 : s < 0 ? 8 : Ec, i = s !== this.pY, o = Math.abs(t.deltaY))), t.direction = n, i && o > e.threshold && n & e.direction;
        }, i10.attrTest = function(t) {
            return bu.prototype.attrTest.call(this, t) && (2 & this.state || !(2 & this.state) && this.directionTest(t));
        }, i10.emit = function(e) {
            this.pX = e.deltaX, this.pY = e.deltaY;
            var i = wu(e.direction);
            i && (e.additionalEvent = this.options.event + i), t39.prototype.emit.call(this, e);
        }, e22;
    }(bu), _u = function(t40) {
        function e23(e) {
            return void 0 === e && (e = {
            }), t40.call(this, Jl({
                event: "swipe",
                threshold: 10,
                velocity: 0.3,
                direction: 30,
                pointers: 1
            }, e)) || this;
        }
        tc(e23, t40);
        var i11 = e23.prototype;
        return i11.getTouchAction = function() {
            return ku.prototype.getTouchAction.call(this);
        }, i11.attrTest = function(e) {
            var i, o = this.options.direction;
            return 30 & o ? i = e.overallVelocity : 6 & o ? i = e.overallVelocityX : o & Oc && (i = e.overallVelocityY), t40.prototype.attrTest.call(this, e) && o & e.offsetDirection && e.distance > this.options.threshold && e.maxPointers === this.options.pointers && ac(i) > this.options.velocity && 4 & e.eventType;
        }, i11.emit = function(t) {
            var e = wu(t.offsetDirection);
            e && this.manager.emit(this.options.event + e, t), this.manager.emit(this.options.event, t);
        }, e23;
    }(bu), xu = function(t) {
        function e24(e) {
            return void 0 === e && (e = {
            }), t.call(this, Jl({
                event: "pinch",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        tc(e24, t);
        var i12 = e24.prototype;
        return i12.getTouchAction = function() {
            return [
                vc
            ];
        }, i12.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.scale - 1) > this.options.threshold || 2 & this.state);
        }, i12.emit = function(e) {
            if (1 !== e.scale) {
                var i = e.scale < 1 ? "in" : "out";
                e.additionalEvent = this.options.event + i;
            }
            t.prototype.emit.call(this, e);
        }, e24;
    }(bu), Eu = function(t) {
        function e25(e) {
            return void 0 === e && (e = {
            }), t.call(this, Jl({
                event: "rotate",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        tc(e25, t);
        var i = e25.prototype;
        return i.getTouchAction = function() {
            return [
                vc
            ];
        }, i.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.rotation) > this.options.threshold || 2 & this.state);
        }, e25;
    }(bu), Ou = function(t41) {
        function e26(e) {
            var i;
            return void 0 === e && (e = {
            }), (i = t41.call(this, Jl({
                event: "press",
                pointers: 1,
                time: 251,
                threshold: 9
            }, e)) || this)._timer = null, i._input = null, i;
        }
        tc(e26, t41);
        var i13 = e26.prototype;
        return i13.getTouchAction = function() {
            return [
                fc
            ];
        }, i13.process = function(t) {
            var e = this, i = this.options, o = t.pointers.length === i.pointers, n = t.distance < i.threshold, r = t.deltaTime > i.time;
            if (this._input = t, !n || !o || 12 & t.eventType && !r) this.reset();
            else if (1 & t.eventType) this.reset(), this._timer = setTimeout(function() {
                e.state = 8, e.tryEmit();
            }, i.time);
            else if (4 & t.eventType) return 8;
            return fu;
        }, i13.reset = function() {
            clearTimeout(this._timer);
        }, i13.emit = function(t) {
            8 === this.state && (t && 4 & t.eventType ? this.manager.emit(this.options.event + "up", t) : (this._input.timeStamp = hc(), this.manager.emit(this.options.event, this._input)));
        }, e26;
    }(yu), Cu = {
        domEvents: !1,
        touchAction: uc,
        enable: !0,
        inputTarget: null,
        inputClass: null,
        cssProps: {
            userSelect: "none",
            touchSelect: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
        }
    }, Su = [
        [
            Eu,
            {
                enable: !1
            }
        ],
        [
            xu,
            {
                enable: !1
            },
            [
                "rotate"
            ]
        ],
        [
            _u,
            {
                direction: 6
            }
        ],
        [
            ku,
            {
                direction: 6
            },
            [
                "swipe"
            ]
        ],
        [
            mu
        ],
        [
            mu,
            {
                event: "doubletap",
                taps: 2
            },
            [
                "tap"
            ]
        ],
        [
            Ou
        ]
    ];
    function Tu(t, e) {
        var i, o = t.element;
        o.style && (Tc(t.options.cssProps, function(n, r) {
            i = dc(o.style, r), e ? (t.oldCssProps[i] = o.style[i], o.style[i] = n) : o.style[i] = t.oldCssProps[i] || "";
        }), e || (t.oldCssProps = {
        }));
    }
    var Mu = function() {
        function t42(t43, e28) {
            var i, o = this;
            this.options = oc({
            }, Cu, e28 || {
            }), this.options.inputTarget = this.options.inputTarget || t43, this.handlers = {
            }, this.session = {
            }, this.recognizers = [], this.oldCssProps = {
            }, this.element = t43, this.input = new ((i = this).options.inputClass || (wc ? Zc : (kc ? iu : (bc ? cu : au))))(i, Lc), this.touchAction = new Dc(this, this.options.touchAction), Tu(this, !0), Tc(this.options.recognizers, function(t) {
                var e = o.add(new t[0](t[1]));
                t[2] && e.recognizeWith(t[2]), t[3] && e.requireFailure(t[3]);
            }, this);
        }
        var e27 = t42.prototype;
        return e27.set = function(t) {
            return oc(this.options, t), t.touchAction && this.touchAction.update(), t.inputTarget && (this.input.destroy(), this.input.target = t.inputTarget, this.input.init()), this;
        }, e27.stop = function(t) {
            this.session.stopped = t ? 2 : 1;
        }, e27.recognize = function(t) {
            var e = this.session;
            if (!e.stopped) {
                var i;
                this.touchAction.preventDefaults(t);
                var o = this.recognizers, n = e.curRecognizer;
                (!n || n && 8 & n.state) && (e.curRecognizer = null, n = null);
                for(var r = 0; r < o.length;)i = o[r], 2 === e.stopped || n && i !== n && !i.canRecognizeWith(n) ? i.reset() : i.recognize(t), !n && 14 & i.state && (e.curRecognizer = i, n = i), r++;
            }
        }, e27.get = function(t) {
            if (t instanceof yu) return t;
            for(var e = this.recognizers, i = 0; i < e.length; i++)if (e[i].options.event === t) return e[i];
            return null;
        }, e27.add = function(t) {
            if (uu(t, "add", this)) return this;
            var e = this.get(t.options.event);
            return e && this.remove(e), this.recognizers.push(t), t.manager = this, this.touchAction.update(), t;
        }, e27.remove = function(t) {
            if (uu(t, "remove", this)) return this;
            var e = this.get(t);
            if (t) {
                var i = this.recognizers, o = Yc(i, e);
                -1 !== o && (i.splice(o, 1), this.touchAction.update());
            }
            return this;
        }, e27.on = function(t, e) {
            if (void 0 === t || void 0 === e) return this;
            var i = this.handlers;
            return Tc(Hc(t), function(t) {
                i[t] = i[t] || [], i[t].push(e);
            }), this;
        }, e27.off = function(t, e) {
            if (void 0 === t) return this;
            var i = this.handlers;
            return Tc(Hc(t), function(t) {
                e ? i[t] && i[t].splice(Yc(i[t], e), 1) : delete i[t];
            }), this;
        }, e27.emit = function(t44, e29) {
            this.options.domEvents && (function(t, e) {
                var i = document.createEvent("Event");
                i.initEvent(t, !0, !0), i.gesture = e, e.target.dispatchEvent(i);
            })(t44, e29);
            var i14 = this.handlers[t44] && this.handlers[t44].slice();
            if (i14 && i14.length) {
                e29.type = t44, e29.preventDefault = function() {
                    e29.srcEvent.preventDefault();
                };
                for(var o = 0; o < i14.length;)i14[o](e29), o++;
            }
        }, e27.destroy = function() {
            this.element && Tu(this, !1), this.handlers = {
            }, this.session = {
            }, this.input.destroy(), this.element = null;
        }, t42;
    }(), Pu = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, Du = "touchstart", Bu = "touchstart touchmove touchend touchcancel", Iu = function(t45) {
        function e30() {
            var i, o = e30.prototype;
            return o.evTarget = Du, o.evWin = Bu, (i = t45.apply(this, arguments) || this).started = !1, i;
        }
        return tc(e30, t45), e30.prototype.handler = function(t) {
            var e = Pu[t.type];
            if (1 === e && (this.started = !0), this.started) {
                var i = zu.call(this, t, e);
                12 & e && i[0].length - i[1].length == 0 && (this.started = !1), this.callback(this.manager, e, {
                    pointers: i[0],
                    changedPointers: i[1],
                    pointerType: _c,
                    srcEvent: t
                });
            }
        }, e30;
    }(Uc);
    function zu(t, e) {
        var i = Qc(t.touches), o = Qc(t.changedTouches);
        return 12 & e && (i = Jc(i.concat(o), "identifier", !0)), [
            i,
            o
        ];
    }
    function Fu(t, e31, i15) {
        var o = "DEPRECATED METHOD: " + e31 + "\n" + i15 + " AT \n";
        return function() {
            var e = new Error("get-stack-trace"), i = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace", n = window.console && (window.console.warn || window.console.log);
            return n && n.call(window.console, o, i), t.apply(this, arguments);
        };
    }
    var Nu = Fu(function(t, e, i) {
        for(var o = Object.keys(e), n = 0; n < o.length;)(!i || i && void 0 === t[o[n]]) && (t[o[n]] = e[o[n]]), n++;
        return t;
    }, "extend", "Use `assign`."), Au = Fu(function(t, e) {
        return Nu(t, e, !0);
    }, "merge", "Use `assign`.");
    function Ru(t, e, i) {
        var o, n = e.prototype;
        (o = t.prototype = Object.create(n)).constructor = t, o._super = n, i && oc(o, i);
    }
    function ju(t, e) {
        return function() {
            return t.apply(e, arguments);
        };
    }
    var Lu = function() {
        var t46 = function(t, e) {
            return void 0 === e && (e = {
            }), new Mu(t, Jl({
                recognizers: Su.concat()
            }, e));
        };
        return t46.VERSION = "2.0.17-rc", t46.DIRECTION_ALL = 30, t46.DIRECTION_DOWN = Ec, t46.DIRECTION_LEFT = 2, t46.DIRECTION_RIGHT = 4, t46.DIRECTION_UP = 8, t46.DIRECTION_HORIZONTAL = 6, t46.DIRECTION_VERTICAL = Oc, t46.DIRECTION_NONE = 1, t46.DIRECTION_DOWN = Ec, t46.INPUT_START = 1, t46.INPUT_MOVE = 2, t46.INPUT_END = 4, t46.INPUT_CANCEL = 8, t46.STATE_POSSIBLE = 1, t46.STATE_BEGAN = 2, t46.STATE_CHANGED = 4, t46.STATE_ENDED = 8, t46.STATE_RECOGNIZED = 8, t46.STATE_CANCELLED = 16, t46.STATE_FAILED = fu, t46.Manager = Mu, t46.Input = Uc, t46.TouchAction = Dc, t46.TouchInput = iu, t46.MouseInput = au, t46.PointerEventInput = Zc, t46.TouchMouseInput = cu, t46.SingleTouchInput = Iu, t46.Recognizer = yu, t46.AttrRecognizer = bu, t46.Tap = mu, t46.Pan = ku, t46.Swipe = _u, t46.Pinch = xu, t46.Rotate = Eu, t46.Press = Ou, t46.on = Wc, t46.off = Vc, t46.each = Tc, t46.merge = Au, t46.extend = Nu, t46.bindFn = ju, t46.assign = oc, t46.inherit = Ru, t46.bindFn = ju, t46.prefixed = dc, t46.toArray = Qc, t46.inArray = Yc, t46.uniqueArray = Jc, t46.splitStr = Hc, t46.boolOrFn = Mc, t46.hasParent = Bc, t46.addEventListeners = Wc, t46.removeEventListeners = Vc, t46.defaults = oc({
        }, Cu, {
            preset: Su
        }), t46;
    }();
    function Hu(t47, e32) {
        var i16 = void 0 !== Nh && xr(t47) || t47["@@iterator"];
        if (!i16) {
            if (Hh(t47) || (i16 = (function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return Wu(t, e);
                var o = Lh(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return rr(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return Wu(t, e);
            })(t47)) || e32 && t47 && "number" == typeof t47.length) {
                i16 && (t47 = i16);
                var o3 = 0, n = function() {
                };
                return {
                    s: n,
                    n: function() {
                        return o3 >= t47.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t47[o3++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i16 = i16.call(t47);
            },
            n: function() {
                var t = i16.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i16.return || i16.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function Wu(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function Vu() {
        for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
        return qu(e.length ? e : [
            Kh()
        ]);
    }
    function qu(t48) {
        var e33 = Bh(function() {
            for(var t = Uu(), e = t(" "), i = t(" "), o = t(" "), n = 0; n < arguments.length; n++)(e -= t(n < 0 || arguments.length <= n ? void 0 : arguments[n])) < 0 && (e += 1), (i -= t(n < 0 || arguments.length <= n ? void 0 : arguments[n])) < 0 && (i += 1), (o -= t(n < 0 || arguments.length <= n ? void 0 : arguments[n])) < 0 && (o += 1);
            return [
                e,
                i,
                o
            ];
        }(t48), 3), i17 = e33[0], o4 = e33[1], n3 = e33[2], r = 1, s = function() {
            var t = 2091639 * i17 + 0.00000000023283064365386963 * r;
            return i17 = o4, o4 = n3, n3 = t - (r = 0 | t);
        };
        return s.uint32 = function() {
            return 4294967296 * s();
        }, s.fract53 = function() {
            return s() + 0.00000000000000011102230246251565 * (2097152 * s() | 0);
        }, s.algorithm = "Alea", s.seed = t48, s.version = "0.9", s;
    }
    function Uu() {
        var t = 4022871197;
        return function(e) {
            for(var i = e.toString(), o = 0; o < i.length; o++){
                var n = 0.02519603282416938 * (t += i.charCodeAt(o));
                n -= t = n >>> 0, t = (n *= t) >>> 0, t += 4294967296 * (n -= t);
            }
            return 0.00000000023283064365386963 * (t >>> 0);
        };
    }
    Nh("DELETE");
    var Yu = "undefined" != typeof window ? window.Hammer || Lu : function() {
        var t;
        return {
            on: t = function() {
            },
            off: t,
            destroy: t,
            emit: t,
            get: function() {
                return {
                    set: t
                };
            }
        };
    };
    function Xu(t49) {
        var e34, i = this;
        this._cleanupQueue = [], this.active = !1, this._dom = {
            container: t49,
            overlay: document.createElement("div")
        }, this._dom.overlay.classList.add("vis-overlay"), this._dom.container.appendChild(this._dom.overlay), this._cleanupQueue.push(function() {
            i._dom.overlay.parentNode.removeChild(i._dom.overlay);
        });
        var o = Yu(this._dom.overlay);
        o.on("tap", si(e34 = this._onTapOverlay).call(e34, this)), this._cleanupQueue.push(function() {
            o.destroy();
        });
        var n = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        nd(n).call(n, function(t50) {
            o.on(t50, function(t) {
                t.srcEvent.stopPropagation();
            });
        }), document && document.body && (this._onClick = function(e35) {
            (function(t, e) {
                for(; t;){
                    if (t === e) return !0;
                    t = t.parentNode;
                }
                return !1;
            })(e35.target, t49) || i.deactivate();
        }, document.body.addEventListener("click", this._onClick), this._cleanupQueue.push(function() {
            document.body.removeEventListener("click", i._onClick);
        })), this._escListener = function(t) {
            ("key" in t ? "Escape" === t.key : 27 === t.keyCode) && i.deactivate();
        };
    }
    pi(Xu.prototype), Xu.current = null, Xu.prototype.destroy = function() {
        var t, e;
        this.deactivate();
        var i, o = Hu(ld(t = Od(e = this._cleanupQueue).call(e, 0)).call(t));
        try {
            for(o.s(); !(i = o.n()).done;)(0, i.value)();
        } catch (t51) {
            o.e(t51);
        } finally{
            o.f();
        }
    }, Xu.prototype.activate = function() {
        Xu.current && Xu.current.deactivate(), Xu.current = this, this.active = !0, this._dom.overlay.style.display = "none", this._dom.container.classList.add("vis-active"), this.emit("change"), this.emit("activate"), document.body.addEventListener("keydown", this._escListener);
    }, Xu.prototype.deactivate = function() {
        this.active = !1, this._dom.overlay.style.display = "block", this._dom.container.classList.remove("vis-active"), document.body.removeEventListener("keydown", this._escListener), this.emit("change"), this.emit("deactivate");
    }, Xu.prototype._onTapOverlay = function(t) {
        this.activate(), t.srcEvent.stopPropagation();
    };
    var Gu = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i, Ku = /^#?([a-f\d])([a-f\d])([a-f\d])$/i, $u = /^rgb\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *\)$/i, Zu = /^rgba\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *([01]|0?\.\d+) *\)$/i;
    function Qu(t) {
        if (t) for(; !0 === t.hasChildNodes();){
            var e = t.firstChild;
            e && (Qu(e), t.removeChild(e));
        }
    }
    function Ju(t) {
        return t instanceof String || "string" == typeof t;
    }
    function tf(t) {
        return "object" === zh(t) && null !== t;
    }
    function ef(t, e, i, o) {
        var n = !1;
        !0 === o && (n = null === e[i] && void 0 !== t[i]), n ? delete t[i] : t[i] = e[i];
    }
    function of(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        for(var o in t)if (void 0 !== e[o]) {
            if (null === e[o] || "object" !== zh(e[o])) ef(t, e, o, i);
            else {
                var n = t[o], r = e[o];
                tf(n) && tf(r) && of(n, r, i);
            }
        }
    }
    function nf(t, e, i) {
        var o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        if (Hh(i)) throw new TypeError("Arrays are not supported by deepExtend");
        for(var n = 0; n < t.length; n++){
            var r = t[n];
            if (Object.prototype.hasOwnProperty.call(i, r)) {
                if (i[r] && i[r].constructor === Object) void 0 === e[r] && (e[r] = {
                }), e[r].constructor === Object ? sf(e[r], i[r], !1, o) : ef(e, i, r, o);
                else {
                    if (Hh(i[r])) throw new TypeError("Arrays are not supported by deepExtend");
                    ef(e, i, r, o);
                }
            }
        }
        return e;
    }
    function rf(t, e, i) {
        var o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        if (Hh(i)) throw new TypeError("Arrays are not supported by deepExtend");
        for(var n in i)if (Object.prototype.hasOwnProperty.call(i, n) && !Hd(t).call(t, n)) {
            if (i[n] && i[n].constructor === Object) void 0 === e[n] && (e[n] = {
            }), e[n].constructor === Object ? sf(e[n], i[n]) : ef(e, i, n, o);
            else if (Hh(i[n])) {
                e[n] = [];
                for(var r = 0; r < i[n].length; r++)e[n].push(i[n][r]);
            } else ef(e, i, n, o);
        }
        return e;
    }
    function sf(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        for(var n in e)if (Object.prototype.hasOwnProperty.call(e, n) || !0 === i) {
            if ("object" === zh(e[n]) && null !== e[n] && Yd(e[n]) === Object.prototype) void 0 === t[n] ? t[n] = sf({
            }, e[n], i) : "object" === zh(t[n]) && null !== t[n] && Yd(t[n]) === Object.prototype ? sf(t[n], e[n], i) : ef(t, e, n, o);
            else if (Hh(e[n])) {
                var r;
                t[n] = Lh(r = e[n]).call(r);
            } else ef(t, e, n, o);
        }
        return t;
    }
    function af(t, e) {
        var i;
        return jh(i = []).call(i, Fh(t), [
            e
        ]);
    }
    function hf(t) {
        return Lh(t).call(t);
    }
    function df(t) {
        return t.getBoundingClientRect().top;
    }
    function lf(t, e) {
        if (Hh(t)) for(var i = t.length, o = 0; o < i; o++)e(t[o], o, t);
        else for(var n in t)Object.prototype.hasOwnProperty.call(t, n) && e(t[n], n, t);
    }
    function cf(t) {
        var e;
        switch(t.length){
            case 3:
            case 4:
                return (e = Ku.exec(t)) ? {
                    r: yl(e[1] + e[1], 16),
                    g: yl(e[2] + e[2], 16),
                    b: yl(e[3] + e[3], 16)
                } : null;
            case 6:
            case 7:
                return (e = Gu.exec(t)) ? {
                    r: yl(e[1], 16),
                    g: yl(e[2], 16),
                    b: yl(e[3], 16)
                } : null;
            default:
                return null;
        }
    }
    function uf(t, e) {
        if (Hd(t).call(t, "rgba")) return t;
        if (Hd(t).call(t, "rgb")) {
            var i = t.substr(Cl(t).call(t, "(") + 1).replace(")", "").split(",");
            return "rgba(" + i[0] + "," + i[1] + "," + i[2] + "," + e + ")";
        }
        var o = cf(t);
        return null == o ? t : "rgba(" + o.r + "," + o.g + "," + o.b + "," + e + ")";
    }
    function ff(t, e, i) {
        var o;
        return "#" + Lh(o = (16777216 + (t << 16) + (e << 8) + i).toString(16)).call(o, 1);
    }
    function pf(t52, e36) {
        if (Ju(t52)) {
            var i = t52;
            if (bf(i)) {
                var o, n = Uh(o = i.substr(4).substr(0, i.length - 5).split(",")).call(o, function(t) {
                    return yl(t);
                });
                i = ff(n[0], n[1], n[2]);
            }
            if (!0 === mf(i)) {
                var r = function(t) {
                    var e = cf(t);
                    if (!e) throw new TypeError("'".concat(t, "' is not a valid color."));
                    return vf(e.r, e.g, e.b);
                }(i), s = {
                    h: r.h,
                    s: 0.8 * r.s,
                    v: Math.min(1, 1.02 * r.v)
                }, a = {
                    h: r.h,
                    s: Math.min(1, 1.25 * r.s),
                    v: 0.8 * r.v
                }, h = yf(a.h, a.s, a.v), d = yf(s.h, s.s, s.v);
                return {
                    background: i,
                    border: h,
                    highlight: {
                        background: d,
                        border: h
                    },
                    hover: {
                        background: d,
                        border: h
                    }
                };
            }
            return {
                background: i,
                border: i,
                highlight: {
                    background: i,
                    border: i
                },
                hover: {
                    background: i,
                    border: i
                }
            };
        }
        return e36 ? {
            background: t52.background || e36.background,
            border: t52.border || e36.border,
            highlight: Ju(t52.highlight) ? {
                border: t52.highlight,
                background: t52.highlight
            } : {
                background: t52.highlight && t52.highlight.background || e36.highlight.background,
                border: t52.highlight && t52.highlight.border || e36.highlight.border
            },
            hover: Ju(t52.hover) ? {
                border: t52.hover,
                background: t52.hover
            } : {
                border: t52.hover && t52.hover.border || e36.hover.border,
                background: t52.hover && t52.hover.background || e36.hover.background
            }
        } : {
            background: t52.background || void 0,
            border: t52.border || void 0,
            highlight: Ju(t52.highlight) ? {
                border: t52.highlight,
                background: t52.highlight
            } : {
                background: t52.highlight && t52.highlight.background || void 0,
                border: t52.highlight && t52.highlight.border || void 0
            },
            hover: Ju(t52.hover) ? {
                border: t52.hover,
                background: t52.hover
            } : {
                border: t52.hover && t52.hover.border || void 0,
                background: t52.hover && t52.hover.background || void 0
            }
        };
    }
    function vf(t, e, i) {
        t /= 255, e /= 255, i /= 255;
        var o = Math.min(t, Math.min(e, i)), n = Math.max(t, Math.max(e, i));
        return o === n ? {
            h: 0,
            s: 0,
            v: o
        } : {
            h: 60 * ((t === o ? 3 : i === o ? 1 : 5) - (t === o ? e - i : i === o ? t - e : i - t) / (n - o)) / 360,
            s: (n - o) / n,
            v: n
        };
    }
    function gf(t, e, i) {
        var o, n, r, s = Math.floor(6 * t), a = 6 * t - s, h = i * (1 - e), d = i * (1 - a * e), l = i * (1 - (1 - a) * e);
        switch(s % 6){
            case 0:
                o = i, n = l, r = h;
                break;
            case 1:
                o = d, n = i, r = h;
                break;
            case 2:
                o = h, n = i, r = l;
                break;
            case 3:
                o = h, n = d, r = i;
                break;
            case 4:
                o = l, n = h, r = i;
                break;
            case 5:
                o = i, n = h, r = d;
        }
        return {
            r: Math.floor(255 * o),
            g: Math.floor(255 * n),
            b: Math.floor(255 * r)
        };
    }
    function yf(t, e, i) {
        var o = gf(t, e, i);
        return ff(o.r, o.g, o.b);
    }
    function mf(t) {
        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t);
    }
    function bf(t) {
        return $u.test(t);
    }
    function wf(t) {
        return Zu.test(t);
    }
    function kf(t) {
        if (null === t || "object" !== zh(t)) return null;
        if (t instanceof Element) return t;
        var e = Bl(t);
        for(var i in t)Object.prototype.hasOwnProperty.call(t, i) && "object" == zh(t[i]) && (e[i] = kf(t[i]));
        return e;
    }
    function _f(t53, e37, i) {
        var o5 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {
        }, n4 = function(t) {
            return null != t;
        }, r = function(t) {
            return null !== t && "object" === zh(t);
        }, s3 = function(t) {
            for(var e in t)if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
            return !0;
        };
        if (!r(t53)) throw new Error("Parameter mergeTarget must be an object");
        if (!r(e37)) throw new Error("Parameter options must be an object");
        if (!n4(i)) throw new Error("Parameter option must have a value");
        if (!r(o5)) throw new Error("Parameter globalOptions must be an object");
        var a = function(t, e, i) {
            r(t[i]) || (t[i] = {
            });
            var o = e[i], n = t[i];
            for(var s in o)Object.prototype.hasOwnProperty.call(o, s) && (n[s] = o[s]);
        }, h = e37[i], d = r(o5) && !s3(o5), l = d ? o5[i] : void 0, c = l ? l.enabled : void 0;
        if (void 0 !== h) {
            if ("boolean" == typeof h) return r(t53[i]) || (t53[i] = {
            }), void (t53[i].enabled = h);
            if (null === h && !r(t53[i])) {
                if (!n4(l)) return;
                t53[i] = Bl(l);
            }
            if (r(h)) {
                var u = !0;
                void 0 !== h.enabled ? u = h.enabled : void 0 !== c && (u = l.enabled), a(t53, e37, i), t53[i].enabled = u;
            }
        }
    }
    var xf = {
        linear: function(t) {
            return t;
        },
        easeInQuad: function(t) {
            return t * t;
        },
        easeOutQuad: function(t) {
            return t * (2 - t);
        },
        easeInOutQuad: function(t) {
            return t < 0.5 ? 2 * t * t : (4 - 2 * t) * t - 1;
        },
        easeInCubic: function(t) {
            return t * t * t;
        },
        easeOutCubic: function(t) {
            return --t * t * t + 1;
        },
        easeInOutCubic: function(t) {
            return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
        },
        easeInQuart: function(t) {
            return t * t * t * t;
        },
        easeOutQuart: function(t) {
            return 1 - --t * t * t * t;
        },
        easeInOutQuart: function(t) {
            return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
        },
        easeInQuint: function(t) {
            return t * t * t * t * t;
        },
        easeOutQuint: function(t) {
            return 1 + --t * t * t * t * t;
        },
        easeInOutQuint: function(t) {
            return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
        }
    };
    function Ef(t, e) {
        var i;
        Hh(e) || (e = [
            e
        ]);
        var o, n = Hu(t);
        try {
            for(n.s(); !(o = n.n()).done;){
                var r = o.value;
                if (r) {
                    i = r[e[0]];
                    for(var s = 1; s < e.length; s++)i && (i = i[e[s]]);
                    if (void 0 !== i) break;
                }
            }
        } catch (t54) {
            n.e(t54);
        } finally{
            n.f();
        }
        return i;
    }
    var Of = {
        black: "#000000",
        navy: "#000080",
        darkblue: "#00008B",
        mediumblue: "#0000CD",
        blue: "#0000FF",
        darkgreen: "#006400",
        green: "#008000",
        teal: "#008080",
        darkcyan: "#008B8B",
        deepskyblue: "#00BFFF",
        darkturquoise: "#00CED1",
        mediumspringgreen: "#00FA9A",
        lime: "#00FF00",
        springgreen: "#00FF7F",
        aqua: "#00FFFF",
        cyan: "#00FFFF",
        midnightblue: "#191970",
        dodgerblue: "#1E90FF",
        lightseagreen: "#20B2AA",
        forestgreen: "#228B22",
        seagreen: "#2E8B57",
        darkslategray: "#2F4F4F",
        limegreen: "#32CD32",
        mediumseagreen: "#3CB371",
        turquoise: "#40E0D0",
        royalblue: "#4169E1",
        steelblue: "#4682B4",
        darkslateblue: "#483D8B",
        mediumturquoise: "#48D1CC",
        indigo: "#4B0082",
        darkolivegreen: "#556B2F",
        cadetblue: "#5F9EA0",
        cornflowerblue: "#6495ED",
        mediumaquamarine: "#66CDAA",
        dimgray: "#696969",
        slateblue: "#6A5ACD",
        olivedrab: "#6B8E23",
        slategray: "#708090",
        lightslategray: "#778899",
        mediumslateblue: "#7B68EE",
        lawngreen: "#7CFC00",
        chartreuse: "#7FFF00",
        aquamarine: "#7FFFD4",
        maroon: "#800000",
        purple: "#800080",
        olive: "#808000",
        gray: "#808080",
        skyblue: "#87CEEB",
        lightskyblue: "#87CEFA",
        blueviolet: "#8A2BE2",
        darkred: "#8B0000",
        darkmagenta: "#8B008B",
        saddlebrown: "#8B4513",
        darkseagreen: "#8FBC8F",
        lightgreen: "#90EE90",
        mediumpurple: "#9370D8",
        darkviolet: "#9400D3",
        palegreen: "#98FB98",
        darkorchid: "#9932CC",
        yellowgreen: "#9ACD32",
        sienna: "#A0522D",
        brown: "#A52A2A",
        darkgray: "#A9A9A9",
        lightblue: "#ADD8E6",
        greenyellow: "#ADFF2F",
        paleturquoise: "#AFEEEE",
        lightsteelblue: "#B0C4DE",
        powderblue: "#B0E0E6",
        firebrick: "#B22222",
        darkgoldenrod: "#B8860B",
        mediumorchid: "#BA55D3",
        rosybrown: "#BC8F8F",
        darkkhaki: "#BDB76B",
        silver: "#C0C0C0",
        mediumvioletred: "#C71585",
        indianred: "#CD5C5C",
        peru: "#CD853F",
        chocolate: "#D2691E",
        tan: "#D2B48C",
        lightgrey: "#D3D3D3",
        palevioletred: "#D87093",
        thistle: "#D8BFD8",
        orchid: "#DA70D6",
        goldenrod: "#DAA520",
        crimson: "#DC143C",
        gainsboro: "#DCDCDC",
        plum: "#DDA0DD",
        burlywood: "#DEB887",
        lightcyan: "#E0FFFF",
        lavender: "#E6E6FA",
        darksalmon: "#E9967A",
        violet: "#EE82EE",
        palegoldenrod: "#EEE8AA",
        lightcoral: "#F08080",
        khaki: "#F0E68C",
        aliceblue: "#F0F8FF",
        honeydew: "#F0FFF0",
        azure: "#F0FFFF",
        sandybrown: "#F4A460",
        wheat: "#F5DEB3",
        beige: "#F5F5DC",
        whitesmoke: "#F5F5F5",
        mintcream: "#F5FFFA",
        ghostwhite: "#F8F8FF",
        salmon: "#FA8072",
        antiquewhite: "#FAEBD7",
        linen: "#FAF0E6",
        lightgoldenrodyellow: "#FAFAD2",
        oldlace: "#FDF5E6",
        red: "#FF0000",
        fuchsia: "#FF00FF",
        magenta: "#FF00FF",
        deeppink: "#FF1493",
        orangered: "#FF4500",
        tomato: "#FF6347",
        hotpink: "#FF69B4",
        coral: "#FF7F50",
        darkorange: "#FF8C00",
        lightsalmon: "#FFA07A",
        orange: "#FFA500",
        lightpink: "#FFB6C1",
        pink: "#FFC0CB",
        gold: "#FFD700",
        peachpuff: "#FFDAB9",
        navajowhite: "#FFDEAD",
        moccasin: "#FFE4B5",
        bisque: "#FFE4C4",
        mistyrose: "#FFE4E1",
        blanchedalmond: "#FFEBCD",
        papayawhip: "#FFEFD5",
        lavenderblush: "#FFF0F5",
        seashell: "#FFF5EE",
        cornsilk: "#FFF8DC",
        lemonchiffon: "#FFFACD",
        floralwhite: "#FFFAF0",
        snow: "#FFFAFA",
        yellow: "#FFFF00",
        lightyellow: "#FFFFE0",
        ivory: "#FFFFF0",
        white: "#FFFFFF"
    }, Cf = function() {
        function t55() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
            Ra(this, t55), this.pixelRatio = e, this.generated = !1, this.centerCoordinates = {
                x: 144.5,
                y: 144.5
            }, this.r = 289 * 0.49, this.color = {
                r: 255,
                g: 255,
                b: 255,
                a: 1
            }, this.hueCircle = void 0, this.initialColor = {
                r: 255,
                g: 255,
                b: 255,
                a: 1
            }, this.previousColor = void 0, this.applied = !1, this.updateCallback = function() {
            }, this.closeCallback = function() {
            }, this._create();
        }
        return Ha(t55, [
            {
                key: "insertTo",
                value: function(t) {
                    void 0 !== this.hammer && (this.hammer.destroy(), this.hammer = void 0), this.container = t, this.container.appendChild(this.frame), this._bindHammer(), this._setSize();
                }
            },
            {
                key: "setUpdateCallback",
                value: function(t) {
                    if ("function" != typeof t) throw new Error("Function attempted to set as colorPicker update callback is not a function.");
                    this.updateCallback = t;
                }
            },
            {
                key: "setCloseCallback",
                value: function(t) {
                    if ("function" != typeof t) throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
                    this.closeCallback = t;
                }
            },
            {
                key: "_isColorString",
                value: function(t) {
                    if ("string" == typeof t) return Of[t];
                }
            },
            {
                key: "setColor",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if ("none" !== t) {
                        var i, o = this._isColorString(t);
                        if (void 0 !== o && (t = o), !0 === Ju(t)) {
                            if (!0 === bf(t)) {
                                var n = t.substr(4).substr(0, t.length - 5).split(",");
                                i = {
                                    r: n[0],
                                    g: n[1],
                                    b: n[2],
                                    a: 1
                                };
                            } else if (!0 === wf(t)) {
                                var r = t.substr(5).substr(0, t.length - 6).split(",");
                                i = {
                                    r: r[0],
                                    g: r[1],
                                    b: r[2],
                                    a: r[3]
                                };
                            } else if (!0 === mf(t)) {
                                var s = cf(t);
                                i = {
                                    r: s.r,
                                    g: s.g,
                                    b: s.b,
                                    a: 1
                                };
                            }
                        } else if (t instanceof Object && void 0 !== t.r && void 0 !== t.g && void 0 !== t.b) {
                            var a = void 0 !== t.a ? t.a : "1.0";
                            i = {
                                r: t.r,
                                g: t.g,
                                b: t.b,
                                a: a
                            };
                        }
                        if (void 0 === i) throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + Wl(t));
                        this._setColor(i, e);
                    }
                }
            },
            {
                key: "show",
                value: function() {
                    void 0 !== this.closeCallback && (this.closeCallback(), this.closeCallback = void 0), this.applied = !1, this.frame.style.display = "block", this._generateHueCircle();
                }
            },
            {
                key: "_hide",
                value: function() {
                    var t = this, e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    !0 === e && (this.previousColor = Ke({
                    }, this.color)), !0 === this.applied && this.updateCallback(this.initialColor), this.frame.style.display = "none", Yl(function() {
                        void 0 !== t.closeCallback && (t.closeCallback(), t.closeCallback = void 0);
                    }, 0);
                }
            },
            {
                key: "_save",
                value: function() {
                    this.updateCallback(this.color), this.applied = !1, this._hide();
                }
            },
            {
                key: "_apply",
                value: function() {
                    this.applied = !0, this.updateCallback(this.color), this._updatePicker(this.color);
                }
            },
            {
                key: "_loadLast",
                value: function() {
                    void 0 !== this.previousColor ? this.setColor(this.previousColor, !1) : alert("There is no last color to load...");
                }
            },
            {
                key: "_setColor",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    !0 === e && (this.initialColor = Ke({
                    }, t)), this.color = t;
                    var i = vf(t.r, t.g, t.b), o = 2 * Math.PI, n = this.r * i.s, r = this.centerCoordinates.x + n * Math.sin(o * i.h), s = this.centerCoordinates.y + n * Math.cos(o * i.h);
                    this.colorPickerSelector.style.left = r - 0.5 * this.colorPickerSelector.clientWidth + "px", this.colorPickerSelector.style.top = s - 0.5 * this.colorPickerSelector.clientHeight + "px", this._updatePicker(t);
                }
            },
            {
                key: "_setOpacity",
                value: function(t) {
                    this.color.a = t / 100, this._updatePicker(this.color);
                }
            },
            {
                key: "_setBrightness",
                value: function(t) {
                    var e = vf(this.color.r, this.color.g, this.color.b);
                    e.v = t / 100;
                    var i = gf(e.h, e.s, e.v);
                    i.a = this.color.a, this.color = i, this._updatePicker();
                }
            },
            {
                key: "_updatePicker",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.color, e = vf(t.r, t.g, t.b), i = this.colorPickerCanvas.getContext("2d");
                    void 0 === this.pixelRation && (this.pixelRatio = (window.devicePixelRatio || 1) / (i.webkitBackingStorePixelRatio || i.mozBackingStorePixelRatio || i.msBackingStorePixelRatio || i.oBackingStorePixelRatio || i.backingStorePixelRatio || 1)), i.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                    var o = this.colorPickerCanvas.clientWidth, n = this.colorPickerCanvas.clientHeight;
                    i.clearRect(0, 0, o, n), i.putImageData(this.hueCircle, 0, 0), i.fillStyle = "rgba(0,0,0," + (1 - e.v) + ")", i.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r), Ql(i).call(i), this.brightnessRange.value = 100 * e.v, this.opacityRange.value = 100 * t.a, this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")", this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
                }
            },
            {
                key: "_setSize",
                value: function() {
                    this.colorPickerCanvas.style.width = "100%", this.colorPickerCanvas.style.height = "100%", this.colorPickerCanvas.width = 289 * this.pixelRatio, this.colorPickerCanvas.height = 289 * this.pixelRatio;
                }
            },
            {
                key: "_create",
                value: function() {
                    var t, e, i, o;
                    if (this.frame = document.createElement("div"), this.frame.className = "vis-color-picker", this.colorPickerDiv = document.createElement("div"), this.colorPickerSelector = document.createElement("div"), this.colorPickerSelector.className = "vis-selector", this.colorPickerDiv.appendChild(this.colorPickerSelector), this.colorPickerCanvas = document.createElement("canvas"), this.colorPickerDiv.appendChild(this.colorPickerCanvas), this.colorPickerCanvas.getContext) {
                        var n = this.colorPickerCanvas.getContext("2d");
                        this.pixelRatio = (window.devicePixelRatio || 1) / (n.webkitBackingStorePixelRatio || n.mozBackingStorePixelRatio || n.msBackingStorePixelRatio || n.oBackingStorePixelRatio || n.backingStorePixelRatio || 1), this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                    } else {
                        var r = document.createElement("DIV");
                        r.style.color = "red", r.style.fontWeight = "bold", r.style.padding = "10px", r.innerText = "Error: your browser does not support HTML canvas", this.colorPickerCanvas.appendChild(r);
                    }
                    this.colorPickerDiv.className = "vis-color", this.opacityDiv = document.createElement("div"), this.opacityDiv.className = "vis-opacity", this.brightnessDiv = document.createElement("div"), this.brightnessDiv.className = "vis-brightness", this.arrowDiv = document.createElement("div"), this.arrowDiv.className = "vis-arrow", this.opacityRange = document.createElement("input");
                    try {
                        this.opacityRange.type = "range", this.opacityRange.min = "0", this.opacityRange.max = "100";
                    } catch (t56) {
                    }
                    this.opacityRange.value = "100", this.opacityRange.className = "vis-range", this.brightnessRange = document.createElement("input");
                    try {
                        this.brightnessRange.type = "range", this.brightnessRange.min = "0", this.brightnessRange.max = "100";
                    } catch (t57) {
                    }
                    this.brightnessRange.value = "100", this.brightnessRange.className = "vis-range", this.opacityDiv.appendChild(this.opacityRange), this.brightnessDiv.appendChild(this.brightnessRange);
                    var s = this;
                    this.opacityRange.onchange = function() {
                        s._setOpacity(this.value);
                    }, this.opacityRange.oninput = function() {
                        s._setOpacity(this.value);
                    }, this.brightnessRange.onchange = function() {
                        s._setBrightness(this.value);
                    }, this.brightnessRange.oninput = function() {
                        s._setBrightness(this.value);
                    }, this.brightnessLabel = document.createElement("div"), this.brightnessLabel.className = "vis-label vis-brightness", this.brightnessLabel.innerText = "brightness:", this.opacityLabel = document.createElement("div"), this.opacityLabel.className = "vis-label vis-opacity", this.opacityLabel.innerText = "opacity:", this.newColorDiv = document.createElement("div"), this.newColorDiv.className = "vis-new-color", this.newColorDiv.innerText = "new", this.initialColorDiv = document.createElement("div"), this.initialColorDiv.className = "vis-initial-color", this.initialColorDiv.innerText = "initial", this.cancelButton = document.createElement("div"), this.cancelButton.className = "vis-button vis-cancel", this.cancelButton.innerText = "cancel", this.cancelButton.onclick = si(t = this._hide).call(t, this, !1), this.applyButton = document.createElement("div"), this.applyButton.className = "vis-button vis-apply", this.applyButton.innerText = "apply", this.applyButton.onclick = si(e = this._apply).call(e, this), this.saveButton = document.createElement("div"), this.saveButton.className = "vis-button vis-save", this.saveButton.innerText = "save", this.saveButton.onclick = si(i = this._save).call(i, this), this.loadButton = document.createElement("div"), this.loadButton.className = "vis-button vis-load", this.loadButton.innerText = "load last", this.loadButton.onclick = si(o = this._loadLast).call(o, this), this.frame.appendChild(this.colorPickerDiv), this.frame.appendChild(this.arrowDiv), this.frame.appendChild(this.brightnessLabel), this.frame.appendChild(this.brightnessDiv), this.frame.appendChild(this.opacityLabel), this.frame.appendChild(this.opacityDiv), this.frame.appendChild(this.newColorDiv), this.frame.appendChild(this.initialColorDiv), this.frame.appendChild(this.cancelButton), this.frame.appendChild(this.applyButton), this.frame.appendChild(this.saveButton), this.frame.appendChild(this.loadButton);
                }
            },
            {
                key: "_bindHammer",
                value: function() {
                    var t = this;
                    this.drag = {
                    }, this.pinch = {
                    }, this.hammer = new Yu(this.colorPickerCanvas), this.hammer.get("pinch").set({
                        enable: !0
                    }), this.hammer.on("hammer.input", function(e) {
                        e.isFirst && t._moveSelector(e);
                    }), this.hammer.on("tap", function(e) {
                        t._moveSelector(e);
                    }), this.hammer.on("panstart", function(e) {
                        t._moveSelector(e);
                    }), this.hammer.on("panmove", function(e) {
                        t._moveSelector(e);
                    }), this.hammer.on("panend", function(e) {
                        t._moveSelector(e);
                    });
                }
            },
            {
                key: "_generateHueCircle",
                value: function() {
                    if (!1 === this.generated) {
                        var t = this.colorPickerCanvas.getContext("2d");
                        void 0 === this.pixelRation && (this.pixelRatio = (window.devicePixelRatio || 1) / (t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1)), t.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                        var e, i, o, n, r = this.colorPickerCanvas.clientWidth, s = this.colorPickerCanvas.clientHeight;
                        t.clearRect(0, 0, r, s), this.centerCoordinates = {
                            x: 0.5 * r,
                            y: 0.5 * s
                        }, this.r = 0.49 * r;
                        var a, h = 2 * Math.PI / 360, d = 1 / this.r;
                        for(o = 0; o < 360; o++)for(n = 0; n < this.r; n++)e = this.centerCoordinates.x + n * Math.sin(h * o), i = this.centerCoordinates.y + n * Math.cos(h * o), a = gf(0.002777777777777778 * o, n * d, 1), t.fillStyle = "rgb(" + a.r + "," + a.g + "," + a.b + ")", t.fillRect(e - 0.5, i - 0.5, 2, 2);
                        t.strokeStyle = "rgba(0,0,0,1)", t.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r), t.stroke(), this.hueCircle = t.getImageData(0, 0, r, s);
                    }
                    this.generated = !0;
                }
            },
            {
                key: "_moveSelector",
                value: function(t) {
                    var e = this.colorPickerDiv.getBoundingClientRect(), i = t.center.x - e.left, o = t.center.y - e.top, n = 0.5 * this.colorPickerDiv.clientHeight, r = 0.5 * this.colorPickerDiv.clientWidth, s = i - r, a = o - n, h = Math.atan2(s, a), d = 0.98 * Math.min(Math.sqrt(s * s + a * a), r), l = Math.cos(h) * d + n, c = Math.sin(h) * d + r;
                    this.colorPickerSelector.style.top = l - 0.5 * this.colorPickerSelector.clientHeight + "px", this.colorPickerSelector.style.left = c - 0.5 * this.colorPickerSelector.clientWidth + "px";
                    var u = h / (2 * Math.PI);
                    u = u < 0 ? u + 1 : u;
                    var f = d / this.r, p = vf(this.color.r, this.color.g, this.color.b);
                    p.h = u, p.s = f;
                    var v = gf(p.h, p.s, p.v);
                    v.a = this.color.a, this.color = v, this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")", this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
                }
            }
        ]), t55;
    }();
    function Sf() {
        for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
        if (e.length < 1) throw new TypeError("Invalid arguments.");
        if (1 === e.length) return document.createTextNode(e[0]);
        var o = document.createElement(e[0]);
        return o.appendChild(Sf.apply(void 0, Fh(Lh(e).call(e, 1)))), o;
    }
    var Tf, Mf = !1, Pf = "background: #FFeeee; color: #dd0000", Df = Xu, Bf = function() {
        function t58(e, i, o) {
            var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : function() {
                return !1;
            };
            Ra(this, t58), this.parent = e, this.changedOptions = [], this.container = i, this.allowCreation = !1, this.hideOption = r, this.options = {
            }, this.initialized = !1, this.popupCounter = 0, this.defaultOptions = {
                enabled: !1,
                filter: !0,
                container: void 0,
                showButton: !0
            }, Ke(this.options, this.defaultOptions), this.configureOptions = o, this.moduleOptions = {
            }, this.domElements = [], this.popupDiv = {
            }, this.popupLimit = 5, this.popupHistory = {
            }, this.colorPicker = new Cf(n), this.wrapper = void 0;
        }
        return Ha(t58, [
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        this.popupHistory = {
                        }, this._removePopup();
                        var e = !0;
                        if ("string" == typeof t) this.options.filter = t;
                        else if (Hh(t)) this.options.filter = t.join();
                        else if ("object" === zh(t)) {
                            if (null == t) throw new TypeError("options cannot be null");
                            void 0 !== t.container && (this.options.container = t.container), void 0 !== $d(t) && (this.options.filter = $d(t)), void 0 !== t.showButton && (this.options.showButton = t.showButton), void 0 !== t.enabled && (e = t.enabled);
                        } else "boolean" == typeof t ? (this.options.filter = !0, e = t) : "function" == typeof t && (this.options.filter = t, e = !0);
                        !1 === $d(this.options) && (e = !1), this.options.enabled = e;
                    }
                    this._clean();
                }
            },
            {
                key: "setModuleOptions",
                value: function(t) {
                    this.moduleOptions = t, !0 === this.options.enabled && (this._clean(), void 0 !== this.options.container && (this.container = this.options.container), this._create());
                }
            },
            {
                key: "_create",
                value: function() {
                    this._clean(), this.changedOptions = [];
                    var t = $d(this.options), e = 0, i = !1;
                    for(var o in this.configureOptions)Object.prototype.hasOwnProperty.call(this.configureOptions, o) && (this.allowCreation = !1, i = !1, "function" == typeof t ? i = (i = t(o, [])) || this._handleObject(this.configureOptions[o], [
                        o
                    ], !0) : !0 !== t && -1 === Cl(t).call(t, o) || (i = !0), !1 !== i && (this.allowCreation = !0, e > 0 && this._makeItem([]), this._makeHeader(o), this._handleObject(this.configureOptions[o], [
                        o
                    ])), e++);
                    this._makeButton(), this._push();
                }
            },
            {
                key: "_push",
                value: function() {
                    this.wrapper = document.createElement("div"), this.wrapper.className = "vis-configuration-wrapper", this.container.appendChild(this.wrapper);
                    for(var t = 0; t < this.domElements.length; t++)this.wrapper.appendChild(this.domElements[t]);
                    this._showPopupIfNeeded();
                }
            },
            {
                key: "_clean",
                value: function() {
                    for(var t = 0; t < this.domElements.length; t++)this.wrapper.removeChild(this.domElements[t]);
                    void 0 !== this.wrapper && (this.container.removeChild(this.wrapper), this.wrapper = void 0), this.domElements = [], this._removePopup();
                }
            },
            {
                key: "_getValue",
                value: function(t) {
                    for(var e = this.moduleOptions, i = 0; i < t.length; i++){
                        if (void 0 === e[t[i]]) {
                            e = void 0;
                            break;
                        }
                        e = e[t[i]];
                    }
                    return e;
                }
            },
            {
                key: "_makeItem",
                value: function(t59) {
                    if (!0 === this.allowCreation) {
                        var e = document.createElement("div");
                        e.className = "vis-configuration vis-config-item vis-config-s" + t59.length;
                        for(var i = arguments.length, o = new Array(i > 1 ? i - 1 : 0), n = 1; n < i; n++)o[n - 1] = arguments[n];
                        return nd(o).call(o, function(t) {
                            e.appendChild(t);
                        }), this.domElements.push(e), this.domElements.length;
                    }
                    return 0;
                }
            },
            {
                key: "_makeHeader",
                value: function(t) {
                    var e = document.createElement("div");
                    e.className = "vis-configuration vis-config-header", e.innerText = t, this._makeItem([], e);
                }
            },
            {
                key: "_makeLabel",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = document.createElement("div");
                    if (o.className = "vis-configuration vis-config-label vis-config-s" + e.length, !0 === i) {
                        for(; o.firstChild;)o.removeChild(o.firstChild);
                        o.appendChild(Sf("i", "b", t));
                    } else o.innerText = t + ":";
                    return o;
                }
            },
            {
                key: "_makeDropdown",
                value: function(t, e, i) {
                    var o = document.createElement("select");
                    o.className = "vis-configuration vis-config-select";
                    var n = 0;
                    void 0 !== e && -1 !== Cl(t).call(t, e) && (n = Cl(t).call(t, e));
                    for(var r = 0; r < t.length; r++){
                        var s = document.createElement("option");
                        s.value = t[r], r === n && (s.selected = "selected"), s.innerText = t[r], o.appendChild(s);
                    }
                    var a = this;
                    o.onchange = function() {
                        a._update(this.value, i);
                    };
                    var h = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, h, o);
                }
            },
            {
                key: "_makeRange",
                value: function(t, e, i) {
                    var o = t[0], n = t[1], r = t[2], s = t[3], a = document.createElement("input");
                    a.className = "vis-configuration vis-config-range";
                    try {
                        a.type = "range", a.min = n, a.max = r;
                    } catch (t60) {
                    }
                    a.step = s;
                    var h = "", d = 0;
                    if (void 0 !== e) {
                        var l = 1.2;
                        e < 0 && e * l < n ? (a.min = Math.ceil(e * l), d = a.min, h = "range increased") : e / l < n && (a.min = Math.ceil(e / l), d = a.min, h = "range increased"), e * l > r && 1 !== r && (a.max = Math.ceil(e * l), d = a.max, h = "range increased"), a.value = e;
                    } else a.value = o;
                    var c = document.createElement("input");
                    c.className = "vis-configuration vis-config-rangeinput", c.value = a.value;
                    var u = this;
                    a.onchange = function() {
                        c.value = this.value, u._update(Number(this.value), i);
                    }, a.oninput = function() {
                        c.value = this.value;
                    };
                    var f = this._makeLabel(i[i.length - 1], i), p = this._makeItem(i, f, a, c);
                    "" !== h && this.popupHistory[p] !== d && (this.popupHistory[p] = d, this._setupPopup(h, p));
                }
            },
            {
                key: "_makeButton",
                value: function() {
                    var t = this;
                    if (!0 === this.options.showButton) {
                        var e = document.createElement("div");
                        e.className = "vis-configuration vis-config-button", e.innerText = "generate options", e.onclick = function() {
                            t._printOptions();
                        }, e.onmouseover = function() {
                            e.className = "vis-configuration vis-config-button hover";
                        }, e.onmouseout = function() {
                            e.className = "vis-configuration vis-config-button";
                        }, this.optionsContainer = document.createElement("div"), this.optionsContainer.className = "vis-configuration vis-config-option-container", this.domElements.push(this.optionsContainer), this.domElements.push(e);
                    }
                }
            },
            {
                key: "_setupPopup",
                value: function(t, e) {
                    var i = this;
                    if (!0 === this.initialized && !0 === this.allowCreation && this.popupCounter < this.popupLimit) {
                        var o = document.createElement("div");
                        o.id = "vis-configuration-popup", o.className = "vis-configuration-popup", o.innerText = t, o.onclick = function() {
                            i._removePopup();
                        }, this.popupCounter += 1, this.popupDiv = {
                            html: o,
                            index: e
                        };
                    }
                }
            },
            {
                key: "_removePopup",
                value: function() {
                    void 0 !== this.popupDiv.html && (this.popupDiv.html.parentNode.removeChild(this.popupDiv.html), clearTimeout(this.popupDiv.hideTimeout), clearTimeout(this.popupDiv.deleteTimeout), this.popupDiv = {
                    });
                }
            },
            {
                key: "_showPopupIfNeeded",
                value: function() {
                    var t = this;
                    if (void 0 !== this.popupDiv.html) {
                        var e = this.domElements[this.popupDiv.index].getBoundingClientRect();
                        this.popupDiv.html.style.left = e.left + "px", this.popupDiv.html.style.top = e.top - 30 + "px", document.body.appendChild(this.popupDiv.html), this.popupDiv.hideTimeout = Yl(function() {
                            t.popupDiv.html.style.opacity = 0;
                        }, 1500), this.popupDiv.deleteTimeout = Yl(function() {
                            t._removePopup();
                        }, 1800);
                    }
                }
            },
            {
                key: "_makeCheckbox",
                value: function(t, e, i) {
                    var o = document.createElement("input");
                    o.type = "checkbox", o.className = "vis-configuration vis-config-checkbox", o.checked = t, void 0 !== e && (o.checked = e, e !== t && ("object" === zh(t) ? e !== t.enabled && this.changedOptions.push({
                        path: i,
                        value: e
                    }) : this.changedOptions.push({
                        path: i,
                        value: e
                    })));
                    var n = this;
                    o.onchange = function() {
                        n._update(this.checked, i);
                    };
                    var r = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, r, o);
                }
            },
            {
                key: "_makeTextInput",
                value: function(t, e, i) {
                    var o = document.createElement("input");
                    o.type = "text", o.className = "vis-configuration vis-config-text", o.value = e, e !== t && this.changedOptions.push({
                        path: i,
                        value: e
                    });
                    var n = this;
                    o.onchange = function() {
                        n._update(this.value, i);
                    };
                    var r = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, r, o);
                }
            },
            {
                key: "_makeColorField",
                value: function(t, e, i) {
                    var o = this, n = t[1], r = document.createElement("div");
                    "none" !== (e = void 0 === e ? n : e) ? (r.className = "vis-configuration vis-config-colorBlock", r.style.backgroundColor = e) : r.className = "vis-configuration vis-config-colorBlock none", e = void 0 === e ? n : e, r.onclick = function() {
                        o._showColorPicker(e, r, i);
                    };
                    var s = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, s, r);
                }
            },
            {
                key: "_showColorPicker",
                value: function(t61, e, i) {
                    var o = this;
                    e.onclick = function() {
                    }, this.colorPicker.insertTo(e), this.colorPicker.show(), this.colorPicker.setColor(t61), this.colorPicker.setUpdateCallback(function(t) {
                        var n = "rgba(" + t.r + "," + t.g + "," + t.b + "," + t.a + ")";
                        e.style.backgroundColor = n, o._update(n, i);
                    }), this.colorPicker.setCloseCallback(function() {
                        e.onclick = function() {
                            o._showColorPicker(t61, e, i);
                        };
                    });
                }
            },
            {
                key: "_handleObject",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = !1, n = $d(this.options), r = !1;
                    for(var s in t)if (Object.prototype.hasOwnProperty.call(t, s)) {
                        o = !0;
                        var a = t[s], h = af(e, s);
                        if ("function" == typeof n && !1 === (o = n(s, e)) && !Hh(a) && "string" != typeof a && "boolean" != typeof a && a instanceof Object && (this.allowCreation = !1, o = this._handleObject(a, h, !0), this.allowCreation = !1 === i), !1 !== o) {
                            r = !0;
                            var d = this._getValue(h);
                            if (Hh(a)) this._handleArray(a, d, h);
                            else if ("string" == typeof a) this._makeTextInput(a, d, h);
                            else if ("boolean" == typeof a) this._makeCheckbox(a, d, h);
                            else if (a instanceof Object) {
                                if (!this.hideOption(e, s, this.moduleOptions)) {
                                    if (void 0 !== a.enabled) {
                                        var l = af(h, "enabled"), c = this._getValue(l);
                                        if (!0 === c) {
                                            var u = this._makeLabel(s, h, !0);
                                            this._makeItem(h, u), r = this._handleObject(a, h) || r;
                                        } else this._makeCheckbox(a, c, h);
                                    } else {
                                        var f = this._makeLabel(s, h, !0);
                                        this._makeItem(h, f), r = this._handleObject(a, h) || r;
                                    }
                                }
                            } else console.error("dont know how to handle", a, s, h);
                        }
                    }
                    return r;
                }
            },
            {
                key: "_handleArray",
                value: function(t, e, i) {
                    "string" == typeof t[0] && "color" === t[0] ? (this._makeColorField(t, e, i), t[1] !== e && this.changedOptions.push({
                        path: i,
                        value: e
                    })) : "string" == typeof t[0] ? (this._makeDropdown(t, e, i), t[0] !== e && this.changedOptions.push({
                        path: i,
                        value: e
                    })) : "number" == typeof t[0] && (this._makeRange(t, e, i), t[0] !== e && this.changedOptions.push({
                        path: i,
                        value: Number(e)
                    }));
                }
            },
            {
                key: "_update",
                value: function(t, e) {
                    var i = this._constructOptions(t, e);
                    this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit && this.parent.body.emitter.emit("configChange", i), this.initialized = !0, this.parent.setOptions(i);
                }
            },
            {
                key: "_constructOptions",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {
                    }, o = i;
                    t = "false" !== (t = "true" === t || t) && t;
                    for(var n = 0; n < e.length; n++)"global" !== e[n] && (void 0 === o[e[n]] && (o[e[n]] = {
                    }), n !== e.length - 1 ? o = o[e[n]] : o[e[n]] = t);
                    return i;
                }
            },
            {
                key: "_printOptions",
                value: function() {
                    for(var t = this.getOptions(); this.optionsContainer.firstChild;)this.optionsContainer.removeChild(this.optionsContainer.firstChild);
                    this.optionsContainer.appendChild(Sf("pre", "const options = " + Wl(t, null, 2)));
                }
            },
            {
                key: "getOptions",
                value: function() {
                    for(var t = {
                    }, e = 0; e < this.changedOptions.length; e++)this._constructOptions(this.changedOptions[e].value, this.changedOptions[e].path, t);
                    return t;
                }
            }
        ]), t58;
    }(), If = Yu, zf = function() {
        function t62(e, i) {
            Ra(this, t62), this.container = e, this.overflowMethod = i || "cap", this.x = 0, this.y = 0, this.padding = 5, this.hidden = !1, this.frame = document.createElement("div"), this.frame.className = "vis-tooltip", this.container.appendChild(this.frame);
        }
        return Ha(t62, [
            {
                key: "setPosition",
                value: function(t, e) {
                    this.x = yl(t), this.y = yl(e);
                }
            },
            {
                key: "setText",
                value: function(t) {
                    if (t instanceof Element) {
                        for(; this.frame.firstChild;)this.frame.removeChild(this.frame.firstChild);
                        this.frame.appendChild(t);
                    } else this.frame.innerText = t;
                }
            },
            {
                key: "show",
                value: function(t) {
                    if (void 0 === t && (t = !0), !0 === t) {
                        var e = this.frame.clientHeight, i = this.frame.clientWidth, o = this.frame.parentNode.clientHeight, n = this.frame.parentNode.clientWidth, r = 0, s = 0;
                        if ("flip" == this.overflowMethod) {
                            var a = !1, h = !0;
                            this.y - e < this.padding && (h = !1), this.x + i > n - this.padding && (a = !0), r = a ? this.x - i : this.x, s = h ? this.y - e : this.y;
                        } else (s = this.y - e) + e + this.padding > o && (s = o - e - this.padding), s < this.padding && (s = this.padding), (r = this.x) + i + this.padding > n && (r = n - i - this.padding), r < this.padding && (r = this.padding);
                        this.frame.style.left = r + "px", this.frame.style.top = s + "px", this.frame.style.visibility = "visible", this.hidden = !1;
                    } else this.hide();
                }
            },
            {
                key: "hide",
                value: function() {
                    this.hidden = !0, this.frame.style.left = "0", this.frame.style.top = "0", this.frame.style.visibility = "hidden";
                }
            },
            {
                key: "destroy",
                value: function() {
                    this.frame.parentNode.removeChild(this.frame);
                }
            }
        ]), t62;
    }(), Ff = Pf, Nf = function() {
        function t63() {
            Ra(this, t63);
        }
        return Ha(t63, null, [
            {
                key: "validate",
                value: function(e, i, o) {
                    Mf = !1, Tf = i;
                    var n = i;
                    return void 0 !== o && (n = i[o]), t63.parse(e, n, []), Mf;
                }
            },
            {
                key: "parse",
                value: function(e, i, o) {
                    for(var n in e)Object.prototype.hasOwnProperty.call(e, n) && t63.check(n, e, i, o);
                }
            },
            {
                key: "check",
                value: function(e, i, o, n) {
                    if (void 0 !== o[e] || void 0 !== o.__any__) {
                        var r = e, s = !0;
                        void 0 === o[e] && void 0 !== o.__any__ && (r = "__any__", s = "object" === t63.getType(i[e]));
                        var a = o[r];
                        s && void 0 !== a.__type__ && (a = a.__type__), t63.checkFields(e, i, o, r, a, n);
                    } else t63.getSuggestion(e, o, n);
                }
            },
            {
                key: "checkFields",
                value: function(e, i18, o, n, r, s) {
                    var a = function(i) {
                        console.error("%c" + i + t63.printLocation(s, e), Pf);
                    }, h = t63.getType(i18[e]), d = r[h];
                    void 0 !== d ? "array" === t63.getType(d) && -1 === Cl(d).call(d, i18[e]) ? (a('Invalid option detected in "' + e + '". Allowed values are:' + t63.print(d) + ' not "' + i18[e] + '". '), Mf = !0) : "object" === h && "__any__" !== n && (s = af(s, e), t63.parse(i18[e], o[n], s)) : void 0 === r.any && (a('Invalid type received for "' + e + '". Expected: ' + t63.print(Gh(r)) + ". Received [" + h + '] "' + i18[e] + '"'), Mf = !0);
                }
            },
            {
                key: "getType",
                value: function(t) {
                    var e = zh(t);
                    return "object" === e ? null === t ? "null" : t instanceof Boolean ? "boolean" : t instanceof Number ? "number" : t instanceof String ? "string" : Hh(t) ? "array" : t instanceof Date ? "date" : void 0 !== t.nodeType ? "dom" : !0 === t._isAMomentObject ? "moment" : "object" : "number" === e ? "number" : "boolean" === e ? "boolean" : "string" === e ? "string" : void 0 === e ? "undefined" : e;
                }
            },
            {
                key: "getSuggestion",
                value: function(e, i, o) {
                    var n, r = t63.findInOptions(e, i, o, !1), s = t63.findInOptions(e, Tf, [], !0);
                    n = void 0 !== r.indexMatch ? " in " + t63.printLocation(r.path, e, "") + 'Perhaps it was incomplete? Did you mean: "' + r.indexMatch + '"?\n\n' : s.distance <= 4 && r.distance > s.distance ? " in " + t63.printLocation(r.path, e, "") + "Perhaps it was misplaced? Matching option found at: " + t63.printLocation(s.path, s.closestMatch, "") : r.distance <= 8 ? '. Did you mean "' + r.closestMatch + '"?' + t63.printLocation(r.path, e) : ". Did you mean one of these: " + t63.print(Gh(i)) + t63.printLocation(o, e), console.error('%cUnknown option detected: "' + e + '"' + n, Pf), Mf = !0;
                }
            },
            {
                key: "findInOptions",
                value: function(e, i, o) {
                    var n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], r = 1000000000, s = "", a = [], h = e.toLowerCase(), d = void 0;
                    for(var l in i){
                        var c = void 0;
                        if (void 0 !== i[l].__type__ && !0 === n) {
                            var u = t63.findInOptions(e, i[l], af(o, l));
                            r > u.distance && (s = u.closestMatch, a = u.path, r = u.distance, d = u.indexMatch);
                        } else {
                            var f;
                            -1 !== Cl(f = l.toLowerCase()).call(f, h) && (d = l), r > (c = t63.levenshteinDistance(e, l)) && (s = l, a = hf(o), r = c);
                        }
                    }
                    return {
                        closestMatch: s,
                        path: a,
                        distance: r,
                        indexMatch: d
                    };
                }
            },
            {
                key: "printLocation",
                value: function(t, e) {
                    for(var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "Problem value found at: \n", o = "\n\n" + i + "options = {\n", n = 0; n < t.length; n++){
                        for(var r = 0; r < n + 1; r++)o += "  ";
                        o += t[n] + ": {\n";
                    }
                    for(var s = 0; s < t.length + 1; s++)o += "  ";
                    o += e + "\n";
                    for(var a = 0; a < t.length + 1; a++){
                        for(var h = 0; h < t.length - a; h++)o += "  ";
                        o += "}\n";
                    }
                    return o + "\n\n";
                }
            },
            {
                key: "print",
                value: function(t) {
                    return Wl(t).replace(/(")|(\[)|(\])|(,"__type__")/g, "").replace(/(,)/g, ", ");
                }
            },
            {
                key: "levenshteinDistance",
                value: function(t, e) {
                    if (0 === t.length) return e.length;
                    if (0 === e.length) return t.length;
                    var i, o, n = [];
                    for(i = 0; i <= e.length; i++)n[i] = [
                        i
                    ];
                    for(o = 0; o <= t.length; o++)n[0][o] = o;
                    for(i = 1; i <= e.length; i++)for(o = 1; o <= t.length; o++)e.charAt(i - 1) == t.charAt(o - 1) ? n[i][o] = n[i - 1][o - 1] : n[i][o] = Math.min(n[i - 1][o - 1] + 1, Math.min(n[i][o - 1] + 1, n[i - 1][o] + 1));
                    return n[e.length][t.length];
                }
            }
        ]), t63;
    }();
    function Af(t64) {
        return Uf = t64, (function() {
            var t = {
            };
            Yf = 0, Xf = Uf.charAt(0), np(), "strict" === Gf && (t.strict = !0, np());
            "graph" !== Gf && "digraph" !== Gf || (t.type = Gf, np());
            Kf === Wf && (t.id = Gf, np());
            if ("{" != Gf) throw lp("Angle bracket { expected");
            if (np(), rp(t), "}" != Gf) throw lp("Angle bracket } expected");
            if (np(), "" !== Gf) throw lp("End of file expected");
            return np(), delete t.node, delete t.edge, delete t.graph, t;
        })();
    }
    var Rf = {
        fontsize: "font.size",
        fontcolor: "font.color",
        labelfontcolor: "font.color",
        fontname: "font.face",
        color: [
            "color.border",
            "color.background"
        ],
        fillcolor: "color.background",
        tooltip: "title",
        labeltooltip: "title"
    }, jf = Bl(Rf);
    jf.color = "color.color", jf.style = "dashes";
    var Lf = 0, Hf = 1, Wf = 2, Vf = 3, qf = {
        "{": !0,
        "}": !0,
        "[": !0,
        "]": !0,
        ";": !0,
        "=": !0,
        ",": !0,
        "->": !0,
        "--": !0
    }, Uf = "", Yf = 0, Xf = "", Gf = "", Kf = Lf;
    function $f() {
        Yf++, Xf = Uf.charAt(Yf);
    }
    function Zf() {
        return Uf.charAt(Yf + 1);
    }
    function Qf(t) {
        var e = t.charCodeAt(0);
        return e < 47 ? 35 === e || 46 === e : e < 59 ? e > 47 : e < 91 ? e > 64 : e < 96 ? 95 === e : e < 123 && e > 96;
    }
    function Jf(t, e) {
        if (t || (t = {
        }), e) for(var i in e)e.hasOwnProperty(i) && (t[i] = e[i]);
        return t;
    }
    function tp(t, e, i) {
        for(var o = e.split("."), n = t; o.length;){
            var r = o.shift();
            o.length ? (n[r] || (n[r] = {
            }), n = n[r]) : n[r] = i;
        }
    }
    function ep(t, e) {
        for(var i, o, n = null, r = [
            t
        ], s = t; s.parent;)r.push(s.parent), s = s.parent;
        if (s.nodes) {
            for(i = 0, o = s.nodes.length; i < o; i++)if (e.id === s.nodes[i].id) {
                n = s.nodes[i];
                break;
            }
        }
        for(n || (n = {
            id: e.id
        }, t.node && (n.attr = Jf(n.attr, t.node))), i = r.length - 1; i >= 0; i--){
            var a, h = r[i];
            h.nodes || (h.nodes = []), -1 === Cl(a = h.nodes).call(a, n) && h.nodes.push(n);
        }
        e.attr && (n.attr = Jf(n.attr, e.attr));
    }
    function ip(t, e) {
        if (t.edges || (t.edges = []), t.edges.push(e), t.edge) {
            var i = Jf({
            }, t.edge);
            e.attr = Jf(i, e.attr);
        }
    }
    function op(t, e, i, o, n) {
        var r = {
            from: e,
            to: i,
            type: o
        };
        return t.edge && (r.attr = Jf({
        }, t.edge)), r.attr = Jf(r.attr || {
        }, n), null != n && n.hasOwnProperty("arrows") && null != n.arrows && (r.arrows = {
            to: {
                enabled: !0,
                type: n.arrows.type
            }
        }, n.arrows = null), r;
    }
    function np() {
        for(Kf = Lf, Gf = ""; " " === Xf || "\t" === Xf || "\n" === Xf || "\r" === Xf;)$f();
        do {
            var t = !1;
            if ("#" === Xf) {
                for(var e = Yf - 1; " " === Uf.charAt(e) || "\t" === Uf.charAt(e);)e--;
                if ("\n" === Uf.charAt(e) || "" === Uf.charAt(e)) {
                    for(; "" != Xf && "\n" != Xf;)$f();
                    t = !0;
                }
            }
            if ("/" === Xf && "/" === Zf()) {
                for(; "" != Xf && "\n" != Xf;)$f();
                t = !0;
            }
            if ("/" === Xf && "*" === Zf()) {
                for(; "" != Xf;){
                    if ("*" === Xf && "/" === Zf()) {
                        $f(), $f();
                        break;
                    }
                    $f();
                }
                t = !0;
            }
            for(; " " === Xf || "\t" === Xf || "\n" === Xf || "\r" === Xf;)$f();
        }while (t)
        if ("" !== Xf) {
            var i = Xf + Zf();
            if (qf[i]) return Kf = Hf, Gf = i, $f(), void $f();
            if (qf[Xf]) return Kf = Hf, Gf = Xf, void $f();
            if (Qf(Xf) || "-" === Xf) {
                for(Gf += Xf, $f(); Qf(Xf);)Gf += Xf, $f();
                return "false" === Gf ? Gf = !1 : "true" === Gf ? Gf = !0 : isNaN(Number(Gf)) || (Gf = Number(Gf)), void (Kf = Wf);
            }
            if ('"' === Xf) {
                for($f(); "" != Xf && ('"' != Xf || '"' === Xf && '"' === Zf());)'"' === Xf ? (Gf += Xf, $f()) : "\\" === Xf && "n" === Zf() ? (Gf += "\n", $f()) : Gf += Xf, $f();
                if ('"' != Xf) throw lp('End of string " expected');
                return $f(), void (Kf = Wf);
            }
            for(Kf = Vf; "" != Xf;)Gf += Xf, $f();
            throw new SyntaxError('Syntax error in part "' + cp(Gf, 30) + '"');
        }
        Kf = Hf;
    }
    function rp(t) {
        for(; "" !== Gf && "}" != Gf;)sp(t), ";" === Gf && np();
    }
    function sp(t65) {
        var e38 = ap(t65);
        if (e38) hp(t65, e38);
        else if (!function(t) {
            if ("node" === Gf) return np(), t.node = dp(), "node";
            if ("edge" === Gf) return np(), t.edge = dp(), "edge";
            if ("graph" === Gf) return np(), t.graph = dp(), "graph";
            return null;
        }(t65)) {
            if (Kf != Wf) throw lp("Identifier expected");
            var i19 = Gf;
            if (np(), "=" === Gf) {
                if (np(), Kf != Wf) throw lp("Identifier expected");
                t65[i19] = Gf, np();
            } else !function(t, e) {
                var i = {
                    id: e
                }, o = dp();
                o && (i.attr = o);
                ep(t, i), hp(t, e);
            }(t65, i19);
        }
    }
    function ap(t) {
        var e = null;
        if ("subgraph" === Gf && ((e = {
        }).type = "subgraph", np(), Kf === Wf && (e.id = Gf, np())), "{" === Gf) {
            if (np(), e || (e = {
            }), e.parent = t, e.node = t.node, e.edge = t.edge, e.graph = t.graph, rp(e), "}" != Gf) throw lp("Angle bracket } expected");
            np(), delete e.node, delete e.edge, delete e.graph, delete e.parent, t.subgraphs || (t.subgraphs = []), t.subgraphs.push(e);
        }
        return e;
    }
    function hp(t, e) {
        for(; "->" === Gf || "--" === Gf;){
            var i, o = Gf;
            np();
            var n = ap(t);
            if (n) i = n;
            else {
                if (Kf != Wf) throw lp("Identifier or subgraph expected");
                ep(t, {
                    id: i = Gf
                }), np();
            }
            ip(t, op(t, e, i, o, dp())), e = i;
        }
    }
    function dp() {
        for(var t, e, i = null, o = {
            dashed: !0,
            solid: !1,
            dotted: [
                1,
                5
            ]
        }, n = {
            dot: "circle",
            box: "box",
            crow: "crow",
            curve: "curve",
            icurve: "inv_curve",
            normal: "triangle",
            inv: "inv_triangle",
            diamond: "diamond",
            tee: "bar",
            vee: "vee"
        }, r = new Array, s = new Array; "[" === Gf;){
            for(np(), i = {
            }; "" !== Gf && "]" != Gf;){
                if (Kf != Wf) throw lp("Attribute name expected");
                var a = Gf;
                if (np(), "=" != Gf) throw lp("Equal sign = expected");
                if (np(), Kf != Wf) throw lp("Attribute value expected");
                var h = Gf;
                "style" === a && (h = o[h]), "arrowhead" === a && (a = "arrows", h = {
                    to: {
                        enabled: !0,
                        type: n[h]
                    }
                }), "arrowtail" === a && (a = "arrows", h = {
                    from: {
                        enabled: !0,
                        type: n[h]
                    }
                }), r.push({
                    attr: i,
                    name: a,
                    value: h
                }), s.push(a), np(), "," == Gf && np();
            }
            if ("]" != Gf) throw lp("Bracket ] expected");
            np();
        }
        if (Hd(s).call(s, "dir")) {
            var d = {
                arrows: {
                }
            };
            for(t = 0; t < r.length; t++)if ("arrows" === r[t].name) {
                if (null != r[t].value.to) d.arrows.to = t;
                else {
                    if (null == r[t].value.from) throw lp("Invalid value of arrows");
                    d.arrows.from = t;
                }
            } else "dir" === r[t].name && (d.dir = t);
            var l, c, u = r[d.dir].value;
            if (!Hd(s).call(s, "arrows")) {
                if ("both" === u) r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        to: {
                            enabled: !0
                        }
                    }
                }), d.arrows.to = r.length - 1, r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        from: {
                            enabled: !0
                        }
                    }
                }), d.arrows.from = r.length - 1;
                else if ("forward" === u) r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        to: {
                            enabled: !0
                        }
                    }
                }), d.arrows.to = r.length - 1;
                else if ("back" === u) r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        from: {
                            enabled: !0
                        }
                    }
                }), d.arrows.from = r.length - 1;
                else {
                    if ("none" !== u) throw lp('Invalid dir type "' + u + '"');
                    r.push({
                        attr: r[d.dir].attr,
                        name: "arrows",
                        value: ""
                    }), d.arrows.to = r.length - 1;
                }
            }
            if ("both" === u) d.arrows.to && d.arrows.from ? (c = r[d.arrows.to].value.to.type, l = r[d.arrows.from].value.from.type, r[d.arrows.to] = {
                attr: r[d.arrows.to].attr,
                name: r[d.arrows.to].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }, Od(r).call(r, d.arrows.from, 1)) : d.arrows.to ? (c = r[d.arrows.to].value.to.type, l = "arrow", r[d.arrows.to] = {
                attr: r[d.arrows.to].attr,
                name: r[d.arrows.to].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }) : d.arrows.from && (c = "arrow", l = r[d.arrows.from].value.from.type, r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            });
            else if ("back" === u) d.arrows.to && d.arrows.from ? (c = "", l = r[d.arrows.from].value.from.type, r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }) : d.arrows.to ? (c = "", l = "arrow", d.arrows.from = d.arrows.to, r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }) : d.arrows.from && (c = "", l = r[d.arrows.from].value.from.type, r[d.arrows.to] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }), r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    from: {
                        enabled: !0,
                        type: r[d.arrows.from].value.from.type
                    }
                }
            };
            else if ("none" === u) {
                var f;
                r[f = d.arrows.to ? d.arrows.to : d.arrows.from] = {
                    attr: r[f].attr,
                    name: r[f].name,
                    value: ""
                };
            } else {
                if ("forward" !== u) throw lp('Invalid dir type "' + u + '"');
                d.arrows.to && d.arrows.from || d.arrows.to ? (c = r[d.arrows.to].value.to.type, l = "", r[d.arrows.to] = {
                    attr: r[d.arrows.to].attr,
                    name: r[d.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: c
                        },
                        from: {
                            enabled: !0,
                            type: l
                        }
                    }
                }) : d.arrows.from && (c = "arrow", l = "", d.arrows.to = d.arrows.from, r[d.arrows.to] = {
                    attr: r[d.arrows.to].attr,
                    name: r[d.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: c
                        },
                        from: {
                            enabled: !0,
                            type: l
                        }
                    }
                }), r[d.arrows.to] = {
                    attr: r[d.arrows.to].attr,
                    name: r[d.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: r[d.arrows.to].value.to.type
                        }
                    }
                };
            }
            Od(r).call(r, d.dir, 1);
        }
        if (Hd(s).call(s, "penwidth")) {
            var p = [];
            for(e = r.length, t = 0; t < e; t++)"width" !== r[t].name && ("penwidth" === r[t].name && (r[t].name = "width"), p.push(r[t]));
            r = p;
        }
        for(e = r.length, t = 0; t < e; t++)tp(r[t].attr, r[t].name, r[t].value);
        return i;
    }
    function lp(t) {
        return new SyntaxError(t + ', got "' + cp(Gf, 30) + '" (char ' + Yf + ")");
    }
    function cp(t, e) {
        return t.length <= e ? t : t.substr(0, 27) + "...";
    }
    function up(t, e, i) {
        for(var o = e.split("."), n = o.pop(), r = t, s = 0; s < o.length; s++){
            var a = o[s];
            a in r || (r[a] = {
            }), r = r[a];
        }
        return r[n] = i, t;
    }
    function fp(t, e39) {
        var i = {
        };
        for(var o in t)if (t.hasOwnProperty(o)) {
            var n = e39[o];
            Hh(n) ? nd(n).call(n, function(e) {
                up(i, e, t[o]);
            }) : up(i, "string" == typeof n ? n : o, t[o]);
        }
        return i;
    }
    function pp(t66) {
        var e40, i20 = Af(t66), o = {
            nodes: [],
            edges: [],
            options: {
            }
        };
        i20.nodes && nd(e40 = i20.nodes).call(e40, function(t) {
            var e = {
                id: t.id,
                label: String(t.label || t.id)
            };
            Jf(e, fp(t.attr, Rf)), e.image && (e.shape = "image"), o.nodes.push(e);
        });
        if (i20.edges) {
            var n5, r = function(t) {
                var e = {
                    from: t.from,
                    to: t.to
                };
                return Jf(e, fp(t.attr, jf)), null == e.arrows && "->" === t.type && (e.arrows = "to"), e;
            };
            nd(n5 = i20.edges).call(n5, function(t67) {
                var e41, i21, n6, s4, a, h, d;
                (e41 = t67.from instanceof Object ? t67.from.nodes : {
                    id: t67.from
                }, i21 = t67.to instanceof Object ? t67.to.nodes : {
                    id: t67.to
                }, t67.from instanceof Object && t67.from.edges) && nd(n6 = t67.from.edges).call(n6, function(t) {
                    var e = r(t);
                    o.edges.push(e);
                });
                (a = i21, h = function(e, i) {
                    var n = op(o, e.id, i.id, t67.type, t67.attr), s = r(n);
                    o.edges.push(s);
                }, Hh(s4 = e41) ? nd(s4).call(s4, function(t) {
                    Hh(a) ? nd(a).call(a, function(e) {
                        h(t, e);
                    }) : h(t, a);
                }) : Hh(a) ? nd(a).call(a, function(t) {
                    h(s4, t);
                }) : h(s4, a), t67.to instanceof Object && t67.to.edges) && nd(d = t67.to.edges).call(d, function(t) {
                    var e = r(t);
                    o.edges.push(e);
                });
            });
        }
        return i20.attr && (o.options = i20.attr), o;
    }
    var vp = Object.freeze({
        __proto__: null,
        parseDOT: Af,
        DOTToGraph: pp
    });
    function gp(t68, e42) {
        var i, o = {
            edges: {
                inheritColor: !1
            },
            nodes: {
                fixed: !1,
                parseColor: !1
            }
        };
        null != e42 && (null != e42.fixed && (o.nodes.fixed = e42.fixed), null != e42.parseColor && (o.nodes.parseColor = e42.parseColor), null != e42.inheritColor && (o.edges.inheritColor = e42.inheritColor));
        var n = t68.edges, r = Uh(n).call(n, function(t) {
            var e = {
                from: t.source,
                id: t.id,
                to: t.target
            };
            return null != t.attributes && (e.attributes = t.attributes), null != t.label && (e.label = t.label), null != t.attributes && null != t.attributes.title && (e.title = t.attributes.title), "Directed" === t.type && (e.arrows = "to"), t.color && !1 === o.edges.inheritColor && (e.color = t.color), e;
        });
        return {
            nodes: Uh(i = t68.nodes).call(i, function(t) {
                var e = {
                    id: t.id,
                    fixed: o.nodes.fixed && null != t.x && null != t.y
                };
                return null != t.attributes && (e.attributes = t.attributes), null != t.label && (e.label = t.label), null != t.size && (e.size = t.size), null != t.attributes && null != t.attributes.title && (e.title = t.attributes.title), null != t.title && (e.title = t.title), null != t.x && (e.x = t.x), null != t.y && (e.y = t.y), null != t.color && (!0 === o.nodes.parseColor ? e.color = t.color : e.color = {
                    background: t.color,
                    border: t.color,
                    highlight: {
                        background: t.color,
                        border: t.color
                    },
                    hover: {
                        background: t.color,
                        border: t.color
                    }
                }), e;
            }),
            edges: r
        };
    }
    var yp = Object.freeze({
        __proto__: null,
        parseGephi: gp
    }), mp = Object.freeze({
        __proto__: null,
        en: {
            addDescription: "Click in an empty space to place a new node.",
            addEdge: "Add Edge",
            addNode: "Add Node",
            back: "Back",
            close: "Close",
            createEdgeError: "Cannot link edges to a cluster.",
            del: "Delete selected",
            deleteClusterError: "Clusters cannot be deleted.",
            edgeDescription: "Click on a node and drag the edge to another node to connect them.",
            edit: "Edit",
            editClusterError: "Clusters cannot be edited.",
            editEdge: "Edit Edge",
            editEdgeDescription: "Click on the control points and drag them to a node to connect to it.",
            editNode: "Edit Node"
        },
        de: {
            addDescription: "Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.",
            addEdge: "Kante hinzufügen",
            addNode: "Knoten hinzufügen",
            back: "Zurück",
            close: "Schließen",
            createEdgeError: "Es ist nicht möglich, Kanten mit Clustern zu verbinden.",
            del: "Lösche Auswahl",
            deleteClusterError: "Cluster können nicht gelöscht werden.",
            edgeDescription: "Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.",
            edit: "Editieren",
            editClusterError: "Cluster können nicht editiert werden.",
            editEdge: "Kante editieren",
            editEdgeDescription: "Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.",
            editNode: "Knoten editieren"
        },
        es: {
            addDescription: "Haga clic en un lugar vacío para colocar un nuevo nodo.",
            addEdge: "Añadir arista",
            addNode: "Añadir nodo",
            back: "Atrás",
            close: "Cerrar",
            createEdgeError: "No se puede conectar una arista a un grupo.",
            del: "Eliminar selección",
            deleteClusterError: "No es posible eliminar grupos.",
            edgeDescription: "Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.",
            edit: "Editar",
            editClusterError: "No es posible editar grupos.",
            editEdge: "Editar arista",
            editEdgeDescription: "Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.",
            editNode: "Editar nodo"
        },
        it: {
            addDescription: "Clicca per aggiungere un nuovo nodo",
            addEdge: "Aggiungi un vertice",
            addNode: "Aggiungi un nodo",
            back: "Indietro",
            close: "Chiudere",
            createEdgeError: "Non si possono collegare vertici ad un cluster",
            del: "Cancella la selezione",
            deleteClusterError: "I cluster non possono essere cancellati",
            edgeDescription: "Clicca su un nodo e trascinalo ad un altro nodo per connetterli.",
            edit: "Modifica",
            editClusterError: "I clusters non possono essere modificati.",
            editEdge: "Modifica il vertice",
            editEdgeDescription: "Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.",
            editNode: "Modifica il nodo"
        },
        nl: {
            addDescription: "Klik op een leeg gebied om een nieuwe node te maken.",
            addEdge: "Link toevoegen",
            addNode: "Node toevoegen",
            back: "Terug",
            close: "Sluiten",
            createEdgeError: "Kan geen link maken naar een cluster.",
            del: "Selectie verwijderen",
            deleteClusterError: "Clusters kunnen niet worden verwijderd.",
            edgeDescription: "Klik op een node en sleep de link naar een andere node om ze te verbinden.",
            edit: "Wijzigen",
            editClusterError: "Clusters kunnen niet worden aangepast.",
            editEdge: "Link wijzigen",
            editEdgeDescription: "Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.",
            editNode: "Node wijzigen"
        },
        pt: {
            addDescription: "Clique em um espaço em branco para adicionar um novo nó",
            addEdge: "Adicionar aresta",
            addNode: "Adicionar nó",
            back: "Voltar",
            close: "Fechar",
            createEdgeError: "Não foi possível linkar arestas a um cluster.",
            del: "Remover selecionado",
            deleteClusterError: "Clusters não puderam ser removidos.",
            edgeDescription: "Clique em um nó e arraste a aresta até outro nó para conectá-los",
            edit: "Editar",
            editClusterError: "Clusters não puderam ser editados.",
            editEdge: "Editar aresta",
            editEdgeDescription: "Clique nos pontos de controle e os arraste para um nó para conectá-los",
            editNode: "Editar nó"
        },
        ru: {
            addDescription: "Кликните в свободное место, чтобы добавить новый узел.",
            addEdge: "Добавить ребро",
            addNode: "Добавить узел",
            back: "Назад",
            close: "Закрывать",
            createEdgeError: "Невозможно соединить ребра в кластер.",
            del: "Удалить выбранное",
            deleteClusterError: "Кластеры не могут быть удалены",
            edgeDescription: "Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.",
            edit: "Редактировать",
            editClusterError: "Кластеры недоступны для редактирования.",
            editEdge: "Редактировать ребро",
            editEdgeDescription: "Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.",
            editNode: "Редактировать узел"
        },
        cn: {
            addDescription: "单击空白处放置新节点。",
            addEdge: "添加连接线",
            addNode: "添加节点",
            back: "返回",
            close: "關閉",
            createEdgeError: "无法将连接线连接到群集。",
            del: "删除选定",
            deleteClusterError: "无法删除群集。",
            edgeDescription: "单击某个节点并将该连接线拖动到另一个节点以连接它们。",
            edit: "编辑",
            editClusterError: "无法编辑群集。",
            editEdge: "编辑连接线",
            editEdgeDescription: "单击控制节点并将它们拖到节点上连接。",
            editNode: "编辑节点"
        },
        uk: {
            addDescription: "Kлікніть на вільне місце, щоб додати новий вузол.",
            addEdge: "Додати край",
            addNode: "Додати вузол",
            back: "Назад",
            close: "Закрити",
            createEdgeError: "Не можливо об'єднати краї в групу.",
            del: "Видалити обране",
            deleteClusterError: "Групи не можуть бути видалені.",
            edgeDescription: "Клікніть на вузол і перетягніть край до іншого вузла, щоб їх з'єднати.",
            edit: "Редагувати",
            editClusterError: "Групи недоступні для редагування.",
            editEdge: "Редагувати край",
            editEdgeDescription: "Клікніть на контрольні точки і перетягніть їх у вузол, щоб підключитися до нього.",
            editNode: "Редагувати вузол"
        },
        fr: {
            addDescription: "Cliquez dans un endroit vide pour placer un nœud.",
            addEdge: "Ajouter un lien",
            addNode: "Ajouter un nœud",
            back: "Retour",
            close: "Fermer",
            createEdgeError: "Impossible de créer un lien vers un cluster.",
            del: "Effacer la sélection",
            deleteClusterError: "Les clusters ne peuvent pas être effacés.",
            edgeDescription: "Cliquez sur un nœud et glissez le lien vers un autre nœud pour les connecter.",
            edit: "Éditer",
            editClusterError: "Les clusters ne peuvent pas être édités.",
            editEdge: "Éditer le lien",
            editEdgeDescription: "Cliquez sur les points de contrôle et glissez-les pour connecter un nœud.",
            editNode: "Éditer le nœud"
        },
        cs: {
            addDescription: "Kluknutím do prázdného prostoru můžete přidat nový vrchol.",
            addEdge: "Přidat hranu",
            addNode: "Přidat vrchol",
            back: "Zpět",
            close: "Zavřít",
            createEdgeError: "Nelze připojit hranu ke shluku.",
            del: "Smazat výběr",
            deleteClusterError: "Nelze mazat shluky.",
            edgeDescription: "Přetažením z jednoho vrcholu do druhého můžete spojit tyto vrcholy novou hranou.",
            edit: "Upravit",
            editClusterError: "Nelze upravovat shluky.",
            editEdge: "Upravit hranu",
            editEdgeDescription: "Přetažením kontrolního vrcholu hrany ji můžete připojit k jinému vrcholu.",
            editNode: "Upravit vrchol"
        }
    });
    var bp = function() {
        function t69() {
            Ra(this, t69), this.NUM_ITERATIONS = 4, this.image = new Image, this.canvas = document.createElement("canvas");
        }
        return Ha(t69, [
            {
                key: "init",
                value: function() {
                    if (!this.initialized()) {
                        this.src = this.image.src;
                        var t = this.image.width, e = this.image.height;
                        this.width = t, this.height = e;
                        var i = Math.floor(e / 2), o = Math.floor(e / 4), n = Math.floor(e / 8), r = Math.floor(e / 16), s = Math.floor(t / 2), a = Math.floor(t / 4), h = Math.floor(t / 8), d = Math.floor(t / 16);
                        this.canvas.width = 3 * a, this.canvas.height = i, this.coordinates = [
                            [
                                0,
                                0,
                                s,
                                i
                            ],
                            [
                                s,
                                0,
                                a,
                                o
                            ],
                            [
                                s,
                                o,
                                h,
                                n
                            ],
                            [
                                5 * h,
                                o,
                                d,
                                r
                            ]
                        ], this._fillMipMap();
                    }
                }
            },
            {
                key: "initialized",
                value: function() {
                    return void 0 !== this.coordinates;
                }
            },
            {
                key: "_fillMipMap",
                value: function() {
                    var t = this.canvas.getContext("2d"), e = this.coordinates[0];
                    t.drawImage(this.image, e[0], e[1], e[2], e[3]);
                    for(var i = 1; i < this.NUM_ITERATIONS; i++){
                        var o = this.coordinates[i - 1], n = this.coordinates[i];
                        t.drawImage(this.canvas, o[0], o[1], o[2], o[3], n[0], n[1], n[2], n[3]);
                    }
                }
            },
            {
                key: "drawImageAtPosition",
                value: function(t, e, i, o, n, r) {
                    if (this.initialized()) {
                        if (e > 2) {
                            e *= 0.5;
                            for(var s = 0; e > 2 && s < this.NUM_ITERATIONS;)e *= 0.5, s += 1;
                            s >= this.NUM_ITERATIONS && (s = this.NUM_ITERATIONS - 1);
                            var a = this.coordinates[s];
                            t.drawImage(this.canvas, a[0], a[1], a[2], a[3], i, o, n, r);
                        } else t.drawImage(this.image, i, o, n, r);
                    }
                }
            }
        ]), t69;
    }(), wp = function() {
        function t70(e) {
            Ra(this, t70), this.images = {
            }, this.imageBroken = {
            }, this.callback = e;
        }
        return Ha(t70, [
            {
                key: "_tryloadBrokenUrl",
                value: function(t, e, i) {
                    void 0 !== t && void 0 !== i && (void 0 !== e ? (i.image.onerror = function() {
                        console.error("Could not load brokenImage:", e);
                    }, i.image.src = e) : console.warn("No broken url image defined"));
                }
            },
            {
                key: "_redrawWithImage",
                value: function(t) {
                    this.callback && this.callback(t);
                }
            },
            {
                key: "load",
                value: function(t, e) {
                    var i = this, o = this.images[t];
                    if (o) return o;
                    var n = new bp;
                    return this.images[t] = n, n.image.onload = function() {
                        i._fixImageCoordinates(n.image), n.init(), i._redrawWithImage(n);
                    }, n.image.onerror = function() {
                        console.error("Could not load image:", t), i._tryloadBrokenUrl(t, e, n);
                    }, n.image.src = t, n;
                }
            },
            {
                key: "_fixImageCoordinates",
                value: function(t) {
                    0 === t.width && (document.body.appendChild(t), t.width = t.offsetWidth, t.height = t.offsetHeight, document.body.removeChild(t));
                }
            }
        ]), t70;
    }(), kp = {
        exports: {
        }
    }, _p = !s1(function() {
        return Object.isExtensible(Object.preventExtensions({
        }));
    }), xp = ue, Ep = Te, Op = E1, Cp = et, Sp = Xt.f, Tp = Cr, Mp = Mr, Pp = _p, Dp = !1, Bp = nt("meta"), Ip = 0, zp = Object.isExtensible || function() {
        return !0;
    }, Fp = function(t) {
        Sp(t, Bp, {
            value: {
                objectID: "O" + Ip++,
                weakData: {
                }
            }
        });
    }, Np = kp.exports = {
        enable: function() {
            Np.enable = function() {
            }, Dp = !0;
            var t = Tp.f, e = [].splice, i22 = {
            };
            i22[Bp] = 1, t(i22).length && (Tp.f = function(i) {
                for(var o = t(i), n = 0, r = o.length; n < r; n++)if (o[n] === Bp) {
                    e.call(o, n, 1);
                    break;
                }
                return o;
            }, xp({
                target: "Object",
                stat: !0,
                forced: !0
            }, {
                getOwnPropertyNames: Mp.f
            }));
        },
        fastKey: function(t, e) {
            if (!Op(t)) return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;
            if (!Cp(t, Bp)) {
                if (!zp(t)) return "F";
                if (!e) return "E";
                Fp(t);
            }
            return t[Bp].objectID;
        },
        getWeakData: function(t, e) {
            if (!Cp(t, Bp)) {
                if (!zp(t)) return !0;
                if (!e) return !1;
                Fp(t);
            }
            return t[Bp].weakData;
        },
        onFreeze: function(t) {
            return Pp && Dp && zp(t) && !Cp(t, Bp) && Fp(t), t;
        }
    };
    Ep[Bp] = !0;
    var Ap = Kt, Rp = An, jp = me, Lp = Yt, Hp = Un, Wp = Dn, Vp = function(t, e) {
        this.stopped = t, this.result = e;
    }, qp = function(t71, e, i) {
        var o, n, r, s, a, h, d, l = i && i.that, c = !(!i || !i.AS_ENTRIES), u = !(!i || !i.IS_ITERATOR), f = !(!i || !i.INTERRUPTED), p = Lp(e, l, 1 + c + f), v = function(t) {
            return o && Wp(o), new Vp(!0, t);
        }, g = function(t) {
            return c ? (Ap(t), f ? p(t[0], t[1], v) : p(t[0], t[1])) : f ? p(t, v) : p(t);
        };
        if (u) o = t71;
        else {
            if ("function" != typeof (n = Hp(t71))) throw TypeError("Target is not iterable");
            if (Rp(n)) {
                for(r = 0, s = jp(t71.length); s > r; r++)if ((a = g(t71[r])) && a instanceof Vp) return a;
                return new Vp(!1);
            }
            o = n.call(t71);
        }
        for(h = o.next; !(d = h.call(o)).done;){
            try {
                a = g(d.value);
            } catch (t) {
                throw Wp(o), t;
            }
            if ("object" == typeof a && a && a instanceof Vp) return a;
        }
        return new Vp(!1);
    }, Up = function(t, e, i) {
        if (!(t instanceof e)) throw TypeError("Incorrect " + (i ? i + " " : "") + "invocation");
        return t;
    }, Yp = ue, Xp = n1, Gp = kp.exports, Kp = s1, $p = oe, Zp = qp, Qp = Up, Jp = E1, tv = Xo, ev = Xt.f, iv = Jr.forEach, ov = a1, nv = Zi.set, rv = Zi.getterFor, sv = function(t72, e43, i23) {
        var o6, n7 = -1 !== t72.indexOf("Map"), r = -1 !== t72.indexOf("Weak"), s5 = n7 ? "set" : "add", a = Xp[t72], h = a && a.prototype, d = {
        };
        if (ov && "function" == typeof a && (r || h.forEach && !Kp(function() {
            (new a).entries().next();
        }))) {
            o6 = e43(function(e, i) {
                nv(Qp(e, o6, t72), {
                    type: t72,
                    collection: new a
                }), null != i && Zp(i, e[s5], {
                    that: e,
                    AS_ENTRIES: n7
                });
            });
            var l = rv(t72);
            iv([
                "add",
                "clear",
                "delete",
                "forEach",
                "get",
                "has",
                "set",
                "keys",
                "values",
                "entries"
            ], function(t) {
                var e = "add" == t || "set" == t;
                !(t in h) || r && "clear" == t || $p(o6.prototype, t, function(i, o) {
                    var n = l(this).collection;
                    if (!e && r && !Jp(i)) return "get" == t && void 0;
                    var s = n[t](0 === i ? 0 : i, o);
                    return e ? this : s;
                });
            }), r || ev(o6.prototype, "size", {
                configurable: !0,
                get: function() {
                    return l(this).collection.size;
                }
            });
        } else o6 = i23.getConstructor(e43, t72, n7, s5), Gp.enable();
        return tv(o6, t72, !1, !0), d[t72] = o6, Yp({
            global: !0,
            forced: !0
        }, d), r || i23.setStrong(o6, t72, n7), o6;
    }, av = an, hv = function(t, e, i) {
        for(var o in e)i && i.unsafe && t[o] ? t[o] = e[o] : av(t, o, e[o], i);
        return t;
    }, dv = M1, lv = Xt, cv = a1, uv = pt("species"), fv = Xt.f, pv = Do, vv = hv, gv = Yt, yv = Up, mv = qp, bv = _n, wv = function(t) {
        var e = dv(t), i = lv.f;
        cv && e && !e[uv] && i(e, uv, {
            configurable: !0,
            get: function() {
                return this;
            }
        });
    }, kv = a1, _v = kp.exports.fastKey, xv = Zi.set, Ev = Zi.getterFor, Ov = {
        getConstructor: function(t73, e44, i24, o7) {
            var n8 = t73(function(t, r) {
                yv(t, n8, e44), xv(t, {
                    type: e44,
                    index: pv(null),
                    first: void 0,
                    last: void 0,
                    size: 0
                }), kv || (t.size = 0), null != r && mv(r, t[o7], {
                    that: t,
                    AS_ENTRIES: i24
                });
            }), r3 = Ev(e44), s6 = function(t, e, i) {
                var o, n, s = r3(t), h = a(t, e);
                return h ? h.value = i : (s.last = h = {
                    index: n = _v(e, !0),
                    key: e,
                    value: i,
                    previous: o = s.last,
                    next: void 0,
                    removed: !1
                }, s.first || (s.first = h), o && (o.next = h), kv ? s.size++ : t.size++, "F" !== n && (s.index[n] = h)), t;
            }, a = function(t, e) {
                var i, o = r3(t), n = _v(e);
                if ("F" !== n) return o.index[n];
                for(i = o.first; i; i = i.next)if (i.key == e) return i;
            };
            return vv(n8.prototype, {
                clear: function() {
                    for(var t = r3(this), e = t.index, i = t.first; i;)i.removed = !0, i.previous && (i.previous = i.previous.next = void 0), delete e[i.index], i = i.next;
                    t.first = t.last = void 0, kv ? t.size = 0 : this.size = 0;
                },
                delete: function(t) {
                    var e = this, i = r3(e), o = a(e, t);
                    if (o) {
                        var n = o.next, s = o.previous;
                        delete i.index[o.index], o.removed = !0, s && (s.next = n), n && (n.previous = s), i.first == o && (i.first = n), i.last == o && (i.last = s), kv ? i.size-- : e.size--;
                    }
                    return !!o;
                },
                forEach: function(t) {
                    for(var e, i = r3(this), o = gv(t, arguments.length > 1 ? arguments[1] : void 0, 3); e = e ? e.next : i.first;)for(o(e.value, e.key, this); e && e.removed;)e = e.previous;
                },
                has: function(t) {
                    return !!a(this, t);
                }
            }), vv(n8.prototype, i24 ? {
                get: function(t) {
                    var e = a(this, t);
                    return e && e.value;
                },
                set: function(t, e) {
                    return s6(this, 0 === t ? 0 : t, e);
                }
            } : {
                add: function(t) {
                    return s6(this, t = 0 === t ? 0 : t, t);
                }
            }), kv && fv(n8.prototype, "size", {
                get: function() {
                    return r3(this).size;
                }
            }), n8;
        },
        setStrong: function(t74, e45, i25) {
            var o = e45 + " Iterator", n = Ev(e45), r = Ev(o);
            bv(t74, e45, function(t, e) {
                xv(this, {
                    type: o,
                    target: t,
                    state: n(t),
                    kind: e,
                    last: void 0
                });
            }, function() {
                for(var t = r(this), e = t.kind, i = t.last; i && i.removed;)i = i.previous;
                return t.target && (t.last = i = i ? i.next : t.state.first) ? "keys" == e ? {
                    value: i.key,
                    done: !1
                } : "values" == e ? {
                    value: i.value,
                    done: !1
                } : {
                    value: [
                        i.key,
                        i.value
                    ],
                    done: !1
                } : (t.target = void 0, {
                    value: void 0,
                    done: !0
                });
            }, i25 ? "entries" : "values", !i25, !0), wv(e45);
        }
    };
    sv("Map", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, Ov);
    var Cv = O1.Map, Sv = function() {
        function t75() {
            Ra(this, t75), this.clear(), this._defaultIndex = 0, this._groupIndex = 0, this._defaultGroups = [
                {
                    border: "#2B7CE9",
                    background: "#97C2FC",
                    highlight: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    },
                    hover: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    }
                },
                {
                    border: "#FFA500",
                    background: "#FFFF00",
                    highlight: {
                        border: "#FFA500",
                        background: "#FFFFA3"
                    },
                    hover: {
                        border: "#FFA500",
                        background: "#FFFFA3"
                    }
                },
                {
                    border: "#FA0A10",
                    background: "#FB7E81",
                    highlight: {
                        border: "#FA0A10",
                        background: "#FFAFB1"
                    },
                    hover: {
                        border: "#FA0A10",
                        background: "#FFAFB1"
                    }
                },
                {
                    border: "#41A906",
                    background: "#7BE141",
                    highlight: {
                        border: "#41A906",
                        background: "#A1EC76"
                    },
                    hover: {
                        border: "#41A906",
                        background: "#A1EC76"
                    }
                },
                {
                    border: "#E129F0",
                    background: "#EB7DF4",
                    highlight: {
                        border: "#E129F0",
                        background: "#F0B3F5"
                    },
                    hover: {
                        border: "#E129F0",
                        background: "#F0B3F5"
                    }
                },
                {
                    border: "#7C29F0",
                    background: "#AD85E4",
                    highlight: {
                        border: "#7C29F0",
                        background: "#D3BDF0"
                    },
                    hover: {
                        border: "#7C29F0",
                        background: "#D3BDF0"
                    }
                },
                {
                    border: "#C37F00",
                    background: "#FFA807",
                    highlight: {
                        border: "#C37F00",
                        background: "#FFCA66"
                    },
                    hover: {
                        border: "#C37F00",
                        background: "#FFCA66"
                    }
                },
                {
                    border: "#4220FB",
                    background: "#6E6EFD",
                    highlight: {
                        border: "#4220FB",
                        background: "#9B9BFD"
                    },
                    hover: {
                        border: "#4220FB",
                        background: "#9B9BFD"
                    }
                },
                {
                    border: "#FD5A77",
                    background: "#FFC0CB",
                    highlight: {
                        border: "#FD5A77",
                        background: "#FFD1D9"
                    },
                    hover: {
                        border: "#FD5A77",
                        background: "#FFD1D9"
                    }
                },
                {
                    border: "#4AD63A",
                    background: "#C2FABC",
                    highlight: {
                        border: "#4AD63A",
                        background: "#E6FFE3"
                    },
                    hover: {
                        border: "#4AD63A",
                        background: "#E6FFE3"
                    }
                },
                {
                    border: "#990000",
                    background: "#EE0000",
                    highlight: {
                        border: "#BB0000",
                        background: "#FF3333"
                    },
                    hover: {
                        border: "#BB0000",
                        background: "#FF3333"
                    }
                },
                {
                    border: "#FF6000",
                    background: "#FF6000",
                    highlight: {
                        border: "#FF6000",
                        background: "#FF6000"
                    },
                    hover: {
                        border: "#FF6000",
                        background: "#FF6000"
                    }
                },
                {
                    border: "#97C2FC",
                    background: "#2B7CE9",
                    highlight: {
                        border: "#D2E5FF",
                        background: "#2B7CE9"
                    },
                    hover: {
                        border: "#D2E5FF",
                        background: "#2B7CE9"
                    }
                },
                {
                    border: "#399605",
                    background: "#255C03",
                    highlight: {
                        border: "#399605",
                        background: "#255C03"
                    },
                    hover: {
                        border: "#399605",
                        background: "#255C03"
                    }
                },
                {
                    border: "#B70054",
                    background: "#FF007E",
                    highlight: {
                        border: "#B70054",
                        background: "#FF007E"
                    },
                    hover: {
                        border: "#B70054",
                        background: "#FF007E"
                    }
                },
                {
                    border: "#AD85E4",
                    background: "#7C29F0",
                    highlight: {
                        border: "#D3BDF0",
                        background: "#7C29F0"
                    },
                    hover: {
                        border: "#D3BDF0",
                        background: "#7C29F0"
                    }
                },
                {
                    border: "#4557FA",
                    background: "#000EA1",
                    highlight: {
                        border: "#6E6EFD",
                        background: "#000EA1"
                    },
                    hover: {
                        border: "#6E6EFD",
                        background: "#000EA1"
                    }
                },
                {
                    border: "#FFC0CB",
                    background: "#FD5A77",
                    highlight: {
                        border: "#FFD1D9",
                        background: "#FD5A77"
                    },
                    hover: {
                        border: "#FFD1D9",
                        background: "#FD5A77"
                    }
                },
                {
                    border: "#C2FABC",
                    background: "#74D66A",
                    highlight: {
                        border: "#E6FFE3",
                        background: "#74D66A"
                    },
                    hover: {
                        border: "#E6FFE3",
                        background: "#74D66A"
                    }
                },
                {
                    border: "#EE0000",
                    background: "#990000",
                    highlight: {
                        border: "#FF3333",
                        background: "#BB0000"
                    },
                    hover: {
                        border: "#FF3333",
                        background: "#BB0000"
                    }
                }
            ], this.options = {
            }, this.defaultOptions = {
                useDefaultGroups: !0
            }, Ke(this.options, this.defaultOptions);
        }
        return Ha(t75, [
            {
                key: "setOptions",
                value: function(t) {
                    var e = [
                        "useDefaultGroups"
                    ];
                    if (void 0 !== t) {
                        for(var i in t)if (Object.prototype.hasOwnProperty.call(t, i) && -1 === Cl(e).call(e, i)) {
                            var o = t[i];
                            this.add(i, o);
                        }
                    }
                }
            },
            {
                key: "clear",
                value: function() {
                    this._groups = new Cv, this._groupNames = [];
                }
            },
            {
                key: "get",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this._groups.get(t);
                    if (void 0 === i && e) {
                        if (!1 === this.options.useDefaultGroups && this._groupNames.length > 0) {
                            var o = this._groupIndex % this._groupNames.length;
                            ++this._groupIndex, (i = {
                            }).color = this._groups.get(this._groupNames[o]), this._groups.set(t, i);
                        } else {
                            var n = this._defaultIndex % this._defaultGroups.length;
                            this._defaultIndex++, (i = {
                            }).color = this._defaultGroups[n], this._groups.set(t, i);
                        }
                    }
                    return i;
                }
            },
            {
                key: "add",
                value: function(t, e) {
                    return this._groups.has(t) || this._groupNames.push(t), this._groups.set(t, e), e;
                }
            }
        ]), t75;
    }();
    ue({
        target: "Number",
        stat: !0
    }, {
        isNaN: function(t) {
            return t != t;
        }
    });
    var Tv = O1.Number.isNaN, Mv = n1.isFinite;
    ue({
        target: "Number",
        stat: !0
    }, {
        isFinite: Number.isFinite || function(t) {
            return "number" == typeof t && Mv(t);
        }
    });
    var Pv = O1.Number.isFinite, Dv = Jr.some;
    ue({
        target: "Array",
        proto: !0,
        forced: !Zh("some")
    }, {
        some: function(t) {
            return Dv(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Bv = oi("Array").some, Iv = Array.prototype, zv = function(t) {
        var e = t.some;
        return t === Iv || t instanceof Array && e === Iv.some ? Bv : e;
    }, Fv = gi, Nv = ll.trim, Av = n1.parseFloat, Rv = 1 / Av("\t\n\v\f\r                　\u2028\u2029\ufeff-0") != -1 / 0 ? function(t) {
        var e = Nv(Fv(t)), i = Av(e);
        return 0 === i && "-" == e.charAt(0) ? -0 : i;
    } : Av;
    ue({
        global: !0,
        forced: parseFloat != Rv
    }, {
        parseFloat: Rv
    });
    var jv = O1.parseFloat, Lv = ue, Hv = s1, Wv = Mr.f;
    Lv({
        target: "Object",
        stat: !0,
        forced: Hv(function() {
            return !Object.getOwnPropertyNames(1);
        })
    }, {
        getOwnPropertyNames: Wv
    });
    var Vv = O1.Object, qv = function(t) {
        return Vv.getOwnPropertyNames(t);
    };
    function Uv(t, e) {
        var i = [
            "node",
            "edge",
            "label"
        ], o = !0, n = Ef(e, "chosen");
        if ("boolean" == typeof n) o = n;
        else if ("object" === zh(n)) {
            if (-1 === Cl(i).call(i, t)) throw new Error("choosify: subOption '" + t + "' should be one of '" + i.join("', '") + "'");
            var r = Ef(e, [
                "chosen",
                t
            ]);
            "boolean" != typeof r && "function" != typeof r || (o = r);
        }
        return o;
    }
    function Yv(t, e, i) {
        if (t.width <= 0 || t.height <= 0) return !1;
        if (void 0 !== i) {
            var o = {
                x: e.x - i.x,
                y: e.y - i.y
            };
            if (0 !== i.angle) {
                var n = -i.angle;
                e = {
                    x: Math.cos(n) * o.x - Math.sin(n) * o.y,
                    y: Math.sin(n) * o.x + Math.cos(n) * o.y
                };
            } else e = o;
        }
        var r = t.x + t.width, s = t.y + t.width;
        return t.left < e.x && r > e.x && t.top < e.y && s > e.y;
    }
    function Xv(t) {
        return "string" == typeof t && "" !== t;
    }
    function Gv(t, e, i, o) {
        var n = o.x, r = o.y;
        if ("function" == typeof o.distanceToBorder) {
            var s = o.distanceToBorder(t, e), a = Math.sin(e) * s, h = Math.cos(e) * s;
            h === s ? (n += s, r = o.y) : a === s ? (n = o.x, r -= s) : (n += h, r -= a);
        } else o.shape.width > o.shape.height ? (n = o.x + 0.5 * o.shape.width, r = o.y - i) : (n = o.x + i, r = o.y - 0.5 * o.shape.height);
        return {
            x: n,
            y: r
        };
    }
    var Kv = oi("Array").values, $v = Ro, Zv = Array.prototype, Qv = {
        DOMTokenList: !0,
        NodeList: !0
    }, Jv = function(t) {
        var e = t.values;
        return t === Zv || t instanceof Array && e === Zv.values || Qv.hasOwnProperty($v(t)) ? Kv : e;
    }, tg = function() {
        function t76(e) {
            Ra(this, t76), this.measureText = e, this.current = 0, this.width = 0, this.height = 0, this.lines = [];
        }
        return Ha(t76, [
            {
                key: "_add",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "normal";
                    void 0 === this.lines[t] && (this.lines[t] = {
                        width: 0,
                        height: 0,
                        blocks: []
                    });
                    var o = e;
                    void 0 !== e && "" !== e || (o = " ");
                    var n = this.measureText(o, i), r = Ke({
                    }, Jv(n));
                    r.text = e, r.width = n.width, r.mod = i, void 0 !== e && "" !== e || (r.width = 0), this.lines[t].blocks.push(r), this.lines[t].width += r.width;
                }
            },
            {
                key: "curWidth",
                value: function() {
                    var t = this.lines[this.current];
                    return void 0 === t ? 0 : t.width;
                }
            },
            {
                key: "append",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal";
                    this._add(this.current, t, e);
                }
            },
            {
                key: "newLine",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal";
                    this._add(this.current, t, e), this.current++;
                }
            },
            {
                key: "determineLineHeights",
                value: function() {
                    for(var t = 0; t < this.lines.length; t++){
                        var e = this.lines[t], i = 0;
                        if (void 0 !== e.blocks) for(var o = 0; o < e.blocks.length; o++){
                            var n = e.blocks[o];
                            i < n.height && (i = n.height);
                        }
                        e.height = i;
                    }
                }
            },
            {
                key: "determineLabelSize",
                value: function() {
                    for(var t = 0, e = 0, i = 0; i < this.lines.length; i++){
                        var o = this.lines[i];
                        o.width > t && (t = o.width), e += o.height;
                    }
                    this.width = t, this.height = e;
                }
            },
            {
                key: "removeEmptyBlocks",
                value: function() {
                    for(var t = [], e = 0; e < this.lines.length; e++){
                        var i = this.lines[e];
                        if (0 !== i.blocks.length && (e !== this.lines.length - 1 || 0 !== i.width)) {
                            var o = {
                            };
                            Ke(o, i), o.blocks = [];
                            for(var n = void 0, r = [], s = 0; s < i.blocks.length; s++){
                                var a = i.blocks[s];
                                0 !== a.width ? r.push(a) : void 0 === n && (n = a);
                            }
                            0 === r.length && void 0 !== n && r.push(n), o.blocks = r, t.push(o);
                        }
                    }
                    return t;
                }
            },
            {
                key: "finalize",
                value: function() {
                    this.determineLineHeights(), this.determineLabelSize();
                    var t = this.removeEmptyBlocks();
                    return {
                        width: this.width,
                        height: this.height,
                        lines: t
                    };
                }
            }
        ]), t76;
    }(), eg = {
        "<b>": /<b>/,
        "<i>": /<i>/,
        "<code>": /<code>/,
        "</b>": /<\/b>/,
        "</i>": /<\/i>/,
        "</code>": /<\/code>/,
        "*": /\*/,
        _: /_/,
        "`": /`/,
        afterBold: /[^*]/,
        afterItal: /[^_]/,
        afterMono: /[^`]/
    }, ig = function() {
        function t77(e) {
            Ra(this, t77), this.text = e, this.bold = !1, this.ital = !1, this.mono = !1, this.spacing = !1, this.position = 0, this.buffer = "", this.modStack = [], this.blocks = [];
        }
        return Ha(t77, [
            {
                key: "mod",
                value: function() {
                    return 0 === this.modStack.length ? "normal" : this.modStack[0];
                }
            },
            {
                key: "modName",
                value: function() {
                    return 0 === this.modStack.length ? "normal" : "mono" === this.modStack[0] ? "mono" : this.bold && this.ital ? "boldital" : this.bold ? "bold" : this.ital ? "ital" : void 0;
                }
            },
            {
                key: "emitBlock",
                value: function() {
                    this.spacing && (this.add(" "), this.spacing = !1), this.buffer.length > 0 && (this.blocks.push({
                        text: this.buffer,
                        mod: this.modName()
                    }), this.buffer = "");
                }
            },
            {
                key: "add",
                value: function(t) {
                    " " === t && (this.spacing = !0), this.spacing && (this.buffer += " ", this.spacing = !1), " " != t && (this.buffer += t);
                }
            },
            {
                key: "parseWS",
                value: function(t) {
                    return !!/[ \t]/.test(t) && (this.mono ? this.add(t) : this.spacing = !0, !0);
                }
            },
            {
                key: "setTag",
                value: function(t) {
                    this.emitBlock(), this[t] = !0, this.modStack.unshift(t);
                }
            },
            {
                key: "unsetTag",
                value: function(t) {
                    this.emitBlock(), this[t] = !1, this.modStack.shift();
                }
            },
            {
                key: "parseStartTag",
                value: function(t, e) {
                    return !(this.mono || this[t] || !this.match(e)) && (this.setTag(t), !0);
                }
            },
            {
                key: "match",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this.prepareRegExp(t), o = Bh(i, 2), n = o[0], r = o[1], s = n.test(this.text.substr(this.position, r));
                    return s && e && (this.position += r - 1), s;
                }
            },
            {
                key: "parseEndTag",
                value: function(t, e, i) {
                    var o = this.mod() === t;
                    return !(!(o = "mono" === t ? o && this.mono : o && !this.mono) || !this.match(e)) && (void 0 !== i ? (this.position === this.text.length - 1 || this.match(i, !1)) && this.unsetTag(t) : this.unsetTag(t), !0);
                }
            },
            {
                key: "replace",
                value: function(t, e) {
                    return !!this.match(t) && (this.add(e), this.position += length - 1, !0);
                }
            },
            {
                key: "prepareRegExp",
                value: function(t) {
                    var e, i;
                    if (t instanceof RegExp) i = t, e = 1;
                    else {
                        var o = eg[t];
                        i = void 0 !== o ? o : new RegExp(t), e = t.length;
                    }
                    return [
                        i,
                        e
                    ];
                }
            }
        ]), t77;
    }(), og = function() {
        function t78(e, i26, o, n) {
            var r = this;
            Ra(this, t78), this.ctx = e, this.parent = i26, this.selected = o, this.hover = n;
            this.lines = new tg(function(t, i) {
                if (void 0 === t) return 0;
                var s = r.parent.getFormattingValues(e, o, n, i), a = 0;
                "" !== t && (a = r.ctx.measureText(t).width);
                return {
                    width: a,
                    values: s
                };
            });
        }
        return Ha(t78, [
            {
                key: "process",
                value: function(t) {
                    if (!Xv(t)) return this.lines.finalize();
                    var e = this.parent.fontOptions;
                    t = (t = t.replace(/\r\n/g, "\n")).replace(/\r/g, "\n");
                    var i = String(t).split("\n"), o = i.length;
                    if (e.multi) for(var n = 0; n < o; n++){
                        var r = this.splitBlocks(i[n], e.multi);
                        if (void 0 !== r) {
                            if (0 !== r.length) {
                                if (e.maxWdt > 0) for(var s = 0; s < r.length; s++){
                                    var a = r[s].mod, h = r[s].text;
                                    this.splitStringIntoLines(h, a, !0);
                                }
                                else for(var d = 0; d < r.length; d++){
                                    var l = r[d].mod, c = r[d].text;
                                    this.lines.append(c, l);
                                }
                                this.lines.newLine();
                            } else this.lines.newLine("");
                        }
                    }
                    else if (e.maxWdt > 0) for(var u = 0; u < o; u++)this.splitStringIntoLines(i[u]);
                    else for(var f = 0; f < o; f++)this.lines.newLine(i[f]);
                    return this.lines.finalize();
                }
            },
            {
                key: "decodeMarkupSystem",
                value: function(t) {
                    var e = "none";
                    return "markdown" === t || "md" === t ? e = "markdown" : !0 !== t && "html" !== t || (e = "html"), e;
                }
            },
            {
                key: "splitHtmlBlocks",
                value: function(t79) {
                    for(var e = new ig(t79), i = function(t) {
                        return !!/&/.test(t) && (e.replace(e.text, "&lt;", "<") || e.replace(e.text, "&amp;", "&") || e.add("&"), !0);
                    }; e.position < e.text.length;){
                        var o = e.text.charAt(e.position);
                        e.parseWS(o) || /</.test(o) && (e.parseStartTag("bold", "<b>") || e.parseStartTag("ital", "<i>") || e.parseStartTag("mono", "<code>") || e.parseEndTag("bold", "</b>") || e.parseEndTag("ital", "</i>") || e.parseEndTag("mono", "</code>")) || i(o) || e.add(o), e.position++;
                    }
                    return e.emitBlock(), e.blocks;
                }
            },
            {
                key: "splitMarkdownBlocks",
                value: function(t80) {
                    for(var e = this, i = new ig(t80), o = !0, n = function(t) {
                        return !!/\\/.test(t) && (i.position < e.text.length + 1 && (i.position++, t = e.text.charAt(i.position), / \t/.test(t) ? i.spacing = !0 : (i.add(t), o = !1)), !0);
                    }; i.position < i.text.length;){
                        var r = i.text.charAt(i.position);
                        i.parseWS(r) || n(r) || (o || i.spacing) && (i.parseStartTag("bold", "*") || i.parseStartTag("ital", "_") || i.parseStartTag("mono", "`")) || i.parseEndTag("bold", "*", "afterBold") || i.parseEndTag("ital", "_", "afterItal") || i.parseEndTag("mono", "`", "afterMono") || (i.add(r), o = !1), i.position++;
                    }
                    return i.emitBlock(), i.blocks;
                }
            },
            {
                key: "splitBlocks",
                value: function(t, e) {
                    var i = this.decodeMarkupSystem(e);
                    return "none" === i ? [
                        {
                            text: t,
                            mod: "normal"
                        }
                    ] : "markdown" === i ? this.splitMarkdownBlocks(t) : "html" === i ? this.splitHtmlBlocks(t) : void 0;
                }
            },
            {
                key: "overMaxWidth",
                value: function(t) {
                    var e = this.ctx.measureText(t).width;
                    return this.lines.curWidth() + e > this.parent.fontOptions.maxWdt;
                }
            },
            {
                key: "getLongestFit",
                value: function(t) {
                    for(var e = "", i = 0; i < t.length;){
                        var o = e + ("" === e ? "" : " ") + t[i];
                        if (this.overMaxWidth(o)) break;
                        e = o, i++;
                    }
                    return i;
                }
            },
            {
                key: "getLongestFitWord",
                value: function(t) {
                    for(var e = 0; e < t.length && !this.overMaxWidth(Lh(t).call(t, 0, e));)e++;
                    return e;
                }
            },
            {
                key: "splitStringIntoLines",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal", i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    this.parent.getFormattingValues(this.ctx, this.selected, this.hover, e);
                    for(var o = (t = (t = t.replace(/^( +)/g, "$1\r")).replace(/([^\r][^ ]*)( +)/g, "$1\r$2\r")).split("\r"); o.length > 0;){
                        var n = this.getLongestFit(o);
                        if (0 === n) {
                            var r = o[0], s = this.getLongestFitWord(r);
                            this.lines.newLine(Lh(r).call(r, 0, s), e), o[0] = Lh(r).call(r, s);
                        } else {
                            var a = n;
                            " " === o[n - 1] ? n-- : " " === o[a] && a++;
                            var h = Lh(o).call(o, 0, n).join("");
                            n == o.length && i ? this.lines.append(h, e) : this.lines.newLine(h, e), o = Lh(o).call(o, a);
                        }
                    }
                }
            }
        ]), t78;
    }(), ng = [
        "bold",
        "ital",
        "boldital",
        "mono"
    ], rg = function() {
        function t81(e, i) {
            var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            Ra(this, t81), this.body = e, this.pointToSelf = !1, this.baseSize = void 0, this.fontOptions = {
            }, this.setOptions(i), this.size = {
                top: 0,
                left: 0,
                width: 0,
                height: 0,
                yLine: 0
            }, this.isEdgeLabel = o;
        }
        return Ha(t81, [
            {
                key: "setOptions",
                value: function(t) {
                    if (this.elementOptions = t, this.initFontOptions(t.font), Xv(t.label) ? this.labelDirty = !0 : t.label = void 0, void 0 !== t.font && null !== t.font) {
                        if ("string" == typeof t.font) this.baseSize = this.fontOptions.size;
                        else if ("object" === zh(t.font)) {
                            var e = t.font.size;
                            void 0 !== e && (this.baseSize = e);
                        }
                    }
                }
            },
            {
                key: "initFontOptions",
                value: function(e) {
                    var i = this;
                    lf(ng, function(t) {
                        i.fontOptions[t] = {
                        };
                    }), t81.parseFontString(this.fontOptions, e) ? this.fontOptions.vadjust = 0 : lf(e, function(t, e) {
                        null != t && "object" !== zh(t) && (i.fontOptions[e] = t);
                    });
                }
            },
            {
                key: "constrain",
                value: function(t) {
                    var e = {
                        constrainWidth: !1,
                        maxWdt: -1,
                        minWdt: -1,
                        constrainHeight: !1,
                        minHgt: -1,
                        valign: "middle"
                    }, i = Ef(t, "widthConstraint");
                    if ("number" == typeof i) e.maxWdt = Number(i), e.minWdt = Number(i);
                    else if ("object" === zh(i)) {
                        var o = Ef(t, [
                            "widthConstraint",
                            "maximum"
                        ]);
                        "number" == typeof o && (e.maxWdt = Number(o));
                        var n = Ef(t, [
                            "widthConstraint",
                            "minimum"
                        ]);
                        "number" == typeof n && (e.minWdt = Number(n));
                    }
                    var r = Ef(t, "heightConstraint");
                    if ("number" == typeof r) e.minHgt = Number(r);
                    else if ("object" === zh(r)) {
                        var s = Ef(t, [
                            "heightConstraint",
                            "minimum"
                        ]);
                        "number" == typeof s && (e.minHgt = Number(s));
                        var a = Ef(t, [
                            "heightConstraint",
                            "valign"
                        ]);
                        "string" == typeof a && ("top" !== a && "bottom" !== a || (e.valign = a));
                    }
                    return e;
                }
            },
            {
                key: "update",
                value: function(t, e) {
                    this.setOptions(t, !0), this.propagateFonts(e), sf(this.fontOptions, this.constrain(e)), this.fontOptions.chooser = Uv("label", e);
                }
            },
            {
                key: "adjustSizes",
                value: function(t) {
                    var e = t ? t.right + t.left : 0;
                    this.fontOptions.constrainWidth && (this.fontOptions.maxWdt -= e, this.fontOptions.minWdt -= e);
                    var i = t ? t.top + t.bottom : 0;
                    this.fontOptions.constrainHeight && (this.fontOptions.minHgt -= i);
                }
            },
            {
                key: "addFontOptionsToPile",
                value: function(t, e) {
                    for(var i = 0; i < e.length; ++i)this.addFontToPile(t, e[i]);
                }
            },
            {
                key: "addFontToPile",
                value: function(t, e) {
                    if (void 0 !== e && void 0 !== e.font && null !== e.font) {
                        var i = e.font;
                        t.push(i);
                    }
                }
            },
            {
                key: "getBasicOptions",
                value: function(e46) {
                    for(var i = {
                    }, o = 0; o < e46.length; ++o){
                        var n = e46[o], r = {
                        };
                        t81.parseFontString(r, n) && (n = r), lf(n, function(t, e) {
                            void 0 !== t && (Object.prototype.hasOwnProperty.call(i, e) || (-1 !== Cl(ng).call(ng, e) ? i[e] = {
                            } : i[e] = t));
                        });
                    }
                    return i;
                }
            },
            {
                key: "getFontOption",
                value: function(e, i, o) {
                    for(var n, r = 0; r < e.length; ++r){
                        var s = e[r];
                        if (Object.prototype.hasOwnProperty.call(s, i)) {
                            if (null == (n = s[i])) continue;
                            var a = {
                            };
                            if (t81.parseFontString(a, n) && (n = a), Object.prototype.hasOwnProperty.call(n, o)) return n[o];
                        }
                    }
                    if (Object.prototype.hasOwnProperty.call(this.fontOptions, o)) return this.fontOptions[o];
                    throw new Error("Did not find value for multi-font for property: '" + o + "'");
                }
            },
            {
                key: "getFontOptions",
                value: function(t, e) {
                    for(var i = {
                    }, o = [
                        "color",
                        "size",
                        "face",
                        "mod",
                        "vadjust"
                    ], n = 0; n < o.length; ++n){
                        var r = o[n];
                        i[r] = this.getFontOption(t, e, r);
                    }
                    return i;
                }
            },
            {
                key: "propagateFonts",
                value: function(t82) {
                    var e = this, i = [];
                    this.addFontOptionsToPile(i, t82), this.fontOptions = this.getBasicOptions(i);
                    for(var o8 = function(t83) {
                        var o = ng[t83], n = e.fontOptions[o];
                        lf(e.getFontOptions(i, o), function(t, e) {
                            n[e] = t;
                        }), n.size = Number(n.size), n.vadjust = Number(n.vadjust);
                    }, n9 = 0; n9 < ng.length; ++n9)o8(n9);
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n) {
                    var r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "middle";
                    if (void 0 !== this.elementOptions.label) {
                        var s = this.fontOptions.size * this.body.view.scale;
                        this.elementOptions.label && s < this.elementOptions.scaling.label.drawThreshold - 1 || (s >= this.elementOptions.scaling.label.maxVisible && (s = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale), this.calculateLabelSize(t, o, n, e, i, r), this._drawBackground(t), this._drawText(t, e, this.size.yLine, r, s));
                    }
                }
            },
            {
                key: "_drawBackground",
                value: function(t) {
                    if (void 0 !== this.fontOptions.background && "none" !== this.fontOptions.background) {
                        t.fillStyle = this.fontOptions.background;
                        var e = this.getSize();
                        t.fillRect(e.left, e.top, e.width, e.height);
                    }
                }
            },
            {
                key: "_drawText",
                value: function(t, e, i) {
                    var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "middle", n = arguments.length > 4 ? arguments[4] : void 0, r = this._setAlignment(t, e, i, o), s = Bh(r, 2);
                    e = s[0], i = s[1], t.textAlign = "left", e -= this.size.width / 2, this.fontOptions.valign && this.size.height > this.size.labelHeight && ("top" === this.fontOptions.valign && (i -= (this.size.height - this.size.labelHeight) / 2), "bottom" === this.fontOptions.valign && (i += (this.size.height - this.size.labelHeight) / 2));
                    for(var a = 0; a < this.lineCount; a++){
                        var h = this.lines[a];
                        if (h && h.blocks) {
                            var d = 0;
                            this.isEdgeLabel || "center" === this.fontOptions.align ? d += (this.size.width - h.width) / 2 : "right" === this.fontOptions.align && (d += this.size.width - h.width);
                            for(var l = 0; l < h.blocks.length; l++){
                                var c = h.blocks[l];
                                t.font = c.font;
                                var u = this._getColor(c.color, n, c.strokeColor), f = Bh(u, 2), p = f[0], v = f[1];
                                c.strokeWidth > 0 && (t.lineWidth = c.strokeWidth, t.strokeStyle = v, t.lineJoin = "round"), t.fillStyle = p, c.strokeWidth > 0 && t.strokeText(c.text, e + d, i + c.vadjust), t.fillText(c.text, e + d, i + c.vadjust), d += c.width;
                            }
                            i += h.height;
                        }
                    }
                }
            },
            {
                key: "_setAlignment",
                value: function(t, e, i, o) {
                    if (this.isEdgeLabel && "horizontal" !== this.fontOptions.align && !1 === this.pointToSelf) {
                        e = 0, i = 0;
                        "top" === this.fontOptions.align ? (t.textBaseline = "alphabetic", i -= 4) : "bottom" === this.fontOptions.align ? (t.textBaseline = "hanging", i += 4) : t.textBaseline = "middle";
                    } else t.textBaseline = o;
                    return [
                        e,
                        i
                    ];
                }
            },
            {
                key: "_getColor",
                value: function(t, e, i) {
                    var o = t || "#000000", n = i || "#ffffff";
                    if (e <= this.elementOptions.scaling.label.drawThreshold) {
                        var r = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - e)));
                        o = uf(o, r), n = uf(n, r);
                    }
                    return [
                        o,
                        n
                    ];
                }
            },
            {
                key: "getTextSize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    return this._processLabel(t, e, i), {
                        width: this.size.width,
                        height: this.size.height,
                        lineCount: this.lineCount
                    };
                }
            },
            {
                key: "getSize",
                value: function() {
                    var t = this.size.left, e = this.size.top - 1;
                    if (this.isEdgeLabel) {
                        var i = 0.5 * -this.size.width;
                        switch(this.fontOptions.align){
                            case "middle":
                                t = i, e = 0.5 * -this.size.height;
                                break;
                            case "top":
                                t = i, e = -(this.size.height + 2);
                                break;
                            case "bottom":
                                t = i, e = 2;
                        }
                    }
                    return {
                        left: t,
                        top: e,
                        width: this.size.width,
                        height: this.size.height
                    };
                }
            },
            {
                key: "calculateLabelSize",
                value: function(t, e, i) {
                    var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "middle";
                    this._processLabel(t, e, i), this.size.left = o - 0.5 * this.size.width, this.size.top = n - 0.5 * this.size.height, this.size.yLine = n + 0.5 * (1 - this.lineCount) * this.fontOptions.size, "hanging" === r && (this.size.top += 0.5 * this.fontOptions.size, this.size.top += 4, this.size.yLine += 4);
                }
            },
            {
                key: "getFormattingValues",
                value: function(t84, e47, i27, o) {
                    var n = function(t, e, i) {
                        return "normal" === e ? "mod" === i ? "" : t[i] : void 0 !== t[e][i] ? t[e][i] : t[i];
                    }, r = {
                        color: n(this.fontOptions, o, "color"),
                        size: n(this.fontOptions, o, "size"),
                        face: n(this.fontOptions, o, "face"),
                        mod: n(this.fontOptions, o, "mod"),
                        vadjust: n(this.fontOptions, o, "vadjust"),
                        strokeWidth: this.fontOptions.strokeWidth,
                        strokeColor: this.fontOptions.strokeColor
                    };
                    (e47 || i27) && ("normal" === o && !0 === this.fontOptions.chooser && this.elementOptions.labelHighlightBold ? r.mod = "bold" : "function" == typeof this.fontOptions.chooser && this.fontOptions.chooser(r, this.elementOptions.id, e47, i27));
                    var s = "";
                    return void 0 !== r.mod && "" !== r.mod && (s += r.mod + " "), s += r.size + "px " + r.face, t84.font = s.replace(/"/g, ""), r.font = t84.font, r.height = r.size, r;
                }
            },
            {
                key: "differentState",
                value: function(t, e) {
                    return t !== this.selectedState || e !== this.hoverState;
                }
            },
            {
                key: "_processLabelText",
                value: function(t, e, i, o) {
                    return new og(t, this, e, i).process(o);
                }
            },
            {
                key: "_processLabel",
                value: function(t, e, i) {
                    if (!1 !== this.labelDirty || this.differentState(e, i)) {
                        var o = this._processLabelText(t, e, i, this.elementOptions.label);
                        this.fontOptions.minWdt > 0 && o.width < this.fontOptions.minWdt && (o.width = this.fontOptions.minWdt), this.size.labelHeight = o.height, this.fontOptions.minHgt > 0 && o.height < this.fontOptions.minHgt && (o.height = this.fontOptions.minHgt), this.lines = o.lines, this.lineCount = o.lines.length, this.size.width = o.width, this.size.height = o.height, this.selectedState = e, this.hoverState = i, this.labelDirty = !1;
                    }
                }
            },
            {
                key: "visible",
                value: function() {
                    return 0 !== this.size.width && 0 !== this.size.height && void 0 !== this.elementOptions.label && !(this.fontOptions.size * this.body.view.scale < this.elementOptions.scaling.label.drawThreshold - 1);
                }
            }
        ], [
            {
                key: "parseFontString",
                value: function(t, e) {
                    if (!e || "string" != typeof e) return !1;
                    var i = e.split(" ");
                    return t.size = +i[0].replace("px", ""), t.face = i[1], t.color = i[2], !0;
                }
            }
        ]), t81;
    }(), sg = ue, ag = qt, hg = Kt, dg = E1, lg = Do, cg = ei, ug = s1, fg = M1("Reflect", "construct"), pg = ug(function() {
        function t() {
        }
        return !(fg(function() {
        }, [], t) instanceof t);
    }), vg = !ug(function() {
        fg(function() {
        });
    }), gg = pg || vg;
    sg({
        target: "Reflect",
        stat: !0,
        forced: gg,
        sham: gg
    }, {
        construct: function(t, e) {
            ag(t), hg(e);
            var i = arguments.length < 3 ? t : ag(arguments[2]);
            if (vg && !pg) return fg(t, e, i);
            if (t == i) {
                switch(e.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(e[0]);
                    case 2:
                        return new t(e[0], e[1]);
                    case 3:
                        return new t(e[0], e[1], e[2]);
                    case 4:
                        return new t(e[0], e[1], e[2], e[3]);
                }
                var o = [
                    null
                ];
                return o.push.apply(o, e), new (cg.apply(t, o));
            }
            var n = i.prototype, r = lg(dg(n) ? n : Object.prototype), s = Function.apply.call(t, r, e);
            return dg(s) ? s : r;
        }
    });
    var yg = O1.Reflect.construct, mg = Dl;
    ue({
        target: "Object",
        stat: !0
    }, {
        setPrototypeOf: rn
    });
    var bg = O1.Object.setPrototypeOf;
    function wg(t85, e48) {
        return (wg = bg || function(t, e) {
            return t.__proto__ = e, t;
        })(t85, e48);
    }
    function kg(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = mg(e && e.prototype, {
            constructor: {
                value: t,
                writable: !0,
                configurable: !0
            }
        }), e && wg(t, e);
    }
    function _g(t86, e) {
        if (e && ("object" === zh(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return (function(t) {
            if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return t;
        })(t86);
    }
    var xg = Ud;
    function Eg(t87) {
        return (Eg = bg ? xg : function(t) {
            return t.__proto__ || xg(t);
        })(t87);
    }
    var Og = function() {
        function t88(e, i, o) {
            Ra(this, t88), this.body = i, this.labelModule = o, this.setOptions(e), this.top = void 0, this.left = void 0, this.height = void 0, this.width = void 0, this.radius = void 0, this.margin = void 0, this.refreshNeeded = !0, this.boundingBox = {
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            };
        }
        return Ha(t88, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "_setMargins",
                value: function(t) {
                    this.margin = {
                    }, this.options.margin && ("object" == zh(this.options.margin) ? (this.margin.top = this.options.margin.top, this.margin.right = this.options.margin.right, this.margin.bottom = this.options.margin.bottom, this.margin.left = this.options.margin.left) : (this.margin.top = this.options.margin, this.margin.right = this.options.margin, this.margin.bottom = this.options.margin, this.margin.left = this.options.margin)), t.adjustSizes(this.margin);
                }
            },
            {
                key: "_distanceToBorder",
                value: function(t, e) {
                    var i = this.options.borderWidth;
                    return t && this.resize(t), Math.min(Math.abs(this.width / 2 / Math.cos(e)), Math.abs(this.height / 2 / Math.sin(e))) + i;
                }
            },
            {
                key: "enableShadow",
                value: function(t, e) {
                    e.shadow && (t.shadowColor = e.shadowColor, t.shadowBlur = e.shadowSize, t.shadowOffsetX = e.shadowX, t.shadowOffsetY = e.shadowY);
                }
            },
            {
                key: "disableShadow",
                value: function(t, e) {
                    e.shadow && (t.shadowColor = "rgba(0,0,0,0)", t.shadowBlur = 0, t.shadowOffsetX = 0, t.shadowOffsetY = 0);
                }
            },
            {
                key: "enableBorderDashes",
                value: function(t, e) {
                    if (!1 !== e.borderDashes) {
                        if (void 0 !== t.setLineDash) {
                            var i = e.borderDashes;
                            !0 === i && (i = [
                                5,
                                15
                            ]), t.setLineDash(i);
                        } else console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."), this.options.shapeProperties.borderDashes = !1, e.borderDashes = !1;
                    }
                }
            },
            {
                key: "disableBorderDashes",
                value: function(t, e) {
                    !1 !== e.borderDashes && (void 0 !== t.setLineDash ? t.setLineDash([
                        0
                    ]) : (console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."), this.options.shapeProperties.borderDashes = !1, e.borderDashes = !1));
                }
            },
            {
                key: "needsRefresh",
                value: function(t, e) {
                    return !0 === this.refreshNeeded ? (this.refreshNeeded = !1, !0) : void 0 === this.width || this.labelModule.differentState(t, e);
                }
            },
            {
                key: "initContextForDraw",
                value: function(t, e) {
                    var i = e.borderWidth / this.body.view.scale;
                    t.lineWidth = Math.min(this.width, i), t.strokeStyle = e.borderColor, t.fillStyle = e.color;
                }
            },
            {
                key: "performStroke",
                value: function(t, e) {
                    var i = e.borderWidth / this.body.view.scale;
                    t.save(), i > 0 && (this.enableBorderDashes(t, e), t.stroke(), this.disableBorderDashes(t, e)), t.restore();
                }
            },
            {
                key: "performFill",
                value: function(t, e) {
                    t.save(), t.fillStyle = e.color, this.enableShadow(t, e), Ql(t).call(t), this.disableShadow(t, e), t.restore(), this.performStroke(t, e);
                }
            },
            {
                key: "_addBoundingBoxMargin",
                value: function(t) {
                    this.boundingBox.left -= t, this.boundingBox.top -= t, this.boundingBox.bottom += t, this.boundingBox.right += t;
                }
            },
            {
                key: "_updateBoundingBox",
                value: function(t, e, i, o, n) {
                    void 0 !== i && this.resize(i, o, n), this.left = t - this.width / 2, this.top = e - this.height / 2, this.boundingBox.left = this.left, this.boundingBox.top = this.top, this.boundingBox.bottom = this.top + this.height, this.boundingBox.right = this.left + this.width;
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e, i, o, n) {
                    this._updateBoundingBox(t, e, i, o, n);
                }
            },
            {
                key: "getDimensionsFromLabel",
                value: function(t, e, i) {
                    this.textSize = this.labelModule.getTextSize(t, e, i);
                    var o = this.textSize.width, n = this.textSize.height;
                    return 0 === o && (o = 14, n = 14), {
                        width: o,
                        height: n
                    };
                }
            }
        ]), t88;
    }();
    function Cg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Sg = function(t89) {
        kg(i28, t89);
        var e49 = Cg(i28);
        function i28(t, o, n) {
            var r;
            return Ra(this, i28), (r = e49.call(this, t, o, n))._setMargins(n), r;
        }
        return Ha(i28, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i);
                        this.width = o.width + this.margin.right + this.margin.left, this.height = o.height + this.margin.top + this.margin.bottom, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.initContextForDraw(t, r), hi(t, this.left, this.top, this.width, this.height, r.borderRadius), this.performFill(t, r), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e, i, o, n) {
                    this._updateBoundingBox(t, e, i, o, n);
                    var r = this.options.shapeProperties.borderRadius;
                    this._addBoundingBoxMargin(r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    t && this.resize(t);
                    var i = this.options.borderWidth;
                    return Math.min(Math.abs(this.width / 2 / Math.cos(e)), Math.abs(this.height / 2 / Math.sin(e))) + i;
                }
            }
        ]), i28;
    }(Og);
    function Tg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Mg = function(t90) {
        kg(i29, t90);
        var e50 = Tg(i29);
        function i29(t, o, n) {
            var r;
            return Ra(this, i29), (r = e50.call(this, t, o, n)).labelOffset = 0, r.selected = !1, r;
        }
        return Ha(i29, [
            {
                key: "setOptions",
                value: function(t, e, i) {
                    this.options = t, void 0 === e && void 0 === i || this.setImages(e, i);
                }
            },
            {
                key: "setImages",
                value: function(t, e) {
                    e && this.selected ? (this.imageObj = e, this.imageObjAlt = t) : (this.imageObj = t, this.imageObjAlt = e);
                }
            },
            {
                key: "switchImages",
                value: function(t) {
                    var e = t && !this.selected || !t && this.selected;
                    if (this.selected = t, void 0 !== this.imageObjAlt && e) {
                        var i = this.imageObj;
                        this.imageObj = this.imageObjAlt, this.imageObjAlt = i;
                    }
                }
            },
            {
                key: "_getImagePadding",
                value: function() {
                    var t = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    };
                    if (this.options.imagePadding) {
                        var e = this.options.imagePadding;
                        "object" == zh(e) ? (t.top = e.top, t.right = e.right, t.bottom = e.bottom, t.left = e.left) : (t.top = e, t.right = e, t.bottom = e, t.left = e);
                    }
                    return t;
                }
            },
            {
                key: "_resizeImage",
                value: function() {
                    var t, e;
                    if (!1 === this.options.shapeProperties.useImageSize) {
                        var i = 1, o = 1;
                        this.imageObj.width && this.imageObj.height && (this.imageObj.width > this.imageObj.height ? i = this.imageObj.width / this.imageObj.height : o = this.imageObj.height / this.imageObj.width), t = 2 * this.options.size * i, e = 2 * this.options.size * o;
                    } else {
                        var n = this._getImagePadding();
                        t = this.imageObj.width + n.left + n.right, e = this.imageObj.height + n.top + n.bottom;
                    }
                    this.width = t, this.height = e, this.radius = 0.5 * this.width;
                }
            },
            {
                key: "_drawRawCircle",
                value: function(t, e, i, o) {
                    this.initContextForDraw(t, o), ai(t, e, i, o.size), this.performFill(t, o);
                }
            },
            {
                key: "_drawImageAtPosition",
                value: function(t, e) {
                    if (0 != this.imageObj.width) {
                        t.globalAlpha = void 0 !== e.opacity ? e.opacity : 1, this.enableShadow(t, e);
                        var i = 1;
                        !0 === this.options.shapeProperties.interpolation && (i = this.imageObj.width / this.width / this.body.view.scale);
                        var o = this._getImagePadding(), n = this.left + o.left, r = this.top + o.top, s = this.width - o.left - o.right, a = this.height - o.top - o.bottom;
                        this.imageObj.drawImageAtPosition(t, i, n, r, s, a), this.disableShadow(t, e);
                    }
                }
            },
            {
                key: "_drawImageLabel",
                value: function(t, e, i, o, n) {
                    var r = 0;
                    if (void 0 !== this.height) {
                        r = 0.5 * this.height;
                        var s = this.labelModule.getTextSize(t, o, n);
                        s.lineCount >= 1 && (r += s.height / 2);
                    }
                    var a = i + r;
                    this.options.label && (this.labelOffset = r), this.labelModule.draw(t, e, a, o, n, "hanging");
                }
            }
        ]), i29;
    }(Og);
    function Pg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Dg = function(t91) {
        kg(i30, t91);
        var e51 = Pg(i30);
        function i30(t, o, n) {
            var r;
            return Ra(this, i30), (r = e51.call(this, t, o, n))._setMargins(n), r;
        }
        return Ha(i30, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i), n = Math.max(o.width + this.margin.right + this.margin.left, o.height + this.margin.top + this.margin.bottom);
                        this.options.size = n / 2, this.width = n, this.height = n, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this._drawRawCircle(t, e, i, r), this.updateBoundingBox(e, i), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, i, o, n);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t) {
                    return t && this.resize(t), 0.5 * this.width;
                }
            }
        ]), i30;
    }(Mg);
    function Bg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Ig = function(t92) {
        kg(i31, t92);
        var e52 = Bg(i31);
        function i31(t, o, n, r, s) {
            var a;
            return Ra(this, i31), (a = e52.call(this, t, o, n)).setImages(r, s), a;
        }
        return Ha(i31, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover, o = void 0 === this.imageObj.src || void 0 === this.imageObj.width || void 0 === this.imageObj.height;
                    if (o) {
                        var n = 2 * this.options.size;
                        return this.width = n, this.height = n, void (this.radius = 0.5 * this.width);
                    }
                    this.needsRefresh(e, i) && this._resizeImage();
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.switchImages(o), this.resize();
                    var s = e, a = i;
                    "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = e, this.top = i, s += this.width / 2, a += this.height / 2) : (this.left = e - this.width / 2, this.top = i - this.height / 2), this._drawRawCircle(t, s, a, r), t.save(), t.clip(), this._drawImageAtPosition(t, r), t.restore(), this._drawImageLabel(t, s, a, o, n), this.updateBoundingBox(e, i);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.boundingBox.top = e, this.boundingBox.left = t, this.boundingBox.right = t + 2 * this.options.size, this.boundingBox.bottom = e + 2 * this.options.size) : (this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size), this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t) {
                    return t && this.resize(t), 0.5 * this.width;
                }
            }
        ]), i31;
    }(Mg);
    function zg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Fg = function(t93) {
        kg(i32, t93);
        var e53 = zg(i32);
        function i32(t, o, n) {
            return Ra(this, i32), e53.call(this, t, o, n);
        }
        return Ha(i32, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {
                        size: this.options.size
                    };
                    if (this.needsRefresh(e, i)) {
                        var n, r;
                        this.labelModule.getTextSize(t, e, i);
                        var s = 2 * o.size;
                        this.width = null !== (n = this.customSizeWidth) && void 0 !== n ? n : s, this.height = null !== (r = this.customSizeHeight) && void 0 !== r ? r : s, this.radius = 0.5 * this.width;
                    }
                }
            },
            {
                key: "_drawShape",
                value: function(t94, e54, i33, o9, n, r, s, a) {
                    var h, d = this;
                    return this.resize(t94, r, s, a), this.left = o9 - this.width / 2, this.top = n - this.height / 2, this.initContextForDraw(t94, a), (h = e54, Object.prototype.hasOwnProperty.call(ui, h) ? ui[h] : function(t) {
                        for(var e = arguments.length, i = new Array(e > 1 ? e - 1 : 0), o = 1; o < e; o++)i[o - 1] = arguments[o];
                        CanvasRenderingContext2D.prototype[h].call(t, i);
                    })(t94, o9, n, a.size), this.performFill(t94, a), void 0 !== this.options.icon && void 0 !== this.options.icon.code && (t94.font = (r ? "bold " : "") + this.height / 2 + "px " + (this.options.icon.face || "FontAwesome"), t94.fillStyle = this.options.icon.color || "black", t94.textAlign = "center", t94.textBaseline = "middle", t94.fillText(this.options.icon.code, o9, n)), {
                        drawExternalLabel: function() {
                            if (void 0 !== d.options.label) {
                                d.labelModule.calculateLabelSize(t94, r, s, o9, n, "hanging");
                                var e = n + 0.5 * d.height + 0.5 * d.labelModule.size.height;
                                d.labelModule.draw(t94, o9, e, r, s, "hanging");
                            }
                            d.updateBoundingBox(o9, n);
                        }
                    };
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size, void 0 !== this.options.label && this.labelModule.size.width > 0 && (this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height));
                }
            }
        ]), i32;
    }(Og);
    function Ng(t, e55) {
        var i = Gh(t);
        if (ha) {
            var o = ha(t);
            e55 && (o = $d(o).call(o, function(e) {
                return ba(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function Ag(t) {
        for(var e56 = 1; e56 < arguments.length; e56++){
            var i, o = null != arguments[e56] ? arguments[e56] : {
            };
            if (e56 % 2) nd(i = Ng(Object(o), !0)).call(i, function(e) {
                Wa(t, e, o[e]);
            });
            else if (Ta) Ba(t, Ta(o));
            else {
                var n;
                nd(n = Ng(Object(o))).call(n, function(e) {
                    Aa(t, e, ba(o, e));
                });
            }
        }
        return t;
    }
    function Rg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var jg = function(t95) {
        kg(i34, t95);
        var e57 = Rg(i34);
        function i34(t, o, n, r) {
            var s;
            return Ra(this, i34), (s = e57.call(this, t, o, n, r)).ctxRenderer = r, s;
        }
        return Ha(i34, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n, r), this.left = e - this.width / 2, this.top = i - this.height / 2, t.save();
                    var s = this.ctxRenderer({
                        ctx: t,
                        id: this.options.id,
                        x: e,
                        y: i,
                        state: {
                            selected: o,
                            hover: n
                        },
                        style: Ag({
                        }, r),
                        label: this.options.label
                    });
                    if (null != s.drawNode && s.drawNode(), t.restore(), s.drawExternalLabel) {
                        var a = s.drawExternalLabel;
                        s.drawExternalLabel = function() {
                            t.save(), a(), t.restore();
                        };
                    }
                    return s.nodeDimensions && (this.customSizeWidth = s.nodeDimensions.width, this.customSizeHeight = s.nodeDimensions.height), s;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i34;
    }(Fg);
    function Lg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Hg = function(t96) {
        kg(i35, t96);
        var e58 = Lg(i35);
        function i35(t, o, n) {
            var r;
            return Ra(this, i35), (r = e58.call(this, t, o, n))._setMargins(n), r;
        }
        return Ha(i35, [
            {
                key: "resize",
                value: function(t, e, i) {
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i).width + this.margin.right + this.margin.left;
                        this.width = o, this.height = o, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.initContextForDraw(t, r), li(t, e - this.width / 2, i - this.height / 2, this.width, this.height), this.performFill(t, r), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i35;
    }(Og);
    function Wg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Vg = function(t97) {
        kg(i36, t97);
        var e59 = Wg(i36);
        function i36(t, o, n) {
            return Ra(this, i36), e59.call(this, t, o, n);
        }
        return Ha(i36, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "diamond", 4, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i36;
    }(Fg);
    function qg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Ug = function(t98) {
        kg(i37, t98);
        var e60 = qg(i37);
        function i37(t, o, n) {
            return Ra(this, i37), e60.call(this, t, o, n);
        }
        return Ha(i37, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "circle", 2, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t) {
                    return t && this.resize(t), this.options.size;
                }
            }
        ]), i37;
    }(Fg);
    function Yg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Xg = function(t99) {
        kg(i38, t99);
        var e61 = Yg(i38);
        function i38(t, o, n) {
            return Ra(this, i38), e61.call(this, t, o, n);
        }
        return Ha(i38, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i);
                        this.height = 2 * o.height, this.width = o.width + o.height, this.radius = 0.5 * this.width;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - 0.5 * this.width, this.top = i - 0.5 * this.height, this.initContextForDraw(t, r), di(t, this.left, this.top, this.width, this.height), this.performFill(t, r), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, e, i, o, n);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    t && this.resize(t);
                    var i = 0.5 * this.width, o = 0.5 * this.height, n = Math.sin(e) * i, r = Math.cos(e) * o;
                    return i * o / Math.sqrt(n * n + r * r);
                }
            }
        ]), i38;
    }(Og);
    function Gg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Kg = function(t100) {
        kg(i39, t100);
        var e62 = Gg(i39);
        function i39(t, o, n) {
            var r;
            return Ra(this, i39), (r = e62.call(this, t, o, n))._setMargins(n), r;
        }
        return Ha(i39, [
            {
                key: "resize",
                value: function(t, e, i) {
                    this.needsRefresh(e, i) && (this.iconSize = {
                        width: Number(this.options.icon.size),
                        height: Number(this.options.icon.size)
                    }, this.width = this.iconSize.width + this.margin.right + this.margin.left, this.height = this.iconSize.height + this.margin.top + this.margin.bottom, this.radius = 0.5 * this.width);
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    var s = this;
                    return this.resize(t, o, n), this.options.icon.size = this.options.icon.size || 50, this.left = e - this.width / 2, this.top = i - this.height / 2, this._icon(t, e, i, o, n, r), {
                        drawExternalLabel: function() {
                            if (void 0 !== s.options.label) s.labelModule.draw(t, s.left + s.iconSize.width / 2 + s.margin.left, i + s.height / 2 + 5, o);
                            s.updateBoundingBox(e, i);
                        }
                    };
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    if (this.boundingBox.top = e - 0.5 * this.options.icon.size, this.boundingBox.left = t - 0.5 * this.options.icon.size, this.boundingBox.right = t + 0.5 * this.options.icon.size, this.boundingBox.bottom = e + 0.5 * this.options.icon.size, void 0 !== this.options.label && this.labelModule.size.width > 0) this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + 5);
                }
            },
            {
                key: "_icon",
                value: function(t, e, i, o, n, r) {
                    var s = Number(this.options.icon.size);
                    void 0 !== this.options.icon.code ? (t.font = [
                        null != this.options.icon.weight ? this.options.icon.weight : o ? "bold" : "",
                        (null != this.options.icon.weight && o ? 5 : 0) + s + "px",
                        this.options.icon.face
                    ].join(" "), t.fillStyle = this.options.icon.color || "black", t.textAlign = "center", t.textBaseline = "middle", this.enableShadow(t, r), t.fillText(this.options.icon.code, e, i), this.disableShadow(t, r)) : console.error("When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.");
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i39;
    }(Og);
    function $g(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Zg = function(t101) {
        kg(i40, t101);
        var e63 = $g(i40);
        function i40(t, o, n, r, s) {
            var a;
            return Ra(this, i40), (a = e63.call(this, t, o, n)).setImages(r, s), a;
        }
        return Ha(i40, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover, o = void 0 === this.imageObj.src || void 0 === this.imageObj.width || void 0 === this.imageObj.height;
                    if (o) {
                        var n = 2 * this.options.size;
                        return this.width = n, void (this.height = n);
                    }
                    this.needsRefresh(e, i) && this._resizeImage();
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    t.save(), this.switchImages(o), this.resize();
                    var s = e, a = i;
                    if ("top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = e, this.top = i, s += this.width / 2, a += this.height / 2) : (this.left = e - this.width / 2, this.top = i - this.height / 2), !0 === this.options.shapeProperties.useBorderWithImage) {
                        var h = this.options.borderWidth, d = this.options.borderWidthSelected || 2 * this.options.borderWidth, l = (o ? d : h) / this.body.view.scale;
                        t.lineWidth = Math.min(this.width, l), t.beginPath();
                        var c = o ? this.options.color.highlight.border : n ? this.options.color.hover.border : this.options.color.border, u = o ? this.options.color.highlight.background : n ? this.options.color.hover.background : this.options.color.background;
                        void 0 !== r.opacity && (c = uf(c, r.opacity), u = uf(u, r.opacity)), t.strokeStyle = c, t.fillStyle = u, t.rect(this.left - 0.5 * t.lineWidth, this.top - 0.5 * t.lineWidth, this.width + t.lineWidth, this.height + t.lineWidth), Ql(t).call(t), this.performStroke(t, r), t.closePath();
                    }
                    this._drawImageAtPosition(t, r), this._drawImageLabel(t, s, a, o, n), this.updateBoundingBox(e, i), t.restore();
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    this.resize(), "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = t, this.top = e) : (this.left = t - this.width / 2, this.top = e - this.height / 2), this.boundingBox.left = this.left, this.boundingBox.top = this.top, this.boundingBox.bottom = this.top + this.height, this.boundingBox.right = this.left + this.width, void 0 !== this.options.label && this.labelModule.size.width > 0 && (this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset));
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i40;
    }(Mg);
    function Qg(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Jg = function(t102) {
        kg(i41, t102);
        var e64 = Qg(i41);
        function i41(t, o, n) {
            return Ra(this, i41), e64.call(this, t, o, n);
        }
        return Ha(i41, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "square", 2, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i41;
    }(Fg);
    function ty(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var ey = function(t103) {
        kg(i42, t103);
        var e65 = ty(i42);
        function i42(t, o, n) {
            return Ra(this, i42), e65.call(this, t, o, n);
        }
        return Ha(i42, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "hexagon", 4, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i42;
    }(Fg);
    function iy(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var oy = function(t104) {
        kg(i43, t104);
        var e66 = iy(i43);
        function i43(t, o, n) {
            return Ra(this, i43), e66.call(this, t, o, n);
        }
        return Ha(i43, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "star", 4, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i43;
    }(Fg);
    function ny(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var ry = function(t105) {
        kg(i44, t105);
        var e67 = ny(i44);
        function i44(t, o, n) {
            var r;
            return Ra(this, i44), (r = e67.call(this, t, o, n))._setMargins(n), r;
        }
        return Ha(i44, [
            {
                key: "resize",
                value: function(t, e, i) {
                    this.needsRefresh(e, i) && (this.textSize = this.labelModule.getTextSize(t, e, i), this.width = this.textSize.width + this.margin.right + this.margin.left, this.height = this.textSize.height + this.margin.top + this.margin.bottom, this.radius = 0.5 * this.width);
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.enableShadow(t, r), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n), this.disableShadow(t, r), this.updateBoundingBox(e, i, t, o, n);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i44;
    }(Og);
    function sy(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var ay = function(t106) {
        kg(i45, t106);
        var e68 = sy(i45);
        function i45(t, o, n) {
            return Ra(this, i45), e68.call(this, t, o, n);
        }
        return Ha(i45, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "triangle", 3, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i45;
    }(Fg);
    function hy(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var dy = function(t107) {
        kg(i46, t107);
        var e69 = hy(i46);
        function i46(t, o, n) {
            return Ra(this, i46), e69.call(this, t, o, n);
        }
        return Ha(i46, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "triangleDown", 3, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i46;
    }(Fg);
    function ly(t, e70) {
        var i = Gh(t);
        if (ha) {
            var o = ha(t);
            e70 && (o = $d(o).call(o, function(e) {
                return ba(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function cy(t) {
        for(var e71 = 1; e71 < arguments.length; e71++){
            var i, o = null != arguments[e71] ? arguments[e71] : {
            };
            if (e71 % 2) nd(i = ly(Object(o), !0)).call(i, function(e) {
                Wa(t, e, o[e]);
            });
            else if (Ta) Ba(t, Ta(o));
            else {
                var n;
                nd(n = ly(Object(o))).call(n, function(e) {
                    Aa(t, e, ba(o, e));
                });
            }
        }
        return t;
    }
    var uy = function() {
        function t108(e, i, o, n, r, s) {
            Ra(this, t108), this.options = kf(r), this.globalOptions = r, this.defaultOptions = s, this.body = i, this.edges = [], this.id = void 0, this.imagelist = o, this.grouplist = n, this.x = void 0, this.y = void 0, this.baseSize = this.options.size, this.baseFontSize = this.options.font.size, this.predefinedPosition = !1, this.selected = !1, this.hover = !1, this.labelModule = new rg(this.body, this.options, !1), this.setOptions(e);
        }
        return Ha(t108, [
            {
                key: "attachEdge",
                value: function(t) {
                    var e;
                    -1 === Cl(e = this.edges).call(e, t) && this.edges.push(t);
                }
            },
            {
                key: "detachEdge",
                value: function(t) {
                    var e, i, o = Cl(e = this.edges).call(e, t);
                    -1 != o && Od(i = this.edges).call(i, o, 1);
                }
            },
            {
                key: "setOptions",
                value: function(e) {
                    var i = this.options.shape;
                    if (e) {
                        if (void 0 !== e.color && (this._localColor = e.color), void 0 !== e.id && (this.id = e.id), void 0 === this.id) throw new Error("Node must have an id");
                        t108.checkMass(e, this.id), void 0 !== e.x && (null === e.x ? (this.x = void 0, this.predefinedPosition = !1) : (this.x = yl(e.x), this.predefinedPosition = !0)), void 0 !== e.y && (null === e.y ? (this.y = void 0, this.predefinedPosition = !1) : (this.y = yl(e.y), this.predefinedPosition = !0)), void 0 !== e.size && (this.baseSize = e.size), void 0 !== e.value && (e.value = jv(e.value)), t108.parseOptions(this.options, e, !0, this.globalOptions, this.grouplist);
                        var o = [
                            e,
                            this.options,
                            this.defaultOptions
                        ];
                        return this.chooser = Uv("node", o), this._load_images(), this.updateLabelModule(e), void 0 !== e.opacity && t108.checkOpacity(e.opacity) && (this.options.opacity = e.opacity), this.updateShape(i), void 0 !== e.hidden || void 0 !== e.physics;
                    }
                }
            },
            {
                key: "_load_images",
                value: function() {
                    if (("circularImage" === this.options.shape || "image" === this.options.shape) && void 0 === this.options.image) throw new Error("Option image must be defined for node type '" + this.options.shape + "'");
                    if (void 0 !== this.options.image) {
                        if (void 0 === this.imagelist) throw new Error("Internal Error: No images provided");
                        if ("string" == typeof this.options.image) this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);
                        else {
                            if (void 0 === this.options.image.unselected) throw new Error("No unselected image provided");
                            this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id), void 0 !== this.options.image.selected ? this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id) : this.imageObjAlt = void 0;
                        }
                    }
                }
            },
            {
                key: "getFormattingValues",
                value: function() {
                    var t = {
                        color: this.options.color.background,
                        opacity: this.options.opacity,
                        borderWidth: this.options.borderWidth,
                        borderColor: this.options.color.border,
                        size: this.options.size,
                        borderDashes: this.options.shapeProperties.borderDashes,
                        borderRadius: this.options.shapeProperties.borderRadius,
                        shadow: this.options.shadow.enabled,
                        shadowColor: this.options.shadow.color,
                        shadowSize: this.options.shadow.size,
                        shadowX: this.options.shadow.x,
                        shadowY: this.options.shadow.y
                    };
                    if (this.selected || this.hover ? !0 === this.chooser ? this.selected ? (null != this.options.borderWidthSelected ? t.borderWidth = this.options.borderWidthSelected : t.borderWidth *= 2, t.color = this.options.color.highlight.background, t.borderColor = this.options.color.highlight.border, t.shadow = this.options.shadow.enabled) : this.hover && (t.color = this.options.color.hover.background, t.borderColor = this.options.color.hover.border, t.shadow = this.options.shadow.enabled) : "function" == typeof this.chooser && (this.chooser(t, this.options.id, this.selected, this.hover), !1 === t.shadow && (t.shadowColor === this.options.shadow.color && t.shadowSize === this.options.shadow.size && t.shadowX === this.options.shadow.x && t.shadowY === this.options.shadow.y || (t.shadow = !0))) : t.shadow = this.options.shadow.enabled, void 0 !== this.options.opacity) {
                        var e = this.options.opacity;
                        t.borderColor = uf(t.borderColor, e), t.color = uf(t.color, e), t.shadowColor = uf(t.shadowColor, e);
                    }
                    return t;
                }
            },
            {
                key: "updateLabelModule",
                value: function(e) {
                    void 0 !== this.options.label && null !== this.options.label || (this.options.label = ""), t108.updateGroupOptions(this.options, cy(cy({
                    }, e), {
                    }, {
                        color: e && e.color || this._localColor || void 0
                    }), this.grouplist);
                    var i = this.grouplist.get(this.options.group, !1), o = [
                        e,
                        this.options,
                        i,
                        this.globalOptions,
                        this.defaultOptions
                    ];
                    this.labelModule.update(this.options, o), void 0 !== this.labelModule.baseSize && (this.baseFontSize = this.labelModule.baseSize);
                }
            },
            {
                key: "updateShape",
                value: function(t) {
                    if (t === this.options.shape && this.shape) this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);
                    else switch(this.options.shape){
                        case "box":
                            this.shape = new Sg(this.options, this.body, this.labelModule);
                            break;
                        case "circle":
                            this.shape = new Dg(this.options, this.body, this.labelModule);
                            break;
                        case "circularImage":
                            this.shape = new Ig(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                            break;
                        case "custom":
                            this.shape = new jg(this.options, this.body, this.labelModule, this.options.ctxRenderer);
                            break;
                        case "database":
                            this.shape = new Hg(this.options, this.body, this.labelModule);
                            break;
                        case "diamond":
                            this.shape = new Vg(this.options, this.body, this.labelModule);
                            break;
                        case "dot":
                            this.shape = new Ug(this.options, this.body, this.labelModule);
                            break;
                        case "ellipse":
                            this.shape = new Xg(this.options, this.body, this.labelModule);
                            break;
                        case "icon":
                            this.shape = new Kg(this.options, this.body, this.labelModule);
                            break;
                        case "image":
                            this.shape = new Zg(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                            break;
                        case "square":
                            this.shape = new Jg(this.options, this.body, this.labelModule);
                            break;
                        case "hexagon":
                            this.shape = new ey(this.options, this.body, this.labelModule);
                            break;
                        case "star":
                            this.shape = new oy(this.options, this.body, this.labelModule);
                            break;
                        case "text":
                            this.shape = new ry(this.options, this.body, this.labelModule);
                            break;
                        case "triangle":
                            this.shape = new ay(this.options, this.body, this.labelModule);
                            break;
                        case "triangleDown":
                            this.shape = new dy(this.options, this.body, this.labelModule);
                            break;
                        default:
                            this.shape = new Xg(this.options, this.body, this.labelModule);
                    }
                    this.needsRefresh();
                }
            },
            {
                key: "select",
                value: function() {
                    this.selected = !0, this.needsRefresh();
                }
            },
            {
                key: "unselect",
                value: function() {
                    this.selected = !1, this.needsRefresh();
                }
            },
            {
                key: "needsRefresh",
                value: function() {
                    this.shape.refreshNeeded = !0;
                }
            },
            {
                key: "getTitle",
                value: function() {
                    return this.options.title;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this.shape.distanceToBorder(t, e);
                }
            },
            {
                key: "isFixed",
                value: function() {
                    return this.options.fixed.x && this.options.fixed.y;
                }
            },
            {
                key: "isSelected",
                value: function() {
                    return this.selected;
                }
            },
            {
                key: "getValue",
                value: function() {
                    return this.options.value;
                }
            },
            {
                key: "getLabelSize",
                value: function() {
                    return this.labelModule.size();
                }
            },
            {
                key: "setValueRange",
                value: function(t, e, i) {
                    if (void 0 !== this.options.value) {
                        var o = this.options.scaling.customScalingFunction(t, e, i, this.options.value), n = this.options.scaling.max - this.options.scaling.min;
                        if (!0 === this.options.scaling.label.enabled) {
                            var r = this.options.scaling.label.max - this.options.scaling.label.min;
                            this.options.font.size = this.options.scaling.label.min + o * r;
                        }
                        this.options.size = this.options.scaling.min + o * n;
                    } else this.options.size = this.baseSize, this.options.font.size = this.baseFontSize;
                    this.updateLabelModule();
                }
            },
            {
                key: "draw",
                value: function(t) {
                    var e = this.getFormattingValues();
                    return this.shape.draw(t, this.x, this.y, this.selected, this.hover, e) || {
                    };
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t) {
                    this.shape.updateBoundingBox(this.x, this.y, t);
                }
            },
            {
                key: "resize",
                value: function(t) {
                    var e = this.getFormattingValues();
                    this.shape.resize(t, this.selected, this.hover, e);
                }
            },
            {
                key: "getItemsOnPoint",
                value: function(t) {
                    var e = [];
                    return this.labelModule.visible() && Yv(this.labelModule.getSize(), t) && e.push({
                        nodeId: this.id,
                        labelId: 0
                    }), Yv(this.shape.boundingBox, t) && e.push({
                        nodeId: this.id
                    }), e;
                }
            },
            {
                key: "isOverlappingWith",
                value: function(t) {
                    return this.shape.left < t.right && this.shape.left + this.shape.width > t.left && this.shape.top < t.bottom && this.shape.top + this.shape.height > t.top;
                }
            },
            {
                key: "isBoundingBoxOverlappingWith",
                value: function(t) {
                    return this.shape.boundingBox.left < t.right && this.shape.boundingBox.right > t.left && this.shape.boundingBox.top < t.bottom && this.shape.boundingBox.bottom > t.top;
                }
            }
        ], [
            {
                key: "checkOpacity",
                value: function(t) {
                    return 0 <= t && t <= 1;
                }
            },
            {
                key: "checkCoordinateOrigin",
                value: function(t) {
                    return void 0 === t || "center" === t || "top-left" === t;
                }
            },
            {
                key: "updateGroupOptions",
                value: function(e, i, o) {
                    var n;
                    if (void 0 !== o) {
                        var r = e.group;
                        if (void 0 !== i && void 0 !== i.group && r !== i.group) throw new Error("updateGroupOptions: group values in options don't match.");
                        if ("number" == typeof r || "string" == typeof r && "" != r) {
                            var s = o.get(r);
                            void 0 !== s.opacity && void 0 === i.opacity && (t108.checkOpacity(s.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + s.opacity), s.opacity = void 0));
                            var a = $d(n = qv(i)).call(n, function(t) {
                                return null != i[t];
                            });
                            a.push("font"), rf(a, e, s), e.color = pf(e.color);
                        }
                    }
                }
            },
            {
                key: "parseOptions",
                value: function(e, i) {
                    var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {
                    }, r = arguments.length > 4 ? arguments[4] : void 0, s = [
                        "color",
                        "fixed",
                        "shadow"
                    ];
                    if (rf(s, e, i, o), t108.checkMass(i), void 0 !== e.opacity && (t108.checkOpacity(e.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + e.opacity), e.opacity = void 0)), void 0 !== i.opacity && (t108.checkOpacity(i.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + i.opacity), i.opacity = void 0)), i.shapeProperties && !t108.checkCoordinateOrigin(i.shapeProperties.coordinateOrigin) && console.error("Invalid option for node coordinateOrigin, found: " + i.shapeProperties.coordinateOrigin), _f(e, i, "shadow", n), void 0 !== i.color && null !== i.color) {
                        var a = pf(i.color);
                        of(e.color, a);
                    } else !0 === o && null === i.color && (e.color = kf(n.color));
                    void 0 !== i.fixed && null !== i.fixed && ("boolean" == typeof i.fixed ? (e.fixed.x = i.fixed, e.fixed.y = i.fixed) : (void 0 !== i.fixed.x && "boolean" == typeof i.fixed.x && (e.fixed.x = i.fixed.x), void 0 !== i.fixed.y && "boolean" == typeof i.fixed.y && (e.fixed.y = i.fixed.y))), !0 === o && null === i.font && (e.font = kf(n.font)), t108.updateGroupOptions(e, i, r), void 0 !== i.scaling && _f(e.scaling, i.scaling, "label", n.scaling);
                }
            },
            {
                key: "checkMass",
                value: function(t, e) {
                    if (void 0 !== t.mass && t.mass <= 0) {
                        var i = "";
                        void 0 !== e && (i = " in node id: " + e), console.error("%cNegative or zero mass disallowed" + i + ", setting mass to 1.", Ff), t.mass = 1;
                    }
                }
            }
        ]), t108;
    }();
    function fy(t109, e72) {
        var i47 = void 0 !== Nh && xr(t109) || t109["@@iterator"];
        if (!i47) {
            if (Hh(t109) || (i47 = (function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return py(t, e);
                var o = Lh(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return rr(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return py(t, e);
            })(t109)) || e72 && t109 && "number" == typeof t109.length) {
                i47 && (t109 = i47);
                var o10 = 0, n = function() {
                };
                return {
                    s: n,
                    n: function() {
                        return o10 >= t109.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t109[o10++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i47 = i47.call(t109);
            },
            n: function() {
                var t = i47.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i47.return || i47.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function py(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    var vy = function() {
        function t110(e73, i, o11, n10) {
            var r, s = this;
            if (Ra(this, t110), this.body = e73, this.images = i, this.groups = o11, this.layoutEngine = n10, this.body.functions.createNode = si(r = this.create).call(r, this), this.nodesListeners = {
                add: function(t, e) {
                    s.add(e.items);
                },
                update: function(t, e) {
                    s.update(e.items, e.data, e.oldData);
                },
                remove: function(t, e) {
                    s.remove(e.items);
                }
            }, this.defaultOptions = {
                borderWidth: 1,
                borderWidthSelected: void 0,
                brokenImage: void 0,
                color: {
                    border: "#2B7CE9",
                    background: "#97C2FC",
                    highlight: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    },
                    hover: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    }
                },
                opacity: void 0,
                fixed: {
                    x: !1,
                    y: !1
                },
                font: {
                    color: "#343434",
                    size: 14,
                    face: "arial",
                    background: "none",
                    strokeWidth: 0,
                    strokeColor: "#ffffff",
                    align: "center",
                    vadjust: 0,
                    multi: !1,
                    bold: {
                        mod: "bold"
                    },
                    boldital: {
                        mod: "bold italic"
                    },
                    ital: {
                        mod: "italic"
                    },
                    mono: {
                        mod: "",
                        size: 15,
                        face: "monospace",
                        vadjust: 2
                    }
                },
                group: void 0,
                hidden: !1,
                icon: {
                    face: "FontAwesome",
                    code: void 0,
                    size: 50,
                    color: "#2B7CE9"
                },
                image: void 0,
                imagePadding: {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                },
                label: void 0,
                labelHighlightBold: !0,
                level: void 0,
                margin: {
                    top: 5,
                    right: 5,
                    bottom: 5,
                    left: 5
                },
                mass: 1,
                physics: !0,
                scaling: {
                    min: 10,
                    max: 30,
                    label: {
                        enabled: !1,
                        min: 14,
                        max: 30,
                        maxVisible: 30,
                        drawThreshold: 5
                    },
                    customScalingFunction: function(t, e, i, o) {
                        if (e === t) return 0.5;
                        var n = 1 / (e - t);
                        return Math.max(0, (o - t) * n);
                    }
                },
                shadow: {
                    enabled: !1,
                    color: "rgba(0,0,0,0.5)",
                    size: 10,
                    x: 5,
                    y: 5
                },
                shape: "ellipse",
                shapeProperties: {
                    borderDashes: !1,
                    borderRadius: 6,
                    interpolation: !0,
                    useImageSize: !1,
                    useBorderWithImage: !1,
                    coordinateOrigin: "center"
                },
                size: 25,
                title: void 0,
                value: void 0,
                x: void 0,
                y: void 0
            }, this.defaultOptions.mass <= 0) throw "Internal error: mass in defaultOptions of NodesHandler may not be zero or negative";
            this.options = kf(this.defaultOptions), this.bindEventListeners();
        }
        return Ha(t110, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t111, e74, i = this;
                    this.body.emitter.on("refreshNodes", si(t111 = this.refresh).call(t111, this)), this.body.emitter.on("refresh", si(e74 = this.refresh).call(e74, this)), this.body.emitter.on("destroy", function() {
                        lf(i.nodesListeners, function(t, e) {
                            i.body.data.nodes && i.body.data.nodes.off(e, t);
                        }), delete i.body.functions.createNode, delete i.nodesListeners.add, delete i.nodesListeners.update, delete i.nodesListeners.remove, delete i.nodesListeners;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        if (uy.parseOptions(this.options, t), void 0 !== t.opacity && (Tv(t.opacity) || !Pv(t.opacity) || t.opacity < 0 || t.opacity > 1 ? console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + t.opacity) : this.options.opacity = t.opacity), void 0 !== t.shape) for(var e in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, e) && this.body.nodes[e].updateShape();
                        if (void 0 !== t.font || void 0 !== t.widthConstraint || void 0 !== t.heightConstraint) for(var i = 0, o = Gh(this.body.nodes); i < o.length; i++){
                            var n = o[i];
                            this.body.nodes[n].updateLabelModule(), this.body.nodes[n].needsRefresh();
                        }
                        if (void 0 !== t.size) for(var r in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, r) && this.body.nodes[r].needsRefresh();
                        void 0 === t.hidden && void 0 === t.physics || this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "setData",
                value: function(t112) {
                    var i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], o = this.body.data.nodes;
                    if (e1.isDataViewLike("id", t112)) this.body.data.nodes = t112;
                    else if (Hh(t112)) this.body.data.nodes = new e1.DataSet, this.body.data.nodes.add(t112);
                    else {
                        if (t112) throw new TypeError("Array or DataSet expected");
                        this.body.data.nodes = new e1.DataSet;
                    }
                    if (o && lf(this.nodesListeners, function(t, e) {
                        o.off(e, t);
                    }), this.body.nodes = {
                    }, this.body.data.nodes) {
                        var n = this;
                        lf(this.nodesListeners, function(t, e) {
                            n.body.data.nodes.on(e, t);
                        });
                        var r = this.body.data.nodes.getIds();
                        this.add(r, !0);
                    }
                    !1 === i && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "add",
                value: function(t) {
                    for(var e, i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], o = [], n = 0; n < t.length; n++){
                        e = t[n];
                        var r = this.body.data.nodes.get(e), s = this.create(r);
                        o.push(s), this.body.nodes[e] = s;
                    }
                    this.layoutEngine.positionInitially(o), !1 === i && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "update",
                value: function(t113, e, i) {
                    for(var o12 = this.body.nodes, n = !1, r = 0; r < t113.length; r++){
                        var s = t113[r], a = o12[s], h = e[r];
                        void 0 !== a ? a.setOptions(h) && (n = !0) : (n = !0, a = this.create(h), o12[s] = a);
                    }
                    n || void 0 === i || (n = zv(e).call(e, function(t, e) {
                        var o = i[e];
                        return o && o.level !== t.level;
                    })), !0 === n ? this.body.emitter.emit("_dataChanged") : this.body.emitter.emit("_dataUpdated");
                }
            },
            {
                key: "remove",
                value: function(t) {
                    for(var e = this.body.nodes, i = 0; i < t.length; i++)delete e[t[i]];
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "create",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : uy;
                    return new e(t, this.body, this.images, this.groups, this.options, this.defaultOptions);
                }
            },
            {
                key: "refresh",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    lf(this.body.nodes, function(i, o) {
                        var n = t.body.data.nodes.get(o);
                        void 0 !== n && (!0 === e && i.setOptions({
                            x: null,
                            y: null
                        }), i.setOptions({
                            fixed: !1
                        }), i.setOptions(n));
                    });
                }
            },
            {
                key: "getPositions",
                value: function(t) {
                    var e = {
                    };
                    if (void 0 !== t) {
                        if (!0 === Hh(t)) {
                            for(var i = 0; i < t.length; i++)if (void 0 !== this.body.nodes[t[i]]) {
                                var o = this.body.nodes[t[i]];
                                e[t[i]] = {
                                    x: Math.round(o.x),
                                    y: Math.round(o.y)
                                };
                            }
                        } else if (void 0 !== this.body.nodes[t]) {
                            var n = this.body.nodes[t];
                            e[t] = {
                                x: Math.round(n.x),
                                y: Math.round(n.y)
                            };
                        }
                    } else for(var r = 0; r < this.body.nodeIndices.length; r++){
                        var s = this.body.nodes[this.body.nodeIndices[r]];
                        e[this.body.nodeIndices[r]] = {
                            x: Math.round(s.x),
                            y: Math.round(s.y)
                        };
                    }
                    return e;
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    if (null == t) throw new TypeError("No id was specified for getPosition method.");
                    if (null == this.body.nodes[t]) throw new ReferenceError("NodeId provided for getPosition does not exist. Provided: ".concat(t));
                    return {
                        x: Math.round(this.body.nodes[t].x),
                        y: Math.round(this.body.nodes[t].y)
                    };
                }
            },
            {
                key: "storePositions",
                value: function() {
                    var t, e = [], i = this.body.data.nodes.getDataSet(), o = fy(i.get());
                    try {
                        for(o.s(); !(t = o.n()).done;){
                            var n = t.value, r = n.id, s = this.body.nodes[r], a = Math.round(s.x), h = Math.round(s.y);
                            n.x === a && n.y === h || e.push({
                                id: r,
                                x: a,
                                y: h
                            });
                        }
                    } catch (t114) {
                        o.e(t114);
                    } finally{
                        o.f();
                    }
                    i.update(e);
                }
            },
            {
                key: "getBoundingBox",
                value: function(t) {
                    if (void 0 !== this.body.nodes[t]) return this.body.nodes[t].shape.boundingBox;
                }
            },
            {
                key: "getConnectedNodes",
                value: function(t, e) {
                    var i = [];
                    if (void 0 !== this.body.nodes[t]) for(var o = this.body.nodes[t], n = {
                    }, r = 0; r < o.edges.length; r++){
                        var s = o.edges[r];
                        "to" !== e && s.toId == o.id ? void 0 === n[s.fromId] && (i.push(s.fromId), n[s.fromId] = !0) : "from" !== e && s.fromId == o.id && void 0 === n[s.toId] && (i.push(s.toId), n[s.toId] = !0);
                    }
                    return i;
                }
            },
            {
                key: "getConnectedEdges",
                value: function(t) {
                    var e = [];
                    if (void 0 !== this.body.nodes[t]) for(var i = this.body.nodes[t], o = 0; o < i.edges.length; o++)e.push(i.edges[o].id);
                    else console.error("NodeId provided for getConnectedEdges does not exist. Provided: ", t);
                    return e;
                }
            },
            {
                key: "moveNode",
                value: function(t, e, i) {
                    var o = this;
                    void 0 !== this.body.nodes[t] ? (this.body.nodes[t].x = Number(e), this.body.nodes[t].y = Number(i), Yl(function() {
                        o.body.emitter.emit("startSimulation");
                    }, 0)) : console.error("Node id supplied to moveNode does not exist. Provided: ", t);
                }
            }
        ]), t110;
    }(), gy = E1, yy = Kt, my = et, by = r1, wy = no;
    ue({
        target: "Reflect",
        stat: !0
    }, {
        get: function t(e, i) {
            var o, n, r = arguments.length < 3 ? e : arguments[2];
            return yy(e) === r ? e[i] : (o = by.f(e, i)) ? my(o, "value") ? o.value : void 0 === o.get ? void 0 : o.get.call(r) : gy(n = wy(e)) ? t(n, i, r) : void 0;
        }
    });
    var ky = O1.Reflect.get, _y = ma;
    function xy(t115, e75, i48) {
        return (xy = "undefined" != typeof Reflect && ky ? ky : function(t116, e76, i) {
            var o = function(t, e) {
                for(; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = Eg(t)););
                return t;
            }(t116, e76);
            if (o) {
                var n = _y(o, e76);
                return n.get ? n.get.call(i) : n.value;
            }
        })(t115, e75, i48 || t115);
    }
    var Ey = ue, Oy = Math.hypot, Cy = Math.abs, Sy = Math.sqrt;
    Ey({
        target: "Math",
        stat: !0,
        forced: !!Oy && Oy(1 / 0, NaN) !== 1 / 0
    }, {
        hypot: function(t, e) {
            for(var i, o, n = 0, r = 0, s = arguments.length, a = 0; r < s;)a < (i = Cy(arguments[r++])) ? (n = n * (o = a / i) * o + 1, a = i) : n += i > 0 ? (o = i / a) * o : i;
            return a === 1 / 0 ? 1 / 0 : a * Sy(n);
        }
    });
    var Ty = O1.Math.hypot;
    function My(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Py = function() {
        function t117() {
            Ra(this, t117);
        }
        return Ha(t117, null, [
            {
                key: "transform",
                value: function(t, e) {
                    Hh(t) || (t = [
                        t
                    ]);
                    for(var i = e.point.x, o = e.point.y, n = e.angle, r = e.length, s = 0; s < t.length; ++s){
                        var a = t[s], h = a.x * Math.cos(n) - a.y * Math.sin(n), d = a.x * Math.sin(n) + a.y * Math.cos(n);
                        a.x = i + r * h, a.y = o + r * d;
                    }
                }
            },
            {
                key: "drawPath",
                value: function(t, e) {
                    t.beginPath(), t.moveTo(e[0].x, e[0].y);
                    for(var i = 1; i < e.length; ++i)t.lineTo(e[i].x, e[i].y);
                    t.closePath();
                }
            }
        ]), t117;
    }(), Dy = function(t118) {
        kg(i49, t118);
        var e77 = My(i49);
        function i49() {
            return Ra(this, i49), e77.apply(this, arguments);
        }
        return Ha(i49, null, [
            {
                key: "draw",
                value: function(t, e) {
                    if (e.image) {
                        t.save(), t.translate(e.point.x, e.point.y), t.rotate(Math.PI / 2 + e.angle);
                        var i = null != e.imageWidth ? e.imageWidth : e.image.width, o = null != e.imageHeight ? e.imageHeight : e.image.height;
                        e.image.drawImageAtPosition(t, 1, -i / 2, 0, i, o), t.restore();
                    }
                    return !1;
                }
            }
        ]), i49;
    }(Py), By = function(t119) {
        kg(i50, t119);
        var e78 = My(i50);
        function i50() {
            return Ra(this, i50), e78.apply(this, arguments);
        }
        return Ha(i50, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: 0
                        },
                        {
                            x: -1,
                            y: 0.3
                        },
                        {
                            x: -0.9,
                            y: 0
                        },
                        {
                            x: -1,
                            y: -0.3
                        }
                    ];
                    return Py.transform(i, e), Py.drawPath(t, i), !0;
                }
            }
        ]), i50;
    }(Py), Iy = function() {
        function t120() {
            Ra(this, t120);
        }
        return Ha(t120, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: -1,
                            y: 0
                        },
                        {
                            x: 0,
                            y: 0.3
                        },
                        {
                            x: -0.4,
                            y: 0
                        },
                        {
                            x: 0,
                            y: -0.3
                        }
                    ];
                    return Py.transform(i, e), Py.drawPath(t, i), !0;
                }
            }
        ]), t120;
    }(), zy = function() {
        function t121() {
            Ra(this, t121);
        }
        return Ha(t121, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = {
                        x: -0.4,
                        y: 0
                    };
                    Py.transform(i, e), t.strokeStyle = t.fillStyle, t.fillStyle = "rgba(0, 0, 0, 0)";
                    var o = Math.PI, n = e.angle - o / 2, r = e.angle + o / 2;
                    return t.beginPath(), t.arc(i.x, i.y, 0.4 * e.length, n, r, !1), t.stroke(), !0;
                }
            }
        ]), t121;
    }(), Fy = function() {
        function t122() {
            Ra(this, t122);
        }
        return Ha(t122, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = {
                        x: -0.3,
                        y: 0
                    };
                    Py.transform(i, e), t.strokeStyle = t.fillStyle, t.fillStyle = "rgba(0, 0, 0, 0)";
                    var o = Math.PI, n = e.angle + o / 2, r = e.angle + 3 * o / 2;
                    return t.beginPath(), t.arc(i.x, i.y, 0.4 * e.length, n, r, !1), t.stroke(), !0;
                }
            }
        ]), t122;
    }(), Ny = function() {
        function t123() {
            Ra(this, t123);
        }
        return Ha(t123, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0.02,
                            y: 0
                        },
                        {
                            x: -1,
                            y: 0.3
                        },
                        {
                            x: -1,
                            y: -0.3
                        }
                    ];
                    return Py.transform(i, e), Py.drawPath(t, i), !0;
                }
            }
        ]), t123;
    }(), Ay = function() {
        function t124() {
            Ra(this, t124);
        }
        return Ha(t124, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: 0.3
                        },
                        {
                            x: 0,
                            y: -0.3
                        },
                        {
                            x: -1,
                            y: 0
                        }
                    ];
                    return Py.transform(i, e), Py.drawPath(t, i), !0;
                }
            }
        ]), t124;
    }(), Ry = function() {
        function t125() {
            Ra(this, t125);
        }
        return Ha(t125, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = {
                        x: -0.4,
                        y: 0
                    };
                    return Py.transform(i, e), ai(t, i.x, i.y, 0.4 * e.length), !0;
                }
            }
        ]), t125;
    }(), jy = function() {
        function t126() {
            Ra(this, t126);
        }
        return Ha(t126, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: 0.5
                        },
                        {
                            x: 0,
                            y: -0.5
                        },
                        {
                            x: -0.15,
                            y: -0.5
                        },
                        {
                            x: -0.15,
                            y: 0.5
                        }
                    ];
                    return Py.transform(i, e), Py.drawPath(t, i), !0;
                }
            }
        ]), t126;
    }(), Ly = function() {
        function t127() {
            Ra(this, t127);
        }
        return Ha(t127, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: 0.3
                        },
                        {
                            x: 0,
                            y: -0.3
                        },
                        {
                            x: -0.6,
                            y: -0.3
                        },
                        {
                            x: -0.6,
                            y: 0.3
                        }
                    ];
                    return Py.transform(i, e), Py.drawPath(t, i), !0;
                }
            }
        ]), t127;
    }(), Hy = function() {
        function t128() {
            Ra(this, t128);
        }
        return Ha(t128, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: 0
                        },
                        {
                            x: -0.5,
                            y: -0.3
                        },
                        {
                            x: -1,
                            y: 0
                        },
                        {
                            x: -0.5,
                            y: 0.3
                        }
                    ];
                    return Py.transform(i, e), Py.drawPath(t, i), !0;
                }
            }
        ]), t128;
    }(), Wy = function() {
        function t129() {
            Ra(this, t129);
        }
        return Ha(t129, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: -1,
                            y: 0.3
                        },
                        {
                            x: -0.5,
                            y: 0
                        },
                        {
                            x: -1,
                            y: -0.3
                        },
                        {
                            x: 0,
                            y: 0
                        }
                    ];
                    return Py.transform(i, e), Py.drawPath(t, i), !0;
                }
            }
        ]), t129;
    }(), Vy = function() {
        function t130() {
            Ra(this, t130);
        }
        return Ha(t130, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i;
                    switch(e.type && (i = e.type.toLowerCase()), i){
                        case "image":
                            return Dy.draw(t, e);
                        case "circle":
                            return Ry.draw(t, e);
                        case "box":
                            return Ly.draw(t, e);
                        case "crow":
                            return Iy.draw(t, e);
                        case "curve":
                            return zy.draw(t, e);
                        case "diamond":
                            return Hy.draw(t, e);
                        case "inv_curve":
                            return Fy.draw(t, e);
                        case "triangle":
                            return Ny.draw(t, e);
                        case "inv_triangle":
                            return Ay.draw(t, e);
                        case "bar":
                            return jy.draw(t, e);
                        case "vee":
                            return Wy.draw(t, e);
                        case "arrow":
                        default:
                            return By.draw(t, e);
                    }
                }
            }
        ]), t130;
    }();
    function qy(t, e79) {
        var i = Gh(t);
        if (ha) {
            var o = ha(t);
            e79 && (o = $d(o).call(o, function(e) {
                return ba(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function Uy(t) {
        for(var e80 = 1; e80 < arguments.length; e80++){
            var i, o = null != arguments[e80] ? arguments[e80] : {
            };
            if (e80 % 2) nd(i = qy(Object(o), !0)).call(i, function(e) {
                Wa(t, e, o[e]);
            });
            else if (Ta) Ba(t, Ta(o));
            else {
                var n;
                nd(n = qy(Object(o))).call(n, function(e) {
                    Aa(t, e, ba(o, e));
                });
            }
        }
        return t;
    }
    var Yy = function() {
        function t131(e, i, o) {
            Ra(this, t131), this._body = i, this._labelModule = o, this.color = {
            }, this.colorDirty = !0, this.hoverWidth = 1.5, this.selectionWidth = 2, this.setOptions(e), this.fromPoint = this.from, this.toPoint = this.to;
        }
        return Ha(t131, [
            {
                key: "connect",
                value: function() {
                    this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to];
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return !1;
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t, this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], this.id = this.options.id;
                }
            },
            {
                key: "drawLine",
                value: function(t, e, i, o) {
                    var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.getViaNode();
                    t.strokeStyle = this.getColor(t, e), t.lineWidth = e.width, !1 !== e.dashes ? this._drawDashedLine(t, e, n) : this._drawLine(t, e, n);
                }
            },
            {
                key: "_drawLine",
                value: function(t, e, i, o, n) {
                    if (this.from != this.to) this._line(t, e, i, o, n);
                    else {
                        var r = Bh(this._getCircleData(t), 3), s = r[0], a = r[1], h = r[2];
                        this._circle(t, e, s, a, h);
                    }
                }
            },
            {
                key: "_drawDashedLine",
                value: function(t, e, i, o, n) {
                    t.lineCap = "round";
                    var r = Hh(e.dashes) ? e.dashes : [
                        5,
                        5
                    ];
                    if (void 0 !== t.setLineDash) {
                        if (t.save(), t.setLineDash(r), t.lineDashOffset = 0, this.from != this.to) this._line(t, e, i);
                        else {
                            var s = Bh(this._getCircleData(t), 3), a = s[0], h = s[1], d = s[2];
                            this._circle(t, e, a, h, d);
                        }
                        t.setLineDash([
                            0
                        ]), t.lineDashOffset = 0, t.restore();
                    } else {
                        if (this.from != this.to) ci(t, this.from.x, this.from.y, this.to.x, this.to.y, r);
                        else {
                            var l = Bh(this._getCircleData(t), 3), c = l[0], u = l[1], f = l[2];
                            this._circle(t, e, c, u, f);
                        }
                        this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
                    }
                }
            },
            {
                key: "findBorderPosition",
                value: function(t, e, i) {
                    return this.from != this.to ? this._findBorderPosition(t, e, i) : this._findBorderPositionCircle(t, e, i);
                }
            },
            {
                key: "findBorderPositions",
                value: function(t) {
                    if (this.from != this.to) return {
                        from: this._findBorderPosition(this.from, t),
                        to: this._findBorderPosition(this.to, t)
                    };
                    var e, i = Bh(Lh(e = this._getCircleData(t)).call(e, 0, 2), 2), o = i[0], n = i[1];
                    return {
                        from: this._findBorderPositionCircle(this.from, t, {
                            x: o,
                            y: n,
                            low: 0.25,
                            high: 0.6,
                            direction: -1
                        }),
                        to: this._findBorderPositionCircle(this.from, t, {
                            x: o,
                            y: n,
                            low: 0.6,
                            high: 0.8,
                            direction: 1
                        })
                    };
                }
            },
            {
                key: "_getCircleData",
                value: function(t) {
                    var e = this.options.selfReference.size;
                    void 0 !== t && void 0 === this.from.shape.width && this.from.shape.resize(t);
                    var i = Gv(t, this.options.selfReference.angle, e, this.from);
                    return [
                        i.x,
                        i.y,
                        e
                    ];
                }
            },
            {
                key: "_pointOnCircle",
                value: function(t, e, i, o) {
                    var n = 2 * o * Math.PI;
                    return {
                        x: t + i * Math.cos(n),
                        y: e - i * Math.sin(n)
                    };
                }
            },
            {
                key: "_findBorderPositionCircle",
                value: function(t, e, i) {
                    var o, n = i.x, r = i.y, s = i.low, a = i.high, h = i.direction, d = this.options.selfReference.size, l = 0.5 * (s + a), c = 0;
                    !0 === this.options.arrowStrikethrough && (-1 === h ? c = this.options.endPointOffset.from : 1 === h && (c = this.options.endPointOffset.to));
                    var u = 0;
                    do {
                        l = 0.5 * (s + a), o = this._pointOnCircle(n, r, d, l);
                        var f = Math.atan2(t.y - o.y, t.x - o.x), p = t.distanceToBorder(e, f) + c - Math.sqrt(Math.pow(o.x - t.x, 2) + Math.pow(o.y - t.y, 2));
                        if (Math.abs(p) < 0.05) break;
                        p > 0 ? h > 0 ? s = l : a = l : h > 0 ? a = l : s = l, ++u;
                    }while (s <= a && u < 10)
                    return Uy(Uy({
                    }, o), {
                    }, {
                        t: l
                    });
                }
            },
            {
                key: "getLineWidth",
                value: function(t, e) {
                    return !0 === t ? Math.max(this.selectionWidth, 0.3 / this._body.view.scale) : !0 === e ? Math.max(this.hoverWidth, 0.3 / this._body.view.scale) : Math.max(this.options.width, 0.3 / this._body.view.scale);
                }
            },
            {
                key: "getColor",
                value: function(t, e) {
                    if (!1 !== e.inheritsColor) {
                        if ("both" === e.inheritsColor && this.from.id !== this.to.id) {
                            var i = t.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y), o = this.from.options.color.highlight.border, n = this.to.options.color.highlight.border;
                            return !1 === this.from.selected && !1 === this.to.selected ? (o = uf(this.from.options.color.border, e.opacity), n = uf(this.to.options.color.border, e.opacity)) : !0 === this.from.selected && !1 === this.to.selected ? n = this.to.options.color.border : !1 === this.from.selected && !0 === this.to.selected && (o = this.from.options.color.border), i.addColorStop(0, o), i.addColorStop(1, n), i;
                        }
                        return "to" === e.inheritsColor ? uf(this.to.options.color.border, e.opacity) : uf(this.from.options.color.border, e.opacity);
                    }
                    return uf(e.color, e.opacity);
                }
            },
            {
                key: "_circle",
                value: function(t, e, i, o, n) {
                    this.enableShadow(t, e);
                    var r = 0, s = 2 * Math.PI;
                    if (!this.options.selfReference.renderBehindTheNode) {
                        var a = this.options.selfReference.angle, h = this.options.selfReference.angle + Math.PI, d = this._findBorderPositionCircle(this.from, t, {
                            x: i,
                            y: o,
                            low: a,
                            high: h,
                            direction: -1
                        }), l = this._findBorderPositionCircle(this.from, t, {
                            x: i,
                            y: o,
                            low: a,
                            high: h,
                            direction: 1
                        });
                        r = Math.atan2(d.y - o, d.x - i), s = Math.atan2(l.y - o, l.x - i);
                    }
                    t.beginPath(), t.arc(i, o, n, r, s, !1), t.stroke(), this.disableShadow(t, e);
                }
            },
            {
                key: "getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    if (this.from != this.to) return this._getDistanceToEdge(t, e, i, o, n, r);
                    var s = Bh(this._getCircleData(void 0), 3), a = s[0], h = s[1], d = s[2], l = a - n, c = h - r;
                    return Math.abs(Math.sqrt(l * l + c * c) - d);
                }
            },
            {
                key: "_getDistanceToLine",
                value: function(t, e, i, o, n, r) {
                    var s = i - t, a = o - e, h = ((n - t) * s + (r - e) * a) / (s * s + a * a);
                    h > 1 ? h = 1 : h < 0 && (h = 0);
                    var d = t + h * s - n, l = e + h * a - r;
                    return Math.sqrt(d * d + l * l);
                }
            },
            {
                key: "getArrowData",
                value: function(t, e, i, o, n, r) {
                    var s, a, h, d, l, c, u, f = r.width;
                    "from" === e ? (h = this.from, d = this.to, l = r.fromArrowScale < 0, c = Math.abs(r.fromArrowScale), u = r.fromArrowType) : "to" === e ? (h = this.to, d = this.from, l = r.toArrowScale < 0, c = Math.abs(r.toArrowScale), u = r.toArrowType) : (h = this.to, d = this.from, l = r.middleArrowScale < 0, c = Math.abs(r.middleArrowScale), u = r.middleArrowType);
                    var p = 15 * c + 3 * f;
                    if (h != d) {
                        var v = p / Ty(h.x - d.x, h.y - d.y);
                        if ("middle" !== e) {
                            if (!0 === this.options.smooth.enabled) {
                                var g = this._findBorderPosition(h, t, {
                                    via: i
                                }), y = this.getPoint(g.t + v * ("from" === e ? 1 : -1), i);
                                s = Math.atan2(g.y - y.y, g.x - y.x), a = g;
                            } else s = Math.atan2(h.y - d.y, h.x - d.x), a = this._findBorderPosition(h, t);
                        } else {
                            var m = (l ? -v : v) / 2, b = this.getPoint(0.5 + m, i), w = this.getPoint(0.5 - m, i);
                            s = Math.atan2(b.y - w.y, b.x - w.x), a = this.getPoint(0.5, i);
                        }
                    } else {
                        var k = Bh(this._getCircleData(t), 3), _ = k[0], x = k[1], E = k[2];
                        if ("from" === e) {
                            var O = this.options.selfReference.angle, C = this.options.selfReference.angle + Math.PI, S = this._findBorderPositionCircle(this.from, t, {
                                x: _,
                                y: x,
                                low: O,
                                high: C,
                                direction: -1
                            });
                            s = -2 * S.t * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI, a = S;
                        } else if ("to" === e) {
                            var T = this.options.selfReference.angle, M = this.options.selfReference.angle + Math.PI, P = this._findBorderPositionCircle(this.from, t, {
                                x: _,
                                y: x,
                                low: T,
                                high: M,
                                direction: 1
                            });
                            s = -2 * P.t * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI, a = P;
                        } else {
                            var D = this.options.selfReference.angle / (2 * Math.PI);
                            a = this._pointOnCircle(_, x, E, D), s = -2 * D * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
                        }
                    }
                    return {
                        point: a,
                        core: {
                            x: a.x - 0.9 * p * Math.cos(s),
                            y: a.y - 0.9 * p * Math.sin(s)
                        },
                        angle: s,
                        length: p,
                        type: u
                    };
                }
            },
            {
                key: "drawArrowHead",
                value: function(t, e, i, o, n) {
                    t.strokeStyle = this.getColor(t, e), t.fillStyle = t.strokeStyle, t.lineWidth = e.width, Vy.draw(t, n) && (this.enableShadow(t, e), Ql(t).call(t), this.disableShadow(t, e));
                }
            },
            {
                key: "enableShadow",
                value: function(t, e) {
                    !0 === e.shadow && (t.shadowColor = e.shadowColor, t.shadowBlur = e.shadowSize, t.shadowOffsetX = e.shadowX, t.shadowOffsetY = e.shadowY);
                }
            },
            {
                key: "disableShadow",
                value: function(t, e) {
                    !0 === e.shadow && (t.shadowColor = "rgba(0,0,0,0)", t.shadowBlur = 0, t.shadowOffsetX = 0, t.shadowOffsetY = 0);
                }
            },
            {
                key: "drawBackground",
                value: function(t, e) {
                    if (!1 !== e.background) {
                        var i = {
                            strokeStyle: t.strokeStyle,
                            lineWidth: t.lineWidth,
                            dashes: t.dashes
                        };
                        t.strokeStyle = e.backgroundColor, t.lineWidth = e.backgroundSize, this.setStrokeDashed(t, e.backgroundDashes), t.stroke(), t.strokeStyle = i.strokeStyle, t.lineWidth = i.lineWidth, t.dashes = i.dashes, this.setStrokeDashed(t, e.dashes);
                    }
                }
            },
            {
                key: "setStrokeDashed",
                value: function(t, e) {
                    if (!1 !== e) {
                        if (void 0 !== t.setLineDash) {
                            var i = Hh(e) ? e : [
                                5,
                                5
                            ];
                            t.setLineDash(i);
                        } else console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
                    } else void 0 !== t.setLineDash ? t.setLineDash([]) : console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
                }
            }
        ]), t131;
    }();
    function Xy(t, e81) {
        var i = Gh(t);
        if (ha) {
            var o = ha(t);
            e81 && (o = $d(o).call(o, function(e) {
                return ba(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function Gy(t) {
        for(var e82 = 1; e82 < arguments.length; e82++){
            var i, o = null != arguments[e82] ? arguments[e82] : {
            };
            if (e82 % 2) nd(i = Xy(Object(o), !0)).call(i, function(e) {
                Wa(t, e, o[e]);
            });
            else if (Ta) Ba(t, Ta(o));
            else {
                var n;
                nd(n = Xy(Object(o))).call(n, function(e) {
                    Aa(t, e, ba(o, e));
                });
            }
        }
        return t;
    }
    function Ky(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var $y = function(t132) {
        kg(i51, t132);
        var e83 = Ky(i51);
        function i51(t, o, n) {
            return Ra(this, i51), e83.call(this, t, o, n);
        }
        return Ha(i51, [
            {
                key: "_findBorderPositionBezier",
                value: function(t, e) {
                    var i, o, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this._getViaCoordinates(), r = 10, s = 0.2, a = !1, h = 1, d = 0, l = this.to, c = this.options.endPointOffset ? this.options.endPointOffset.to : 0;
                    t.id === this.from.id && (l = this.from, a = !0, c = this.options.endPointOffset ? this.options.endPointOffset.from : 0), !1 === this.options.arrowStrikethrough && (c = 0);
                    var u = 0;
                    do {
                        o = 0.5 * (d + h), i = this.getPoint(o, n);
                        var f = Math.atan2(l.y - i.y, l.x - i.x), p = l.distanceToBorder(e, f) + c, v = Math.sqrt(Math.pow(i.x - l.x, 2) + Math.pow(i.y - l.y, 2)), g = p - v;
                        if (Math.abs(g) < s) break;
                        g < 0 ? !1 === a ? d = o : h = o : !1 === a ? h = o : d = o, ++u;
                    }while (d <= h && u < r)
                    return Gy(Gy({
                    }, i), {
                    }, {
                        t: o
                    });
                }
            },
            {
                key: "_getDistanceToBezierEdge",
                value: function(t, e, i, o, n, r, s) {
                    var a, h, d, l, c, u = 1000000000, f = t, p = e;
                    for(h = 1; h < 10; h++)d = 0.1 * h, l = Math.pow(1 - d, 2) * t + 2 * d * (1 - d) * s.x + Math.pow(d, 2) * i, c = Math.pow(1 - d, 2) * e + 2 * d * (1 - d) * s.y + Math.pow(d, 2) * o, h > 0 && (u = (a = this._getDistanceToLine(f, p, l, c, n, r)) < u ? a : u), f = l, p = c;
                    return u;
                }
            },
            {
                key: "_bezierCurve",
                value: function(t, e, i, o) {
                    t.beginPath(), t.moveTo(this.fromPoint.x, this.fromPoint.y), null != i && null != i.x ? null != o && null != o.x ? t.bezierCurveTo(i.x, i.y, o.x, o.y, this.toPoint.x, this.toPoint.y) : t.quadraticCurveTo(i.x, i.y, this.toPoint.x, this.toPoint.y) : t.lineTo(this.toPoint.x, this.toPoint.y), this.drawBackground(t, e), this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            }
        ]), i51;
    }(Yy);
    function Zy(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Qy = function(t133) {
        kg(i52, t133);
        var e84 = Zy(i52);
        function i52(t, o, n) {
            var r;
            return Ra(this, i52), (r = e84.call(this, t, o, n)).via = r.via, r._boundFunction = function() {
                r.positionBezierNode();
            }, r._body.emitter.on("_repositionBezierNodes", r._boundFunction), r;
        }
        return Ha(i52, [
            {
                key: "setOptions",
                value: function(t) {
                    xy(Eg(i52.prototype), "setOptions", this).call(this, t);
                    var e = !1;
                    this.options.physics !== t.physics && (e = !0), this.options = t, this.id = this.options.id, this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], this.setupSupportNode(), this.connect(), !0 === e && (this.via.setOptions({
                        physics: this.options.physics
                    }), this.positionBezierNode());
                }
            },
            {
                key: "connect",
                value: function() {
                    this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], void 0 === this.from || void 0 === this.to || !1 === this.options.physics || this.from.id === this.to.id ? this.via.setOptions({
                        physics: !1
                    }) : this.via.setOptions({
                        physics: !0
                    });
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return this._body.emitter.off("_repositionBezierNodes", this._boundFunction), void 0 !== this.via && (delete this._body.nodes[this.via.id], this.via = void 0, !0);
                }
            },
            {
                key: "setupSupportNode",
                value: function() {
                    if (void 0 === this.via) {
                        var t = "edgeId:" + this.id, e = this._body.functions.createNode({
                            id: t,
                            shape: "circle",
                            physics: !0,
                            hidden: !0
                        });
                        this._body.nodes[t] = e, this.via = e, this.via.parentEdgeId = this.id, this.positionBezierNode();
                    }
                }
            },
            {
                key: "positionBezierNode",
                value: function() {
                    void 0 !== this.via && void 0 !== this.from && void 0 !== this.to ? (this.via.x = 0.5 * (this.from.x + this.to.x), this.via.y = 0.5 * (this.from.y + this.to.y)) : void 0 !== this.via && (this.via.x = 0, this.via.y = 0);
                }
            },
            {
                key: "_line",
                value: function(t, e, i) {
                    this._bezierCurve(t, e, i);
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    return this.via;
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this.via;
                }
            },
            {
                key: "getPoint",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.via;
                    if (this.from === this.to) {
                        var i = this._getCircleData(), o = Bh(i, 3), n = o[0], r = o[1], s = o[2], a = 2 * Math.PI * (1 - t);
                        return {
                            x: n + s * Math.sin(a),
                            y: r + s - s * (1 - Math.cos(a))
                        };
                    }
                    return {
                        x: Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * e.x + Math.pow(t, 2) * this.toPoint.x,
                        y: Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * e.y + Math.pow(t, 2) * this.toPoint.y
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    return this._findBorderPositionBezier(t, e, this.via);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    return this._getDistanceToBezierEdge(t, e, i, o, n, r, this.via);
                }
            }
        ]), i52;
    }($y);
    function Jy(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var tm = function(t134) {
        kg(i53, t134);
        var e85 = Jy(i53);
        function i53(t, o, n) {
            return Ra(this, i53), e85.call(this, t, o, n);
        }
        return Ha(i53, [
            {
                key: "_line",
                value: function(t, e, i) {
                    this._bezierCurve(t, e, i);
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    var t, e, i = this.options.smooth.roundness, o = this.options.smooth.type, n = Math.abs(this.from.x - this.to.x), r = Math.abs(this.from.y - this.to.y);
                    if ("discrete" === o || "diagonalCross" === o) {
                        var s, a;
                        s = a = n <= r ? i * r : i * n, this.from.x > this.to.x && (s = -s), this.from.y >= this.to.y && (a = -a);
                        var h = this.from.x + s, d = this.from.y + a;
                        return "discrete" === o && (n <= r ? h = n < i * r ? this.from.x : h : d = r < i * n ? this.from.y : d), {
                            x: h,
                            y: d
                        };
                    }
                    if ("straightCross" === o) {
                        var l = (1 - i) * n, c = (1 - i) * r;
                        return n <= r ? (l = 0, this.from.y < this.to.y && (c = -c)) : (this.from.x < this.to.x && (l = -l), c = 0), {
                            x: this.to.x + l,
                            y: this.to.y + c
                        };
                    }
                    if ("horizontal" === o) {
                        var u = (1 - i) * n;
                        return this.from.x < this.to.x && (u = -u), {
                            x: this.to.x + u,
                            y: this.from.y
                        };
                    }
                    if ("vertical" === o) {
                        var f = (1 - i) * r;
                        return this.from.y < this.to.y && (f = -f), {
                            x: this.from.x,
                            y: this.to.y + f
                        };
                    }
                    if ("curvedCW" === o) {
                        n = this.to.x - this.from.x, r = this.from.y - this.to.y;
                        var p = Math.sqrt(n * n + r * r), v = Math.PI, g = (Math.atan2(r, n) + (0.5 * i + 0.5) * v) % (2 * v);
                        return {
                            x: this.from.x + (0.5 * i + 0.5) * p * Math.sin(g),
                            y: this.from.y + (0.5 * i + 0.5) * p * Math.cos(g)
                        };
                    }
                    if ("curvedCCW" === o) {
                        n = this.to.x - this.from.x, r = this.from.y - this.to.y;
                        var y = Math.sqrt(n * n + r * r), m = Math.PI, b = (Math.atan2(r, n) + (0.5 * -i + 0.5) * m) % (2 * m);
                        return {
                            x: this.from.x + (0.5 * i + 0.5) * y * Math.sin(b),
                            y: this.from.y + (0.5 * i + 0.5) * y * Math.cos(b)
                        };
                    }
                    t = e = n <= r ? i * r : i * n, this.from.x > this.to.x && (t = -t), this.from.y >= this.to.y && (e = -e);
                    var w = this.from.x + t, k = this.from.y + e;
                    return n <= r ? w = this.from.x <= this.to.x ? this.to.x < w ? this.to.x : w : this.to.x > w ? this.to.x : w : k = this.from.y >= this.to.y ? this.to.y > k ? this.to.y : k : this.to.y < k ? this.to.y : k, {
                        x: w,
                        y: k
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {
                    };
                    return this._findBorderPositionBezier(t, e, i.via);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    var s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : this._getViaCoordinates();
                    return this._getDistanceToBezierEdge(t, e, i, o, n, r, s);
                }
            },
            {
                key: "getPoint",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._getViaCoordinates(), i = t, o = Math.pow(1 - i, 2) * this.fromPoint.x + 2 * i * (1 - i) * e.x + Math.pow(i, 2) * this.toPoint.x, n = Math.pow(1 - i, 2) * this.fromPoint.y + 2 * i * (1 - i) * e.y + Math.pow(i, 2) * this.toPoint.y;
                    return {
                        x: o,
                        y: n
                    };
                }
            }
        ]), i53;
    }($y);
    function em(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    function im(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var om = function(t135) {
        kg(i54, t135);
        var e86 = im(i54);
        function i54(t, o, n) {
            return Ra(this, i54), e86.call(this, t, o, n);
        }
        return Ha(i54, [
            {
                key: "_line",
                value: function(t, e, i) {
                    var o = i[0], n = i[1];
                    this._bezierCurve(t, e, o, n);
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    var t, e, i, o, n = this.from.x - this.to.x, r = this.from.y - this.to.y, s = this.options.smooth.roundness;
                    return (Math.abs(n) > Math.abs(r) || !0 === this.options.smooth.forceDirection || "horizontal" === this.options.smooth.forceDirection) && "vertical" !== this.options.smooth.forceDirection ? (e = this.from.y, o = this.to.y, t = this.from.x - s * n, i = this.to.x + s * n) : (e = this.from.y - s * r, o = this.to.y + s * r, t = this.from.x, i = this.to.x), [
                        {
                            x: t,
                            y: e
                        },
                        {
                            x: i,
                            y: o
                        }
                    ];
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    return this._findBorderPositionBezier(t, e);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    var s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : this._getViaCoordinates(), a = Bh(s, 2), h = a[0], d = a[1];
                    return this._getDistanceToBezierEdge2(t, e, i, o, n, r, h, d);
                }
            },
            {
                key: "getPoint",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._getViaCoordinates(), i = Bh(e, 2), o = i[0], n = i[1], r = t, s = [
                        Math.pow(1 - r, 3),
                        3 * r * Math.pow(1 - r, 2),
                        3 * Math.pow(r, 2) * (1 - r),
                        Math.pow(r, 3)
                    ], a = s[0] * this.fromPoint.x + s[1] * o.x + s[2] * n.x + s[3] * this.toPoint.x, h = s[0] * this.fromPoint.y + s[1] * o.y + s[2] * n.y + s[3] * this.toPoint.y;
                    return {
                        x: a,
                        y: h
                    };
                }
            }
        ]), i54;
    }(function(t136) {
        kg(i55, t136);
        var e87 = em(i55);
        function i55(t, o, n) {
            return Ra(this, i55), e87.call(this, t, o, n);
        }
        return Ha(i55, [
            {
                key: "_getDistanceToBezierEdge2",
                value: function(t, e, i, o, n, r, s, a) {
                    for(var h = 1000000000, d = t, l = e, c = [
                        0,
                        0,
                        0,
                        0
                    ], u = 1; u < 10; u++){
                        var f = 0.1 * u;
                        c[0] = Math.pow(1 - f, 3), c[1] = 3 * f * Math.pow(1 - f, 2), c[2] = 3 * Math.pow(f, 2) * (1 - f), c[3] = Math.pow(f, 3);
                        var p = c[0] * t + c[1] * s.x + c[2] * a.x + c[3] * i, v = c[0] * e + c[1] * s.y + c[2] * a.y + c[3] * o;
                        if (u > 0) {
                            var g = this._getDistanceToLine(d, l, p, v, n, r);
                            h = g < h ? g : h;
                        }
                        d = p, l = v;
                    }
                    return h;
                }
            }
        ]), i55;
    }($y));
    function nm(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var rm = function(t137) {
        kg(i56, t137);
        var e88 = nm(i56);
        function i56(t, o, n) {
            return Ra(this, i56), e88.call(this, t, o, n);
        }
        return Ha(i56, [
            {
                key: "_line",
                value: function(t, e) {
                    t.beginPath(), t.moveTo(this.fromPoint.x, this.fromPoint.y), t.lineTo(this.toPoint.x, this.toPoint.y), this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
                }
            },
            {
                key: "getViaNode",
                value: function() {
                }
            },
            {
                key: "getPoint",
                value: function(t) {
                    return {
                        x: (1 - t) * this.fromPoint.x + t * this.toPoint.x,
                        y: (1 - t) * this.fromPoint.y + t * this.toPoint.y
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    var i = this.to, o = this.from;
                    t.id === this.from.id && (i = this.from, o = this.to);
                    var n = Math.atan2(i.y - o.y, i.x - o.x), r = i.x - o.x, s = i.y - o.y, a = Math.sqrt(r * r + s * s), h = (a - t.distanceToBorder(e, n)) / a;
                    return {
                        x: (1 - h) * o.x + h * i.x,
                        y: (1 - h) * o.y + h * i.y,
                        t: 0
                    };
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    return this._getDistanceToLine(t, e, i, o, n, r);
                }
            }
        ]), i56;
    }(Yy), sm = function() {
        function t138(e, i, o, n, r) {
            if (Ra(this, t138), void 0 === i) throw new Error("No body provided");
            this.options = kf(n), this.globalOptions = n, this.defaultOptions = r, this.body = i, this.imagelist = o, this.id = void 0, this.fromId = void 0, this.toId = void 0, this.selected = !1, this.hover = !1, this.labelDirty = !0, this.baseWidth = this.options.width, this.baseFontSize = this.options.font.size, this.from = void 0, this.to = void 0, this.edgeType = void 0, this.connected = !1, this.labelModule = new rg(this.body, this.options, !0), this.setOptions(e);
        }
        return Ha(t138, [
            {
                key: "setOptions",
                value: function(e) {
                    if (e) {
                        var i = void 0 !== e.physics && this.options.physics !== e.physics || void 0 !== e.hidden && (this.options.hidden || !1) !== (e.hidden || !1) || void 0 !== e.from && this.options.from !== e.from || void 0 !== e.to && this.options.to !== e.to;
                        t138.parseOptions(this.options, e, !0, this.globalOptions), void 0 !== e.id && (this.id = e.id), void 0 !== e.from && (this.fromId = e.from), void 0 !== e.to && (this.toId = e.to), void 0 !== e.title && (this.title = e.title), void 0 !== e.value && (e.value = jv(e.value));
                        var o = [
                            e,
                            this.options,
                            this.defaultOptions
                        ];
                        return this.chooser = Uv("edge", o), this.updateLabelModule(e), i = this.updateEdgeType() || i, this._setInteractionWidths(), this.connect(), i;
                    }
                }
            },
            {
                key: "getFormattingValues",
                value: function() {
                    var t = !0 === this.options.arrows.to || !0 === this.options.arrows.to.enabled, e = !0 === this.options.arrows.from || !0 === this.options.arrows.from.enabled, i = !0 === this.options.arrows.middle || !0 === this.options.arrows.middle.enabled, o = this.options.color.inherit, n = {
                        toArrow: t,
                        toArrowScale: this.options.arrows.to.scaleFactor,
                        toArrowType: this.options.arrows.to.type,
                        toArrowSrc: this.options.arrows.to.src,
                        toArrowImageWidth: this.options.arrows.to.imageWidth,
                        toArrowImageHeight: this.options.arrows.to.imageHeight,
                        middleArrow: i,
                        middleArrowScale: this.options.arrows.middle.scaleFactor,
                        middleArrowType: this.options.arrows.middle.type,
                        middleArrowSrc: this.options.arrows.middle.src,
                        middleArrowImageWidth: this.options.arrows.middle.imageWidth,
                        middleArrowImageHeight: this.options.arrows.middle.imageHeight,
                        fromArrow: e,
                        fromArrowScale: this.options.arrows.from.scaleFactor,
                        fromArrowType: this.options.arrows.from.type,
                        fromArrowSrc: this.options.arrows.from.src,
                        fromArrowImageWidth: this.options.arrows.from.imageWidth,
                        fromArrowImageHeight: this.options.arrows.from.imageHeight,
                        arrowStrikethrough: this.options.arrowStrikethrough,
                        color: o ? void 0 : this.options.color.color,
                        inheritsColor: o,
                        opacity: this.options.color.opacity,
                        hidden: this.options.hidden,
                        length: this.options.length,
                        shadow: this.options.shadow.enabled,
                        shadowColor: this.options.shadow.color,
                        shadowSize: this.options.shadow.size,
                        shadowX: this.options.shadow.x,
                        shadowY: this.options.shadow.y,
                        dashes: this.options.dashes,
                        width: this.options.width,
                        background: this.options.background.enabled,
                        backgroundColor: this.options.background.color,
                        backgroundSize: this.options.background.size,
                        backgroundDashes: this.options.background.dashes
                    };
                    if (this.selected || this.hover) {
                        if (!0 === this.chooser) {
                            if (this.selected) {
                                var r = this.options.selectionWidth;
                                "function" == typeof r ? n.width = r(n.width) : "number" == typeof r && (n.width += r), n.width = Math.max(n.width, 0.3 / this.body.view.scale), n.color = this.options.color.highlight, n.shadow = this.options.shadow.enabled;
                            } else if (this.hover) {
                                var s = this.options.hoverWidth;
                                "function" == typeof s ? n.width = s(n.width) : "number" == typeof s && (n.width += s), n.width = Math.max(n.width, 0.3 / this.body.view.scale), n.color = this.options.color.hover, n.shadow = this.options.shadow.enabled;
                            }
                        } else "function" == typeof this.chooser && (this.chooser(n, this.options.id, this.selected, this.hover), void 0 !== n.color && (n.inheritsColor = !1), !1 === n.shadow && (n.shadowColor === this.options.shadow.color && n.shadowSize === this.options.shadow.size && n.shadowX === this.options.shadow.x && n.shadowY === this.options.shadow.y || (n.shadow = !0)));
                    } else n.shadow = this.options.shadow.enabled, n.width = Math.max(n.width, 0.3 / this.body.view.scale);
                    return n;
                }
            },
            {
                key: "updateLabelModule",
                value: function(t) {
                    var e = [
                        t,
                        this.options,
                        this.globalOptions,
                        this.defaultOptions
                    ];
                    this.labelModule.update(this.options, e), void 0 !== this.labelModule.baseSize && (this.baseFontSize = this.labelModule.baseSize);
                }
            },
            {
                key: "updateEdgeType",
                value: function() {
                    var t = this.options.smooth, e = !1, i = !0;
                    return void 0 !== this.edgeType && ((this.edgeType instanceof Qy && !0 === t.enabled && "dynamic" === t.type || this.edgeType instanceof om && !0 === t.enabled && "cubicBezier" === t.type || this.edgeType instanceof tm && !0 === t.enabled && "dynamic" !== t.type && "cubicBezier" !== t.type || this.edgeType instanceof rm && !1 === t.type.enabled) && (i = !1), !0 === i && (e = this.cleanup())), !0 === i ? !0 === t.enabled ? "dynamic" === t.type ? (e = !0, this.edgeType = new Qy(this.options, this.body, this.labelModule)) : "cubicBezier" === t.type ? this.edgeType = new om(this.options, this.body, this.labelModule) : this.edgeType = new tm(this.options, this.body, this.labelModule) : this.edgeType = new rm(this.options, this.body, this.labelModule) : this.edgeType.setOptions(this.options), e;
                }
            },
            {
                key: "connect",
                value: function() {
                    this.disconnect(), this.from = this.body.nodes[this.fromId] || void 0, this.to = this.body.nodes[this.toId] || void 0, this.connected = void 0 !== this.from && void 0 !== this.to, !0 === this.connected ? (this.from.attachEdge(this), this.to.attachEdge(this)) : (this.from && this.from.detachEdge(this), this.to && this.to.detachEdge(this)), this.edgeType.connect();
                }
            },
            {
                key: "disconnect",
                value: function() {
                    this.from && (this.from.detachEdge(this), this.from = void 0), this.to && (this.to.detachEdge(this), this.to = void 0), this.connected = !1;
                }
            },
            {
                key: "getTitle",
                value: function() {
                    return this.title;
                }
            },
            {
                key: "isSelected",
                value: function() {
                    return this.selected;
                }
            },
            {
                key: "getValue",
                value: function() {
                    return this.options.value;
                }
            },
            {
                key: "setValueRange",
                value: function(t, e, i) {
                    if (void 0 !== this.options.value) {
                        var o = this.options.scaling.customScalingFunction(t, e, i, this.options.value), n = this.options.scaling.max - this.options.scaling.min;
                        if (!0 === this.options.scaling.label.enabled) {
                            var r = this.options.scaling.label.max - this.options.scaling.label.min;
                            this.options.font.size = this.options.scaling.label.min + o * r;
                        }
                        this.options.width = this.options.scaling.min + o * n;
                    } else this.options.width = this.baseWidth, this.options.font.size = this.baseFontSize;
                    this._setInteractionWidths(), this.updateLabelModule();
                }
            },
            {
                key: "_setInteractionWidths",
                value: function() {
                    "function" == typeof this.options.hoverWidth ? this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width) : this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width, "function" == typeof this.options.selectionWidth ? this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width) : this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
                }
            },
            {
                key: "draw",
                value: function(t) {
                    var e = this.getFormattingValues();
                    if (!e.hidden) {
                        var i = this.edgeType.getViaNode();
                        this.edgeType.drawLine(t, e, this.selected, this.hover, i), this.drawLabel(t, i);
                    }
                }
            },
            {
                key: "drawArrows",
                value: function(t) {
                    var e = this.getFormattingValues();
                    if (!e.hidden) {
                        var i = this.edgeType.getViaNode(), o = {
                        };
                        this.edgeType.fromPoint = this.edgeType.from, this.edgeType.toPoint = this.edgeType.to, e.fromArrow && (o.from = this.edgeType.getArrowData(t, "from", i, this.selected, this.hover, e), !1 === e.arrowStrikethrough && (this.edgeType.fromPoint = o.from.core), e.fromArrowSrc && (o.from.image = this.imagelist.load(e.fromArrowSrc)), e.fromArrowImageWidth && (o.from.imageWidth = e.fromArrowImageWidth), e.fromArrowImageHeight && (o.from.imageHeight = e.fromArrowImageHeight)), e.toArrow && (o.to = this.edgeType.getArrowData(t, "to", i, this.selected, this.hover, e), !1 === e.arrowStrikethrough && (this.edgeType.toPoint = o.to.core), e.toArrowSrc && (o.to.image = this.imagelist.load(e.toArrowSrc)), e.toArrowImageWidth && (o.to.imageWidth = e.toArrowImageWidth), e.toArrowImageHeight && (o.to.imageHeight = e.toArrowImageHeight)), e.middleArrow && (o.middle = this.edgeType.getArrowData(t, "middle", i, this.selected, this.hover, e), e.middleArrowSrc && (o.middle.image = this.imagelist.load(e.middleArrowSrc)), e.middleArrowImageWidth && (o.middle.imageWidth = e.middleArrowImageWidth), e.middleArrowImageHeight && (o.middle.imageHeight = e.middleArrowImageHeight)), e.fromArrow && this.edgeType.drawArrowHead(t, e, this.selected, this.hover, o.from), e.middleArrow && this.edgeType.drawArrowHead(t, e, this.selected, this.hover, o.middle), e.toArrow && this.edgeType.drawArrowHead(t, e, this.selected, this.hover, o.to);
                    }
                }
            },
            {
                key: "drawLabel",
                value: function(t, e) {
                    if (void 0 !== this.options.label) {
                        var i, o = this.from, n = this.to;
                        if (this.labelModule.differentState(this.selected, this.hover) && this.labelModule.getTextSize(t, this.selected, this.hover), o.id != n.id) {
                            this.labelModule.pointToSelf = !1, i = this.edgeType.getPoint(0.5, e), t.save();
                            var r = this._getRotation(t);
                            0 != r.angle && (t.translate(r.x, r.y), t.rotate(r.angle)), this.labelModule.draw(t, i.x, i.y, this.selected, this.hover), t.restore();
                        } else {
                            this.labelModule.pointToSelf = !0;
                            var s = Gv(t, this.options.selfReference.angle, this.options.selfReference.size, o);
                            i = this._pointOnCircle(s.x, s.y, this.options.selfReference.size, this.options.selfReference.angle), this.labelModule.draw(t, i.x, i.y, this.selected, this.hover);
                        }
                    }
                }
            },
            {
                key: "getItemsOnPoint",
                value: function(t) {
                    var e = [];
                    if (this.labelModule.visible()) {
                        var i = this._getRotation();
                        Yv(this.labelModule.getSize(), t, i) && e.push({
                            edgeId: this.id,
                            labelId: 0
                        });
                    }
                    var o = {
                        left: t.x,
                        top: t.y
                    };
                    return this.isOverlappingWith(o) && e.push({
                        edgeId: this.id
                    }), e;
                }
            },
            {
                key: "isOverlappingWith",
                value: function(t) {
                    if (this.connected) {
                        var e = this.from.x, i = this.from.y, o = this.to.x, n = this.to.y, r = t.left, s = t.top;
                        return this.edgeType.getDistanceToEdge(e, i, o, n, r, s) < 10;
                    }
                    return !1;
                }
            },
            {
                key: "_getRotation",
                value: function(t) {
                    var e = this.edgeType.getViaNode(), i = this.edgeType.getPoint(0.5, e);
                    void 0 !== t && this.labelModule.calculateLabelSize(t, this.selected, this.hover, i.x, i.y);
                    var o = {
                        x: i.x,
                        y: this.labelModule.size.yLine,
                        angle: 0
                    };
                    if (!this.labelModule.visible()) return o;
                    if ("horizontal" === this.options.font.align) return o;
                    var n = this.from.y - this.to.y, r = this.from.x - this.to.x, s = Math.atan2(n, r);
                    return (s < -1 && r < 0 || s > 0 && r < 0) && (s += Math.PI), o.angle = s, o;
                }
            },
            {
                key: "_pointOnCircle",
                value: function(t, e, i, o) {
                    return {
                        x: t + i * Math.cos(o),
                        y: e - i * Math.sin(o)
                    };
                }
            },
            {
                key: "select",
                value: function() {
                    this.selected = !0;
                }
            },
            {
                key: "unselect",
                value: function() {
                    this.selected = !1;
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return this.edgeType.cleanup();
                }
            },
            {
                key: "remove",
                value: function() {
                    this.cleanup(), this.disconnect(), delete this.body.edges[this.id];
                }
            },
            {
                key: "endPointsValid",
                value: function() {
                    return void 0 !== this.body.nodes[this.fromId] && void 0 !== this.body.nodes[this.toId];
                }
            }
        ], [
            {
                key: "parseOptions",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {
                    }, n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], r = [
                        "endPointOffset",
                        "arrowStrikethrough",
                        "id",
                        "from",
                        "hidden",
                        "hoverWidth",
                        "labelHighlightBold",
                        "length",
                        "line",
                        "opacity",
                        "physics",
                        "scaling",
                        "selectionWidth",
                        "selfReferenceSize",
                        "selfReference",
                        "to",
                        "title",
                        "value",
                        "width",
                        "font",
                        "chosen",
                        "widthConstraint"
                    ];
                    if (nf(r, t, e, i), void 0 !== e.endPointOffset && void 0 !== e.endPointOffset.from && (Pv(e.endPointOffset.from) ? t.endPointOffset.from = e.endPointOffset.from : (t.endPointOffset.from = void 0 !== o.endPointOffset.from ? o.endPointOffset.from : 0, console.error("endPointOffset.from is not a valid number"))), void 0 !== e.endPointOffset && void 0 !== e.endPointOffset.to && (Pv(e.endPointOffset.to) ? t.endPointOffset.to = e.endPointOffset.to : (t.endPointOffset.to = void 0 !== o.endPointOffset.to ? o.endPointOffset.to : 0, console.error("endPointOffset.to is not a valid number"))), Xv(e.label) ? t.label = e.label : Xv(t.label) || (t.label = void 0), _f(t, e, "smooth", o), _f(t, e, "shadow", o), _f(t, e, "background", o), void 0 !== e.dashes && null !== e.dashes ? t.dashes = e.dashes : !0 === i && null === e.dashes && (t.dashes = Bl(o.dashes)), void 0 !== e.scaling && null !== e.scaling ? (void 0 !== e.scaling.min && (t.scaling.min = e.scaling.min), void 0 !== e.scaling.max && (t.scaling.max = e.scaling.max), _f(t.scaling, e.scaling, "label", o.scaling)) : !0 === i && null === e.scaling && (t.scaling = Bl(o.scaling)), void 0 !== e.arrows && null !== e.arrows) {
                        if ("string" == typeof e.arrows) {
                            var s = e.arrows.toLowerCase();
                            t.arrows.to.enabled = -1 != Cl(s).call(s, "to"), t.arrows.middle.enabled = -1 != Cl(s).call(s, "middle"), t.arrows.from.enabled = -1 != Cl(s).call(s, "from");
                        } else {
                            if ("object" !== zh(e.arrows)) throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + Wl(e.arrows));
                            _f(t.arrows, e.arrows, "to", o.arrows), _f(t.arrows, e.arrows, "middle", o.arrows), _f(t.arrows, e.arrows, "from", o.arrows);
                        }
                    } else !0 === i && null === e.arrows && (t.arrows = Bl(o.arrows));
                    if (void 0 !== e.color && null !== e.color) {
                        var a = Ju(e.color) ? {
                            color: e.color,
                            highlight: e.color,
                            hover: e.color,
                            inherit: !1,
                            opacity: 1
                        } : e.color, h = t.color;
                        if (n) sf(h, o.color, !1, i);
                        else for(var d in h)Object.prototype.hasOwnProperty.call(h, d) && delete h[d];
                        if (Ju(h)) h.color = h, h.highlight = h, h.hover = h, h.inherit = !1, void 0 === a.opacity && (h.opacity = 1);
                        else {
                            var l = !1;
                            void 0 !== a.color && (h.color = a.color, l = !0), void 0 !== a.highlight && (h.highlight = a.highlight, l = !0), void 0 !== a.hover && (h.hover = a.hover, l = !0), void 0 !== a.inherit && (h.inherit = a.inherit), void 0 !== a.opacity && (h.opacity = Math.min(1, Math.max(0, a.opacity))), !0 === l ? h.inherit = !1 : void 0 === h.inherit && (h.inherit = "from");
                        }
                    } else !0 === i && null === e.color && (t.color = kf(o.color));
                    !0 === i && null === e.font && (t.font = kf(o.font)), Object.prototype.hasOwnProperty.call(e, "selfReferenceSize") && (console.warn("The selfReferenceSize property has been deprecated. Please use selfReference property instead. The selfReference can be set like thise selfReference:{size:30, angle:Math.PI / 4}"), t.selfReference.size = e.selfReferenceSize);
                }
            }
        ]), t138;
    }(), am = function() {
        function t139(e89, i, o13) {
            var n11, r = this;
            Ra(this, t139), this.body = e89, this.images = i, this.groups = o13, this.body.functions.createEdge = si(n11 = this.create).call(n11, this), this.edgesListeners = {
                add: function(t, e) {
                    r.add(e.items);
                },
                update: function(t, e) {
                    r.update(e.items);
                },
                remove: function(t, e) {
                    r.remove(e.items);
                }
            }, this.options = {
            }, this.defaultOptions = {
                arrows: {
                    to: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    },
                    middle: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    },
                    from: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    }
                },
                endPointOffset: {
                    from: 0,
                    to: 0
                },
                arrowStrikethrough: !0,
                color: {
                    color: "#848484",
                    highlight: "#848484",
                    hover: "#848484",
                    inherit: "from",
                    opacity: 1
                },
                dashes: !1,
                font: {
                    color: "#343434",
                    size: 14,
                    face: "arial",
                    background: "none",
                    strokeWidth: 2,
                    strokeColor: "#ffffff",
                    align: "horizontal",
                    multi: !1,
                    vadjust: 0,
                    bold: {
                        mod: "bold"
                    },
                    boldital: {
                        mod: "bold italic"
                    },
                    ital: {
                        mod: "italic"
                    },
                    mono: {
                        mod: "",
                        size: 15,
                        face: "courier new",
                        vadjust: 2
                    }
                },
                hidden: !1,
                hoverWidth: 1.5,
                label: void 0,
                labelHighlightBold: !0,
                length: void 0,
                physics: !0,
                scaling: {
                    min: 1,
                    max: 15,
                    label: {
                        enabled: !0,
                        min: 14,
                        max: 30,
                        maxVisible: 30,
                        drawThreshold: 5
                    },
                    customScalingFunction: function(t, e, i, o) {
                        if (e === t) return 0.5;
                        var n = 1 / (e - t);
                        return Math.max(0, (o - t) * n);
                    }
                },
                selectionWidth: 1.5,
                selfReference: {
                    size: 20,
                    angle: Math.PI / 4,
                    renderBehindTheNode: !0
                },
                shadow: {
                    enabled: !1,
                    color: "rgba(0,0,0,0.5)",
                    size: 10,
                    x: 5,
                    y: 5
                },
                background: {
                    enabled: !1,
                    color: "rgba(111,111,111,1)",
                    size: 10,
                    dashes: !1
                },
                smooth: {
                    enabled: !0,
                    type: "dynamic",
                    forceDirection: "none",
                    roundness: 0.5
                },
                title: void 0,
                width: 1,
                value: void 0
            }, sf(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return Ha(t139, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t140, e90, i = this;
                    this.body.emitter.on("_forceDisableDynamicCurves", function(t) {
                        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                        "dynamic" === t && (t = "continuous");
                        var o = !1;
                        for(var n in i.body.edges)if (Object.prototype.hasOwnProperty.call(i.body.edges, n)) {
                            var r = i.body.edges[n], s = i.body.data.edges.get(n);
                            if (null != s) {
                                var a = s.smooth;
                                void 0 !== a && !0 === a.enabled && "dynamic" === a.type && (void 0 === t ? r.setOptions({
                                    smooth: !1
                                }) : r.setOptions({
                                    smooth: {
                                        type: t
                                    }
                                }), o = !0);
                            }
                        }
                        !0 === e && !0 === o && i.body.emitter.emit("_dataChanged");
                    }), this.body.emitter.on("_dataUpdated", function() {
                        i.reconnectEdges();
                    }), this.body.emitter.on("refreshEdges", si(t140 = this.refresh).call(t140, this)), this.body.emitter.on("refresh", si(e90 = this.refresh).call(e90, this)), this.body.emitter.on("destroy", function() {
                        lf(i.edgesListeners, function(t, e) {
                            i.body.data.edges && i.body.data.edges.off(e, t);
                        }), delete i.body.functions.createEdge, delete i.edgesListeners.add, delete i.edgesListeners.update, delete i.edgesListeners.remove, delete i.edgesListeners;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        sm.parseOptions(this.options, t, !0, this.defaultOptions, !0);
                        var e = !1;
                        if (void 0 !== t.smooth) for(var i in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, i) && (e = this.body.edges[i].updateEdgeType() || e);
                        if (void 0 !== t.font) for(var o in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, o) && this.body.edges[o].updateLabelModule();
                        void 0 === t.hidden && void 0 === t.physics && !0 !== e || this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "setData",
                value: function(t141) {
                    var i = this, o = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = this.body.data.edges;
                    if (e1.isDataViewLike("id", t141)) this.body.data.edges = t141;
                    else if (Hh(t141)) this.body.data.edges = new e1.DataSet, this.body.data.edges.add(t141);
                    else {
                        if (t141) throw new TypeError("Array or DataSet expected");
                        this.body.data.edges = new e1.DataSet;
                    }
                    if (n && lf(this.edgesListeners, function(t, e) {
                        n.off(e, t);
                    }), this.body.edges = {
                    }, this.body.data.edges) {
                        lf(this.edgesListeners, function(t, e) {
                            i.body.data.edges.on(e, t);
                        });
                        var r = this.body.data.edges.getIds();
                        this.add(r, !0);
                    }
                    this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), !1 === o && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "add",
                value: function(t) {
                    for(var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = this.body.edges, o = this.body.data.edges, n = 0; n < t.length; n++){
                        var r = t[n], s = i[r];
                        s && s.disconnect();
                        var a = o.get(r, {
                            showInternalIds: !0
                        });
                        i[r] = this.create(a);
                    }
                    this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), !1 === e && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "update",
                value: function(t) {
                    for(var e = this.body.edges, i = this.body.data.edges, o = !1, n = 0; n < t.length; n++){
                        var r = t[n], s = i.get(r), a = e[r];
                        void 0 !== a ? (a.disconnect(), o = a.setOptions(s) || o, a.connect()) : (this.body.edges[r] = this.create(s), o = !0);
                    }
                    !0 === o ? (this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), this.body.emitter.emit("_dataChanged")) : this.body.emitter.emit("_dataUpdated");
                }
            },
            {
                key: "remove",
                value: function(t) {
                    var e91 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if (0 !== t.length) {
                        var i = this.body.edges;
                        lf(t, function(t) {
                            var e = i[t];
                            void 0 !== e && e.remove();
                        }), e91 && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "refresh",
                value: function() {
                    var t = this;
                    lf(this.body.edges, function(e, i) {
                        var o = t.body.data.edges.get(i);
                        void 0 !== o && e.setOptions(o);
                    });
                }
            },
            {
                key: "create",
                value: function(t) {
                    return new sm(t, this.body, this.images, this.options, this.defaultOptions);
                }
            },
            {
                key: "reconnectEdges",
                value: function() {
                    var t, e = this.body.nodes, i = this.body.edges;
                    for(t in e)Object.prototype.hasOwnProperty.call(e, t) && (e[t].edges = []);
                    for(t in i)if (Object.prototype.hasOwnProperty.call(i, t)) {
                        var o = i[t];
                        o.from = null, o.to = null, o.connect();
                    }
                }
            },
            {
                key: "getConnectedNodes",
                value: function(t) {
                    var e = [];
                    if (void 0 !== this.body.edges[t]) {
                        var i = this.body.edges[t];
                        void 0 !== i.fromId && e.push(i.fromId), void 0 !== i.toId && e.push(i.toId);
                    }
                    return e;
                }
            },
            {
                key: "_updateState",
                value: function() {
                    this._addMissingEdges(), this._removeInvalidEdges();
                }
            },
            {
                key: "_removeInvalidEdges",
                value: function() {
                    var t = this, e = [];
                    lf(this.body.edges, function(i, o) {
                        var n = t.body.nodes[i.toId], r = t.body.nodes[i.fromId];
                        void 0 !== n && !0 === n.isCluster || void 0 !== r && !0 === r.isCluster || void 0 !== n && void 0 !== r || e.push(o);
                    }), this.remove(e, !1);
                }
            },
            {
                key: "_addMissingEdges",
                value: function() {
                    var t = this.body.data.edges;
                    if (null != t) {
                        var e = this.body.edges, i = [];
                        nd(t).call(t, function(t, o) {
                            void 0 === e[o] && i.push(o);
                        }), this.add(i, !0);
                    }
                }
            }
        ]), t139;
    }(), hm = function() {
        function t142(e, i, o) {
            Ra(this, t142), this.body = e, this.physicsBody = i, this.barnesHutTree, this.setOptions(o), this._rng = Vu("BARNES HUT SOLVER");
        }
        return Ha(t142, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t, this.thetaInversed = 1 / this.options.theta, this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));
                }
            },
            {
                key: "solve",
                value: function() {
                    if (0 !== this.options.gravitationalConstant && this.physicsBody.physicsNodeIndices.length > 0) {
                        var t, e = this.body.nodes, i = this.physicsBody.physicsNodeIndices, o = i.length, n = this._formBarnesHutTree(e, i);
                        this.barnesHutTree = n;
                        for(var r = 0; r < o; r++)(t = e[i[r]]).options.mass > 0 && this._getForceContributions(n.root, t);
                    }
                }
            },
            {
                key: "_getForceContributions",
                value: function(t, e) {
                    this._getForceContribution(t.children.NW, e), this._getForceContribution(t.children.NE, e), this._getForceContribution(t.children.SW, e), this._getForceContribution(t.children.SE, e);
                }
            },
            {
                key: "_getForceContribution",
                value: function(t, e) {
                    if (t.childrenCount > 0) {
                        var i = t.centerOfMass.x - e.x, o = t.centerOfMass.y - e.y, n = Math.sqrt(i * i + o * o);
                        n * t.calcSize > this.thetaInversed ? this._calculateForces(n, i, o, e, t) : 4 === t.childrenCount ? this._getForceContributions(t, e) : t.children.data.id != e.id && this._calculateForces(n, i, o, e, t);
                    }
                }
            },
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    0 === t && (e = t = 0.1), this.overlapAvoidanceFactor < 1 && o.shape.radius && (t = Math.max(0.1 + this.overlapAvoidanceFactor * o.shape.radius, t - o.shape.radius));
                    var r = this.options.gravitationalConstant * n.mass * o.options.mass / Math.pow(t, 3), s = e * r, a = i * r;
                    this.physicsBody.forces[o.id].x += s, this.physicsBody.forces[o.id].y += a;
                }
            },
            {
                key: "_formBarnesHutTree",
                value: function(t, e) {
                    for(var i, o = e.length, n = t[e[0]].x, r = t[e[0]].y, s = t[e[0]].x, a = t[e[0]].y, h = 1; h < o; h++){
                        var d = t[e[h]], l = d.x, c = d.y;
                        d.options.mass > 0 && (l < n && (n = l), l > s && (s = l), c < r && (r = c), c > a && (a = c));
                    }
                    var u = Math.abs(s - n) - Math.abs(a - r);
                    u > 0 ? (r -= 0.5 * u, a += 0.5 * u) : (n += 0.5 * u, s -= 0.5 * u);
                    var f = Math.max(0.00001, Math.abs(s - n)), p = 0.5 * f, v = 0.5 * (n + s), g = 0.5 * (r + a), y = {
                        root: {
                            centerOfMass: {
                                x: 0,
                                y: 0
                            },
                            mass: 0,
                            range: {
                                minX: v - p,
                                maxX: v + p,
                                minY: g - p,
                                maxY: g + p
                            },
                            size: f,
                            calcSize: 1 / f,
                            children: {
                                data: null
                            },
                            maxWidth: 0,
                            level: 0,
                            childrenCount: 4
                        }
                    };
                    this._splitBranch(y.root);
                    for(var m = 0; m < o; m++)(i = t[e[m]]).options.mass > 0 && this._placeInTree(y.root, i);
                    return y;
                }
            },
            {
                key: "_updateBranchMass",
                value: function(t, e) {
                    var i = t.centerOfMass, o = t.mass + e.options.mass, n = 1 / o;
                    i.x = i.x * t.mass + e.x * e.options.mass, i.x *= n, i.y = i.y * t.mass + e.y * e.options.mass, i.y *= n, t.mass = o;
                    var r = Math.max(Math.max(e.height, e.radius), e.width);
                    t.maxWidth = t.maxWidth < r ? r : t.maxWidth;
                }
            },
            {
                key: "_placeInTree",
                value: function(t, e, i) {
                    1 == i && void 0 !== i || this._updateBranchMass(t, e);
                    var o, n = t.children.NW.range;
                    o = n.maxX > e.x ? n.maxY > e.y ? "NW" : "SW" : n.maxY > e.y ? "NE" : "SE", this._placeInRegion(t, e, o);
                }
            },
            {
                key: "_placeInRegion",
                value: function(t, e, i) {
                    var o = t.children[i];
                    switch(o.childrenCount){
                        case 0:
                            o.children.data = e, o.childrenCount = 1, this._updateBranchMass(o, e);
                            break;
                        case 1:
                            o.children.data.x === e.x && o.children.data.y === e.y ? (e.x += this._rng(), e.y += this._rng()) : (this._splitBranch(o), this._placeInTree(o, e));
                            break;
                        case 4:
                            this._placeInTree(o, e);
                    }
                }
            },
            {
                key: "_splitBranch",
                value: function(t) {
                    var e = null;
                    1 === t.childrenCount && (e = t.children.data, t.mass = 0, t.centerOfMass.x = 0, t.centerOfMass.y = 0), t.childrenCount = 4, t.children.data = null, this._insertRegion(t, "NW"), this._insertRegion(t, "NE"), this._insertRegion(t, "SW"), this._insertRegion(t, "SE"), null != e && this._placeInTree(t, e);
                }
            },
            {
                key: "_insertRegion",
                value: function(t, e) {
                    var i, o, n, r, s = 0.5 * t.size;
                    switch(e){
                        case "NW":
                            i = t.range.minX, o = t.range.minX + s, n = t.range.minY, r = t.range.minY + s;
                            break;
                        case "NE":
                            i = t.range.minX + s, o = t.range.maxX, n = t.range.minY, r = t.range.minY + s;
                            break;
                        case "SW":
                            i = t.range.minX, o = t.range.minX + s, n = t.range.minY + s, r = t.range.maxY;
                            break;
                        case "SE":
                            i = t.range.minX + s, o = t.range.maxX, n = t.range.minY + s, r = t.range.maxY;
                    }
                    t.children[e] = {
                        centerOfMass: {
                            x: 0,
                            y: 0
                        },
                        mass: 0,
                        range: {
                            minX: i,
                            maxX: o,
                            minY: n,
                            maxY: r
                        },
                        size: 0.5 * t.size,
                        calcSize: 2 * t.calcSize,
                        children: {
                            data: null
                        },
                        maxWidth: 0,
                        level: t.level + 1,
                        childrenCount: 0
                    };
                }
            },
            {
                key: "_debug",
                value: function(t, e) {
                    void 0 !== this.barnesHutTree && (t.lineWidth = 1, this._drawBranch(this.barnesHutTree.root, t, e));
                }
            },
            {
                key: "_drawBranch",
                value: function(t, e, i) {
                    void 0 === i && (i = "#FF0000"), 4 === t.childrenCount && (this._drawBranch(t.children.NW, e), this._drawBranch(t.children.NE, e), this._drawBranch(t.children.SE, e), this._drawBranch(t.children.SW, e)), e.strokeStyle = i, e.beginPath(), e.moveTo(t.range.minX, t.range.minY), e.lineTo(t.range.maxX, t.range.minY), e.stroke(), e.beginPath(), e.moveTo(t.range.maxX, t.range.minY), e.lineTo(t.range.maxX, t.range.maxY), e.stroke(), e.beginPath(), e.moveTo(t.range.maxX, t.range.maxY), e.lineTo(t.range.minX, t.range.maxY), e.stroke(), e.beginPath(), e.moveTo(t.range.minX, t.range.maxY), e.lineTo(t.range.minX, t.range.minY), e.stroke();
                }
            }
        ]), t142;
    }(), dm = function() {
        function t143(e, i, o) {
            Ra(this, t143), this._rng = Vu("REPULSION SOLVER"), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return Ha(t143, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n, r, s, a, h = this.body.nodes, d = this.physicsBody.physicsNodeIndices, l = this.physicsBody.forces, c = this.options.nodeDistance, u = -2 / 3 / c, f = 0; f < d.length - 1; f++){
                        s = h[d[f]];
                        for(var p = f + 1; p < d.length; p++)t = (a = h[d[p]]).x - s.x, e = a.y - s.y, 0 === (i = Math.sqrt(t * t + e * e)) && (t = i = 0.1 * this._rng()), i < 2 * c && (r = i < 0.5 * c ? 1 : u * i + 1.3333333333333333, o = t * (r /= i), n = e * r, l[s.id].x -= o, l[s.id].y -= n, l[a.id].x += o, l[a.id].y += n);
                    }
                }
            }
        ]), t143;
    }(), lm = function() {
        function t144(e, i, o) {
            Ra(this, t144), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return Ha(t144, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t, this.overlapAvoidanceFactor = Math.max(0, Math.min(1, this.options.avoidOverlap || 0));
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t = this.body.nodes, e = this.physicsBody.physicsNodeIndices, i = this.physicsBody.forces, o = this.options.nodeDistance, n = 0; n < e.length - 1; n++)for(var r = t[e[n]], s = n + 1; s < e.length; s++){
                        var a = t[e[s]];
                        if (r.level === a.level) {
                            var h = o + this.overlapAvoidanceFactor * ((r.shape.radius || 0) / 2 + (a.shape.radius || 0) / 2), d = a.x - r.x, l = a.y - r.y, c = Math.sqrt(d * d + l * l), u = void 0;
                            u = c < h ? -Math.pow(0.05 * c, 2) + Math.pow(0.05 * h, 2) : 0, 0 !== c && (u /= c);
                            var f = d * u, p = l * u;
                            i[r.id].x -= f, i[r.id].y -= p, i[a.id].x += f, i[a.id].y += p;
                        }
                    }
                }
            }
        ]), t144;
    }(), cm = function() {
        function t145(e, i, o) {
            Ra(this, t145), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return Ha(t145, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n, r = this.physicsBody.physicsEdgeIndices, s = this.body.edges, a = 0; a < r.length; a++)!0 === (e = s[r[a]]).connected && e.toId !== e.fromId && void 0 !== this.body.nodes[e.toId] && void 0 !== this.body.nodes[e.fromId] && (void 0 !== e.edgeType.via ? (t = void 0 === e.options.length ? this.options.springLength : e.options.length, i = e.to, o = e.edgeType.via, n = e.from, this._calculateSpringForce(i, o, 0.5 * t), this._calculateSpringForce(o, n, 0.5 * t)) : (t = void 0 === e.options.length ? 1.5 * this.options.springLength : e.options.length, this._calculateSpringForce(e.from, e.to, t)));
                }
            },
            {
                key: "_calculateSpringForce",
                value: function(t, e, i) {
                    var o = t.x - e.x, n = t.y - e.y, r = Math.max(Math.sqrt(o * o + n * n), 0.01), s = this.options.springConstant * (i - r) / r, a = o * s, h = n * s;
                    void 0 !== this.physicsBody.forces[t.id] && (this.physicsBody.forces[t.id].x += a, this.physicsBody.forces[t.id].y += h), void 0 !== this.physicsBody.forces[e.id] && (this.physicsBody.forces[e.id].x -= a, this.physicsBody.forces[e.id].y -= h);
                }
            }
        ]), t145;
    }(), um = function() {
        function t146(e, i, o) {
            Ra(this, t146), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return Ha(t146, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n, r, s, a, h, d, l = this.body.edges, c = 0.5, u = this.physicsBody.physicsEdgeIndices, f = this.physicsBody.physicsNodeIndices, p = this.physicsBody.forces, v = 0; v < f.length; v++){
                        var g = f[v];
                        p[g].springFx = 0, p[g].springFy = 0;
                    }
                    for(var y = 0; y < u.length; y++)!0 === (e = l[u[y]]).connected && (t = void 0 === e.options.length ? this.options.springLength : e.options.length, i = e.from.x - e.to.x, o = e.from.y - e.to.y, a = 0 === (a = Math.sqrt(i * i + o * o)) ? 0.01 : a, n = i * (s = this.options.springConstant * (t - a) / a), r = o * s, e.to.level != e.from.level ? (void 0 !== p[e.toId] && (p[e.toId].springFx -= n, p[e.toId].springFy -= r), void 0 !== p[e.fromId] && (p[e.fromId].springFx += n, p[e.fromId].springFy += r)) : (void 0 !== p[e.toId] && (p[e.toId].x -= c * n, p[e.toId].y -= c * r), void 0 !== p[e.fromId] && (p[e.fromId].x += c * n, p[e.fromId].y += c * r)));
                    s = 1;
                    for(var m = 0; m < f.length; m++){
                        var b = f[m];
                        h = Math.min(s, Math.max(-s, p[b].springFx)), d = Math.min(s, Math.max(-s, p[b].springFy)), p[b].x += h, p[b].y += d;
                    }
                    for(var w = 0, k = 0, _ = 0; _ < f.length; _++){
                        var x = f[_];
                        w += p[x].x, k += p[x].y;
                    }
                    for(var E = w / f.length, O = k / f.length, C = 0; C < f.length; C++){
                        var S = f[C];
                        p[S].x -= E, p[S].y -= O;
                    }
                }
            }
        ]), t146;
    }(), fm = function() {
        function t147(e, i, o) {
            Ra(this, t147), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return Ha(t147, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n = this.body.nodes, r = this.physicsBody.physicsNodeIndices, s = this.physicsBody.forces, a = 0; a < r.length; a++)t = -(o = n[r[a]]).x, e = -o.y, i = Math.sqrt(t * t + e * e), this._calculateForces(i, t, e, s, o);
                }
            },
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    var r = 0 === t ? 0 : this.options.centralGravity / t;
                    o[n.id].x = e * r, o[n.id].y = i * r;
                }
            }
        ]), t147;
    }();
    function pm(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var vm = function(t148) {
        kg(i57, t148);
        var e92 = pm(i57);
        function i57(t, o, n) {
            var r;
            return Ra(this, i57), (r = e92.call(this, t, o, n))._rng = Vu("FORCE ATLAS 2 BASED REPULSION SOLVER"), r;
        }
        return Ha(i57, [
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    0 === t && (e = t = 0.1 * this._rng()), this.overlapAvoidanceFactor < 1 && o.shape.radius && (t = Math.max(0.1 + this.overlapAvoidanceFactor * o.shape.radius, t - o.shape.radius));
                    var r = o.edges.length + 1, s = this.options.gravitationalConstant * n.mass * o.options.mass * r / Math.pow(t, 2), a = e * s, h = i * s;
                    this.physicsBody.forces[o.id].x += a, this.physicsBody.forces[o.id].y += h;
                }
            }
        ]), i57;
    }(hm);
    function gm(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var ym, mm = function(t149) {
        kg(i58, t149);
        var e93 = gm(i58);
        function i58(t, o, n) {
            return Ra(this, i58), e93.call(this, t, o, n);
        }
        return Ha(i58, [
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    if (t > 0) {
                        var r = n.edges.length + 1, s = this.options.centralGravity * r * n.options.mass;
                        o[n.id].x = e * s, o[n.id].y = i * s;
                    }
                }
            }
        ]), i58;
    }(fm), bm = function() {
        function t150(e) {
            Ra(this, t150), this.body = e, this.physicsBody = {
                physicsNodeIndices: [],
                physicsEdgeIndices: [],
                forces: {
                },
                velocities: {
                }
            }, this.physicsEnabled = !0, this.simulationInterval = 1000 / 60, this.requiresTimeout = !0, this.previousStates = {
            }, this.referenceState = {
            }, this.freezeCache = {
            }, this.renderTimer = void 0, this.adaptiveTimestep = !1, this.adaptiveTimestepEnabled = !1, this.adaptiveCounter = 0, this.adaptiveInterval = 3, this.stabilized = !1, this.startedStabilization = !1, this.stabilizationIterations = 0, this.ready = !1, this.options = {
            }, this.defaultOptions = {
                enabled: !0,
                barnesHut: {
                    theta: 0.5,
                    gravitationalConstant: -2000,
                    centralGravity: 0.3,
                    springLength: 95,
                    springConstant: 0.04,
                    damping: 0.09,
                    avoidOverlap: 0
                },
                forceAtlas2Based: {
                    theta: 0.5,
                    gravitationalConstant: -50,
                    centralGravity: 0.01,
                    springConstant: 0.08,
                    springLength: 100,
                    damping: 0.4,
                    avoidOverlap: 0
                },
                repulsion: {
                    centralGravity: 0.2,
                    springLength: 200,
                    springConstant: 0.05,
                    nodeDistance: 100,
                    damping: 0.09,
                    avoidOverlap: 0
                },
                hierarchicalRepulsion: {
                    centralGravity: 0,
                    springLength: 100,
                    springConstant: 0.01,
                    nodeDistance: 120,
                    damping: 0.09
                },
                maxVelocity: 50,
                minVelocity: 0.75,
                solver: "barnesHut",
                stabilization: {
                    enabled: !0,
                    iterations: 1000,
                    updateInterval: 50,
                    onlyDynamicEdges: !1,
                    fit: !0
                },
                timestep: 0.5,
                adaptiveTimestep: !0,
                wind: {
                    x: 0,
                    y: 0
                }
            }, Ke(this.options, this.defaultOptions), this.timestep = 0.5, this.layoutFailed = !1, this.bindEventListeners();
        }
        return Ha(t150, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t = this;
                    this.body.emitter.on("initPhysics", function() {
                        t.initPhysics();
                    }), this.body.emitter.on("_layoutFailed", function() {
                        t.layoutFailed = !0;
                    }), this.body.emitter.on("resetPhysics", function() {
                        t.stopSimulation(), t.ready = !1;
                    }), this.body.emitter.on("disablePhysics", function() {
                        t.physicsEnabled = !1, t.stopSimulation();
                    }), this.body.emitter.on("restorePhysics", function() {
                        t.setOptions(t.options), !0 === t.ready && t.startSimulation();
                    }), this.body.emitter.on("startSimulation", function() {
                        !0 === t.ready && t.startSimulation();
                    }), this.body.emitter.on("stopSimulation", function() {
                        t.stopSimulation();
                    }), this.body.emitter.on("destroy", function() {
                        t.stopSimulation(!1), t.body.emitter.off();
                    }), this.body.emitter.on("_dataChanged", function() {
                        t.updatePhysicsData();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        if (!1 === t) this.options.enabled = !1, this.physicsEnabled = !1, this.stopSimulation();
                        else if (!0 === t) this.options.enabled = !0, this.physicsEnabled = !0, this.startSimulation();
                        else {
                            this.physicsEnabled = !0, rf([
                                "stabilization"
                            ], this.options, t), _f(this.options, t, "stabilization"), void 0 === t.enabled && (this.options.enabled = !0), !1 === this.options.enabled && (this.physicsEnabled = !1, this.stopSimulation());
                            var e = this.options.wind;
                            e && (("number" != typeof e.x || Tv(e.x)) && (e.x = 0), ("number" != typeof e.y || Tv(e.y)) && (e.y = 0)), this.timestep = this.options.timestep;
                        }
                    }
                    this.init();
                }
            },
            {
                key: "init",
                value: function() {
                    var t;
                    "forceAtlas2Based" === this.options.solver ? (t = this.options.forceAtlas2Based, this.nodesSolver = new vm(this.body, this.physicsBody, t), this.edgesSolver = new cm(this.body, this.physicsBody, t), this.gravitySolver = new mm(this.body, this.physicsBody, t)) : "repulsion" === this.options.solver ? (t = this.options.repulsion, this.nodesSolver = new dm(this.body, this.physicsBody, t), this.edgesSolver = new cm(this.body, this.physicsBody, t), this.gravitySolver = new fm(this.body, this.physicsBody, t)) : "hierarchicalRepulsion" === this.options.solver ? (t = this.options.hierarchicalRepulsion, this.nodesSolver = new lm(this.body, this.physicsBody, t), this.edgesSolver = new um(this.body, this.physicsBody, t), this.gravitySolver = new fm(this.body, this.physicsBody, t)) : (t = this.options.barnesHut, this.nodesSolver = new hm(this.body, this.physicsBody, t), this.edgesSolver = new cm(this.body, this.physicsBody, t), this.gravitySolver = new fm(this.body, this.physicsBody, t)), this.modelOptions = t;
                }
            },
            {
                key: "initPhysics",
                value: function() {
                    !0 === this.physicsEnabled && !0 === this.options.enabled ? !0 === this.options.stabilization.enabled ? this.stabilize() : (this.stabilized = !1, this.ready = !0, this.body.emitter.emit("fit", {
                    }, this.layoutFailed), this.startSimulation()) : (this.ready = !0, this.body.emitter.emit("fit"));
                }
            },
            {
                key: "startSimulation",
                value: function() {
                    var t;
                    !0 === this.physicsEnabled && !0 === this.options.enabled ? (this.stabilized = !1, this.adaptiveTimestep = !1, this.body.emitter.emit("_resizeNodes"), void 0 === this.viewFunction && (this.viewFunction = si(t = this.simulationStep).call(t, this), this.body.emitter.on("initRedraw", this.viewFunction), this.body.emitter.emit("_startRendering"))) : this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "stopSimulation",
                value: function() {
                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    this.stabilized = !0, !0 === t && this._emitStabilized(), void 0 !== this.viewFunction && (this.body.emitter.off("initRedraw", this.viewFunction), this.viewFunction = void 0, !0 === t && this.body.emitter.emit("_stopRendering"));
                }
            },
            {
                key: "simulationStep",
                value: function() {
                    var t = Kh();
                    this.physicsTick(), (Kh() - t < 0.4 * this.simulationInterval || !0 === this.runDoubleSpeed) && !1 === this.stabilized && (this.physicsTick(), this.runDoubleSpeed = !0), !0 === this.stabilized && this.stopSimulation();
                }
            },
            {
                key: "_emitStabilized",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.stabilizationIterations;
                    (this.stabilizationIterations > 1 || !0 === this.startedStabilization) && Yl(function() {
                        t.body.emitter.emit("stabilized", {
                            iterations: e
                        }), t.startedStabilization = !1, t.stabilizationIterations = 0;
                    }, 0);
                }
            },
            {
                key: "physicsStep",
                value: function() {
                    this.gravitySolver.solve(), this.nodesSolver.solve(), this.edgesSolver.solve(), this.moveNodes();
                }
            },
            {
                key: "adjustTimeStep",
                value: function() {
                    !0 === this._evaluateStepQuality() ? this.timestep = 1.2 * this.timestep : this.timestep / 1.2 < this.options.timestep ? this.timestep = this.options.timestep : (this.adaptiveCounter = -1, this.timestep = Math.max(this.options.timestep, this.timestep / 1.2));
                }
            },
            {
                key: "physicsTick",
                value: function() {
                    if (this._startStabilizing(), !0 !== this.stabilized) {
                        if (!0 === this.adaptiveTimestep && !0 === this.adaptiveTimestepEnabled) this.adaptiveCounter % this.adaptiveInterval == 0 ? (this.timestep = 2 * this.timestep, this.physicsStep(), this.revert(), this.timestep = 0.5 * this.timestep, this.physicsStep(), this.physicsStep(), this.adjustTimeStep()) : this.physicsStep(), this.adaptiveCounter += 1;
                        else this.timestep = this.options.timestep, this.physicsStep();
                        !0 === this.stabilized && this.revert(), this.stabilizationIterations++;
                    }
                }
            },
            {
                key: "updatePhysicsData",
                value: function() {
                    this.physicsBody.forces = {
                    }, this.physicsBody.physicsNodeIndices = [], this.physicsBody.physicsEdgeIndices = [];
                    var t = this.body.nodes, e = this.body.edges;
                    for(var i in t)Object.prototype.hasOwnProperty.call(t, i) && !0 === t[i].options.physics && this.physicsBody.physicsNodeIndices.push(t[i].id);
                    for(var o in e)Object.prototype.hasOwnProperty.call(e, o) && !0 === e[o].options.physics && this.physicsBody.physicsEdgeIndices.push(e[o].id);
                    for(var n = 0; n < this.physicsBody.physicsNodeIndices.length; n++){
                        var r = this.physicsBody.physicsNodeIndices[n];
                        this.physicsBody.forces[r] = {
                            x: 0,
                            y: 0
                        }, void 0 === this.physicsBody.velocities[r] && (this.physicsBody.velocities[r] = {
                            x: 0,
                            y: 0
                        });
                    }
                    for(var s in this.physicsBody.velocities)void 0 === t[s] && delete this.physicsBody.velocities[s];
                }
            },
            {
                key: "revert",
                value: function() {
                    var t = Gh(this.previousStates), e = this.body.nodes, i = this.physicsBody.velocities;
                    this.referenceState = {
                    };
                    for(var o = 0; o < t.length; o++){
                        var n = t[o];
                        void 0 !== e[n] ? !0 === e[n].options.physics && (this.referenceState[n] = {
                            positions: {
                                x: e[n].x,
                                y: e[n].y
                            }
                        }, i[n].x = this.previousStates[n].vx, i[n].y = this.previousStates[n].vy, e[n].x = this.previousStates[n].x, e[n].y = this.previousStates[n].y) : delete this.previousStates[n];
                    }
                }
            },
            {
                key: "_evaluateStepQuality",
                value: function() {
                    var t, e, i = this.body.nodes, o = this.referenceState;
                    for(var n in this.referenceState)if (Object.prototype.hasOwnProperty.call(this.referenceState, n) && void 0 !== i[n] && (t = i[n].x - o[n].positions.x, e = i[n].y - o[n].positions.y, Math.sqrt(Math.pow(t, 2) + Math.pow(e, 2)) > 0.3)) return !1;
                    return !0;
                }
            },
            {
                key: "moveNodes",
                value: function() {
                    for(var t = this.physicsBody.physicsNodeIndices, e = 0, i = 0, o = 0; o < t.length; o++){
                        var n = t[o], r = this._performStep(n);
                        e = Math.max(e, r), i += r;
                    }
                    this.adaptiveTimestepEnabled = i / t.length < 5, this.stabilized = e < this.options.minVelocity;
                }
            },
            {
                key: "calculateComponentVelocity",
                value: function(t, e, i) {
                    t += (e - this.modelOptions.damping * t) / i * this.timestep;
                    var o = this.options.maxVelocity || 1000000000;
                    return Math.abs(t) > o && (t = t > 0 ? o : -o), t;
                }
            },
            {
                key: "_performStep",
                value: function(t) {
                    var e = this.body.nodes[t], i = this.physicsBody.forces[t];
                    this.options.wind && (i.x += this.options.wind.x, i.y += this.options.wind.y);
                    var o = this.physicsBody.velocities[t];
                    return this.previousStates[t] = {
                        x: e.x,
                        y: e.y,
                        vx: o.x,
                        vy: o.y
                    }, !1 === e.options.fixed.x ? (o.x = this.calculateComponentVelocity(o.x, i.x, e.options.mass), e.x += o.x * this.timestep) : (i.x = 0, o.x = 0), !1 === e.options.fixed.y ? (o.y = this.calculateComponentVelocity(o.y, i.y, e.options.mass), e.y += o.y * this.timestep) : (i.y = 0, o.y = 0), Math.sqrt(Math.pow(o.x, 2) + Math.pow(o.y, 2));
                }
            },
            {
                key: "_freezeNodes",
                value: function() {
                    var t = this.body.nodes;
                    for(var e in t)if (Object.prototype.hasOwnProperty.call(t, e) && t[e].x && t[e].y) {
                        var i = t[e].options.fixed;
                        this.freezeCache[e] = {
                            x: i.x,
                            y: i.y
                        }, i.x = !0, i.y = !0;
                    }
                }
            },
            {
                key: "_restoreFrozenNodes",
                value: function() {
                    var t = this.body.nodes;
                    for(var e in t)Object.prototype.hasOwnProperty.call(t, e) && void 0 !== this.freezeCache[e] && (t[e].options.fixed.x = this.freezeCache[e].x, t[e].options.fixed.y = this.freezeCache[e].y);
                    this.freezeCache = {
                    };
                }
            },
            {
                key: "stabilize",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.options.stabilization.iterations;
                    "number" != typeof e && (e = this.options.stabilization.iterations, console.error("The stabilize method needs a numeric amount of iterations. Switching to default: ", e)), 0 !== this.physicsBody.physicsNodeIndices.length ? (this.adaptiveTimestep = this.options.adaptiveTimestep, this.body.emitter.emit("_resizeNodes"), this.stopSimulation(), this.stabilized = !1, this.body.emitter.emit("_blockRedraw"), this.targetIterations = e, !0 === this.options.stabilization.onlyDynamicEdges && this._freezeNodes(), this.stabilizationIterations = 0, Yl(function() {
                        return t._stabilizationBatch();
                    }, 0)) : this.ready = !0;
                }
            },
            {
                key: "_startStabilizing",
                value: function() {
                    return !0 !== this.startedStabilization && (this.body.emitter.emit("startStabilizing"), this.startedStabilization = !0, !0);
                }
            },
            {
                key: "_stabilizationBatch",
                value: function() {
                    var t = this, e = function() {
                        return !1 === t.stabilized && t.stabilizationIterations < t.targetIterations;
                    }, i = function() {
                        t.body.emitter.emit("stabilizationProgress", {
                            iterations: t.stabilizationIterations,
                            total: t.targetIterations
                        });
                    };
                    this._startStabilizing() && i();
                    for(var o, n = 0; e() && n < this.options.stabilization.updateInterval;)this.physicsTick(), n++;
                    (i(), e()) ? Yl(si(o = this._stabilizationBatch).call(o, this), 0) : this._finalizeStabilization();
                }
            },
            {
                key: "_finalizeStabilization",
                value: function() {
                    this.body.emitter.emit("_allowRedraw"), !0 === this.options.stabilization.fit && this.body.emitter.emit("fit"), !0 === this.options.stabilization.onlyDynamicEdges && this._restoreFrozenNodes(), this.body.emitter.emit("stabilizationIterationsDone"), this.body.emitter.emit("_requestRedraw"), !0 === this.stabilized ? this._emitStabilized() : this.startSimulation(), this.ready = !0;
                }
            },
            {
                key: "_drawForces",
                value: function(t) {
                    for(var e = 0; e < this.physicsBody.physicsNodeIndices.length; e++){
                        var i = this.physicsBody.physicsNodeIndices[e], o = this.body.nodes[i], n = this.physicsBody.forces[i], r = Math.sqrt(Math.pow(n.x, 2) + Math.pow(n.x, 2)), s = Math.min(Math.max(5, r), 15), a = 3 * s, h = yf((180 - 180 * Math.min(1, Math.max(0, 0.03 * r))) / 360, 1, 1), d = {
                            x: o.x + 20 * n.x,
                            y: o.y + 20 * n.y
                        };
                        t.lineWidth = s, t.strokeStyle = h, t.beginPath(), t.moveTo(o.x, o.y), t.lineTo(d.x, d.y), t.stroke();
                        var l = Math.atan2(n.y, n.x);
                        t.fillStyle = h, Vy.draw(t, {
                            type: "arrow",
                            point: d,
                            angle: l,
                            length: a
                        }), Ql(t).call(t);
                    }
                }
            }
        ]), t150;
    }(), wm = new Uint8Array(16);
    function km() {
        if (!ym && !(ym = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto))) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        return ym(wm);
    }
    var _m = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    function xm(t) {
        return "string" == typeof t && _m.test(t);
    }
    for(var Em = [], Om = 0; Om < 256; ++Om)Em.push((Om + 256).toString(16).substr(1));
    function Cm(t, e, i59) {
        var o = (t = t || {
        }).random || (t.rng || km)();
        if (o[6] = 15 & o[6] | 64, o[8] = 63 & o[8] | 128, e) {
            i59 = i59 || 0;
            for(var n = 0; n < 16; ++n)e[i59 + n] = o[n];
            return e;
        }
        return (function(t) {
            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = (Em[t[e + 0]] + Em[t[e + 1]] + Em[t[e + 2]] + Em[t[e + 3]] + "-" + Em[t[e + 4]] + Em[t[e + 5]] + "-" + Em[t[e + 6]] + Em[t[e + 7]] + "-" + Em[t[e + 8]] + Em[t[e + 9]] + "-" + Em[t[e + 10]] + Em[t[e + 11]] + Em[t[e + 12]] + Em[t[e + 13]] + Em[t[e + 14]] + Em[t[e + 15]]).toLowerCase();
            if (!xm(i)) throw TypeError("Stringified UUID is invalid");
            return i;
        })(o);
    }
    var Sm = function() {
        function t151() {
            Ra(this, t151);
        }
        return Ha(t151, null, [
            {
                key: "getRange",
                value: function(t) {
                    var e, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], o = 1000000000, n = -1000000000, r = 1000000000, s = -1000000000;
                    if (i.length > 0) for(var a = 0; a < i.length; a++)r > (e = t[i[a]]).shape.boundingBox.left && (r = e.shape.boundingBox.left), s < e.shape.boundingBox.right && (s = e.shape.boundingBox.right), o > e.shape.boundingBox.top && (o = e.shape.boundingBox.top), n < e.shape.boundingBox.bottom && (n = e.shape.boundingBox.bottom);
                    return 1000000000 === r && -1000000000 === s && 1000000000 === o && -1000000000 === n && (o = 0, n = 0, r = 0, s = 0), {
                        minX: r,
                        maxX: s,
                        minY: o,
                        maxY: n
                    };
                }
            },
            {
                key: "getRangeCore",
                value: function(t) {
                    var e, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], o = 1000000000, n = -1000000000, r = 1000000000, s = -1000000000;
                    if (i.length > 0) for(var a = 0; a < i.length; a++)r > (e = t[i[a]]).x && (r = e.x), s < e.x && (s = e.x), o > e.y && (o = e.y), n < e.y && (n = e.y);
                    return 1000000000 === r && -1000000000 === s && 1000000000 === o && -1000000000 === n && (o = 0, n = 0, r = 0, s = 0), {
                        minX: r,
                        maxX: s,
                        minY: o,
                        maxY: n
                    };
                }
            },
            {
                key: "findCenter",
                value: function(t) {
                    return {
                        x: 0.5 * (t.maxX + t.minX),
                        y: 0.5 * (t.maxY + t.minY)
                    };
                }
            },
            {
                key: "cloneOptions",
                value: function(t, e) {
                    var i = {
                    };
                    return void 0 === e || "node" === e ? (sf(i, t.options, !0), i.x = t.x, i.y = t.y, i.amountOfConnections = t.edges.length) : sf(i, t.options, !0), i;
                }
            }
        ]), t151;
    }();
    function Tm(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Mm = function(t152) {
        kg(i60, t152);
        var e94 = Tm(i60);
        function i60(t, o, n, r, s, a) {
            var h;
            return Ra(this, i60), (h = e94.call(this, t, o, n, r, s, a)).isCluster = !0, h.containedNodes = {
            }, h.containedEdges = {
            }, h;
        }
        return Ha(i60, [
            {
                key: "_openChildCluster",
                value: function(t153) {
                    var e = this, i61 = this.body.nodes[t153];
                    if (void 0 === this.containedNodes[t153]) throw new Error("node with id: " + t153 + " not in current cluster");
                    if (!i61.isCluster) throw new Error("node with id: " + t153 + " is not a cluster");
                    delete this.containedNodes[t153], lf(i61.edges, function(t) {
                        delete e.containedEdges[t.id];
                    }), lf(i61.containedNodes, function(t, i) {
                        e.containedNodes[i] = t;
                    }), i61.containedNodes = {
                    }, lf(i61.containedEdges, function(t, i) {
                        e.containedEdges[i] = t;
                    }), i61.containedEdges = {
                    }, lf(i61.edges, function(t154) {
                        lf(e.edges, function(i) {
                            var o, n, r = Cl(o = i.clusteringEdgeReplacingIds).call(o, t154.id);
                            -1 !== r && (lf(t154.clusteringEdgeReplacingIds, function(t) {
                                i.clusteringEdgeReplacingIds.push(t), e.body.edges[t].edgeReplacedById = i.id;
                            }), Od(n = i.clusteringEdgeReplacingIds).call(n, r, 1));
                        });
                    }), i61.edges = [];
                }
            }
        ]), i60;
    }(uy), Pm = function() {
        function t155(e) {
            var i = this;
            Ra(this, t155), this.body = e, this.clusteredNodes = {
            }, this.clusteredEdges = {
            }, this.options = {
            }, this.defaultOptions = {
            }, Ke(this.options, this.defaultOptions), this.body.emitter.on("_resetData", function() {
                i.clusteredNodes = {
                }, i.clusteredEdges = {
                };
            });
        }
        return Ha(t155, [
            {
                key: "clusterByHubsize",
                value: function(t, e) {
                    void 0 === t ? t = this._getHubSize() : "object" === zh(t) && (e = this._checkOptions(t), t = this._getHubSize());
                    for(var i = [], o = 0; o < this.body.nodeIndices.length; o++){
                        var n = this.body.nodes[this.body.nodeIndices[o]];
                        n.edges.length >= t && i.push(n.id);
                    }
                    for(var r = 0; r < i.length; r++)this.clusterByConnection(i[r], e, !0);
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "cluster",
                value: function() {
                    var t = this, e95 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                    }, i62 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if (void 0 === e95.joinCondition) throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
                    e95 = this._checkOptions(e95);
                    var o = {
                    }, n = {
                    };
                    lf(this.body.nodes, function(i, r) {
                        i.options && !0 === e95.joinCondition(i.options) && (o[r] = i, lf(i.edges, function(e) {
                            void 0 === t.clusteredEdges[e.id] && (n[e.id] = e);
                        }));
                    }), this._cluster(o, n, e95, i62);
                }
            },
            {
                key: "clusterByEdgeCount",
                value: function(t156, e) {
                    var i63 = this, o = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                    e = this._checkOptions(e);
                    for(var n, r, s, a = [], h = {
                    }, d3 = function(o) {
                        var d = {
                        }, l = {
                        }, c = i63.body.nodeIndices[o], u = i63.body.nodes[c];
                        if (void 0 === h[c]) {
                            s = 0, r = [];
                            for(var f = 0; f < u.edges.length; f++)n = u.edges[f], void 0 === i63.clusteredEdges[n.id] && (n.toId !== n.fromId && s++, r.push(n));
                            if (s === t156) {
                                for(var p = function(t) {
                                    if (void 0 === e.joinCondition || null === e.joinCondition) return !0;
                                    var i = Sm.cloneOptions(t);
                                    return e.joinCondition(i);
                                }, v = !0, g = 0; g < r.length; g++){
                                    n = r[g];
                                    var y = i63._getConnectedId(n, c);
                                    if (!p(u)) {
                                        v = !1;
                                        break;
                                    }
                                    l[n.id] = n, d[c] = u, d[y] = i63.body.nodes[y], h[c] = !0;
                                }
                                if (Gh(d).length > 0 && Gh(l).length > 0 && !0 === v) {
                                    var m = function() {
                                        for(var t = 0; t < a.length; ++t)for(var e in d)if (void 0 !== a[t].nodes[e]) return a[t];
                                    }();
                                    if (void 0 !== m) {
                                        for(var b in d)void 0 === m.nodes[b] && (m.nodes[b] = d[b]);
                                        for(var w in l)void 0 === m.edges[w] && (m.edges[w] = l[w]);
                                    } else a.push({
                                        nodes: d,
                                        edges: l
                                    });
                                }
                            }
                        }
                    }, l3 = 0; l3 < this.body.nodeIndices.length; l3++)d3(l3);
                    for(var c2 = 0; c2 < a.length; c2++)this._cluster(a[c2].nodes, a[c2].edges, e, !1);
                    !0 === o && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "clusterOutliers",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    this.clusterByEdgeCount(1, t, e);
                }
            },
            {
                key: "clusterBridges",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    this.clusterByEdgeCount(2, t, e);
                }
            },
            {
                key: "clusterByConnection",
                value: function(t, e) {
                    var i, o = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                    if (void 0 === t) throw new Error("No nodeId supplied to clusterByConnection!");
                    if (void 0 === this.body.nodes[t]) throw new Error("The nodeId given to clusterByConnection does not exist!");
                    var n = this.body.nodes[t];
                    void 0 === (e = this._checkOptions(e, n)).clusterNodeProperties.x && (e.clusterNodeProperties.x = n.x), void 0 === e.clusterNodeProperties.y && (e.clusterNodeProperties.y = n.y), void 0 === e.clusterNodeProperties.fixed && (e.clusterNodeProperties.fixed = {
                    }, e.clusterNodeProperties.fixed.x = n.options.fixed.x, e.clusterNodeProperties.fixed.y = n.options.fixed.y);
                    var r = {
                    }, s = {
                    }, a = n.id, h = Sm.cloneOptions(n);
                    r[a] = n;
                    for(var d = 0; d < n.edges.length; d++){
                        var l = n.edges[d];
                        if (void 0 === this.clusteredEdges[l.id]) {
                            var c = this._getConnectedId(l, a);
                            if (void 0 === this.clusteredNodes[c]) {
                                if (c !== a) {
                                    if (void 0 === e.joinCondition) s[l.id] = l, r[c] = this.body.nodes[c];
                                    else {
                                        var u = Sm.cloneOptions(this.body.nodes[c]);
                                        !0 === e.joinCondition(h, u) && (s[l.id] = l, r[c] = this.body.nodes[c]);
                                    }
                                } else s[l.id] = l;
                            }
                        }
                    }
                    var f = Uh(i = Gh(r)).call(i, function(t) {
                        return r[t].id;
                    });
                    for(var p in r)if (Object.prototype.hasOwnProperty.call(r, p)) for(var v = r[p], g = 0; g < v.edges.length; g++){
                        var y = v.edges[g];
                        Cl(f).call(f, this._getConnectedId(y, v.id)) > -1 && (s[y.id] = y);
                    }
                    this._cluster(r, s, e, o);
                }
            },
            {
                key: "_createClusterEdges",
                value: function(t157, e96, i64, o14) {
                    for(var n12, r, s, a, h, d, l = Gh(t157), c = [], u = 0; u < l.length; u++){
                        s = t157[r = l[u]];
                        for(var f = 0; f < s.edges.length; f++)n12 = s.edges[f], void 0 === this.clusteredEdges[n12.id] && (n12.toId == n12.fromId ? e96[n12.id] = n12 : n12.toId == r ? (a = i64.id, d = h = n12.fromId) : (a = n12.toId, h = i64.id, d = a), void 0 === t157[d] && c.push({
                            edge: n12,
                            fromId: h,
                            toId: a
                        }));
                    }
                    for(var p = [], v = function(t) {
                        for(var e = 0; e < p.length; e++){
                            var i = p[e], o = t.fromId === i.fromId && t.toId === i.toId, n = t.fromId === i.toId && t.toId === i.fromId;
                            if (o || n) return i;
                        }
                        return null;
                    }, g = 0; g < c.length; g++){
                        var y = c[g], m = y.edge, b = v(y);
                        null === b ? (b = this._createClusteredEdge(y.fromId, y.toId, m, o14), p.push(b)) : b.clusteringEdgeReplacingIds.push(m.id), this.body.edges[m.id].edgeReplacedById = b.id, this._backupEdgeOptions(m), m.setOptions({
                            physics: !1
                        });
                    }
                }
            },
            {
                key: "_checkOptions",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                    };
                    return void 0 === t.clusterEdgeProperties && (t.clusterEdgeProperties = {
                    }), void 0 === t.clusterNodeProperties && (t.clusterNodeProperties = {
                    }), t;
                }
            },
            {
                key: "_cluster",
                value: function(t, e, i) {
                    var o = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], n = [];
                    for(var r in t)Object.prototype.hasOwnProperty.call(t, r) && void 0 !== this.clusteredNodes[r] && n.push(r);
                    for(var s = 0; s < n.length; ++s)delete t[n[s]];
                    if (0 != Gh(t).length && (1 != Gh(t).length || 1 == i.clusterNodeProperties.allowSingleNodeCluster)) {
                        var a = sf({
                        }, i.clusterNodeProperties);
                        if (void 0 !== i.processProperties) {
                            var h = [];
                            for(var d in t)if (Object.prototype.hasOwnProperty.call(t, d)) {
                                var l = Sm.cloneOptions(t[d]);
                                h.push(l);
                            }
                            var c = [];
                            for(var u in e)if (Object.prototype.hasOwnProperty.call(e, u) && "clusterEdge:" !== u.substr(0, 12)) {
                                var f = Sm.cloneOptions(e[u], "edge");
                                c.push(f);
                            }
                            if (!(a = i.processProperties(a, h, c))) throw new Error("The processProperties function does not return properties!");
                        }
                        void 0 === a.id && (a.id = "cluster:" + Cm());
                        var p = a.id;
                        void 0 === a.label && (a.label = "cluster");
                        var v = void 0;
                        void 0 === a.x && (v = this._getClusterPosition(t), a.x = v.x), void 0 === a.y && (void 0 === v && (v = this._getClusterPosition(t)), a.y = v.y), a.id = p;
                        var g = this.body.functions.createNode(a, Mm);
                        g.containedNodes = t, g.containedEdges = e, g.clusterEdgeProperties = i.clusterEdgeProperties, this.body.nodes[a.id] = g, this._clusterEdges(t, e, a, i.clusterEdgeProperties), a.id = void 0, !0 === o && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "_backupEdgeOptions",
                value: function(t) {
                    void 0 === this.clusteredEdges[t.id] && (this.clusteredEdges[t.id] = {
                        physics: t.options.physics
                    });
                }
            },
            {
                key: "_restoreEdge",
                value: function(t) {
                    var e = this.clusteredEdges[t.id];
                    void 0 !== e && (t.setOptions({
                        physics: e.physics
                    }), delete this.clusteredEdges[t.id]);
                }
            },
            {
                key: "isCluster",
                value: function(t) {
                    return void 0 !== this.body.nodes[t] ? !0 === this.body.nodes[t].isCluster : (console.error("Node does not exist."), !1);
                }
            },
            {
                key: "_getClusterPosition",
                value: function(t) {
                    for(var e, i = Gh(t), o = t[i[0]].x, n = t[i[0]].x, r = t[i[0]].y, s = t[i[0]].y, a = 1; a < i.length; a++)o = (e = t[i[a]]).x < o ? e.x : o, n = e.x > n ? e.x : n, r = e.y < r ? e.y : r, s = e.y > s ? e.y : s;
                    return {
                        x: 0.5 * (o + n),
                        y: 0.5 * (r + s)
                    };
                }
            },
            {
                key: "openCluster",
                value: function(t158, e) {
                    var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                    if (void 0 === t158) throw new Error("No clusterNodeId supplied to openCluster.");
                    var o = this.body.nodes[t158];
                    if (void 0 === o) throw new Error("The clusterNodeId supplied to openCluster does not exist.");
                    if (!0 !== o.isCluster || void 0 === o.containedNodes || void 0 === o.containedEdges) throw new Error("The node:" + t158 + " is not a valid cluster.");
                    var n = this.findNode(t158), r = Cl(n).call(n, t158) - 1;
                    if (r >= 0) {
                        var s = n[r], a = this.body.nodes[s];
                        return a._openChildCluster(t158), delete this.body.nodes[t158], void (!0 === i && this.body.emitter.emit("_dataChanged"));
                    }
                    var h = o.containedNodes, d = o.containedEdges;
                    if (void 0 !== e && void 0 !== e.releaseFunction && "function" == typeof e.releaseFunction) {
                        var l = {
                        }, c = {
                            x: o.x,
                            y: o.y
                        };
                        for(var u in h)if (Object.prototype.hasOwnProperty.call(h, u)) {
                            var f = this.body.nodes[u];
                            l[u] = {
                                x: f.x,
                                y: f.y
                            };
                        }
                        var p = e.releaseFunction(c, l);
                        for(var v in h)if (Object.prototype.hasOwnProperty.call(h, v)) {
                            var g = this.body.nodes[v];
                            void 0 !== p[v] && (g.x = void 0 === p[v].x ? o.x : p[v].x, g.y = void 0 === p[v].y ? o.y : p[v].y);
                        }
                    } else lf(h, function(t) {
                        !1 === t.options.fixed.x && (t.x = o.x), !1 === t.options.fixed.y && (t.y = o.y);
                    });
                    for(var y in h)if (Object.prototype.hasOwnProperty.call(h, y)) {
                        var m = this.body.nodes[y];
                        m.vx = o.vx, m.vy = o.vy, m.setOptions({
                            physics: !0
                        }), delete this.clusteredNodes[y];
                    }
                    for(var b = [], w = 0; w < o.edges.length; w++)b.push(o.edges[w]);
                    for(var k = 0; k < b.length; k++){
                        for(var _ = b[k], x = this._getConnectedId(_, t158), E = this.clusteredNodes[x], O = 0; O < _.clusteringEdgeReplacingIds.length; O++){
                            var C = _.clusteringEdgeReplacingIds[O], S = this.body.edges[C];
                            if (void 0 !== S) {
                                if (void 0 !== E) {
                                    var T = this.body.nodes[E.clusterId];
                                    T.containedEdges[S.id] = S, delete d[S.id];
                                    var M = S.fromId, P = S.toId;
                                    S.toId == x ? P = E.clusterId : M = E.clusterId, this._createClusteredEdge(M, P, S, T.clusterEdgeProperties, {
                                        hidden: !1,
                                        physics: !0
                                    });
                                } else this._restoreEdge(S);
                            }
                        }
                        _.remove();
                    }
                    for(var D in d)Object.prototype.hasOwnProperty.call(d, D) && this._restoreEdge(d[D]);
                    delete this.body.nodes[t158], !0 === i && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "getNodesInCluster",
                value: function(t) {
                    var e = [];
                    if (!0 === this.isCluster(t)) {
                        var i = this.body.nodes[t].containedNodes;
                        for(var o in i)Object.prototype.hasOwnProperty.call(i, o) && e.push(this.body.nodes[o].id);
                    }
                    return e;
                }
            },
            {
                key: "findNode",
                value: function(t) {
                    for(var e, i = [], o = 0; void 0 !== this.clusteredNodes[t] && o < 100;){
                        if (void 0 === (e = this.body.nodes[t])) return [];
                        i.push(e.id), t = this.clusteredNodes[t].clusterId, o++;
                    }
                    return void 0 === (e = this.body.nodes[t]) ? [] : (i.push(e.id), ld(i).call(i), i);
                }
            },
            {
                key: "updateClusteredNode",
                value: function(t, e) {
                    if (void 0 === t) throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
                    if (void 0 === e) throw new Error("No newOptions supplied to updateClusteredNode.");
                    if (void 0 === this.body.nodes[t]) throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
                    this.body.nodes[t].setOptions(e), this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "updateEdge",
                value: function(t, e) {
                    if (void 0 === t) throw new Error("No startEdgeId supplied to updateEdge.");
                    if (void 0 === e) throw new Error("No newOptions supplied to updateEdge.");
                    if (void 0 === this.body.edges[t]) throw new Error("The startEdgeId supplied to updateEdge does not exist.");
                    for(var i = this.getClusteredEdges(t), o = 0; o < i.length; o++)this.body.edges[i[o]].setOptions(e);
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "getClusteredEdges",
                value: function(t) {
                    for(var e = [], i = 0; void 0 !== t && void 0 !== this.body.edges[t] && i < 100;)e.push(this.body.edges[t].id), t = this.body.edges[t].edgeReplacedById, i++;
                    return ld(e).call(e), e;
                }
            },
            {
                key: "getBaseEdge",
                value: function(t) {
                    return this.getBaseEdges(t)[0];
                }
            },
            {
                key: "getBaseEdges",
                value: function(t) {
                    for(var e = [
                        t
                    ], i = [], o = [], n = 0; e.length > 0 && n < 100;){
                        var r = e.pop();
                        if (void 0 !== r) {
                            var s = this.body.edges[r];
                            if (void 0 !== s) {
                                n++;
                                var a = s.clusteringEdgeReplacingIds;
                                if (void 0 === a) o.push(r);
                                else for(var h = 0; h < a.length; ++h){
                                    var d = a[h];
                                    -1 === Cl(e).call(e, a) && -1 === Cl(i).call(i, a) && e.push(d);
                                }
                                i.push(r);
                            }
                        }
                    }
                    return o;
                }
            },
            {
                key: "_getConnectedId",
                value: function(t, e) {
                    return t.toId != e ? t.toId : (t.fromId, t.fromId);
                }
            },
            {
                key: "_getHubSize",
                value: function() {
                    for(var t = 0, e = 0, i = 0, o = 0, n = 0; n < this.body.nodeIndices.length; n++){
                        var r = this.body.nodes[this.body.nodeIndices[n]];
                        r.edges.length > o && (o = r.edges.length), t += r.edges.length, e += Math.pow(r.edges.length, 2), i += 1;
                    }
                    t /= i;
                    var s = (e /= i) - Math.pow(t, 2), a = Math.sqrt(s), h = Math.floor(t + 2 * a);
                    return h > o && (h = o), h;
                }
            },
            {
                key: "_createClusteredEdge",
                value: function(t, e, i, o, n) {
                    var r = Sm.cloneOptions(i, "edge");
                    sf(r, o), r.from = t, r.to = e, r.id = "clusterEdge:" + Cm(), void 0 !== n && sf(r, n);
                    var s = this.body.functions.createEdge(r);
                    return s.clusteringEdgeReplacingIds = [
                        i.id
                    ], s.connect(), this.body.edges[s.id] = s, s;
                }
            },
            {
                key: "_clusterEdges",
                value: function(t, e, i, o) {
                    if (e instanceof sm) {
                        var n = e, r = {
                        };
                        r[n.id] = n, e = r;
                    }
                    if (t instanceof uy) {
                        var s = t, a = {
                        };
                        a[s.id] = s, t = a;
                    }
                    if (null == i) throw new Error("_clusterEdges: parameter clusterNode required");
                    for(var h in void 0 === o && (o = i.clusterEdgeProperties), this._createClusterEdges(t, e, i, o), e)if (Object.prototype.hasOwnProperty.call(e, h) && void 0 !== this.body.edges[h]) {
                        var d = this.body.edges[h];
                        this._backupEdgeOptions(d), d.setOptions({
                            physics: !1
                        });
                    }
                    for(var l in t)Object.prototype.hasOwnProperty.call(t, l) && (this.clusteredNodes[l] = {
                        clusterId: i.id,
                        node: this.body.nodes[l]
                    }, this.body.nodes[l].setOptions({
                        physics: !1
                    }));
                }
            },
            {
                key: "_getClusterNodeForNode",
                value: function(t) {
                    if (void 0 !== t) {
                        var e = this.clusteredNodes[t];
                        if (void 0 !== e) {
                            var i = e.clusterId;
                            if (void 0 !== i) return this.body.nodes[i];
                        }
                    }
                }
            },
            {
                key: "_filter",
                value: function(t159, e) {
                    var i = [];
                    return lf(t159, function(t) {
                        e(t) && i.push(t);
                    }), i;
                }
            },
            {
                key: "_updateState",
                value: function() {
                    var t160, e97 = this, i65 = [], o15 = {
                    }, n13 = function(t) {
                        lf(e97.body.nodes, function(e) {
                            !0 === e.isCluster && t(e);
                        });
                    };
                    for(t160 in this.clusteredNodes)if (Object.prototype.hasOwnProperty.call(this.clusteredNodes, t160)) void 0 === this.body.nodes[t160] && i65.push(t160);
                    n13(function(t) {
                        for(var e = 0; e < i65.length; e++)delete t.containedNodes[i65[e]];
                    });
                    for(var r4 = 0; r4 < i65.length; r4++)delete this.clusteredNodes[i65[r4]];
                    lf(this.clusteredEdges, function(t) {
                        var i = e97.body.edges[t];
                        void 0 !== i && i.endPointsValid() || (o15[t] = t);
                    }), n13(function(t161) {
                        lf(t161.containedEdges, function(t, e) {
                            t.endPointsValid() || o15[e] || (o15[e] = e);
                        });
                    }), lf(this.body.edges, function(t, i66) {
                        var n = !0, r = t.clusteringEdgeReplacingIds;
                        if (void 0 !== r) {
                            var s = 0;
                            lf(r, function(t) {
                                var i = e97.body.edges[t];
                                void 0 !== i && i.endPointsValid() && (s += 1);
                            }), n = s > 0;
                        }
                        t.endPointsValid() && n || (o15[i66] = i66);
                    }), n13(function(t162) {
                        lf(o15, function(i) {
                            delete t162.containedEdges[i], lf(t162.edges, function(n, r) {
                                n.id !== i ? n.clusteringEdgeReplacingIds = e97._filter(n.clusteringEdgeReplacingIds, function(t) {
                                    return !o15[t];
                                }) : t162.edges[r] = null;
                            }), t162.edges = e97._filter(t162.edges, function(t) {
                                return null !== t;
                            });
                        });
                    }), lf(o15, function(t) {
                        delete e97.clusteredEdges[t];
                    }), lf(o15, function(t) {
                        delete e97.body.edges[t];
                    }), lf(Gh(this.body.edges), function(t) {
                        var i = e97.body.edges[t], o = e97._isClusteredNode(i.fromId) || e97._isClusteredNode(i.toId);
                        if (o !== e97._isClusteredEdge(i.id)) {
                            if (o) {
                                var n = e97._getClusterNodeForNode(i.fromId);
                                void 0 !== n && e97._clusterEdges(e97.body.nodes[i.fromId], i, n);
                                var r = e97._getClusterNodeForNode(i.toId);
                                void 0 !== r && e97._clusterEdges(e97.body.nodes[i.toId], i, r);
                            } else delete e97._clusterEdges[t], e97._restoreEdge(i);
                        }
                    });
                    for(var s7 = !1, a = !0, h = function() {
                        var t = [];
                        n13(function(e) {
                            var i = Gh(e.containedNodes).length, o = !0 === e.options.allowSingleNodeCluster;
                            (o && i < 1 || !o && i < 2) && t.push(e.id);
                        });
                        for(var i67 = 0; i67 < t.length; ++i67)e97.openCluster(t[i67], {
                        }, !1);
                        a = t.length > 0, s7 = s7 || a;
                    }; a;)h();
                    s7 && this._updateState();
                }
            },
            {
                key: "_isClusteredNode",
                value: function(t) {
                    return void 0 !== this.clusteredNodes[t];
                }
            },
            {
                key: "_isClusteredEdge",
                value: function(t) {
                    return void 0 !== this.clusteredEdges[t];
                }
            }
        ]), t155;
    }();
    function Dm(t163, e98) {
        var i68 = void 0 !== Nh && xr(t163) || t163["@@iterator"];
        if (!i68) {
            if (Hh(t163) || (i68 = (function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return Bm(t, e);
                var o = Lh(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return rr(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return Bm(t, e);
            })(t163)) || e98 && t163 && "number" == typeof t163.length) {
                i68 && (t163 = i68);
                var o16 = 0, n = function() {
                };
                return {
                    s: n,
                    n: function() {
                        return o16 >= t163.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t163[o16++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i68 = i68.call(t163);
            },
            n: function() {
                var t = i68.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i68.return || i68.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function Bm(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    var Im = function() {
        function t164(e, i) {
            var o;
            Ra(this, t164), void 0 !== window && (o = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame), window.requestAnimationFrame = void 0 === o ? function(t) {
                t();
            } : o, this.body = e, this.canvas = i, this.redrawRequested = !1, this.renderTimer = void 0, this.requiresTimeout = !0, this.renderingActive = !1, this.renderRequests = 0, this.allowRedraw = !0, this.dragging = !1, this.zooming = !1, this.options = {
            }, this.defaultOptions = {
                hideEdgesOnDrag: !1,
                hideEdgesOnZoom: !1,
                hideNodesOnDrag: !1
            }, Ke(this.options, this.defaultOptions), this._determineBrowserMethod(), this.bindEventListeners();
        }
        return Ha(t164, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t165, e = this;
                    this.body.emitter.on("dragStart", function() {
                        e.dragging = !0;
                    }), this.body.emitter.on("dragEnd", function() {
                        e.dragging = !1;
                    }), this.body.emitter.on("zoom", function() {
                        e.zooming = !0, window.clearTimeout(e.zoomTimeoutId), e.zoomTimeoutId = Yl(function() {
                            var t;
                            e.zooming = !1, si(t = e._requestRedraw).call(t, e)();
                        }, 250);
                    }), this.body.emitter.on("_resizeNodes", function() {
                        e._resizeNodes();
                    }), this.body.emitter.on("_redraw", function() {
                        !1 === e.renderingActive && e._redraw();
                    }), this.body.emitter.on("_blockRedraw", function() {
                        e.allowRedraw = !1;
                    }), this.body.emitter.on("_allowRedraw", function() {
                        e.allowRedraw = !0, e.redrawRequested = !1;
                    }), this.body.emitter.on("_requestRedraw", si(t165 = this._requestRedraw).call(t165, this)), this.body.emitter.on("_startRendering", function() {
                        e.renderRequests += 1, e.renderingActive = !0, e._startRendering();
                    }), this.body.emitter.on("_stopRendering", function() {
                        e.renderRequests -= 1, e.renderingActive = e.renderRequests > 0, e.renderTimer = void 0;
                    }), this.body.emitter.on("destroy", function() {
                        e.renderRequests = 0, e.allowRedraw = !1, e.renderingActive = !1, !0 === e.requiresTimeout ? clearTimeout(e.renderTimer) : window.cancelAnimationFrame(e.renderTimer), e.body.emitter.off();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) nf([
                        "hideEdgesOnDrag",
                        "hideEdgesOnZoom",
                        "hideNodesOnDrag"
                    ], this.options, t);
                }
            },
            {
                key: "_requestNextFrame",
                value: function(t, e) {
                    if ("undefined" != typeof window) {
                        var i, o = window;
                        return !0 === this.requiresTimeout ? i = Yl(t, e) : o.requestAnimationFrame && (i = o.requestAnimationFrame(t)), i;
                    }
                }
            },
            {
                key: "_startRendering",
                value: function() {
                    var t;
                    !0 === this.renderingActive && void 0 === this.renderTimer && (this.renderTimer = this._requestNextFrame(si(t = this._renderStep).call(t, this), this.simulationInterval));
                }
            },
            {
                key: "_renderStep",
                value: function() {
                    !0 === this.renderingActive && (this.renderTimer = void 0, !0 === this.requiresTimeout && this._startRendering(), this._redraw(), !1 === this.requiresTimeout && this._startRendering());
                }
            },
            {
                key: "redraw",
                value: function() {
                    this.body.emitter.emit("setSize"), this._redraw();
                }
            },
            {
                key: "_requestRedraw",
                value: function() {
                    var t = this;
                    !0 !== this.redrawRequested && !1 === this.renderingActive && !0 === this.allowRedraw && (this.redrawRequested = !0, this._requestNextFrame(function() {
                        t._redraw(!1);
                    }, 0));
                }
            },
            {
                key: "_redraw",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    if (!0 === this.allowRedraw) {
                        this.body.emitter.emit("initRedraw"), this.redrawRequested = !1;
                        var e = {
                            drawExternalLabels: null
                        };
                        0 !== this.canvas.frame.canvas.width && 0 !== this.canvas.frame.canvas.height || this.canvas.setSize(), this.canvas.setTransform();
                        var i = this.canvas.getContext(), o = this.canvas.frame.canvas.clientWidth, n = this.canvas.frame.canvas.clientHeight;
                        if (i.clearRect(0, 0, o, n), 0 === this.canvas.frame.clientWidth) return;
                        if (i.save(), i.translate(this.body.view.translation.x, this.body.view.translation.y), i.scale(this.body.view.scale, this.body.view.scale), i.beginPath(), this.body.emitter.emit("beforeDrawing", i), i.closePath(), !1 === t && (!1 === this.dragging || !0 === this.dragging && !1 === this.options.hideEdgesOnDrag) && (!1 === this.zooming || !0 === this.zooming && !1 === this.options.hideEdgesOnZoom) && this._drawEdges(i), !1 === this.dragging || !0 === this.dragging && !1 === this.options.hideNodesOnDrag) {
                            var r = this._drawNodes(i, t), s = r.drawExternalLabels;
                            e.drawExternalLabels = s;
                        }
                        !1 === t && (!1 === this.dragging || !0 === this.dragging && !1 === this.options.hideEdgesOnDrag) && (!1 === this.zooming || !0 === this.zooming && !1 === this.options.hideEdgesOnZoom) && this._drawArrows(i), null != e.drawExternalLabels && e.drawExternalLabels(), !1 === t && this._drawSelectionBox(i), i.beginPath(), this.body.emitter.emit("afterDrawing", i), i.closePath(), i.restore(), !0 === t && i.clearRect(0, 0, o, n);
                    }
                }
            },
            {
                key: "_resizeNodes",
                value: function() {
                    this.canvas.setTransform();
                    var t = this.canvas.getContext();
                    t.save(), t.translate(this.body.view.translation.x, this.body.view.translation.y), t.scale(this.body.view.scale, this.body.view.scale);
                    var e, i = this.body.nodes;
                    for(var o in i)Object.prototype.hasOwnProperty.call(i, o) && ((e = i[o]).resize(t), e.updateBoundingBox(t, e.selected));
                    t.restore();
                }
            },
            {
                key: "_drawNodes",
                value: function(t166) {
                    for(var e99, i, o = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = this.body.nodes, r = this.body.nodeIndices, s = [], a = [], h = 20, d = this.canvas.DOMtoCanvas({
                        x: -h,
                        y: -h
                    }), l = this.canvas.DOMtoCanvas({
                        x: this.canvas.frame.canvas.clientWidth + h,
                        y: this.canvas.frame.canvas.clientHeight + h
                    }), c = {
                        top: d.y,
                        left: d.x,
                        bottom: l.y,
                        right: l.x
                    }, u = [], f = 0; f < r.length; f++)if ((e99 = n[r[f]]).hover) a.push(r[f]);
                    else if (e99.isSelected()) s.push(r[f]);
                    else if (!0 === o) {
                        var p = e99.draw(t166);
                        null != p.drawExternalLabel && u.push(p.drawExternalLabel);
                    } else if (!0 === e99.isBoundingBoxOverlappingWith(c)) {
                        var v = e99.draw(t166);
                        null != v.drawExternalLabel && u.push(v.drawExternalLabel);
                    } else e99.updateBoundingBox(t166, e99.selected);
                    var g = s.length, y = a.length;
                    for(i = 0; i < g; i++){
                        var m = (e99 = n[s[i]]).draw(t166);
                        null != m.drawExternalLabel && u.push(m.drawExternalLabel);
                    }
                    for(i = 0; i < y; i++){
                        var b = (e99 = n[a[i]]).draw(t166);
                        null != b.drawExternalLabel && u.push(b.drawExternalLabel);
                    }
                    return {
                        drawExternalLabels: function() {
                            var t, e = Dm(u);
                            try {
                                for(e.s(); !(t = e.n()).done;)(0, t.value)();
                            } catch (t167) {
                                e.e(t167);
                            } finally{
                                e.f();
                            }
                        }
                    };
                }
            },
            {
                key: "_drawEdges",
                value: function(t) {
                    for(var e = this.body.edges, i = this.body.edgeIndices, o = 0; o < i.length; o++){
                        var n = e[i[o]];
                        !0 === n.connected && n.draw(t);
                    }
                }
            },
            {
                key: "_drawArrows",
                value: function(t) {
                    for(var e = this.body.edges, i = this.body.edgeIndices, o = 0; o < i.length; o++){
                        var n = e[i[o]];
                        !0 === n.connected && n.drawArrows(t);
                    }
                }
            },
            {
                key: "_determineBrowserMethod",
                value: function() {
                    if ("undefined" != typeof window) {
                        var t = navigator.userAgent.toLowerCase();
                        this.requiresTimeout = !1, (-1 != Cl(t).call(t, "msie 9.0") || -1 != Cl(t).call(t, "safari") && Cl(t).call(t, "chrome") <= -1) && (this.requiresTimeout = !0);
                    } else this.requiresTimeout = !0;
                }
            },
            {
                key: "_drawSelectionBox",
                value: function(t) {
                    if (this.body.selectionBox.show) {
                        t.beginPath();
                        var e = this.body.selectionBox.position.end.x - this.body.selectionBox.position.start.x, i = this.body.selectionBox.position.end.y - this.body.selectionBox.position.start.y;
                        t.rect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, e, i), t.fillStyle = "rgba(151, 194, 252, 0.2)", t.fillRect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, e, i), t.strokeStyle = "rgba(151, 194, 252, 1)", t.stroke();
                    } else t.closePath();
                }
            }
        ]), t164;
    }(), zm = O1.setInterval;
    function Fm(t168, e) {
        e.inputHandler = function(t) {
            t.isFirst && e(t);
        }, t168.on("hammer.input", e.inputHandler);
    }
    function Nm(t169, e) {
        return e.inputHandler = function(t) {
            t.isFinal && e(t);
        }, t169.on("hammer.input", e.inputHandler);
    }
    var Am = function() {
        function t170(e) {
            Ra(this, t170), this.body = e, this.pixelRatio = 1, this.cameraState = {
            }, this.initialized = !1, this.canvasViewCenter = {
            }, this._cleanupCallbacks = [], this.options = {
            }, this.defaultOptions = {
                autoResize: !0,
                height: "100%",
                width: "100%"
            }, Ke(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return Ha(t170, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t171, e = this;
                    this.body.emitter.once("resize", function(t) {
                        0 !== t.width && (e.body.view.translation.x = 0.5 * t.width), 0 !== t.height && (e.body.view.translation.y = 0.5 * t.height);
                    }), this.body.emitter.on("setSize", si(t171 = this.setSize).call(t171, this)), this.body.emitter.on("destroy", function() {
                        e.hammerFrame.destroy(), e.hammer.destroy(), e._cleanUp();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t172) {
                    var e100, i69, o17, n14, r, s = this;
                    if (void 0 !== t172) nf([
                        "width",
                        "height",
                        "autoResize"
                    ], this.options, t172);
                    if (this._cleanUp(), !0 === this.options.autoResize) {
                        var a;
                        if (window.ResizeObserver) {
                            var h = new ResizeObserver(function() {
                                !0 === s.setSize() && s.body.emitter.emit("_requestRedraw");
                            }), d = this.frame;
                            h.observe(d), this._cleanupCallbacks.push(function() {
                                h.unobserve(d);
                            });
                        } else {
                            var l = zm(function() {
                                !0 === s.setSize() && s.body.emitter.emit("_requestRedraw");
                            }, 1000);
                            this._cleanupCallbacks.push(function() {
                                clearInterval(l);
                            });
                        }
                        var c = si(a = this._onResize).call(a, this);
                        e100 = window, i69 = "resize", o17 = c, e100.addEventListener ? (void 0 === n14 && (n14 = !1), "mousewheel" === i69 && Hd(r = navigator.userAgent).call(r, "Firefox") && (i69 = "DOMMouseScroll"), e100.addEventListener(i69, o17, n14)) : e100.attachEvent("on" + i69, o17), this._cleanupCallbacks.push(function() {
                            !function(t, e, i, o) {
                                var n;
                                t.removeEventListener ? (void 0 === o && (o = !1), "mousewheel" === e && Hd(n = navigator.userAgent).call(n, "Firefox") && (e = "DOMMouseScroll"), t.removeEventListener(e, i, o)) : t.detachEvent("on" + e, i);
                            }(window, "resize", c);
                        });
                    }
                }
            },
            {
                key: "_cleanUp",
                value: function() {
                    var t173, e, i;
                    nd(t173 = ld(e = Od(i = this._cleanupCallbacks).call(i, 0)).call(e)).call(t173, function(t) {
                        try {
                            t();
                        } catch (t174) {
                            console.error(t174);
                        }
                    });
                }
            },
            {
                key: "_onResize",
                value: function() {
                    this.setSize(), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_getCameraState",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.pixelRatio;
                    !0 === this.initialized && (this.cameraState.previousWidth = this.frame.canvas.width / t, this.cameraState.previousHeight = this.frame.canvas.height / t, this.cameraState.scale = this.body.view.scale, this.cameraState.position = this.DOMtoCanvas({
                        x: 0.5 * this.frame.canvas.width / t,
                        y: 0.5 * this.frame.canvas.height / t
                    }));
                }
            },
            {
                key: "_setCameraState",
                value: function() {
                    if (void 0 !== this.cameraState.scale && 0 !== this.frame.canvas.clientWidth && 0 !== this.frame.canvas.clientHeight && 0 !== this.pixelRatio && this.cameraState.previousWidth > 0 && this.cameraState.previousHeight > 0) {
                        var t = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth, e = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight, i = this.cameraState.scale;
                        1 != t && 1 != e ? i = 0.5 * this.cameraState.scale * (t + e) : 1 != t ? i = this.cameraState.scale * t : 1 != e && (i = this.cameraState.scale * e), this.body.view.scale = i;
                        var o = this.DOMtoCanvas({
                            x: 0.5 * this.frame.canvas.clientWidth,
                            y: 0.5 * this.frame.canvas.clientHeight
                        }), n = {
                            x: o.x - this.cameraState.position.x,
                            y: o.y - this.cameraState.position.y
                        };
                        this.body.view.translation.x += n.x * this.body.view.scale, this.body.view.translation.y += n.y * this.body.view.scale;
                    }
                }
            },
            {
                key: "_prepareValue",
                value: function(t) {
                    if ("number" == typeof t) return t + "px";
                    if ("string" == typeof t) {
                        if (-1 !== Cl(t).call(t, "%") || -1 !== Cl(t).call(t, "px")) return t;
                        if (-1 === Cl(t).call(t, "%")) return t + "px";
                    }
                    throw new Error("Could not use the value supplied for width or height:" + t);
                }
            },
            {
                key: "_create",
                value: function() {
                    for(; this.body.container.hasChildNodes();)this.body.container.removeChild(this.body.container.firstChild);
                    if (this.frame = document.createElement("div"), this.frame.className = "vis-network", this.frame.style.position = "relative", this.frame.style.overflow = "hidden", this.frame.tabIndex = 0, this.frame.canvas = document.createElement("canvas"), this.frame.canvas.style.position = "relative", this.frame.appendChild(this.frame.canvas), this.frame.canvas.getContext) this._setPixelRatio(), this.setTransform();
                    else {
                        var t = document.createElement("DIV");
                        t.style.color = "red", t.style.fontWeight = "bold", t.style.padding = "10px", t.innerText = "Error: your browser does not support HTML canvas", this.frame.canvas.appendChild(t);
                    }
                    this.body.container.appendChild(this.frame), this.body.view.scale = 1, this.body.view.translation = {
                        x: 0.5 * this.frame.canvas.clientWidth,
                        y: 0.5 * this.frame.canvas.clientHeight
                    }, this._bindHammer();
                }
            },
            {
                key: "_bindHammer",
                value: function() {
                    var t = this;
                    void 0 !== this.hammer && this.hammer.destroy(), this.drag = {
                    }, this.pinch = {
                    }, this.hammer = new If(this.frame.canvas), this.hammer.get("pinch").set({
                        enable: !0
                    }), this.hammer.get("pan").set({
                        threshold: 5,
                        direction: If.DIRECTION_ALL
                    }), Fm(this.hammer, function(e) {
                        t.body.eventListeners.onTouch(e);
                    }), this.hammer.on("tap", function(e) {
                        t.body.eventListeners.onTap(e);
                    }), this.hammer.on("doubletap", function(e) {
                        t.body.eventListeners.onDoubleTap(e);
                    }), this.hammer.on("press", function(e) {
                        t.body.eventListeners.onHold(e);
                    }), this.hammer.on("panstart", function(e) {
                        t.body.eventListeners.onDragStart(e);
                    }), this.hammer.on("panmove", function(e) {
                        t.body.eventListeners.onDrag(e);
                    }), this.hammer.on("panend", function(e) {
                        t.body.eventListeners.onDragEnd(e);
                    }), this.hammer.on("pinch", function(e) {
                        t.body.eventListeners.onPinch(e);
                    }), this.frame.canvas.addEventListener("wheel", function(e) {
                        t.body.eventListeners.onMouseWheel(e);
                    }), this.frame.canvas.addEventListener("mousemove", function(e) {
                        t.body.eventListeners.onMouseMove(e);
                    }), this.frame.canvas.addEventListener("contextmenu", function(e) {
                        t.body.eventListeners.onContext(e);
                    }), this.hammerFrame = new If(this.frame), Nm(this.hammerFrame, function(e) {
                        t.body.eventListeners.onRelease(e);
                    });
                }
            },
            {
                key: "setSize",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.options.width, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.options.height;
                    t = this._prepareValue(t), e = this._prepareValue(e);
                    var i = !1, o = this.frame.canvas.width, n = this.frame.canvas.height, r = this.pixelRatio;
                    if (this._setPixelRatio(), t != this.options.width || e != this.options.height || this.frame.style.width != t || this.frame.style.height != e) this._getCameraState(r), this.frame.style.width = t, this.frame.style.height = e, this.frame.canvas.style.width = "100%", this.frame.canvas.style.height = "100%", this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio), this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio), this.options.width = t, this.options.height = e, this.canvasViewCenter = {
                        x: 0.5 * this.frame.clientWidth,
                        y: 0.5 * this.frame.clientHeight
                    }, i = !0;
                    else {
                        var s = Math.round(this.frame.canvas.clientWidth * this.pixelRatio), a = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
                        this.frame.canvas.width === s && this.frame.canvas.height === a || this._getCameraState(r), this.frame.canvas.width !== s && (this.frame.canvas.width = s, i = !0), this.frame.canvas.height !== a && (this.frame.canvas.height = a, i = !0);
                    }
                    return !0 === i && (this.body.emitter.emit("resize", {
                        width: Math.round(this.frame.canvas.width / this.pixelRatio),
                        height: Math.round(this.frame.canvas.height / this.pixelRatio),
                        oldWidth: Math.round(o / this.pixelRatio),
                        oldHeight: Math.round(n / this.pixelRatio)
                    }), this._setCameraState()), this.initialized = !0, i;
                }
            },
            {
                key: "getContext",
                value: function() {
                    return this.frame.canvas.getContext("2d");
                }
            },
            {
                key: "_determinePixelRatio",
                value: function() {
                    var t = this.getContext();
                    if (void 0 === t) throw new Error("Could not get canvax context");
                    var e = 1;
                    return "undefined" != typeof window && (e = window.devicePixelRatio || 1), e / (t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1);
                }
            },
            {
                key: "_setPixelRatio",
                value: function() {
                    this.pixelRatio = this._determinePixelRatio();
                }
            },
            {
                key: "setTransform",
                value: function() {
                    var t = this.getContext();
                    if (void 0 === t) throw new Error("Could not get canvax context");
                    t.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                }
            },
            {
                key: "_XconvertDOMtoCanvas",
                value: function(t) {
                    return (t - this.body.view.translation.x) / this.body.view.scale;
                }
            },
            {
                key: "_XconvertCanvasToDOM",
                value: function(t) {
                    return t * this.body.view.scale + this.body.view.translation.x;
                }
            },
            {
                key: "_YconvertDOMtoCanvas",
                value: function(t) {
                    return (t - this.body.view.translation.y) / this.body.view.scale;
                }
            },
            {
                key: "_YconvertCanvasToDOM",
                value: function(t) {
                    return t * this.body.view.scale + this.body.view.translation.y;
                }
            },
            {
                key: "canvasToDOM",
                value: function(t) {
                    return {
                        x: this._XconvertCanvasToDOM(t.x),
                        y: this._YconvertCanvasToDOM(t.y)
                    };
                }
            },
            {
                key: "DOMtoCanvas",
                value: function(t) {
                    return {
                        x: this._XconvertDOMtoCanvas(t.x),
                        y: this._YconvertDOMtoCanvas(t.y)
                    };
                }
            }
        ]), t170;
    }();
    function Rm(t, e) {
        var i = Ke({
            nodes: e,
            minZoomLevel: Number.MIN_VALUE,
            maxZoomLevel: 1
        }, null != t ? t : {
        });
        if (!Hh(i.nodes)) throw new TypeError("Nodes has to be an array of ids.");
        if (0 === i.nodes.length && (i.nodes = e), !("number" == typeof i.minZoomLevel && i.minZoomLevel > 0)) throw new TypeError("Min zoom level has to be a number higher than zero.");
        if (!("number" == typeof i.maxZoomLevel && i.minZoomLevel <= i.maxZoomLevel)) throw new TypeError("Max zoom level has to be a number higher than min zoom level.");
        return i;
    }
    var jm = function() {
        function t175(e, i) {
            var o, n, r = this;
            Ra(this, t175), this.body = e, this.canvas = i, this.animationSpeed = 1 / this.renderRefreshRate, this.animationEasingFunction = "easeInOutQuint", this.easingTime = 0, this.sourceScale = 0, this.targetScale = 0, this.sourceTranslation = 0, this.targetTranslation = 0, this.lockedOnNodeId = void 0, this.lockedOnNodeOffset = void 0, this.touchTime = 0, this.viewFunction = void 0, this.body.emitter.on("fit", si(o = this.fit).call(o, this)), this.body.emitter.on("animationFinished", function() {
                r.body.emitter.emit("_stopRendering");
            }), this.body.emitter.on("unlockNode", si(n = this.releaseNode).call(n, this));
        }
        return Ha(t175, [
            {
                key: "setOptions",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                    };
                    this.options = t;
                }
            },
            {
                key: "fit",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    t = Rm(t, this.body.nodeIndices);
                    var i, o, n = this.canvas.frame.canvas.clientWidth, r = this.canvas.frame.canvas.clientHeight;
                    if (0 === n || 0 === r) o = 1, i = Sm.getRange(this.body.nodes, t.nodes);
                    else if (!0 === e) {
                        var s = 0;
                        for(var a in this.body.nodes)if (Object.prototype.hasOwnProperty.call(this.body.nodes, a)) {
                            var h = this.body.nodes[a];
                            !0 === h.predefinedPosition && (s += 1);
                        }
                        if (s > 0.5 * this.body.nodeIndices.length) return void this.fit(t, !1);
                        i = Sm.getRange(this.body.nodes, t.nodes);
                        var d = this.body.nodeIndices.length;
                        o = 12.662 / (d + 7.4147) + 0.0964822;
                        var l = Math.min(n / 600, r / 600);
                        o *= l;
                    } else {
                        this.body.emitter.emit("_resizeNodes"), i = Sm.getRange(this.body.nodes, t.nodes);
                        var c = 1.1 * Math.abs(i.maxX - i.minX), u = 1.1 * Math.abs(i.maxY - i.minY), f = n / c, p = r / u;
                        o = f <= p ? f : p;
                    }
                    o > t.maxZoomLevel ? o = t.maxZoomLevel : o < t.minZoomLevel && (o = t.minZoomLevel);
                    var v = Sm.findCenter(i), g = {
                        position: v,
                        scale: o,
                        animation: t.animation
                    };
                    this.moveTo(g);
                }
            },
            {
                key: "focus",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                    };
                    if (void 0 !== this.body.nodes[t]) {
                        var i = {
                            x: this.body.nodes[t].x,
                            y: this.body.nodes[t].y
                        };
                        e.position = i, e.lockedOnNode = t, this.moveTo(e);
                    } else console.error("Node: " + t + " cannot be found.");
                }
            },
            {
                key: "moveTo",
                value: function(t) {
                    if (void 0 !== t) {
                        if (null != t.offset) {
                            if (null != t.offset.x) {
                                if (t.offset.x = +t.offset.x, !Pv(t.offset.x)) throw new TypeError('The option "offset.x" has to be a finite number.');
                            } else t.offset.x = 0;
                            if (null != t.offset.y) {
                                if (t.offset.y = +t.offset.y, !Pv(t.offset.y)) throw new TypeError('The option "offset.y" has to be a finite number.');
                            } else t.offset.x = 0;
                        } else t.offset = {
                            x: 0,
                            y: 0
                        };
                        if (null != t.position) {
                            if (null != t.position.x) {
                                if (t.position.x = +t.position.x, !Pv(t.position.x)) throw new TypeError('The option "position.x" has to be a finite number.');
                            } else t.position.x = 0;
                            if (null != t.position.y) {
                                if (t.position.y = +t.position.y, !Pv(t.position.y)) throw new TypeError('The option "position.y" has to be a finite number.');
                            } else t.position.x = 0;
                        } else t.position = this.getViewPosition();
                        if (null != t.scale) {
                            if (t.scale = +t.scale, !(t.scale > 0)) throw new TypeError('The option "scale" has to be a number greater than zero.');
                        } else t.scale = this.body.view.scale;
                        void 0 === t.animation && (t.animation = {
                            duration: 0
                        }), !1 === t.animation && (t.animation = {
                            duration: 0
                        }), !0 === t.animation && (t.animation = {
                        }), void 0 === t.animation.duration && (t.animation.duration = 1000), void 0 === t.animation.easingFunction && (t.animation.easingFunction = "easeInOutQuad"), this.animateView(t);
                    } else t = {
                    };
                }
            },
            {
                key: "animateView",
                value: function(t) {
                    if (void 0 !== t) {
                        this.animationEasingFunction = t.animation.easingFunction, this.releaseNode(), !0 === t.locked && (this.lockedOnNodeId = t.lockedOnNode, this.lockedOnNodeOffset = t.offset), 0 != this.easingTime && this._transitionRedraw(!0), this.sourceScale = this.body.view.scale, this.sourceTranslation = this.body.view.translation, this.targetScale = t.scale, this.body.view.scale = this.targetScale;
                        var e, i, o = this.canvas.DOMtoCanvas({
                            x: 0.5 * this.canvas.frame.canvas.clientWidth,
                            y: 0.5 * this.canvas.frame.canvas.clientHeight
                        }), n = o.x - t.position.x, r = o.y - t.position.y;
                        if (this.targetTranslation = {
                            x: this.sourceTranslation.x + n * this.targetScale + t.offset.x,
                            y: this.sourceTranslation.y + r * this.targetScale + t.offset.y
                        }, 0 === t.animation.duration) {
                            if (null != this.lockedOnNodeId) this.viewFunction = si(e = this._lockedRedraw).call(e, this), this.body.emitter.on("initRedraw", this.viewFunction);
                            else this.body.view.scale = this.targetScale, this.body.view.translation = this.targetTranslation, this.body.emitter.emit("_requestRedraw");
                        } else this.animationSpeed = 1 / (60 * t.animation.duration * 0.001) || 1 / 60, this.animationEasingFunction = t.animation.easingFunction, this.viewFunction = si(i = this._transitionRedraw).call(i, this), this.body.emitter.on("initRedraw", this.viewFunction), this.body.emitter.emit("_startRendering");
                    }
                }
            },
            {
                key: "_lockedRedraw",
                value: function() {
                    var t = this.body.nodes[this.lockedOnNodeId].x, e = this.body.nodes[this.lockedOnNodeId].y, i = this.canvas.DOMtoCanvas({
                        x: 0.5 * this.canvas.frame.canvas.clientWidth,
                        y: 0.5 * this.canvas.frame.canvas.clientHeight
                    }), o = i.x - t, n = i.y - e, r = this.body.view.translation, s = {
                        x: r.x + o * this.body.view.scale + this.lockedOnNodeOffset.x,
                        y: r.y + n * this.body.view.scale + this.lockedOnNodeOffset.y
                    };
                    this.body.view.translation = s;
                }
            },
            {
                key: "releaseNode",
                value: function() {
                    void 0 !== this.lockedOnNodeId && void 0 !== this.viewFunction && (this.body.emitter.off("initRedraw", this.viewFunction), this.lockedOnNodeId = void 0, this.lockedOnNodeOffset = void 0);
                }
            },
            {
                key: "_transitionRedraw",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    this.easingTime += this.animationSpeed, this.easingTime = !0 === t ? 1 : this.easingTime;
                    var e = xf[this.animationEasingFunction](this.easingTime);
                    if (this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * e, this.body.view.translation = {
                        x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * e,
                        y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * e
                    }, this.easingTime >= 1) {
                        var i;
                        if (this.body.emitter.off("initRedraw", this.viewFunction), this.easingTime = 0, null != this.lockedOnNodeId) this.viewFunction = si(i = this._lockedRedraw).call(i, this), this.body.emitter.on("initRedraw", this.viewFunction);
                        this.body.emitter.emit("animationFinished");
                    }
                }
            },
            {
                key: "getScale",
                value: function() {
                    return this.body.view.scale;
                }
            },
            {
                key: "getViewPosition",
                value: function() {
                    return this.canvas.DOMtoCanvas({
                        x: 0.5 * this.canvas.frame.canvas.clientWidth,
                        y: 0.5 * this.canvas.frame.canvas.clientHeight
                    });
                }
            }
        ]), t175;
    }();
    function Lm(t176) {
        var e101, i70 = t176 && t176.preventDefault || !1, o18 = t176 && t176.container || window, n15 = {
        }, r = {
            keydown: {
            },
            keyup: {
            }
        }, s = {
        };
        for(e101 = 97; e101 <= 122; e101++)s[String.fromCharCode(e101)] = {
            code: e101 - 97 + 65,
            shift: !1
        };
        for(e101 = 65; e101 <= 90; e101++)s[String.fromCharCode(e101)] = {
            code: e101,
            shift: !0
        };
        for(e101 = 0; e101 <= 9; e101++)s["" + e101] = {
            code: 48 + e101,
            shift: !1
        };
        for(e101 = 1; e101 <= 12; e101++)s["F" + e101] = {
            code: 111 + e101,
            shift: !1
        };
        for(e101 = 0; e101 <= 9; e101++)s["num" + e101] = {
            code: 96 + e101,
            shift: !1
        };
        s["num*"] = {
            code: 106,
            shift: !1
        }, s["num+"] = {
            code: 107,
            shift: !1
        }, s["num-"] = {
            code: 109,
            shift: !1
        }, s["num/"] = {
            code: 111,
            shift: !1
        }, s["num."] = {
            code: 110,
            shift: !1
        }, s.left = {
            code: 37,
            shift: !1
        }, s.up = {
            code: 38,
            shift: !1
        }, s.right = {
            code: 39,
            shift: !1
        }, s.down = {
            code: 40,
            shift: !1
        }, s.space = {
            code: 32,
            shift: !1
        }, s.enter = {
            code: 13,
            shift: !1
        }, s.shift = {
            code: 16,
            shift: void 0
        }, s.esc = {
            code: 27,
            shift: !1
        }, s.backspace = {
            code: 8,
            shift: !1
        }, s.tab = {
            code: 9,
            shift: !1
        }, s.ctrl = {
            code: 17,
            shift: !1
        }, s.alt = {
            code: 18,
            shift: !1
        }, s.delete = {
            code: 46,
            shift: !1
        }, s.pageup = {
            code: 33,
            shift: !1
        }, s.pagedown = {
            code: 34,
            shift: !1
        }, s["="] = {
            code: 187,
            shift: !1
        }, s["-"] = {
            code: 189,
            shift: !1
        }, s["]"] = {
            code: 221,
            shift: !1
        }, s["["] = {
            code: 219,
            shift: !1
        };
        var a3 = function(t) {
            d(t, "keydown");
        }, h = function(t) {
            d(t, "keyup");
        }, d = function(t, e) {
            if (void 0 !== r[e][t.keyCode]) {
                for(var o = r[e][t.keyCode], n = 0; n < o.length; n++)(void 0 === o[n].shift || 1 == o[n].shift && 1 == t.shiftKey || 0 == o[n].shift && 0 == t.shiftKey) && o[n].fn(t);
                1 == i70 && t.preventDefault();
            }
        };
        return n15.bind = function(t, e, i) {
            if (void 0 === i && (i = "keydown"), void 0 === s[t]) throw new Error("unsupported key: " + t);
            void 0 === r[i][s[t].code] && (r[i][s[t].code] = []), r[i][s[t].code].push({
                fn: e,
                shift: s[t].shift
            });
        }, n15.bindAll = function(t, e) {
            for(var i in void 0 === e && (e = "keydown"), s)s.hasOwnProperty(i) && n15.bind(i, t, e);
        }, n15.getKey = function(t) {
            for(var e in s)if (s.hasOwnProperty(e)) {
                if (1 == t.shiftKey && 1 == s[e].shift && t.keyCode == s[e].code) return e;
                if (0 == t.shiftKey && 0 == s[e].shift && t.keyCode == s[e].code) return e;
                if (t.keyCode == s[e].code && "shift" == e) return e;
            }
            return "unknown key, currently not supported";
        }, n15.unbind = function(t, e, i) {
            if (void 0 === i && (i = "keydown"), void 0 === s[t]) throw new Error("unsupported key: " + t);
            if (void 0 !== e) {
                var o = [], n = r[i][s[t].code];
                if (void 0 !== n) for(var a = 0; a < n.length; a++)n[a].fn == e && n[a].shift == s[t].shift || o.push(r[i][s[t].code][a]);
                r[i][s[t].code] = o;
            } else r[i][s[t].code] = [];
        }, n15.reset = function() {
            r = {
                keydown: {
                },
                keyup: {
                }
            };
        }, n15.destroy = function() {
            r = {
                keydown: {
                },
                keyup: {
                }
            }, o18.removeEventListener("keydown", a3, !0), o18.removeEventListener("keyup", h, !0);
        }, o18.addEventListener("keydown", a3, !0), o18.addEventListener("keyup", h, !0), n15;
    }
    var Hm = function() {
        function t177(e, i) {
            var o = this;
            Ra(this, t177), this.body = e, this.canvas = i, this.iconsCreated = !1, this.navigationHammers = [], this.boundFunctions = {
            }, this.touchTime = 0, this.activated = !1, this.body.emitter.on("activate", function() {
                o.activated = !0, o.configureKeyboardBindings();
            }), this.body.emitter.on("deactivate", function() {
                o.activated = !1, o.configureKeyboardBindings();
            }), this.body.emitter.on("destroy", function() {
                void 0 !== o.keycharm && o.keycharm.destroy();
            }), this.options = {
            };
        }
        return Ha(t177, [
            {
                key: "setOptions",
                value: function(t) {
                    void 0 !== t && (this.options = t, this.create());
                }
            },
            {
                key: "create",
                value: function() {
                    !0 === this.options.navigationButtons ? !1 === this.iconsCreated && this.loadNavigationElements() : !0 === this.iconsCreated && this.cleanNavigation(), this.configureKeyboardBindings();
                }
            },
            {
                key: "cleanNavigation",
                value: function() {
                    if (0 != this.navigationHammers.length) {
                        for(var t = 0; t < this.navigationHammers.length; t++)this.navigationHammers[t].destroy();
                        this.navigationHammers = [];
                    }
                    this.navigationDOM && this.navigationDOM.wrapper && this.navigationDOM.wrapper.parentNode && this.navigationDOM.wrapper.parentNode.removeChild(this.navigationDOM.wrapper), this.iconsCreated = !1;
                }
            },
            {
                key: "loadNavigationElements",
                value: function() {
                    var t = this;
                    this.cleanNavigation(), this.navigationDOM = {
                    };
                    var e = [
                        "up",
                        "down",
                        "left",
                        "right",
                        "zoomIn",
                        "zoomOut",
                        "zoomExtends"
                    ], i = [
                        "_moveUp",
                        "_moveDown",
                        "_moveLeft",
                        "_moveRight",
                        "_zoomIn",
                        "_zoomOut",
                        "_fit"
                    ];
                    this.navigationDOM.wrapper = document.createElement("div"), this.navigationDOM.wrapper.className = "vis-navigation", this.canvas.frame.appendChild(this.navigationDOM.wrapper);
                    for(var o = 0; o < e.length; o++){
                        this.navigationDOM[e[o]] = document.createElement("div"), this.navigationDOM[e[o]].className = "vis-button vis-" + e[o], this.navigationDOM.wrapper.appendChild(this.navigationDOM[e[o]]);
                        var n, r, s = new If(this.navigationDOM[e[o]]);
                        if ("_fit" === i[o]) Fm(s, si(n = this._fit).call(n, this));
                        else Fm(s, si(r = this.bindToRedraw).call(r, this, i[o]));
                        this.navigationHammers.push(s);
                    }
                    var a = new If(this.canvas.frame);
                    Nm(a, function() {
                        t._stopMovement();
                    }), this.navigationHammers.push(a), this.iconsCreated = !0;
                }
            },
            {
                key: "bindToRedraw",
                value: function(t) {
                    var e;
                    void 0 === this.boundFunctions[t] && (this.boundFunctions[t] = si(e = this[t]).call(e, this), this.body.emitter.on("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_startRendering"));
                }
            },
            {
                key: "unbindFromRedraw",
                value: function(t) {
                    void 0 !== this.boundFunctions[t] && (this.body.emitter.off("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_stopRendering"), delete this.boundFunctions[t]);
                }
            },
            {
                key: "_fit",
                value: function() {
                    (new Date).valueOf() - this.touchTime > 700 && (this.body.emitter.emit("fit", {
                        duration: 700
                    }), this.touchTime = (new Date).valueOf());
                }
            },
            {
                key: "_stopMovement",
                value: function() {
                    for(var t in this.boundFunctions)Object.prototype.hasOwnProperty.call(this.boundFunctions, t) && (this.body.emitter.off("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_stopRendering"));
                    this.boundFunctions = {
                    };
                }
            },
            {
                key: "_moveUp",
                value: function() {
                    this.body.view.translation.y += this.options.keyboard.speed.y;
                }
            },
            {
                key: "_moveDown",
                value: function() {
                    this.body.view.translation.y -= this.options.keyboard.speed.y;
                }
            },
            {
                key: "_moveLeft",
                value: function() {
                    this.body.view.translation.x += this.options.keyboard.speed.x;
                }
            },
            {
                key: "_moveRight",
                value: function() {
                    this.body.view.translation.x -= this.options.keyboard.speed.x;
                }
            },
            {
                key: "_zoomIn",
                value: function() {
                    var t = this.body.view.scale, e = this.body.view.scale * (1 + this.options.keyboard.speed.zoom), i = this.body.view.translation, o = e / t, n = (1 - o) * this.canvas.canvasViewCenter.x + i.x * o, r = (1 - o) * this.canvas.canvasViewCenter.y + i.y * o;
                    this.body.view.scale = e, this.body.view.translation = {
                        x: n,
                        y: r
                    }, this.body.emitter.emit("zoom", {
                        direction: "+",
                        scale: this.body.view.scale,
                        pointer: null
                    });
                }
            },
            {
                key: "_zoomOut",
                value: function() {
                    var t = this.body.view.scale, e = this.body.view.scale / (1 + this.options.keyboard.speed.zoom), i = this.body.view.translation, o = e / t, n = (1 - o) * this.canvas.canvasViewCenter.x + i.x * o, r = (1 - o) * this.canvas.canvasViewCenter.y + i.y * o;
                    this.body.view.scale = e, this.body.view.translation = {
                        x: n,
                        y: r
                    }, this.body.emitter.emit("zoom", {
                        direction: "-",
                        scale: this.body.view.scale,
                        pointer: null
                    });
                }
            },
            {
                key: "configureKeyboardBindings",
                value: function() {
                    var t, e, i, o, n, r, s, a, h, d, l, c, u, f, p, v, g, y, m, b, w, k, _, x, E = this;
                    (void 0 !== this.keycharm && this.keycharm.destroy(), !0 === this.options.keyboard.enabled) && (!0 === this.options.keyboard.bindToWindow ? this.keycharm = Lm({
                        container: window,
                        preventDefault: !0
                    }) : this.keycharm = Lm({
                        container: this.canvas.frame,
                        preventDefault: !0
                    }), this.keycharm.reset(), !0 === this.activated && (si(t = this.keycharm).call(t, "up", function() {
                        E.bindToRedraw("_moveUp");
                    }, "keydown"), si(e = this.keycharm).call(e, "down", function() {
                        E.bindToRedraw("_moveDown");
                    }, "keydown"), si(i = this.keycharm).call(i, "left", function() {
                        E.bindToRedraw("_moveLeft");
                    }, "keydown"), si(o = this.keycharm).call(o, "right", function() {
                        E.bindToRedraw("_moveRight");
                    }, "keydown"), si(n = this.keycharm).call(n, "=", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), si(r = this.keycharm).call(r, "num+", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), si(s = this.keycharm).call(s, "num-", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), si(a = this.keycharm).call(a, "-", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), si(h = this.keycharm).call(h, "[", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), si(d = this.keycharm).call(d, "]", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), si(l = this.keycharm).call(l, "pageup", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), si(c = this.keycharm).call(c, "pagedown", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), si(u = this.keycharm).call(u, "up", function() {
                        E.unbindFromRedraw("_moveUp");
                    }, "keyup"), si(f = this.keycharm).call(f, "down", function() {
                        E.unbindFromRedraw("_moveDown");
                    }, "keyup"), si(p = this.keycharm).call(p, "left", function() {
                        E.unbindFromRedraw("_moveLeft");
                    }, "keyup"), si(v = this.keycharm).call(v, "right", function() {
                        E.unbindFromRedraw("_moveRight");
                    }, "keyup"), si(g = this.keycharm).call(g, "=", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), si(y = this.keycharm).call(y, "num+", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), si(m = this.keycharm).call(m, "num-", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup"), si(b = this.keycharm).call(b, "-", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup"), si(w = this.keycharm).call(w, "[", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup"), si(k = this.keycharm).call(k, "]", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), si(_ = this.keycharm).call(_, "pageup", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), si(x = this.keycharm).call(x, "pagedown", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup")));
                }
            }
        ]), t177;
    }();
    function Wm(t178, e102) {
        var i71 = void 0 !== Nh && xr(t178) || t178["@@iterator"];
        if (!i71) {
            if (Hh(t178) || (i71 = (function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return Vm(t, e);
                var o = Lh(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return rr(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return Vm(t, e);
            })(t178)) || e102 && t178 && "number" == typeof t178.length) {
                i71 && (t178 = i71);
                var o19 = 0, n = function() {
                };
                return {
                    s: n,
                    n: function() {
                        return o19 >= t178.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t178[o19++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i71 = i71.call(t178);
            },
            n: function() {
                var t = i71.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i71.return || i71.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function Vm(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    var qm = function() {
        function t179(e, i, o) {
            var n, r, s, a, h, d, l, c, u, f, p, v, g;
            Ra(this, t179), this.body = e, this.canvas = i, this.selectionHandler = o, this.navigationHandler = new Hm(e, i), this.body.eventListeners.onTap = si(n = this.onTap).call(n, this), this.body.eventListeners.onTouch = si(r = this.onTouch).call(r, this), this.body.eventListeners.onDoubleTap = si(s = this.onDoubleTap).call(s, this), this.body.eventListeners.onHold = si(a = this.onHold).call(a, this), this.body.eventListeners.onDragStart = si(h = this.onDragStart).call(h, this), this.body.eventListeners.onDrag = si(d = this.onDrag).call(d, this), this.body.eventListeners.onDragEnd = si(l = this.onDragEnd).call(l, this), this.body.eventListeners.onMouseWheel = si(c = this.onMouseWheel).call(c, this), this.body.eventListeners.onPinch = si(u = this.onPinch).call(u, this), this.body.eventListeners.onMouseMove = si(f = this.onMouseMove).call(f, this), this.body.eventListeners.onRelease = si(p = this.onRelease).call(p, this), this.body.eventListeners.onContext = si(v = this.onContext).call(v, this), this.touchTime = 0, this.drag = {
            }, this.pinch = {
            }, this.popup = void 0, this.popupObj = void 0, this.popupTimer = void 0, this.body.functions.getPointer = si(g = this.getPointer).call(g, this), this.options = {
            }, this.defaultOptions = {
                dragNodes: !0,
                dragView: !0,
                hover: !1,
                keyboard: {
                    enabled: !1,
                    speed: {
                        x: 10,
                        y: 10,
                        zoom: 0.02
                    },
                    bindToWindow: !0,
                    autoFocus: !0
                },
                navigationButtons: !1,
                tooltipDelay: 300,
                zoomView: !0,
                zoomSpeed: 1
            }, Ke(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return Ha(t179, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t = this;
                    this.body.emitter.on("destroy", function() {
                        clearTimeout(t.popupTimer), delete t.body.functions.getPointer;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) rf([
                        "hideEdgesOnDrag",
                        "hideEdgesOnZoom",
                        "hideNodesOnDrag",
                        "keyboard",
                        "multiselect",
                        "selectable",
                        "selectConnectedEdges"
                    ], this.options, t), _f(this.options, t, "keyboard"), t.tooltip && (Ke(this.options.tooltip, t.tooltip), t.tooltip.color && (this.options.tooltip.color = pf(t.tooltip.color)));
                    this.navigationHandler.setOptions(this.options);
                }
            },
            {
                key: "getPointer",
                value: function(t) {
                    var e;
                    return {
                        x: t.x - (e = this.canvas.frame.canvas, e.getBoundingClientRect().left),
                        y: t.y - df(this.canvas.frame.canvas)
                    };
                }
            },
            {
                key: "onTouch",
                value: function(t) {
                    (new Date).valueOf() - this.touchTime > 50 && (this.drag.pointer = this.getPointer(t.center), this.drag.pinched = !1, this.pinch.scale = this.body.view.scale, this.touchTime = (new Date).valueOf());
                }
            },
            {
                key: "onTap",
                value: function(t) {
                    var e = this.getPointer(t.center), i = this.selectionHandler.options.multiselect && (t.changedPointers[0].ctrlKey || t.changedPointers[0].metaKey);
                    this.checkSelectionChanges(e, i), this.selectionHandler.commitAndEmit(e, t), this.selectionHandler.generateClickEvent("click", t, e);
                }
            },
            {
                key: "onDoubleTap",
                value: function(t) {
                    var e = this.getPointer(t.center);
                    this.selectionHandler.generateClickEvent("doubleClick", t, e);
                }
            },
            {
                key: "onHold",
                value: function(t) {
                    var e = this.getPointer(t.center), i = this.selectionHandler.options.multiselect;
                    this.checkSelectionChanges(e, i), this.selectionHandler.commitAndEmit(e, t), this.selectionHandler.generateClickEvent("click", t, e), this.selectionHandler.generateClickEvent("hold", t, e);
                }
            },
            {
                key: "onRelease",
                value: function(t) {
                    if ((new Date).valueOf() - this.touchTime > 10) {
                        var e = this.getPointer(t.center);
                        this.selectionHandler.generateClickEvent("release", t, e), this.touchTime = (new Date).valueOf();
                    }
                }
            },
            {
                key: "onContext",
                value: function(t) {
                    var e = this.getPointer({
                        x: t.clientX,
                        y: t.clientY
                    });
                    this.selectionHandler.generateClickEvent("oncontext", t, e);
                }
            },
            {
                key: "checkSelectionChanges",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    !0 === e ? this.selectionHandler.selectAdditionalOnPoint(t) : this.selectionHandler.selectOnPoint(t);
                }
            },
            {
                key: "_determineDifference",
                value: function(t180, e103) {
                    var i72 = function(t, e) {
                        for(var i = [], o = 0; o < t.length; o++){
                            var n = t[o];
                            -1 === Cl(e).call(e, n) && i.push(n);
                        }
                        return i;
                    };
                    return {
                        nodes: i72(t180.nodes, e103.nodes),
                        edges: i72(t180.edges, e103.edges)
                    };
                }
            },
            {
                key: "onDragStart",
                value: function(t) {
                    if (!this.drag.dragging) {
                        void 0 === this.drag.pointer && this.onTouch(t);
                        var e = this.selectionHandler.getNodeAt(this.drag.pointer);
                        if (this.drag.dragging = !0, this.drag.selection = [], this.drag.translation = Ke({
                        }, this.body.view.translation), this.drag.nodeId = void 0, t.srcEvent.shiftKey) {
                            this.body.selectionBox.show = !0;
                            var i = this.getPointer(t.center);
                            this.body.selectionBox.position.start = {
                                x: this.canvas._XconvertDOMtoCanvas(i.x),
                                y: this.canvas._YconvertDOMtoCanvas(i.y)
                            }, this.body.selectionBox.position.end = {
                                x: this.canvas._XconvertDOMtoCanvas(i.x),
                                y: this.canvas._YconvertDOMtoCanvas(i.y)
                            };
                        }
                        if (void 0 !== e && !0 === this.options.dragNodes) {
                            this.drag.nodeId = e.id, !1 === e.isSelected() && (this.selectionHandler.unselectAll(), this.selectionHandler.selectObject(e)), this.selectionHandler.generateClickEvent("dragStart", t, this.drag.pointer);
                            var o, n = Wm(this.selectionHandler.getSelectedNodes());
                            try {
                                for(n.s(); !(o = n.n()).done;){
                                    var r = o.value, s = {
                                        id: r.id,
                                        node: r,
                                        x: r.x,
                                        y: r.y,
                                        xFixed: r.options.fixed.x,
                                        yFixed: r.options.fixed.y
                                    };
                                    r.options.fixed.x = !0, r.options.fixed.y = !0, this.drag.selection.push(s);
                                }
                            } catch (t) {
                                n.e(t);
                            } finally{
                                n.f();
                            }
                        } else this.selectionHandler.generateClickEvent("dragStart", t, this.drag.pointer, void 0, !0);
                    }
                }
            },
            {
                key: "onDrag",
                value: function(t181) {
                    var e = this;
                    if (!0 !== this.drag.pinched) {
                        this.body.emitter.emit("unlockNode");
                        var i73 = this.getPointer(t181.center), o = this.drag.selection;
                        if (o && o.length && !0 === this.options.dragNodes) {
                            this.selectionHandler.generateClickEvent("dragging", t181, i73);
                            var n = i73.x - this.drag.pointer.x, r = i73.y - this.drag.pointer.y;
                            nd(o).call(o, function(t) {
                                var i = t.node;
                                !1 === t.xFixed && (i.x = e.canvas._XconvertDOMtoCanvas(e.canvas._XconvertCanvasToDOM(t.x) + n)), !1 === t.yFixed && (i.y = e.canvas._YconvertDOMtoCanvas(e.canvas._YconvertCanvasToDOM(t.y) + r));
                            }), this.body.emitter.emit("startSimulation");
                        } else {
                            if (t181.srcEvent.shiftKey) {
                                if (this.selectionHandler.generateClickEvent("dragging", t181, i73, void 0, !0), void 0 === this.drag.pointer) return void this.onDragStart(t181);
                                this.body.selectionBox.position.end = {
                                    x: this.canvas._XconvertDOMtoCanvas(i73.x),
                                    y: this.canvas._YconvertDOMtoCanvas(i73.y)
                                }, this.body.emitter.emit("_requestRedraw");
                            }
                            if (!0 === this.options.dragView && !t181.srcEvent.shiftKey) {
                                if (this.selectionHandler.generateClickEvent("dragging", t181, i73, void 0, !0), void 0 === this.drag.pointer) return void this.onDragStart(t181);
                                var s = i73.x - this.drag.pointer.x, a = i73.y - this.drag.pointer.y;
                                this.body.view.translation = {
                                    x: this.drag.translation.x + s,
                                    y: this.drag.translation.y + a
                                }, this.body.emitter.emit("_requestRedraw");
                            }
                        }
                    }
                }
            },
            {
                key: "onDragEnd",
                value: function(t182) {
                    var e = this;
                    if (this.drag.dragging = !1, this.body.selectionBox.show) {
                        var i74;
                        this.body.selectionBox.show = !1;
                        var o = this.body.selectionBox.position, n = {
                            minX: Math.min(o.start.x, o.end.x),
                            minY: Math.min(o.start.y, o.end.y),
                            maxX: Math.max(o.start.x, o.end.x),
                            maxY: Math.max(o.start.y, o.end.y)
                        }, r = $d(i74 = this.body.nodeIndices).call(i74, function(t) {
                            var i = e.body.nodes[t];
                            return i.x >= n.minX && i.x <= n.maxX && i.y >= n.minY && i.y <= n.maxY;
                        });
                        nd(r).call(r, function(t) {
                            return e.selectionHandler.selectObject(e.body.nodes[t]);
                        });
                        var s = this.getPointer(t182.center);
                        this.selectionHandler.commitAndEmit(s, t182), this.selectionHandler.generateClickEvent("dragEnd", t182, this.getPointer(t182.center), void 0, !0), this.body.emitter.emit("_requestRedraw");
                    } else {
                        var a = this.drag.selection;
                        a && a.length ? (nd(a).call(a, function(t) {
                            t.node.options.fixed.x = t.xFixed, t.node.options.fixed.y = t.yFixed;
                        }), this.selectionHandler.generateClickEvent("dragEnd", t182, this.getPointer(t182.center)), this.body.emitter.emit("startSimulation")) : (this.selectionHandler.generateClickEvent("dragEnd", t182, this.getPointer(t182.center), void 0, !0), this.body.emitter.emit("_requestRedraw"));
                    }
                }
            },
            {
                key: "onPinch",
                value: function(t) {
                    var e = this.getPointer(t.center);
                    this.drag.pinched = !0, void 0 === this.pinch.scale && (this.pinch.scale = 1);
                    var i = this.pinch.scale * t.scale;
                    this.zoom(i, e);
                }
            },
            {
                key: "zoom",
                value: function(t, e) {
                    if (!0 === this.options.zoomView) {
                        var i = this.body.view.scale;
                        t < 0.00001 && (t = 0.00001), t > 10 && (t = 10);
                        var o = void 0;
                        void 0 !== this.drag && !0 === this.drag.dragging && (o = this.canvas.DOMtoCanvas(this.drag.pointer));
                        var n = this.body.view.translation, r = t / i, s = (1 - r) * e.x + n.x * r, a = (1 - r) * e.y + n.y * r;
                        if (this.body.view.scale = t, this.body.view.translation = {
                            x: s,
                            y: a
                        }, null != o) {
                            var h = this.canvas.canvasToDOM(o);
                            this.drag.pointer.x = h.x, this.drag.pointer.y = h.y;
                        }
                        this.body.emitter.emit("_requestRedraw"), i < t ? this.body.emitter.emit("zoom", {
                            direction: "+",
                            scale: this.body.view.scale,
                            pointer: e
                        }) : this.body.emitter.emit("zoom", {
                            direction: "-",
                            scale: this.body.view.scale,
                            pointer: e
                        });
                    }
                }
            },
            {
                key: "onMouseWheel",
                value: function(t) {
                    if (!0 === this.options.zoomView) {
                        if (0 !== t.deltaY) {
                            var e = this.body.view.scale;
                            e *= 1 + (t.deltaY < 0 ? 1 : -1) * (0.1 * this.options.zoomSpeed);
                            var i = this.getPointer({
                                x: t.clientX,
                                y: t.clientY
                            });
                            this.zoom(e, i);
                        }
                        t.preventDefault();
                    }
                }
            },
            {
                key: "onMouseMove",
                value: function(t) {
                    var e = this, i = this.getPointer({
                        x: t.clientX,
                        y: t.clientY
                    }), o = !1;
                    void 0 !== this.popup && (!1 === this.popup.hidden && this._checkHidePopup(i), !1 === this.popup.hidden && (o = !0, this.popup.setPosition(i.x + 3, i.y - 5), this.popup.show())), this.options.keyboard.autoFocus && !1 === this.options.keyboard.bindToWindow && !0 === this.options.keyboard.enabled && this.canvas.frame.focus(), !1 === o && (void 0 !== this.popupTimer && (clearInterval(this.popupTimer), this.popupTimer = void 0), this.drag.dragging || (this.popupTimer = Yl(function() {
                        return e._checkShowPopup(i);
                    }, this.options.tooltipDelay))), !0 === this.options.hover && this.selectionHandler.hoverObject(t, i);
                }
            },
            {
                key: "_checkShowPopup",
                value: function(t) {
                    var e = this.canvas._XconvertDOMtoCanvas(t.x), i = this.canvas._YconvertDOMtoCanvas(t.y), o = {
                        left: e,
                        top: i,
                        right: e,
                        bottom: i
                    }, n = void 0 === this.popupObj ? void 0 : this.popupObj.id, r = !1, s = "node";
                    if (void 0 === this.popupObj) {
                        for(var a, h = this.body.nodeIndices, d = this.body.nodes, l = [], c = 0; c < h.length; c++)!0 === (a = d[h[c]]).isOverlappingWith(o) && (r = !0, void 0 !== a.getTitle() && l.push(h[c]));
                        l.length > 0 && (this.popupObj = d[l[l.length - 1]], r = !0);
                    }
                    if (void 0 === this.popupObj && !1 === r) {
                        for(var u, f = this.body.edgeIndices, p = this.body.edges, v = [], g = 0; g < f.length; g++)!0 === (u = p[f[g]]).isOverlappingWith(o) && !0 === u.connected && void 0 !== u.getTitle() && v.push(f[g]);
                        v.length > 0 && (this.popupObj = p[v[v.length - 1]], s = "edge");
                    }
                    void 0 !== this.popupObj ? this.popupObj.id !== n && (void 0 === this.popup && (this.popup = new zf(this.canvas.frame)), this.popup.popupTargetType = s, this.popup.popupTargetId = this.popupObj.id, this.popup.setPosition(t.x + 3, t.y - 5), this.popup.setText(this.popupObj.getTitle()), this.popup.show(), this.body.emitter.emit("showPopup", this.popupObj.id)) : void 0 !== this.popup && (this.popup.hide(), this.body.emitter.emit("hidePopup"));
                }
            },
            {
                key: "_checkHidePopup",
                value: function(t) {
                    var e = this.selectionHandler._pointerToPositionObject(t), i = !1;
                    if ("node" === this.popup.popupTargetType) {
                        if (void 0 !== this.body.nodes[this.popup.popupTargetId] && !0 === (i = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(e))) {
                            var o = this.selectionHandler.getNodeAt(t);
                            i = void 0 !== o && o.id === this.popup.popupTargetId;
                        }
                    } else void 0 === this.selectionHandler.getNodeAt(t) && void 0 !== this.body.edges[this.popup.popupTargetId] && (i = this.body.edges[this.popup.popupTargetId].isOverlappingWith(e));
                    !1 === i && (this.popupObj = void 0, this.popup.hide(), this.body.emitter.emit("hidePopup"));
                }
            }
        ]), t179;
    }();
    sv("Set", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, Ov);
    var Um = O1.Set, Ym = hv, Xm = kp.exports.getWeakData, Gm = Kt, Km = E1, $m = Up, Zm = qp, Qm = et, Jm = Zi.set, tb = Zi.getterFor, eb = Jr.find, ib = Jr.findIndex, ob = 0, nb = function(t) {
        return t.frozen || (t.frozen = new rb);
    }, rb = function() {
        this.entries = [];
    }, sb = function(t183, e) {
        return eb(t183.entries, function(t) {
            return t[0] === e;
        });
    };
    rb.prototype = {
        get: function(t) {
            var e = sb(this, t);
            if (e) return e[1];
        },
        has: function(t) {
            return !!sb(this, t);
        },
        set: function(t, e) {
            var i = sb(this, t);
            i ? i[1] = e : this.entries.push([
                t,
                e
            ]);
        },
        delete: function(t) {
            var e104 = ib(this.entries, function(e) {
                return e[0] === t;
            });
            return ~e104 && this.entries.splice(e104, 1), !!~e104;
        }
    };
    var ab, hb = {
        getConstructor: function(t184, e105, i75, o20) {
            var n16 = t184(function(t, r) {
                $m(t, n16, e105), Jm(t, {
                    type: e105,
                    id: ob++,
                    frozen: void 0
                }), null != r && Zm(r, t[o20], {
                    that: t,
                    AS_ENTRIES: i75
                });
            }), r5 = tb(e105), s = function(t, e, i) {
                var o = r5(t), n = Xm(Gm(e), !0);
                return !0 === n ? nb(o).set(e, i) : n[o.id] = i, t;
            };
            return Ym(n16.prototype, {
                delete: function(t) {
                    var e = r5(this);
                    if (!Km(t)) return !1;
                    var i = Xm(t);
                    return !0 === i ? nb(e).delete(t) : i && Qm(i, e.id) && delete i[e.id];
                },
                has: function(t) {
                    var e = r5(this);
                    if (!Km(t)) return !1;
                    var i = Xm(t);
                    return !0 === i ? nb(e).has(t) : i && Qm(i, e.id);
                }
            }), Ym(n16.prototype, i75 ? {
                get: function(t) {
                    var e = r5(this);
                    if (Km(t)) {
                        var i = Xm(t);
                        return !0 === i ? nb(e).get(t) : i ? i[e.id] : void 0;
                    }
                },
                set: function(t, e) {
                    return s(this, t, e);
                }
            } : {
                add: function(t) {
                    return s(this, t, !0);
                }
            }), n16;
        }
    }, db = n1, lb = hv, cb = kp.exports, ub = sv, fb = hb, pb = E1, vb = Zi.enforce, gb = Mi, yb = !db.ActiveXObject && "ActiveXObject" in db, mb = Object.isExtensible, bb = function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, wb = ub("WeakMap", bb, fb);
    if (gb && yb) {
        ab = fb.getConstructor(bb, "WeakMap", !0), cb.enable();
        var kb = wb.prototype, _b = kb.delete, xb = kb.has, Eb = kb.get, Ob = kb.set;
        lb(kb, {
            delete: function(t) {
                if (pb(t) && !mb(t)) {
                    var e = vb(this);
                    return e.frozen || (e.frozen = new ab), _b.call(this, t) || e.frozen.delete(t);
                }
                return _b.call(this, t);
            },
            has: function(t) {
                if (pb(t) && !mb(t)) {
                    var e = vb(this);
                    return e.frozen || (e.frozen = new ab), xb.call(this, t) || e.frozen.has(t);
                }
                return xb.call(this, t);
            },
            get: function(t) {
                if (pb(t) && !mb(t)) {
                    var e = vb(this);
                    return e.frozen || (e.frozen = new ab), xb.call(this, t) ? Eb.call(this, t) : e.frozen.get(t);
                }
                return Eb.call(this, t);
            },
            set: function(t, e) {
                if (pb(t) && !mb(t)) {
                    var i = vb(this);
                    i.frozen || (i.frozen = new ab), xb.call(this, t) ? Ob.call(this, t, e) : i.frozen.set(t, e);
                } else Ob.call(this, t, e);
                return this;
            }
        });
    }
    var Cb, Sb, Tb, Mb, Pb, Db = O1.WeakMap;
    /*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */ function Bb(t, e, i, o) {
        if ("a" === i && !o) throw new TypeError("Private accessor was defined without a getter");
        if ("function" == typeof e ? t !== e || !o : !e.has(t)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return "m" === i ? o : "a" === i ? o.call(t) : o ? o.value : e.get(t);
    }
    function Ib(t, e, i, o, n) {
        if ("m" === o) throw new TypeError("Private method is not writable");
        if ("a" === o && !n) throw new TypeError("Private accessor was defined without a setter");
        if ("function" == typeof e ? t !== e || !n : !e.has(t)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return "a" === o ? n.call(t, i) : n ? n.value = i : e.set(t, i), i;
    }
    function zb(t185, e106) {
        var i76 = void 0 !== Nh && xr(t185) || t185["@@iterator"];
        if (!i76) {
            if (Hh(t185) || (i76 = (function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return Fb(t, e);
                var o = Lh(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return rr(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return Fb(t, e);
            })(t185)) || e106 && t185 && "number" == typeof t185.length) {
                i76 && (t185 = i76);
                var o21 = 0, n = function() {
                };
                return {
                    s: n,
                    n: function() {
                        return o21 >= t185.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t185[o21++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i76 = i76.call(t185);
            },
            n: function() {
                var t = i76.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i76.return || i76.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function Fb(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function Nb(t, e) {
        var i, o = new Um, n = zb(e);
        try {
            for(n.s(); !(i = n.n()).done;){
                var r = i.value;
                t.has(r) || o.add(r);
            }
        } catch (t186) {
            n.e(t186);
        } finally{
            n.f();
        }
        return o;
    }
    var Ab = function() {
        function t187() {
            Ra(this, t187), Cb.set(this, new Um), Sb.set(this, new Um);
        }
        return Ha(t187, [
            {
                key: "size",
                get: function() {
                    return Bb(this, Sb, "f").size;
                }
            },
            {
                key: "add",
                value: function() {
                    for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
                    for(var o = 0, n = e; o < n.length; o++){
                        var r = n[o];
                        Bb(this, Sb, "f").add(r);
                    }
                }
            },
            {
                key: "delete",
                value: function() {
                    for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
                    for(var o = 0, n = e; o < n.length; o++){
                        var r = n[o];
                        Bb(this, Sb, "f").delete(r);
                    }
                }
            },
            {
                key: "clear",
                value: function() {
                    Bb(this, Sb, "f").clear();
                }
            },
            {
                key: "getSelection",
                value: function() {
                    return Fh(Bb(this, Sb, "f"));
                }
            },
            {
                key: "getChanges",
                value: function() {
                    return {
                        added: Fh(Nb(Bb(this, Cb, "f"), Bb(this, Sb, "f"))),
                        deleted: Fh(Nb(Bb(this, Sb, "f"), Bb(this, Cb, "f"))),
                        previous: Fh(new Um(Bb(this, Cb, "f"))),
                        current: Fh(new Um(Bb(this, Sb, "f")))
                    };
                }
            },
            {
                key: "commit",
                value: function() {
                    var t = this.getChanges();
                    Ib(this, Cb, Bb(this, Sb, "f"), "f"), Ib(this, Sb, new Um(Bb(this, Cb, "f")), "f");
                    var e, i = zb(t.added);
                    try {
                        for(i.s(); !(e = i.n()).done;)e.value.select();
                    } catch (t188) {
                        i.e(t188);
                    } finally{
                        i.f();
                    }
                    var o, n = zb(t.deleted);
                    try {
                        for(n.s(); !(o = n.n()).done;)o.value.unselect();
                    } catch (t189) {
                        n.e(t189);
                    } finally{
                        n.f();
                    }
                    return t;
                }
            }
        ]), t187;
    }();
    Cb = new Db, Sb = new Db;
    var Rb = function() {
        function t190() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function() {
            };
            Ra(this, t190), Tb.set(this, new Ab), Mb.set(this, new Ab), Pb.set(this, void 0), Ib(this, Pb, e, "f");
        }
        return Ha(t190, [
            {
                key: "sizeNodes",
                get: function() {
                    return Bb(this, Tb, "f").size;
                }
            },
            {
                key: "sizeEdges",
                get: function() {
                    return Bb(this, Mb, "f").size;
                }
            },
            {
                key: "getNodes",
                value: function() {
                    return Bb(this, Tb, "f").getSelection();
                }
            },
            {
                key: "getEdges",
                value: function() {
                    return Bb(this, Mb, "f").getSelection();
                }
            },
            {
                key: "addNodes",
                value: function() {
                    var t;
                    (t = Bb(this, Tb, "f")).add.apply(t, arguments);
                }
            },
            {
                key: "addEdges",
                value: function() {
                    var t;
                    (t = Bb(this, Mb, "f")).add.apply(t, arguments);
                }
            },
            {
                key: "deleteNodes",
                value: function(t) {
                    Bb(this, Tb, "f").delete(t);
                }
            },
            {
                key: "deleteEdges",
                value: function(t) {
                    Bb(this, Mb, "f").delete(t);
                }
            },
            {
                key: "clear",
                value: function() {
                    Bb(this, Tb, "f").clear(), Bb(this, Mb, "f").clear();
                }
            },
            {
                key: "commit",
                value: function() {
                    for(var t, e, i = {
                        nodes: Bb(this, Tb, "f").commit(),
                        edges: Bb(this, Mb, "f").commit()
                    }, o = arguments.length, n = new Array(o), r = 0; r < o; r++)n[r] = arguments[r];
                    return (t = Bb(this, Pb, "f")).call.apply(t, jh(e = [
                        this,
                        i
                    ]).call(e, n)), i;
                }
            }
        ]), t190;
    }();
    function jb(t191, e107) {
        var i77 = void 0 !== Nh && xr(t191) || t191["@@iterator"];
        if (!i77) {
            if (Hh(t191) || (i77 = (function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return Lb(t, e);
                var o = Lh(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return rr(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return Lb(t, e);
            })(t191)) || e107 && t191 && "number" == typeof t191.length) {
                i77 && (t191 = i77);
                var o22 = 0, n = function() {
                };
                return {
                    s: n,
                    n: function() {
                        return o22 >= t191.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t191[o22++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i77 = i77.call(t191);
            },
            n: function() {
                var t = i77.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i77.return || i77.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function Lb(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    Tb = new Db, Mb = new Db, Pb = new Db;
    var Hb = function() {
        function t192(e, i) {
            var o = this;
            Ra(this, t192), this.body = e, this.canvas = i, this._selectionAccumulator = new Rb, this.hoverObj = {
                nodes: {
                },
                edges: {
                }
            }, this.options = {
            }, this.defaultOptions = {
                multiselect: !1,
                selectable: !0,
                selectConnectedEdges: !0,
                hoverConnectedEdges: !0
            }, Ke(this.options, this.defaultOptions), this.body.emitter.on("_dataChanged", function() {
                o.updateSelection();
            });
        }
        return Ha(t192, [
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) nf([
                        "multiselect",
                        "hoverConnectedEdges",
                        "selectable",
                        "selectConnectedEdges"
                    ], this.options, t);
                }
            },
            {
                key: "selectOnPoint",
                value: function(t) {
                    var e = !1;
                    if (!0 === this.options.selectable) {
                        var i = this.getNodeAt(t) || this.getEdgeAt(t);
                        this.unselectAll(), void 0 !== i && (e = this.selectObject(i)), this.body.emitter.emit("_requestRedraw");
                    }
                    return e;
                }
            },
            {
                key: "selectAdditionalOnPoint",
                value: function(t) {
                    var e = !1;
                    if (!0 === this.options.selectable) {
                        var i = this.getNodeAt(t) || this.getEdgeAt(t);
                        void 0 !== i && (e = !0, !0 === i.isSelected() ? this.deselectObject(i) : this.selectObject(i), this.body.emitter.emit("_requestRedraw"));
                    }
                    return e;
                }
            },
            {
                key: "_initBaseEvent",
                value: function(t, e) {
                    var i = {
                    };
                    return i.pointer = {
                        DOM: {
                            x: e.x,
                            y: e.y
                        },
                        canvas: this.canvas.DOMtoCanvas(e)
                    }, i.event = t, i;
                }
            },
            {
                key: "generateClickEvent",
                value: function(t, e, i, o) {
                    var n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], r = this._initBaseEvent(e, i);
                    if (!0 === n) r.nodes = [], r.edges = [];
                    else {
                        var s = this.getSelection();
                        r.nodes = s.nodes, r.edges = s.edges;
                    }
                    void 0 !== o && (r.previousSelection = o), "click" == t && (r.items = this.getClickedItems(i)), void 0 !== e.controlEdge && (r.controlEdge = e.controlEdge), this.body.emitter.emit(t, r);
                }
            },
            {
                key: "selectObject",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.options.selectConnectedEdges;
                    if (void 0 !== t) {
                        if (t instanceof uy) {
                            var i;
                            if (!0 === e) (i = this._selectionAccumulator).addEdges.apply(i, Fh(t.edges));
                            this._selectionAccumulator.addNodes(t);
                        } else this._selectionAccumulator.addEdges(t);
                        return !0;
                    }
                    return !1;
                }
            },
            {
                key: "deselectObject",
                value: function(t) {
                    !0 === t.isSelected() && (t.selected = !1, this._removeFromSelection(t));
                }
            },
            {
                key: "_getAllNodesOverlappingWith",
                value: function(t) {
                    for(var e = [], i = this.body.nodes, o = 0; o < this.body.nodeIndices.length; o++){
                        var n = this.body.nodeIndices[o];
                        i[n].isOverlappingWith(t) && e.push(n);
                    }
                    return e;
                }
            },
            {
                key: "_pointerToPositionObject",
                value: function(t) {
                    var e = this.canvas.DOMtoCanvas(t);
                    return {
                        left: e.x - 1,
                        top: e.y + 1,
                        right: e.x + 1,
                        bottom: e.y - 1
                    };
                }
            },
            {
                key: "getNodeAt",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this._pointerToPositionObject(t), o = this._getAllNodesOverlappingWith(i);
                    return o.length > 0 ? !0 === e ? this.body.nodes[o[o.length - 1]] : o[o.length - 1] : void 0;
                }
            },
            {
                key: "_getEdgesOverlappingWith",
                value: function(t, e) {
                    for(var i = this.body.edges, o = 0; o < this.body.edgeIndices.length; o++){
                        var n = this.body.edgeIndices[o];
                        i[n].isOverlappingWith(t) && e.push(n);
                    }
                }
            },
            {
                key: "_getAllEdgesOverlappingWith",
                value: function(t) {
                    var e = [];
                    return this._getEdgesOverlappingWith(t, e), e;
                }
            },
            {
                key: "getEdgeAt",
                value: function(t) {
                    for(var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this.canvas.DOMtoCanvas(t), o = 10, n = null, r = this.body.edges, s = 0; s < this.body.edgeIndices.length; s++){
                        var a = this.body.edgeIndices[s], h = r[a];
                        if (h.connected) {
                            var d = h.from.x, l = h.from.y, c = h.to.x, u = h.to.y, f = h.edgeType.getDistanceToEdge(d, l, c, u, i.x, i.y);
                            f < o && (n = a, o = f);
                        }
                    }
                    return null !== n ? !0 === e ? this.body.edges[n] : n : void 0;
                }
            },
            {
                key: "_addToHover",
                value: function(t) {
                    t instanceof uy ? this.hoverObj.nodes[t.id] = t : this.hoverObj.edges[t.id] = t;
                }
            },
            {
                key: "_removeFromSelection",
                value: function(t) {
                    var e;
                    t instanceof uy ? (this._selectionAccumulator.deleteNodes(t), (e = this._selectionAccumulator).deleteEdges.apply(e, Fh(t.edges))) : this._selectionAccumulator.deleteEdges(t);
                }
            },
            {
                key: "unselectAll",
                value: function() {
                    this._selectionAccumulator.clear();
                }
            },
            {
                key: "getSelectedNodeCount",
                value: function() {
                    return this._selectionAccumulator.sizeNodes;
                }
            },
            {
                key: "getSelectedEdgeCount",
                value: function() {
                    return this._selectionAccumulator.sizeEdges;
                }
            },
            {
                key: "_hoverConnectedEdges",
                value: function(t) {
                    for(var e = 0; e < t.edges.length; e++){
                        var i = t.edges[e];
                        i.hover = !0, this._addToHover(i);
                    }
                }
            },
            {
                key: "emitBlurEvent",
                value: function(t, e, i) {
                    var o = this._initBaseEvent(t, e);
                    !0 === i.hover && (i.hover = !1, i instanceof uy ? (o.node = i.id, this.body.emitter.emit("blurNode", o)) : (o.edge = i.id, this.body.emitter.emit("blurEdge", o)));
                }
            },
            {
                key: "emitHoverEvent",
                value: function(t, e, i) {
                    var o = this._initBaseEvent(t, e), n = !1;
                    return !1 === i.hover && (i.hover = !0, this._addToHover(i), n = !0, i instanceof uy ? (o.node = i.id, this.body.emitter.emit("hoverNode", o)) : (o.edge = i.id, this.body.emitter.emit("hoverEdge", o))), n;
                }
            },
            {
                key: "hoverObject",
                value: function(t, e) {
                    var i = this.getNodeAt(e);
                    void 0 === i && (i = this.getEdgeAt(e));
                    var o = !1;
                    for(var n in this.hoverObj.nodes)Object.prototype.hasOwnProperty.call(this.hoverObj.nodes, n) && (void 0 === i || i instanceof uy && i.id != n || i instanceof sm) && (this.emitBlurEvent(t, e, this.hoverObj.nodes[n]), delete this.hoverObj.nodes[n], o = !0);
                    for(var r in this.hoverObj.edges)Object.prototype.hasOwnProperty.call(this.hoverObj.edges, r) && (!0 === o ? (this.hoverObj.edges[r].hover = !1, delete this.hoverObj.edges[r]) : (void 0 === i || i instanceof sm && i.id != r || i instanceof uy && !i.hover) && (this.emitBlurEvent(t, e, this.hoverObj.edges[r]), delete this.hoverObj.edges[r], o = !0));
                    if (void 0 !== i) {
                        var s = Gh(this.hoverObj.edges).length, a = Gh(this.hoverObj.nodes).length;
                        (o || i instanceof sm && 0 === s && 0 === a || i instanceof uy && 0 === s && 0 === a) && (o = this.emitHoverEvent(t, e, i)), i instanceof uy && !0 === this.options.hoverConnectedEdges && this._hoverConnectedEdges(i);
                    }
                    !0 === o && this.body.emitter.emit("_requestRedraw");
                }
            },
            {
                key: "commitWithoutEmitting",
                value: function() {
                    this._selectionAccumulator.commit();
                }
            },
            {
                key: "commitAndEmit",
                value: function(t, e) {
                    var i = !1, o = this._selectionAccumulator.commit(), n = {
                        nodes: o.nodes.previous,
                        edges: o.edges.previous
                    };
                    o.edges.deleted.length > 0 && (this.generateClickEvent("deselectEdge", e, t, n), i = !0), o.nodes.deleted.length > 0 && (this.generateClickEvent("deselectNode", e, t, n), i = !0), o.nodes.added.length > 0 && (this.generateClickEvent("selectNode", e, t), i = !0), o.edges.added.length > 0 && (this.generateClickEvent("selectEdge", e, t), i = !0), !0 === i && this.generateClickEvent("select", e, t);
                }
            },
            {
                key: "getSelection",
                value: function() {
                    return {
                        nodes: this.getSelectedNodeIds(),
                        edges: this.getSelectedEdgeIds()
                    };
                }
            },
            {
                key: "getSelectedNodes",
                value: function() {
                    return this._selectionAccumulator.getNodes();
                }
            },
            {
                key: "getSelectedEdges",
                value: function() {
                    return this._selectionAccumulator.getEdges();
                }
            },
            {
                key: "getSelectedNodeIds",
                value: function() {
                    var t193;
                    return Uh(t193 = this._selectionAccumulator.getNodes()).call(t193, function(t) {
                        return t.id;
                    });
                }
            },
            {
                key: "getSelectedEdgeIds",
                value: function() {
                    var t194;
                    return Uh(t194 = this._selectionAccumulator.getEdges()).call(t194, function(t) {
                        return t.id;
                    });
                }
            },
            {
                key: "setSelection",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                    };
                    if (!t || !t.nodes && !t.edges) throw new TypeError("Selection must be an object with nodes and/or edges properties");
                    if ((e.unselectAll || void 0 === e.unselectAll) && this.unselectAll(), t.nodes) {
                        var i, o = jb(t.nodes);
                        try {
                            for(o.s(); !(i = o.n()).done;){
                                var n = i.value, r = this.body.nodes[n];
                                if (!r) throw new RangeError('Node with id "' + n + '" not found');
                                this.selectObject(r, e.highlightEdges);
                            }
                        } catch (t) {
                            o.e(t);
                        } finally{
                            o.f();
                        }
                    }
                    if (t.edges) {
                        var s, a = jb(t.edges);
                        try {
                            for(a.s(); !(s = a.n()).done;){
                                var h = s.value, d = this.body.edges[h];
                                if (!d) throw new RangeError('Edge with id "' + h + '" not found');
                                this.selectObject(d);
                            }
                        } catch (t) {
                            a.e(t);
                        } finally{
                            a.f();
                        }
                    }
                    this.body.emitter.emit("_requestRedraw"), this._selectionAccumulator.commit();
                }
            },
            {
                key: "selectNodes",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if (!t || void 0 === t.length) throw "Selection must be an array with ids";
                    this.setSelection({
                        nodes: t
                    }, {
                        highlightEdges: e
                    });
                }
            },
            {
                key: "selectEdges",
                value: function(t) {
                    if (!t || void 0 === t.length) throw "Selection must be an array with ids";
                    this.setSelection({
                        edges: t
                    });
                }
            },
            {
                key: "updateSelection",
                value: function() {
                    for(var t in this._selectionAccumulator.getNodes())Object.prototype.hasOwnProperty.call(this.body.nodes, t.id) || this._selectionAccumulator.deleteNodes(t);
                    for(var e in this._selectionAccumulator.getEdges())Object.prototype.hasOwnProperty.call(this.body.edges, e.id) || this._selectionAccumulator.deleteEdges(e);
                }
            },
            {
                key: "getClickedItems",
                value: function(t) {
                    for(var e = this.canvas.DOMtoCanvas(t), i = [], o = this.body.nodeIndices, n = this.body.nodes, r = o.length - 1; r >= 0; r--){
                        var s = n[o[r]].getItemsOnPoint(e);
                        i.push.apply(i, s);
                    }
                    for(var a = this.body.edgeIndices, h = this.body.edges, d = a.length - 1; d >= 0; d--){
                        var l = h[a[d]].getItemsOnPoint(e);
                        i.push.apply(i, l);
                    }
                    return i;
                }
            }
        ]), t192;
    }(), Wb = Math.floor, Vb = function(t, e) {
        var i = t.length, o = Wb(i / 2);
        return i < 8 ? qb(t, e) : Ub(Vb(t.slice(0, o), e), Vb(t.slice(o), e), e);
    }, qb = function(t, e) {
        for(var i, o, n = t.length, r = 1; r < n;){
            for(o = r, i = t[r]; o && e(t[o - 1], i) > 0;)t[o] = t[--o];
            o !== r++ && (t[o] = i);
        }
        return t;
    }, Ub = function(t, e, i) {
        for(var o = t.length, n = e.length, r = 0, s = 0, a = []; r < o || s < n;)r < o && s < n ? a.push(i(t[r], e[s]) <= 0 ? t[r++] : e[s++]) : a.push(r < o ? t[r++] : e[s++]);
        return a;
    }, Yb = Vb, Xb = P1.match(/firefox\/(\d+)/i), Gb = !!Xb && +Xb[1], Kb = /MSIE|Trident/.test(P1), $b = P1.match(/AppleWebKit\/(\d+)\./), Zb = !!$b && +$b[1], Qb = ue, Jb = qt, tw = Q, ew = me, iw = gi, ow = s1, nw = Yb, rw = Zh, sw = Gb, aw = Kb, hw = A, dw = Zb, lw = [], cw = lw.sort, uw = ow(function() {
        lw.sort(void 0);
    }), fw = ow(function() {
        lw.sort(null);
    }), pw = rw("sort"), vw = !ow(function() {
        if (hw) return hw < 70;
        if (!(sw && sw > 3)) {
            if (aw) return !0;
            if (dw) return dw < 603;
            var t195, e108, i, o, n = "";
            for(t195 = 65; t195 < 76; t195++){
                switch(e108 = String.fromCharCode(t195), t195){
                    case 66:
                    case 69:
                    case 70:
                    case 72:
                        i = 3;
                        break;
                    case 68:
                    case 71:
                        i = 4;
                        break;
                    default:
                        i = 2;
                }
                for(o = 0; o < 47; o++)lw.push({
                    k: e108 + o,
                    v: i
                });
            }
            for(lw.sort(function(t, e) {
                return e.v - t.v;
            }), o = 0; o < lw.length; o++)e108 = lw[o].k.charAt(0), n.charAt(n.length - 1) !== e108 && (n += e108);
            return "DGBEFHACIJK" !== n;
        }
    });
    Qb({
        target: "Array",
        proto: !0,
        forced: uw || !fw || !pw || !vw
    }, {
        sort: function(t196) {
            void 0 !== t196 && Jb(t196);
            var e109 = tw(this);
            if (vw) return void 0 === t196 ? cw.call(e109) : cw.call(e109, t196);
            var i78, o, n = [], r = ew(e109.length);
            for(o = 0; o < r; o++)o in e109 && n.push(e109[o]);
            for(i78 = (n = nw(n, function(t) {
                return function(e, i) {
                    return void 0 === i ? -1 : void 0 === e ? 1 : void 0 !== t ? +t(e, i) || 0 : iw(e) > iw(i) ? 1 : -1;
                };
            }(t196))).length, o = 0; o < i78;)e109[o] = n[o++];
            for(; o < r;)delete e109[o++];
            return e109;
        }
    });
    var gw = oi("Array").sort, yw = Array.prototype, mw = function(t) {
        var e = t.sort;
        return t === yw || t instanceof Array && e === yw.sort ? gw : e;
    }, bw = qt, ww = Q, kw = b1, _w = me, xw = function(t) {
        return function(e, i, o, n) {
            bw(i);
            var r = ww(e), s = kw(r), a = _w(r.length), h = t ? a - 1 : 0, d = t ? -1 : 1;
            if (o < 2) for(;;){
                if (h in s) {
                    n = s[h], h += d;
                    break;
                }
                if (h += d, t ? h < 0 : a <= h) throw TypeError("Reduce of empty array with no initial value");
            }
            for(; t ? h >= 0 : a > h; h += d)h in s && (n = i(n, s[h], h, r));
            return n;
        };
    }, Ew = {
        left: xw(!1),
        right: xw(!0)
    }, Ow = "process" == g1(n1.process), Cw = Ew.left, Sw = A, Tw = Ow;
    ue({
        target: "Array",
        proto: !0,
        forced: !Zh("reduce") || !Tw && Sw > 79 && Sw < 83
    }, {
        reduce: function(t) {
            return Cw(this, t, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Mw = oi("Array").reduce, Pw = Array.prototype, Dw = function(t) {
        var e = t.reduce;
        return t === Pw || t instanceof Array && e === Pw.reduce ? Mw : e;
    }, Bw = {
    };
    !function(t197) {
        !function(t198) {
            function e110(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            t198.__esModule = !0, t198.sort = v2;
            var i79 = 32, o23 = 7, n17 = 256, r6 = [
                1,
                10,
                100,
                1000,
                10000,
                100000,
                1000000,
                10000000,
                100000000,
                1000000000
            ];
            function s8(t) {
                return t < 100000 ? t < 100 ? t < 10 ? 0 : 1 : t < 10000 ? t < 1000 ? 2 : 3 : 4 : t < 10000000 ? t < 1000000 ? 5 : 6 : t < 1000000000 ? t < 100000000 ? 7 : 8 : 9;
            }
            function a4(t, e) {
                if (t === e) return 0;
                if (~~t === t && ~~e === e) {
                    if (0 === t || 0 === e) return t < e ? -1 : 1;
                    if (t < 0 || e < 0) {
                        if (e >= 0) return -1;
                        if (t >= 0) return 1;
                        t = -t, e = -e;
                    }
                    var i = s8(t), o = s8(e), n = 0;
                    return i < o ? (t *= r6[o - i - 1], e /= 10, n = -1) : i > o && (e *= r6[i - o - 1], t /= 10, n = 1), t === e ? n : t < e ? -1 : 1;
                }
                var a = String(t), h = String(e);
                return a === h ? 0 : a < h ? -1 : 1;
            }
            function h3(t) {
                for(var e = 0; t >= i79;)e |= 1 & t, t >>= 1;
                return t + e;
            }
            function d4(t, e, i, o) {
                var n = e + 1;
                if (n === i) return 1;
                if (o(t[n++], t[e]) < 0) {
                    for(; n < i && o(t[n], t[n - 1]) < 0;)n++;
                    l4(t, e, n);
                } else for(; n < i && o(t[n], t[n - 1]) >= 0;)n++;
                return n - e;
            }
            function l4(t, e, i) {
                for(i--; e < i;){
                    var o = t[e];
                    t[e++] = t[i], t[i--] = o;
                }
            }
            function c3(t, e, i, o, n) {
                for(o === e && o++; o < i; o++){
                    for(var r = t[o], s = e, a = o; s < a;){
                        var h = s + a >>> 1;
                        n(r, t[h]) < 0 ? a = h : s = h + 1;
                    }
                    var d = o - s;
                    switch(d){
                        case 3:
                            t[s + 3] = t[s + 2];
                        case 2:
                            t[s + 2] = t[s + 1];
                        case 1:
                            t[s + 1] = t[s];
                            break;
                        default:
                            for(; d > 0;)t[s + d] = t[s + d - 1], d--;
                    }
                    t[s] = r;
                }
            }
            function u2(t, e, i, o, n, r) {
                var s = 0, a = 0, h = 1;
                if (r(t, e[i + n]) > 0) {
                    for(a = o - n; h < a && r(t, e[i + n + h]) > 0;)s = h, (h = 1 + (h << 1)) <= 0 && (h = a);
                    h > a && (h = a), s += n, h += n;
                } else {
                    for(a = n + 1; h < a && r(t, e[i + n - h]) <= 0;)s = h, (h = 1 + (h << 1)) <= 0 && (h = a);
                    h > a && (h = a);
                    var d = s;
                    s = n - h, h = n - d;
                }
                for(s++; s < h;){
                    var l = s + (h - s >>> 1);
                    r(t, e[i + l]) > 0 ? s = l + 1 : h = l;
                }
                return h;
            }
            function f2(t, e, i, o, n, r) {
                var s = 0, a = 0, h = 1;
                if (r(t, e[i + n]) < 0) {
                    for(a = n + 1; h < a && r(t, e[i + n - h]) < 0;)s = h, (h = 1 + (h << 1)) <= 0 && (h = a);
                    h > a && (h = a);
                    var d = s;
                    s = n - h, h = n - d;
                } else {
                    for(a = o - n; h < a && r(t, e[i + n + h]) >= 0;)s = h, (h = 1 + (h << 1)) <= 0 && (h = a);
                    h > a && (h = a), s += n, h += n;
                }
                for(s++; s < h;){
                    var l = s + (h - s >>> 1);
                    r(t, e[i + l]) < 0 ? h = l : s = l + 1;
                }
                return h;
            }
            var p2 = function() {
                function t199(i, r) {
                    e110(this, t199), this.array = null, this.compare = null, this.minGallop = o23, this.length = 0, this.tmpStorageLength = n17, this.stackLength = 0, this.runStart = null, this.runLength = null, this.stackSize = 0, this.array = i, this.compare = r, this.length = i.length, this.length < 2 * n17 && (this.tmpStorageLength = this.length >>> 1), this.tmp = new Array(this.tmpStorageLength), this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40, this.runStart = new Array(this.stackLength), this.runLength = new Array(this.stackLength);
                }
                return t199.prototype.pushRun = function(t, e) {
                    this.runStart[this.stackSize] = t, this.runLength[this.stackSize] = e, this.stackSize += 1;
                }, t199.prototype.mergeRuns = function() {
                    for(; this.stackSize > 1;){
                        var t = this.stackSize - 2;
                        if (t >= 1 && this.runLength[t - 1] <= this.runLength[t] + this.runLength[t + 1] || t >= 2 && this.runLength[t - 2] <= this.runLength[t] + this.runLength[t - 1]) this.runLength[t - 1] < this.runLength[t + 1] && t--;
                        else if (this.runLength[t] > this.runLength[t + 1]) break;
                        this.mergeAt(t);
                    }
                }, t199.prototype.forceMergeRuns = function() {
                    for(; this.stackSize > 1;){
                        var t = this.stackSize - 2;
                        t > 0 && this.runLength[t - 1] < this.runLength[t + 1] && t--, this.mergeAt(t);
                    }
                }, t199.prototype.mergeAt = function(t) {
                    var e = this.compare, i = this.array, o = this.runStart[t], n = this.runLength[t], r = this.runStart[t + 1], s = this.runLength[t + 1];
                    this.runLength[t] = n + s, t === this.stackSize - 3 && (this.runStart[t + 1] = this.runStart[t + 2], this.runLength[t + 1] = this.runLength[t + 2]), this.stackSize--;
                    var a = f2(i[r], i, o, n, 0, e);
                    o += a, 0 != (n -= a) && 0 !== (s = u2(i[o + n - 1], i, r, s, s - 1, e)) && (n <= s ? this.mergeLow(o, n, r, s) : this.mergeHigh(o, n, r, s));
                }, t199.prototype.mergeLow = function(t, e, i, n) {
                    var r = this.compare, s = this.array, a = this.tmp, h = 0;
                    for(h = 0; h < e; h++)a[h] = s[t + h];
                    var d = 0, l = i, c = t;
                    if (s[c++] = s[l++], 0 != --n) {
                        if (1 !== e) {
                            for(var p = this.minGallop;;){
                                var v = 0, g = 0, y = !1;
                                do {
                                    if (r(s[l], a[d]) < 0) {
                                        if (s[c++] = s[l++], g++, v = 0, 0 == --n) {
                                            y = !0;
                                            break;
                                        }
                                    } else if (s[c++] = a[d++], v++, g = 0, 1 == --e) {
                                        y = !0;
                                        break;
                                    }
                                }while ((v | g) < p)
                                if (y) break;
                                do {
                                    if (0 !== (v = f2(s[l], a, d, e, 0, r))) {
                                        for(h = 0; h < v; h++)s[c + h] = a[d + h];
                                        if (c += v, d += v, (e -= v) <= 1) {
                                            y = !0;
                                            break;
                                        }
                                    }
                                    if (s[c++] = s[l++], 0 == --n) {
                                        y = !0;
                                        break;
                                    }
                                    if (0 !== (g = u2(a[d], s, l, n, 0, r))) {
                                        for(h = 0; h < g; h++)s[c + h] = s[l + h];
                                        if (c += g, l += g, 0 == (n -= g)) {
                                            y = !0;
                                            break;
                                        }
                                    }
                                    if (s[c++] = a[d++], 1 == --e) {
                                        y = !0;
                                        break;
                                    }
                                    p--;
                                }while (v >= o23 || g >= o23)
                                if (y) break;
                                p < 0 && (p = 0), p += 2;
                            }
                            if (this.minGallop = p, p < 1 && (this.minGallop = 1), 1 === e) {
                                for(h = 0; h < n; h++)s[c + h] = s[l + h];
                                s[c + n] = a[d];
                            } else {
                                if (0 === e) throw new Error("mergeLow preconditions were not respected");
                                for(h = 0; h < e; h++)s[c + h] = a[d + h];
                            }
                        } else {
                            for(h = 0; h < n; h++)s[c + h] = s[l + h];
                            s[c + n] = a[d];
                        }
                    } else for(h = 0; h < e; h++)s[c + h] = a[d + h];
                }, t199.prototype.mergeHigh = function(t, e, i, n) {
                    var r = this.compare, s = this.array, a = this.tmp, h = 0;
                    for(h = 0; h < n; h++)a[h] = s[i + h];
                    var d = t + e - 1, l = n - 1, c = i + n - 1, p = 0, v = 0;
                    if (s[c--] = s[d--], 0 != --e) {
                        if (1 !== n) {
                            for(var g = this.minGallop;;){
                                var y = 0, m = 0, b = !1;
                                do {
                                    if (r(a[l], s[d]) < 0) {
                                        if (s[c--] = s[d--], y++, m = 0, 0 == --e) {
                                            b = !0;
                                            break;
                                        }
                                    } else if (s[c--] = a[l--], m++, y = 0, 1 == --n) {
                                        b = !0;
                                        break;
                                    }
                                }while ((y | m) < g)
                                if (b) break;
                                do {
                                    if (0 != (y = e - f2(a[l], s, t, e, e - 1, r))) {
                                        for(e -= y, v = 1 + (c -= y), p = 1 + (d -= y), h = y - 1; h >= 0; h--)s[v + h] = s[p + h];
                                        if (0 === e) {
                                            b = !0;
                                            break;
                                        }
                                    }
                                    if (s[c--] = a[l--], 1 == --n) {
                                        b = !0;
                                        break;
                                    }
                                    if (0 != (m = n - u2(s[d], a, 0, n, n - 1, r))) {
                                        for(n -= m, v = 1 + (c -= m), p = 1 + (l -= m), h = 0; h < m; h++)s[v + h] = a[p + h];
                                        if (n <= 1) {
                                            b = !0;
                                            break;
                                        }
                                    }
                                    if (s[c--] = s[d--], 0 == --e) {
                                        b = !0;
                                        break;
                                    }
                                    g--;
                                }while (y >= o23 || m >= o23)
                                if (b) break;
                                g < 0 && (g = 0), g += 2;
                            }
                            if (this.minGallop = g, g < 1 && (this.minGallop = 1), 1 === n) {
                                for(v = 1 + (c -= e), p = 1 + (d -= e), h = e - 1; h >= 0; h--)s[v + h] = s[p + h];
                                s[c] = a[l];
                            } else {
                                if (0 === n) throw new Error("mergeHigh preconditions were not respected");
                                for(p = c - (n - 1), h = 0; h < n; h++)s[p + h] = a[h];
                            }
                        } else {
                            for(v = 1 + (c -= e), p = 1 + (d -= e), h = e - 1; h >= 0; h--)s[v + h] = s[p + h];
                            s[c] = a[l];
                        }
                    } else for(p = c - (n - 1), h = 0; h < n; h++)s[p + h] = a[h];
                }, t199;
            }();
            function v2(t, e, o, n) {
                if (!Array.isArray(t)) throw new TypeError("Can only sort arrays");
                e ? "function" != typeof e && (n = o, o = e, e = a4) : e = a4, o || (o = 0), n || (n = t.length);
                var r = n - o;
                if (!(r < 2)) {
                    var s = 0;
                    if (r < i79) c3(t, o, n, o + (s = d4(t, o, n, e)), e);
                    else {
                        var l = new p2(t, e), u = h3(r);
                        do {
                            if ((s = d4(t, o, n, e)) < u) {
                                var f = r;
                                f > u && (f = u), c3(t, o, o + f, o + s, e), s = f;
                            }
                            l.pushRun(o, s), l.mergeRuns(), r -= s, o += s;
                        }while (0 !== r)
                        l.forceMergeRuns();
                    }
                }
            }
        }(t197);
    }(Bw);
    var Iw = Bw;
    function zw(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !yg) return !1;
            if (yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(yg(Boolean, [], function() {
                })), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Eg(t);
            if (e) {
                var n = Eg(this).constructor;
                i = yg(o, arguments, n);
            } else i = o.apply(this, arguments);
            return _g(this, i);
        };
    }
    var Fw = function() {
        function t200() {
            Ra(this, t200);
        }
        return Ha(t200, [
            {
                key: "abstract",
                value: function() {
                    throw new Error("Can't instantiate abstract class!");
                }
            },
            {
                key: "fake_use",
                value: function() {
                }
            },
            {
                key: "curveType",
                value: function() {
                    return this.abstract();
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    return this.fake_use(t), this.abstract();
                }
            },
            {
                key: "setPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
                    this.fake_use(t, e, i), this.abstract();
                }
            },
            {
                key: "getTreeSize",
                value: function(t) {
                    return this.fake_use(t), this.abstract();
                }
            },
            {
                key: "sort",
                value: function(t) {
                    this.fake_use(t), this.abstract();
                }
            },
            {
                key: "fix",
                value: function(t, e) {
                    this.fake_use(t, e), this.abstract();
                }
            },
            {
                key: "shift",
                value: function(t, e) {
                    this.fake_use(t, e), this.abstract();
                }
            }
        ]), t200;
    }(), Nw = function(t201) {
        kg(i80, t201);
        var e111 = zw(i80);
        function i80(t) {
            var o;
            return Ra(this, i80), (o = e111.call(this)).layout = t, o;
        }
        return Ha(i80, [
            {
                key: "curveType",
                value: function() {
                    return "horizontal";
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    return t.x;
                }
            },
            {
                key: "setPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
                    void 0 !== i && this.layout.hierarchical.addToOrdering(t, i), t.x = e;
                }
            },
            {
                key: "getTreeSize",
                value: function(t) {
                    var e = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, t);
                    return {
                        min: e.min_x,
                        max: e.max_x
                    };
                }
            },
            {
                key: "sort",
                value: function(t202) {
                    Iw.sort(t202, function(t, e) {
                        return t.x - e.x;
                    });
                }
            },
            {
                key: "fix",
                value: function(t, e) {
                    t.y = this.layout.options.hierarchical.levelSeparation * e, t.options.fixed.y = !0;
                }
            },
            {
                key: "shift",
                value: function(t, e) {
                    this.layout.body.nodes[t].x += e;
                }
            }
        ]), i80;
    }(Fw), Aw = function(t203) {
        kg(i81, t203);
        var e112 = zw(i81);
        function i81(t) {
            var o;
            return Ra(this, i81), (o = e112.call(this)).layout = t, o;
        }
        return Ha(i81, [
            {
                key: "curveType",
                value: function() {
                    return "vertical";
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    return t.y;
                }
            },
            {
                key: "setPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
                    void 0 !== i && this.layout.hierarchical.addToOrdering(t, i), t.y = e;
                }
            },
            {
                key: "getTreeSize",
                value: function(t) {
                    var e = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, t);
                    return {
                        min: e.min_y,
                        max: e.max_y
                    };
                }
            },
            {
                key: "sort",
                value: function(t204) {
                    Iw.sort(t204, function(t, e) {
                        return t.y - e.y;
                    });
                }
            },
            {
                key: "fix",
                value: function(t, e) {
                    t.x = this.layout.options.hierarchical.levelSeparation * e, t.options.fixed.x = !0;
                }
            },
            {
                key: "shift",
                value: function(t, e) {
                    this.layout.body.nodes[t].y += e;
                }
            }
        ]), i81;
    }(Fw), Rw = Jr.every;
    ue({
        target: "Array",
        proto: !0,
        forced: !Zh("every")
    }, {
        every: function(t) {
            return Rw(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var jw = oi("Array").every, Lw = Array.prototype, Hw = function(t) {
        var e = t.every;
        return t === Lw || t instanceof Array && e === Lw.every ? jw : e;
    };
    function Ww(t205, e113) {
        var i82 = void 0 !== Nh && xr(t205) || t205["@@iterator"];
        if (!i82) {
            if (Hh(t205) || (i82 = (function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return Vw(t, e);
                var o = Lh(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return rr(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return Vw(t, e);
            })(t205)) || e113 && t205 && "number" == typeof t205.length) {
                i82 && (t205 = i82);
                var o24 = 0, n = function() {
                };
                return {
                    s: n,
                    n: function() {
                        return o24 >= t205.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t205[o24++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i82 = i82.call(t205);
            },
            n: function() {
                var t = i82.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i82.return || i82.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function Vw(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function qw(t206, e114) {
        var i = new Um;
        return nd(t206).call(t206, function(t207) {
            var e;
            nd(e = t207.edges).call(e, function(t) {
                t.connected && i.add(t);
            });
        }), nd(i).call(i, function(t) {
            var i = t.from.id, o = t.to.id;
            null == e114[i] && (e114[i] = 0), (null == e114[o] || e114[i] >= e114[o]) && (e114[o] = e114[i] + 1);
        }), e114;
    }
    function Uw(t208, e115, i, o) {
        var n18, r7, s = Bl(null), a = Dw(n18 = Fh(Jv(o).call(o))).call(n18, function(t, e) {
            return t + 1 + e.edges.length;
        }, 0), h = i + "Id", d = "to" === i ? 1 : -1, l5 = Ww(o);
        try {
            var c4 = function() {
                var n19 = Bh(r7.value, 2), l = n19[0], c = n19[1];
                if (!o.has(l) || !t208(c)) return "continue";
                s[l] = 0;
                for(var u = [
                    c
                ], f = 0, p = void 0, v = function() {
                    var t209, n20;
                    if (!o.has(l)) return "continue";
                    var r = s[p.id] + d;
                    if (nd(t209 = $d(n20 = p.edges).call(n20, function(t) {
                        return t.connected && t.to !== t.from && t[i] !== p && o.has(t.toId) && o.has(t.fromId);
                    })).call(t209, function(t) {
                        var o = t[h], n = s[o];
                        (null == n || e115(r, n)) && (s[o] = r, u.push(t[i]));
                    }), f > a) return {
                        v: {
                            v: qw(o, s)
                        }
                    };
                    ++f;
                }; p = u.pop();){
                    var g = v();
                    if ("continue" !== g && "object" === zh(g)) return g.v;
                }
            };
            for(l5.s(); !(r7 = l5.n()).done;){
                var u3 = c4();
                if ("continue" !== u3 && "object" === zh(u3)) return u3.v;
            }
        } catch (t) {
            l5.e(t);
        } finally{
            l5.f();
        }
        return s;
    }
    var Yw = function() {
        function t210() {
            Ra(this, t210), this.childrenReference = {
            }, this.parentReference = {
            }, this.trees = {
            }, this.distributionOrdering = {
            }, this.levels = {
            }, this.distributionIndex = {
            }, this.isTree = !1, this.treeIndex = -1;
        }
        return Ha(t210, [
            {
                key: "addRelation",
                value: function(t, e) {
                    void 0 === this.childrenReference[t] && (this.childrenReference[t] = []), this.childrenReference[t].push(e), void 0 === this.parentReference[e] && (this.parentReference[e] = []), this.parentReference[e].push(t);
                }
            },
            {
                key: "checkIfTree",
                value: function() {
                    for(var t in this.parentReference)if (this.parentReference[t].length > 1) return void (this.isTree = !1);
                    this.isTree = !0;
                }
            },
            {
                key: "numTrees",
                value: function() {
                    return this.treeIndex + 1;
                }
            },
            {
                key: "setTreeIndex",
                value: function(t, e) {
                    void 0 !== e && void 0 === this.trees[t.id] && (this.trees[t.id] = e, this.treeIndex = Math.max(e, this.treeIndex));
                }
            },
            {
                key: "ensureLevel",
                value: function(t) {
                    void 0 === this.levels[t] && (this.levels[t] = 0);
                }
            },
            {
                key: "getMaxLevel",
                value: function(t211) {
                    var e = this, i = {
                    };
                    return (function t(o) {
                        if (void 0 !== i[o]) return i[o];
                        var n = e.levels[o];
                        if (e.childrenReference[o]) {
                            var r = e.childrenReference[o];
                            if (r.length > 0) for(var s = 0; s < r.length; s++)n = Math.max(n, t(r[s]));
                        }
                        return i[o] = n, n;
                    })(t211);
                }
            },
            {
                key: "levelDownstream",
                value: function(t, e) {
                    void 0 === this.levels[e.id] && (void 0 === this.levels[t.id] && (this.levels[t.id] = 0), this.levels[e.id] = this.levels[t.id] + 1);
                }
            },
            {
                key: "setMinLevelToZero",
                value: function(t) {
                    var e = 1000000000;
                    for(var i in t)Object.prototype.hasOwnProperty.call(t, i) && void 0 !== this.levels[i] && (e = Math.min(this.levels[i], e));
                    for(var o in t)Object.prototype.hasOwnProperty.call(t, o) && void 0 !== this.levels[o] && (this.levels[o] -= e);
                }
            },
            {
                key: "getTreeSize",
                value: function(t, e) {
                    var i = 1000000000, o = -1000000000, n = 1000000000, r = -1000000000;
                    for(var s in this.trees)if (Object.prototype.hasOwnProperty.call(this.trees, s) && this.trees[s] === e) {
                        var a = t[s];
                        i = Math.min(a.x, i), o = Math.max(a.x, o), n = Math.min(a.y, n), r = Math.max(a.y, r);
                    }
                    return {
                        min_x: i,
                        max_x: o,
                        min_y: n,
                        max_y: r
                    };
                }
            },
            {
                key: "hasSameParent",
                value: function(t, e) {
                    var i = this.parentReference[t.id], o = this.parentReference[e.id];
                    if (void 0 === i || void 0 === o) return !1;
                    for(var n = 0; n < i.length; n++)for(var r = 0; r < o.length; r++)if (i[n] == o[r]) return !0;
                    return !1;
                }
            },
            {
                key: "inSameSubNetwork",
                value: function(t, e) {
                    return this.trees[t.id] === this.trees[e.id];
                }
            },
            {
                key: "getLevels",
                value: function() {
                    return Gh(this.distributionOrdering);
                }
            },
            {
                key: "addToOrdering",
                value: function(t, e) {
                    void 0 === this.distributionOrdering[e] && (this.distributionOrdering[e] = []);
                    var i = !1, o = this.distributionOrdering[e];
                    for(var n in o)if (o[n] === t) {
                        i = !0;
                        break;
                    }
                    i || (this.distributionOrdering[e].push(t), this.distributionIndex[t.id] = this.distributionOrdering[e].length - 1);
                }
            }
        ]), t210;
    }(), Xw = function() {
        function t212(e) {
            Ra(this, t212), this.body = e, this._resetRNG(Math.random() + ":" + Kh()), this.setPhysics = !1, this.options = {
            }, this.optionsBackup = {
                physics: {
                }
            }, this.defaultOptions = {
                randomSeed: void 0,
                improvedLayout: !0,
                clusterThreshold: 150,
                hierarchical: {
                    enabled: !1,
                    levelSeparation: 150,
                    nodeSpacing: 100,
                    treeSpacing: 200,
                    blockShifting: !0,
                    edgeMinimization: !0,
                    parentCentralization: !0,
                    direction: "UD",
                    sortMethod: "hubsize"
                }
            }, Ke(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return Ha(t212, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t = this;
                    this.body.emitter.on("_dataChanged", function() {
                        t.setupHierarchicalLayout();
                    }), this.body.emitter.on("_dataLoaded", function() {
                        t.layoutNetwork();
                    }), this.body.emitter.on("_resetHierarchicalLayout", function() {
                        t.setupHierarchicalLayout();
                    }), this.body.emitter.on("_adjustEdgesForHierarchicalLayout", function() {
                        if (!0 === t.options.hierarchical.enabled) {
                            var e = t.direction.curveType();
                            t.body.emitter.emit("_forceDisableDynamicCurves", e, !1);
                        }
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t, e) {
                    if (void 0 !== t) {
                        var i = this.options.hierarchical, o = i.enabled;
                        if (nf([
                            "randomSeed",
                            "improvedLayout",
                            "clusterThreshold"
                        ], this.options, t), _f(this.options, t, "hierarchical"), void 0 !== t.randomSeed && this._resetRNG(t.randomSeed), !0 === i.enabled) return !0 === o && this.body.emitter.emit("refresh", !0), "RL" === i.direction || "DU" === i.direction ? i.levelSeparation > 0 && (i.levelSeparation *= -1) : i.levelSeparation < 0 && (i.levelSeparation *= -1), this.setDirectionStrategy(), this.body.emitter.emit("_resetHierarchicalLayout"), this.adaptAllOptionsForHierarchicalLayout(e);
                        if (!0 === o) return this.body.emitter.emit("refresh"), sf(e, this.optionsBackup);
                    }
                    return e;
                }
            },
            {
                key: "_resetRNG",
                value: function(t) {
                    this.initialRandomSeed = t, this._rng = Vu(this.initialRandomSeed);
                }
            },
            {
                key: "adaptAllOptionsForHierarchicalLayout",
                value: function(t) {
                    if (!0 === this.options.hierarchical.enabled) {
                        var e = this.optionsBackup.physics;
                        void 0 === t.physics || !0 === t.physics ? (t.physics = {
                            enabled: void 0 === e.enabled || e.enabled,
                            solver: "hierarchicalRepulsion"
                        }, e.enabled = void 0 === e.enabled || e.enabled, e.solver = e.solver || "barnesHut") : "object" === zh(t.physics) ? (e.enabled = void 0 === t.physics.enabled || t.physics.enabled, e.solver = t.physics.solver || "barnesHut", t.physics.solver = "hierarchicalRepulsion") : !1 !== t.physics && (e.solver = "barnesHut", t.physics = {
                            solver: "hierarchicalRepulsion"
                        });
                        var i = this.direction.curveType();
                        if (void 0 === t.edges) this.optionsBackup.edges = {
                            smooth: {
                                enabled: !0,
                                type: "dynamic"
                            }
                        }, t.edges = {
                            smooth: !1
                        };
                        else if (void 0 === t.edges.smooth) this.optionsBackup.edges = {
                            smooth: {
                                enabled: !0,
                                type: "dynamic"
                            }
                        }, t.edges.smooth = !1;
                        else if ("boolean" == typeof t.edges.smooth) this.optionsBackup.edges = {
                            smooth: t.edges.smooth
                        }, t.edges.smooth = {
                            enabled: t.edges.smooth,
                            type: i
                        };
                        else {
                            var o = t.edges.smooth;
                            void 0 !== o.type && "dynamic" !== o.type && (i = o.type), this.optionsBackup.edges = {
                                smooth: {
                                    enabled: void 0 === o.enabled || o.enabled,
                                    type: void 0 === o.type ? "dynamic" : o.type,
                                    roundness: void 0 === o.roundness ? 0.5 : o.roundness,
                                    forceDirection: void 0 !== o.forceDirection && o.forceDirection
                                }
                            }, t.edges.smooth = {
                                enabled: void 0 === o.enabled || o.enabled,
                                type: i,
                                roundness: void 0 === o.roundness ? 0.5 : o.roundness,
                                forceDirection: void 0 !== o.forceDirection && o.forceDirection
                            };
                        }
                        this.body.emitter.emit("_forceDisableDynamicCurves", i);
                    }
                    return t;
                }
            },
            {
                key: "positionInitially",
                value: function(t) {
                    if (!0 !== this.options.hierarchical.enabled) {
                        this._resetRNG(this.initialRandomSeed);
                        for(var e = t.length + 50, i = 0; i < t.length; i++){
                            var o = t[i], n = 2 * Math.PI * this._rng();
                            void 0 === o.x && (o.x = e * Math.cos(n)), void 0 === o.y && (o.y = e * Math.sin(n));
                        }
                    }
                }
            },
            {
                key: "layoutNetwork",
                value: function() {
                    if (!0 !== this.options.hierarchical.enabled && !0 === this.options.improvedLayout) {
                        for(var t = this.body.nodeIndices, e = 0, i = 0; i < t.length; i++)!0 === this.body.nodes[t[i]].predefinedPosition && (e += 1);
                        if (e < 0.5 * t.length) {
                            var o = 0, n = this.options.clusterThreshold, r = {
                                clusterNodeProperties: {
                                    shape: "ellipse",
                                    label: "",
                                    group: "",
                                    font: {
                                        multi: !1
                                    }
                                },
                                clusterEdgeProperties: {
                                    label: "",
                                    font: {
                                        multi: !1
                                    },
                                    smooth: {
                                        enabled: !1
                                    }
                                }
                            };
                            if (t.length > n) {
                                for(var s = t.length; t.length > n && o <= 10;){
                                    o += 1;
                                    var a = t.length;
                                    if (o % 3 == 0 ? this.body.modules.clustering.clusterBridges(r) : this.body.modules.clustering.clusterOutliers(r), a == t.length && o % 3 != 0) return this._declusterAll(), this.body.emitter.emit("_layoutFailed"), void console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.");
                                }
                                this.body.modules.kamadaKawai.setOptions({
                                    springLength: Math.max(150, 2 * s)
                                });
                            }
                            o > 10 && console.info("The clustering didn't succeed within the amount of interations allowed, progressing with partial result."), this.body.modules.kamadaKawai.solve(t, this.body.edgeIndices, !0), this._shiftToCenter();
                            for(var h = 0; h < t.length; h++){
                                var d = this.body.nodes[t[h]];
                                !1 === d.predefinedPosition && (d.x += 70 * (0.5 - this._rng()), d.y += 70 * (0.5 - this._rng()));
                            }
                            this._declusterAll(), this.body.emitter.emit("_repositionBezierNodes");
                        }
                    }
                }
            },
            {
                key: "_shiftToCenter",
                value: function() {
                    for(var t = Sm.getRangeCore(this.body.nodes, this.body.nodeIndices), e = Sm.findCenter(t), i = 0; i < this.body.nodeIndices.length; i++){
                        var o = this.body.nodes[this.body.nodeIndices[i]];
                        o.x -= e.x, o.y -= e.y;
                    }
                }
            },
            {
                key: "_declusterAll",
                value: function() {
                    for(var t = !0; !0 === t;){
                        t = !1;
                        for(var e = 0; e < this.body.nodeIndices.length; e++)!0 === this.body.nodes[this.body.nodeIndices[e]].isCluster && (t = !0, this.body.modules.clustering.openCluster(this.body.nodeIndices[e], {
                        }, !1));
                        !0 === t && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "getSeed",
                value: function() {
                    return this.initialRandomSeed;
                }
            },
            {
                key: "setupHierarchicalLayout",
                value: function() {
                    if (!0 === this.options.hierarchical.enabled && this.body.nodeIndices.length > 0) {
                        var t, e, i = !1, o = !1;
                        for(e in this.lastNodeOnLevel = {
                        }, this.hierarchical = new Yw, this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, e) && (void 0 !== (t = this.body.nodes[e]).options.level ? (i = !0, this.hierarchical.levels[e] = t.options.level) : o = !0);
                        if (!0 === o && !0 === i) throw new Error("To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.");
                        if (!0 === o) {
                            var n = this.options.hierarchical.sortMethod;
                            "hubsize" === n ? this._determineLevelsByHubsize() : "directed" === n ? this._determineLevelsDirected() : "custom" === n && this._determineLevelsCustomCallback();
                        }
                        for(var r in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, r) && this.hierarchical.ensureLevel(r);
                        var s = this._getDistribution();
                        this._generateMap(), this._placeNodesByHierarchy(s), this._condenseHierarchy(), this._shiftToCenter();
                    }
                }
            },
            {
                key: "_condenseHierarchy",
                value: function() {
                    var t = this, e116 = !1, i83 = {
                    }, o25 = function(e, i) {
                        var o = t.hierarchical.trees;
                        for(var n in o)Object.prototype.hasOwnProperty.call(o, n) && o[n] === e && t.direction.shift(n, i);
                    }, n21 = function() {
                        for(var e = [], i = 0; i < t.hierarchical.numTrees(); i++)e.push(t.direction.getTreeSize(i));
                        return e;
                    }, r8 = function e(i, o) {
                        if (!o[i.id] && (o[i.id] = !0, t.hierarchical.childrenReference[i.id])) {
                            var n = t.hierarchical.childrenReference[i.id];
                            if (n.length > 0) for(var r = 0; r < n.length; r++)e(t.body.nodes[n[r]], o);
                        }
                    }, s9 = function(e) {
                        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1000000000, o = 1000000000, n = 1000000000, r = 1000000000, s = -1000000000;
                        for(var a in e)if (Object.prototype.hasOwnProperty.call(e, a)) {
                            var h = t.body.nodes[a], d = t.hierarchical.levels[h.id], l = t.direction.getPosition(h), c = t._getSpaceAroundNode(h, e), u = Bh(c, 2), f = u[0], p = u[1];
                            o = Math.min(f, o), n = Math.min(p, n), d <= i && (r = Math.min(l, r), s = Math.max(l, s));
                        }
                        return [
                            r,
                            s,
                            o,
                            n
                        ];
                    }, a5 = function(e, i) {
                        var o = t.hierarchical.getMaxLevel(e.id), n = t.hierarchical.getMaxLevel(i.id);
                        return Math.min(o, n);
                    }, h4 = function(e, i, o) {
                        for(var n = t.hierarchical, r = 0; r < i.length; r++){
                            var s = i[r], a = n.distributionOrdering[s];
                            if (a.length > 1) for(var h = 0; h < a.length - 1; h++){
                                var d = a[h], l = a[h + 1];
                                n.hasSameParent(d, l) && n.inSameSubNetwork(d, l) && e(d, l, o);
                            }
                        }
                    }, d5 = function(i, o) {
                        var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], h = t.direction.getPosition(i), d = t.direction.getPosition(o), l = Math.abs(d - h), c = t.options.hierarchical.nodeSpacing;
                        if (l > c) {
                            var u = {
                            }, f = {
                            };
                            r8(i, u), r8(o, f);
                            var p = a5(i, o), v = s9(u, p), g = s9(f, p), y = v[1], m = g[0], b = g[2], w = Math.abs(y - m);
                            if (w > c) {
                                var k = y - m + c;
                                k < -b + c && (k = -b + c), k < 0 && (t._shiftBlock(o.id, k), e116 = !0, !0 === n && t._centerParent(o));
                            }
                        }
                    }, l6 = function(o26, n22) {
                        for(var a6 = n22.id, h5 = n22.edges, d6 = t.hierarchical.levels[n22.id], l7 = t.options.hierarchical.levelSeparation * t.options.hierarchical.levelSeparation, c5 = {
                        }, u4 = [], f3 = 0; f3 < h5.length; f3++){
                            var p = h5[f3];
                            if (p.toId != p.fromId) {
                                var v = p.toId == a6 ? p.from : p.to;
                                c5[h5[f3].id] = v, t.hierarchical.levels[v.id] < d6 && u4.push(p);
                            }
                        }
                        var g = function(e, i) {
                            for(var o = 0, n = 0; n < i.length; n++)if (void 0 !== c5[i[n].id]) {
                                var r = t.direction.getPosition(c5[i[n].id]) - e;
                                o += r / Math.sqrt(r * r + l7);
                            }
                            return o;
                        }, y = function(e, i) {
                            for(var o = 0, n = 0; n < i.length; n++)if (void 0 !== c5[i[n].id]) {
                                var r = t.direction.getPosition(c5[i[n].id]) - e;
                                o -= l7 * Math.pow(r * r + l7, -1.5);
                            }
                            return o;
                        }, m = function(e, i) {
                            for(var o = t.direction.getPosition(n22), r = {
                            }, s = 0; s < e; s++){
                                var a = g(o, i), h = y(o, i);
                                if (void 0 !== r[o -= Math.max(-40, Math.min(40, Math.round(a / h)))]) break;
                                r[o] = s;
                            }
                            return o;
                        }, b = m(o26, u4);
                        !function(o) {
                            var a = t.direction.getPosition(n22);
                            if (void 0 === i83[n22.id]) {
                                var h = {
                                };
                                r8(n22, h), i83[n22.id] = h;
                            }
                            var d = s9(i83[n22.id]), l = d[2], c = d[3], u = o - a, f = 0;
                            u > 0 ? f = Math.min(u, c - t.options.hierarchical.nodeSpacing) : u < 0 && (f = -Math.min(-u, l - t.options.hierarchical.nodeSpacing)), 0 != f && (t._shiftBlock(n22.id, f), e116 = !0);
                        }(b), (function(i) {
                            var o = t.direction.getPosition(n22), r = Bh(t._getSpaceAroundNode(n22), 2), s = r[0], a = r[1], h = i - o, d = o;
                            h > 0 ? d = Math.min(o + (a - t.options.hierarchical.nodeSpacing), i) : h < 0 && (d = Math.max(o - (s - t.options.hierarchical.nodeSpacing), i)), d !== o && (t.direction.setPosition(n22, d), e116 = !0);
                        })(b = m(o26, h5));
                    };
                    !0 === this.options.hierarchical.blockShifting && ((function(i) {
                        var o = t.hierarchical.getLevels();
                        o = ld(o).call(o);
                        for(var n = 0; n < i && (e116 = !1, h4(d5, o, !0), !0 === e116); n++);
                    })(5), (function() {
                        for(var e in t.body.nodes)Object.prototype.hasOwnProperty.call(t.body.nodes, e) && t._centerParent(t.body.nodes[e]);
                    })()), !0 === this.options.hierarchical.edgeMinimization && (function(i) {
                        var o = t.hierarchical.getLevels();
                        o = ld(o).call(o);
                        for(var n = 0; n < i; n++){
                            e116 = !1;
                            for(var r = 0; r < o.length; r++)for(var s = o[r], a = t.hierarchical.distributionOrdering[s], h = 0; h < a.length; h++)l6(1000, a[h]);
                            if (!0 !== e116) break;
                        }
                    })(20), !0 === this.options.hierarchical.parentCentralization && (function() {
                        var e = t.hierarchical.getLevels();
                        e = ld(e).call(e);
                        for(var i = 0; i < e.length; i++)for(var o = e[i], n = t.hierarchical.distributionOrdering[o], r = 0; r < n.length; r++)t._centerParent(n[r]);
                    })(), (function() {
                        for(var e = n21(), i = 0, r = 0; r < e.length - 1; r++)i += e[r].max - e[r + 1].min + t.options.hierarchical.treeSpacing, o25(r + 1, i);
                    })();
                }
            },
            {
                key: "_getSpaceAroundNode",
                value: function(t, e) {
                    var i = !0;
                    void 0 === e && (i = !1);
                    var o = this.hierarchical.levels[t.id];
                    if (void 0 !== o) {
                        var n = this.hierarchical.distributionIndex[t.id], r = this.direction.getPosition(t), s = this.hierarchical.distributionOrdering[o], a = 1000000000, h = 1000000000;
                        if (0 !== n) {
                            var d = s[n - 1];
                            if (!0 === i && void 0 === e[d.id] || !1 === i) a = r - this.direction.getPosition(d);
                        }
                        if (n != s.length - 1) {
                            var l = s[n + 1];
                            if (!0 === i && void 0 === e[l.id] || !1 === i) {
                                var c = this.direction.getPosition(l);
                                h = Math.min(h, c - r);
                            }
                        }
                        return [
                            a,
                            h
                        ];
                    }
                    return [
                        0,
                        0
                    ];
                }
            },
            {
                key: "_centerParent",
                value: function(t) {
                    if (this.hierarchical.parentReference[t.id]) for(var e = this.hierarchical.parentReference[t.id], i = 0; i < e.length; i++){
                        var o = e[i], n = this.body.nodes[o], r = this.hierarchical.childrenReference[o];
                        if (void 0 !== r) {
                            var s = this._getCenterPosition(r), a = this.direction.getPosition(n), h = Bh(this._getSpaceAroundNode(n), 2), d = h[0], l = h[1], c = a - s;
                            (c < 0 && Math.abs(c) < l - this.options.hierarchical.nodeSpacing || c > 0 && Math.abs(c) < d - this.options.hierarchical.nodeSpacing) && this.direction.setPosition(n, s);
                        }
                    }
                }
            },
            {
                key: "_placeNodesByHierarchy",
                value: function(t) {
                    for(var e in this.positionedNodes = {
                    }, t)if (Object.prototype.hasOwnProperty.call(t, e)) {
                        var i, o = Gh(t[e]);
                        o = this._indexArrayToNodes(o), mw(i = this.direction).call(i, o);
                        for(var n = 0, r = 0; r < o.length; r++){
                            var s = o[r];
                            if (void 0 === this.positionedNodes[s.id]) {
                                var a = this.options.hierarchical.nodeSpacing, h = a * n;
                                n > 0 && (h = this.direction.getPosition(o[r - 1]) + a), this.direction.setPosition(s, h, e), this._validatePositionAndContinue(s, e, h), n++;
                            }
                        }
                    }
                }
            },
            {
                key: "_placeBranchNodes",
                value: function(t, e) {
                    var i, o = this.hierarchical.childrenReference[t];
                    if (void 0 !== o) {
                        for(var n = [], r = 0; r < o.length; r++)n.push(this.body.nodes[o[r]]);
                        mw(i = this.direction).call(i, n);
                        for(var s = 0; s < n.length; s++){
                            var a = n[s], h = this.hierarchical.levels[a.id];
                            if (!(h > e && void 0 === this.positionedNodes[a.id])) return;
                            var d = this.options.hierarchical.nodeSpacing, l = void 0;
                            l = 0 === s ? this.direction.getPosition(this.body.nodes[t]) : this.direction.getPosition(n[s - 1]) + d, this.direction.setPosition(a, l, h), this._validatePositionAndContinue(a, h, l);
                        }
                        var c = this._getCenterPosition(n);
                        this.direction.setPosition(this.body.nodes[t], c, e);
                    }
                }
            },
            {
                key: "_validatePositionAndContinue",
                value: function(t, e, i) {
                    if (this.hierarchical.isTree) {
                        if (void 0 !== this.lastNodeOnLevel[e]) {
                            var o = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[e]]);
                            if (i - o < this.options.hierarchical.nodeSpacing) {
                                var n = o + this.options.hierarchical.nodeSpacing - i, r = this._findCommonParent(this.lastNodeOnLevel[e], t.id);
                                this._shiftBlock(r.withChild, n);
                            }
                        }
                        this.lastNodeOnLevel[e] = t.id, this.positionedNodes[t.id] = !0, this._placeBranchNodes(t.id, e);
                    }
                }
            },
            {
                key: "_indexArrayToNodes",
                value: function(t) {
                    for(var e = [], i = 0; i < t.length; i++)e.push(this.body.nodes[t[i]]);
                    return e;
                }
            },
            {
                key: "_getDistribution",
                value: function() {
                    var t, e, i = {
                    };
                    for(t in this.body.nodes)if (Object.prototype.hasOwnProperty.call(this.body.nodes, t)) {
                        e = this.body.nodes[t];
                        var o = void 0 === this.hierarchical.levels[t] ? 0 : this.hierarchical.levels[t];
                        this.direction.fix(e, o), void 0 === i[o] && (i[o] = {
                        }), i[o][t] = e;
                    }
                    return i;
                }
            },
            {
                key: "_getActiveEdges",
                value: function(t213) {
                    var e = this, i = [];
                    return lf(t213.edges, function(t) {
                        var o;
                        -1 !== Cl(o = e.body.edgeIndices).call(o, t.id) && i.push(t);
                    }), i;
                }
            },
            {
                key: "_getHubSizes",
                value: function() {
                    var t214 = this, e117 = {
                    };
                    lf(this.body.nodeIndices, function(i) {
                        var o = t214.body.nodes[i], n = t214._getActiveEdges(o).length;
                        e117[n] = !0;
                    });
                    var i = [];
                    return lf(e117, function(t) {
                        i.push(Number(t));
                    }), mw(Iw).call(Iw, i, function(t, e) {
                        return e - t;
                    }), i;
                }
            },
            {
                key: "_determineLevelsByHubsize",
                value: function() {
                    for(var t = this, e118 = function(e, i) {
                        t.hierarchical.levelDownstream(e, i);
                    }, i84 = this._getHubSizes(), o27 = function(o28) {
                        var n = i84[o28];
                        if (0 === n) return "break";
                        lf(t.body.nodeIndices, function(i) {
                            var o = t.body.nodes[i];
                            n === t._getActiveEdges(o).length && t._crawlNetwork(e118, i);
                        });
                    }, n23 = 0; n23 < i84.length; ++n23){
                        if ("break" === o27(n23)) break;
                    }
                }
            },
            {
                key: "_determineLevelsCustomCallback",
                value: function() {
                    var t = this;
                    this._crawlNetwork(function(e, i, o) {
                        var n = t.hierarchical.levels[e.id];
                        void 0 === n && (n = t.hierarchical.levels[e.id] = 100000);
                        var r = (Sm.cloneOptions(e, "node"), Sm.cloneOptions(i, "node"), void Sm.cloneOptions(o, "edge"));
                        t.hierarchical.levels[i.id] = n + r;
                    }), this.hierarchical.setMinLevelToZero(this.body.nodes);
                }
            },
            {
                key: "_determineLevelsDirected",
                value: function() {
                    var t215, e119 = this, i85 = Dw(t215 = this.body.nodeIndices).call(t215, function(t, i) {
                        return t.set(i, e119.body.nodes[i]), t;
                    }, new Cv);
                    "roots" === this.options.hierarchical.shakeTowards ? this.hierarchical.levels = (function(t216) {
                        return Uw(function(e120) {
                            var i, o;
                            return Hw(i = $d(o = e120.edges).call(o, function(e) {
                                return t216.has(e.toId);
                            })).call(i, function(t) {
                                return t.from === e120;
                            });
                        }, function(t, e) {
                            return e < t;
                        }, "to", t216);
                    })(i85) : this.hierarchical.levels = (function(t217) {
                        return Uw(function(e121) {
                            var i, o;
                            return Hw(i = $d(o = e121.edges).call(o, function(e) {
                                return t217.has(e.toId);
                            })).call(i, function(t) {
                                return t.to === e121;
                            });
                        }, function(t, e) {
                            return e > t;
                        }, "from", t217);
                    })(i85), this.hierarchical.setMinLevelToZero(this.body.nodes);
                }
            },
            {
                key: "_generateMap",
                value: function() {
                    var t = this;
                    this._crawlNetwork(function(e, i) {
                        t.hierarchical.levels[i.id] > t.hierarchical.levels[e.id] && t.hierarchical.addRelation(e.id, i.id);
                    }), this.hierarchical.checkIfTree();
                }
            },
            {
                key: "_crawlNetwork",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function() {
                    }, i86 = arguments.length > 1 ? arguments[1] : void 0, o = {
                    }, n24 = function i(n, r) {
                        if (void 0 === o[n.id]) {
                            var s;
                            t.hierarchical.setTreeIndex(n, r), o[n.id] = !0;
                            for(var a = t._getActiveEdges(n), h = 0; h < a.length; h++){
                                var d = a[h];
                                !0 === d.connected && (s = d.toId == n.id ? d.from : d.to, n.id != s.id && (e(n, s, d), i(s, r)));
                            }
                        }
                    };
                    if (void 0 === i86) for(var r9 = 0, s10 = 0; s10 < this.body.nodeIndices.length; s10++){
                        var a7 = this.body.nodeIndices[s10];
                        if (void 0 === o[a7]) {
                            var h6 = this.body.nodes[a7];
                            n24(h6, r9), r9 += 1;
                        }
                    }
                    else {
                        var d7 = this.body.nodes[i86];
                        if (void 0 === d7) return void console.error("Node not found:", i86);
                        n24(d7);
                    }
                }
            },
            {
                key: "_shiftBlock",
                value: function(t218, e) {
                    var i = this, o = {
                    };
                    !function t(n) {
                        if (!o[n]) {
                            o[n] = !0, i.direction.shift(n, e);
                            var r = i.hierarchical.childrenReference[n];
                            if (void 0 !== r) for(var s = 0; s < r.length; s++)t(r[s]);
                        }
                    }(t218);
                }
            },
            {
                key: "_findCommonParent",
                value: function(t219, e122) {
                    var i = this, o29 = {
                    };
                    return (function t(e, o) {
                        var n = i.hierarchical.parentReference[o];
                        if (void 0 !== n) for(var r = 0; r < n.length; r++){
                            var s = n[r];
                            e[s] = !0, t(e, s);
                        }
                    })(o29, t219), (function t(e, o) {
                        var n = i.hierarchical.parentReference[o];
                        if (void 0 !== n) for(var r = 0; r < n.length; r++){
                            var s = n[r];
                            if (void 0 !== e[s]) return {
                                foundParent: s,
                                withChild: o
                            };
                            var a = t(e, s);
                            if (null !== a.foundParent) return a;
                        }
                        return {
                            foundParent: null,
                            withChild: o
                        };
                    })(o29, e122);
                }
            },
            {
                key: "setDirectionStrategy",
                value: function() {
                    var t = "UD" === this.options.hierarchical.direction || "DU" === this.options.hierarchical.direction;
                    this.direction = t ? new Nw(this) : new Aw(this);
                }
            },
            {
                key: "_getCenterPosition",
                value: function(t) {
                    for(var e = 1000000000, i = -1000000000, o = 0; o < t.length; o++){
                        var n = void 0;
                        if (void 0 !== t[o].id) n = t[o];
                        else {
                            var r = t[o];
                            n = this.body.nodes[r];
                        }
                        var s = this.direction.getPosition(n);
                        e = Math.min(e, s), i = Math.max(i, s);
                    }
                    return 0.5 * (e + i);
                }
            }
        ]), t212;
    }();
    function Gw(t220, e123) {
        var i87 = void 0 !== Nh && xr(t220) || t220["@@iterator"];
        if (!i87) {
            if (Hh(t220) || (i87 = (function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return Kw(t, e);
                var o = Lh(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return rr(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return Kw(t, e);
            })(t220)) || e123 && t220 && "number" == typeof t220.length) {
                i87 && (t220 = i87);
                var o30 = 0, n = function() {
                };
                return {
                    s: n,
                    n: function() {
                        return o30 >= t220.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t220[o30++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i87 = i87.call(t220);
            },
            n: function() {
                var t = i87.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i87.return || i87.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function Kw(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    var $w = function() {
        function t221(e, i, o, n) {
            var r, s, a = this;
            Ra(this, t221), this.body = e, this.canvas = i, this.selectionHandler = o, this.interactionHandler = n, this.editMode = !1, this.manipulationDiv = void 0, this.editModeDiv = void 0, this.closeDiv = void 0, this._domEventListenerCleanupQueue = [], this.temporaryUIFunctions = {
            }, this.temporaryEventFunctions = [], this.touchTime = 0, this.temporaryIds = {
                nodes: [],
                edges: []
            }, this.guiEnabled = !1, this.inMode = !1, this.selectedControlNode = void 0, this.options = {
            }, this.defaultOptions = {
                enabled: !1,
                initiallyActive: !1,
                addNode: !0,
                addEdge: !0,
                editNode: void 0,
                editEdge: !0,
                deleteNode: !0,
                deleteEdge: !0,
                controlNodeStyle: {
                    shape: "dot",
                    size: 6,
                    color: {
                        background: "#ff0000",
                        border: "#3c3c3c",
                        highlight: {
                            background: "#07f968",
                            border: "#3c3c3c"
                        }
                    },
                    borderWidth: 2,
                    borderWidthSelected: 2
                }
            }, Ke(this.options, this.defaultOptions), this.body.emitter.on("destroy", function() {
                a._clean();
            }), this.body.emitter.on("_dataChanged", si(r = this._restore).call(r, this)), this.body.emitter.on("_resetData", si(s = this._restore).call(s, this));
        }
        return Ha(t221, [
            {
                key: "_restore",
                value: function() {
                    !1 !== this.inMode && (!0 === this.options.initiallyActive ? this.enableEditMode() : this.disableEditMode());
                }
            },
            {
                key: "setOptions",
                value: function(t, e, i) {
                    void 0 !== e && (void 0 !== e.locale ? this.options.locale = e.locale : this.options.locale = i.locale, void 0 !== e.locales ? this.options.locales = e.locales : this.options.locales = i.locales), void 0 !== t && ("boolean" == typeof t ? this.options.enabled = t : (this.options.enabled = !0, sf(this.options, t)), !0 === this.options.initiallyActive && (this.editMode = !0), this._setup());
                }
            },
            {
                key: "toggleEditMode",
                value: function() {
                    !0 === this.editMode ? this.disableEditMode() : this.enableEditMode();
                }
            },
            {
                key: "enableEditMode",
                value: function() {
                    this.editMode = !0, this._clean(), !0 === this.guiEnabled && (this.manipulationDiv.style.display = "block", this.closeDiv.style.display = "block", this.editModeDiv.style.display = "none", this.showManipulatorToolbar());
                }
            },
            {
                key: "disableEditMode",
                value: function() {
                    this.editMode = !1, this._clean(), !0 === this.guiEnabled && (this.manipulationDiv.style.display = "none", this.closeDiv.style.display = "none", this.editModeDiv.style.display = "block", this._createEditButton());
                }
            },
            {
                key: "showManipulatorToolbar",
                value: function() {
                    if (this._clean(), this.manipulationDOM = {
                    }, !0 === this.guiEnabled) {
                        var t, e;
                        this.editMode = !0, this.manipulationDiv.style.display = "block", this.closeDiv.style.display = "block";
                        var i = this.selectionHandler.getSelectedNodeCount(), o = this.selectionHandler.getSelectedEdgeCount(), n = i + o, r = this.options.locales[this.options.locale], s = !1;
                        !1 !== this.options.addNode && (this._createAddNodeButton(r), s = !0), !1 !== this.options.addEdge && (!0 === s ? this._createSeperator(1) : s = !0, this._createAddEdgeButton(r)), 1 === i && "function" == typeof this.options.editNode ? (!0 === s ? this._createSeperator(2) : s = !0, this._createEditNodeButton(r)) : 1 === o && 0 === i && !1 !== this.options.editEdge && (!0 === s ? this._createSeperator(3) : s = !0, this._createEditEdgeButton(r)), 0 !== n && (i > 0 && !1 !== this.options.deleteNode || 0 === i && !1 !== this.options.deleteEdge) && (!0 === s && this._createSeperator(4), this._createDeleteButton(r)), this._bindElementEvents(this.closeDiv, si(t = this.toggleEditMode).call(t, this)), this._temporaryBindEvent("select", si(e = this.showManipulatorToolbar).call(e, this));
                    }
                    this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "addNodeMode",
                value: function() {
                    var t;
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "addNode", !0 === this.guiEnabled) {
                        var e, i = this.options.locales[this.options.locale];
                        this.manipulationDOM = {
                        }, this._createBackButton(i), this._createSeperator(), this._createDescription(i.addDescription || this.options.locales.en.addDescription), this._bindElementEvents(this.closeDiv, si(e = this.toggleEditMode).call(e, this));
                    }
                    this._temporaryBindEvent("click", si(t = this._performAddNode).call(t, this));
                }
            },
            {
                key: "editNode",
                value: function() {
                    var t = this;
                    !0 !== this.editMode && this.enableEditMode(), this._clean();
                    var e124 = this.selectionHandler.getSelectedNodes()[0];
                    if (void 0 !== e124) {
                        if (this.inMode = "editNode", "function" != typeof this.options.editNode) throw new Error("No function has been configured to handle the editing of nodes.");
                        if (!0 !== e124.isCluster) {
                            var i = sf({
                            }, e124.options, !1);
                            if (i.x = e124.x, i.y = e124.y, 2 !== this.options.editNode.length) throw new Error("The function for edit does not support two arguments (data, callback)");
                            this.options.editNode(i, function(e) {
                                null != e && "editNode" === t.inMode && t.body.data.nodes.getDataSet().update(e), t.showManipulatorToolbar();
                            });
                        } else alert(this.options.locales[this.options.locale].editClusterError || this.options.locales.en.editClusterError);
                    } else this.showManipulatorToolbar();
                }
            },
            {
                key: "addEdgeMode",
                value: function() {
                    var t, e, i, o, n;
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "addEdge", !0 === this.guiEnabled) {
                        var r, s = this.options.locales[this.options.locale];
                        this.manipulationDOM = {
                        }, this._createBackButton(s), this._createSeperator(), this._createDescription(s.edgeDescription || this.options.locales.en.edgeDescription), this._bindElementEvents(this.closeDiv, si(r = this.toggleEditMode).call(r, this));
                    }
                    this._temporaryBindUI("onTouch", si(t = this._handleConnect).call(t, this)), this._temporaryBindUI("onDragEnd", si(e = this._finishConnect).call(e, this)), this._temporaryBindUI("onDrag", si(i = this._dragControlNode).call(i, this)), this._temporaryBindUI("onRelease", si(o = this._finishConnect).call(o, this)), this._temporaryBindUI("onDragStart", si(n = this._dragStartEdge).call(n, this)), this._temporaryBindUI("onHold", function() {
                    });
                }
            },
            {
                key: "editEdgeMode",
                value: function() {
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "editEdge", "object" !== zh(this.options.editEdge) || "function" != typeof this.options.editEdge.editWithoutDrag || (this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0], void 0 === this.edgeBeingEditedId)) {
                        if (!0 === this.guiEnabled) {
                            var t, e = this.options.locales[this.options.locale];
                            this.manipulationDOM = {
                            }, this._createBackButton(e), this._createSeperator(), this._createDescription(e.editEdgeDescription || this.options.locales.en.editEdgeDescription), this._bindElementEvents(this.closeDiv, si(t = this.toggleEditMode).call(t, this));
                        }
                        if (this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0], void 0 !== this.edgeBeingEditedId) {
                            var i, o, n, r, s = this.body.edges[this.edgeBeingEditedId], a = this._getNewTargetNode(s.from.x, s.from.y), h = this._getNewTargetNode(s.to.x, s.to.y);
                            this.temporaryIds.nodes.push(a.id), this.temporaryIds.nodes.push(h.id), this.body.nodes[a.id] = a, this.body.nodeIndices.push(a.id), this.body.nodes[h.id] = h, this.body.nodeIndices.push(h.id), this._temporaryBindUI("onTouch", si(i = this._controlNodeTouch).call(i, this)), this._temporaryBindUI("onTap", function() {
                            }), this._temporaryBindUI("onHold", function() {
                            }), this._temporaryBindUI("onDragStart", si(o = this._controlNodeDragStart).call(o, this)), this._temporaryBindUI("onDrag", si(n = this._controlNodeDrag).call(n, this)), this._temporaryBindUI("onDragEnd", si(r = this._controlNodeDragEnd).call(r, this)), this._temporaryBindUI("onMouseMove", function() {
                            }), this._temporaryBindEvent("beforeDrawing", function(t) {
                                var e = s.edgeType.findBorderPositions(t);
                                !1 === a.selected && (a.x = e.from.x, a.y = e.from.y), !1 === h.selected && (h.x = e.to.x, h.y = e.to.y);
                            }), this.body.emitter.emit("_redraw");
                        } else this.showManipulatorToolbar();
                    } else {
                        var d = this.body.edges[this.edgeBeingEditedId];
                        this._performEditEdge(d.from.id, d.to.id);
                    }
                }
            },
            {
                key: "deleteSelected",
                value: function() {
                    var t = this;
                    !0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "delete";
                    var e125 = this.selectionHandler.getSelectedNodeIds(), i = this.selectionHandler.getSelectedEdgeIds(), o = void 0;
                    if (e125.length > 0) {
                        for(var n = 0; n < e125.length; n++)if (!0 === this.body.nodes[e125[n]].isCluster) return void alert(this.options.locales[this.options.locale].deleteClusterError || this.options.locales.en.deleteClusterError);
                        "function" == typeof this.options.deleteNode && (o = this.options.deleteNode);
                    } else i.length > 0 && "function" == typeof this.options.deleteEdge && (o = this.options.deleteEdge);
                    if ("function" == typeof o) {
                        var r = {
                            nodes: e125,
                            edges: i
                        };
                        if (2 !== o.length) throw new Error("The function for delete does not support two arguments (data, callback)");
                        o(r, function(e) {
                            null != e && "delete" === t.inMode ? (t.body.data.edges.getDataSet().remove(e.edges), t.body.data.nodes.getDataSet().remove(e.nodes), t.body.emitter.emit("startSimulation"), t.showManipulatorToolbar()) : (t.body.emitter.emit("startSimulation"), t.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().remove(i), this.body.data.nodes.getDataSet().remove(e125), this.body.emitter.emit("startSimulation"), this.showManipulatorToolbar();
                }
            },
            {
                key: "_setup",
                value: function() {
                    !0 === this.options.enabled ? (this.guiEnabled = !0, this._createWrappers(), !1 === this.editMode ? this._createEditButton() : this.showManipulatorToolbar()) : (this._removeManipulationDOM(), this.guiEnabled = !1);
                }
            },
            {
                key: "_createWrappers",
                value: function() {
                    var t, e;
                    (void 0 === this.manipulationDiv && (this.manipulationDiv = document.createElement("div"), this.manipulationDiv.className = "vis-manipulation", !0 === this.editMode ? this.manipulationDiv.style.display = "block" : this.manipulationDiv.style.display = "none", this.canvas.frame.appendChild(this.manipulationDiv)), void 0 === this.editModeDiv && (this.editModeDiv = document.createElement("div"), this.editModeDiv.className = "vis-edit-mode", !0 === this.editMode ? this.editModeDiv.style.display = "none" : this.editModeDiv.style.display = "block", this.canvas.frame.appendChild(this.editModeDiv)), void 0 === this.closeDiv) && (this.closeDiv = document.createElement("button"), this.closeDiv.className = "vis-close", this.closeDiv.setAttribute("aria-label", null !== (t = null === (e = this.options.locales[this.options.locale]) || void 0 === e ? void 0 : e.close) && void 0 !== t ? t : this.options.locales.en.close), this.closeDiv.style.display = this.manipulationDiv.style.display, this.canvas.frame.appendChild(this.closeDiv));
                }
            },
            {
                key: "_getNewTargetNode",
                value: function(t, e) {
                    var i = sf({
                    }, this.options.controlNodeStyle);
                    i.id = "targetNode" + Cm(), i.hidden = !1, i.physics = !1, i.x = t, i.y = e;
                    var o = this.body.functions.createNode(i);
                    return o.shape.boundingBox = {
                        left: t,
                        right: t,
                        top: e,
                        bottom: e
                    }, o;
                }
            },
            {
                key: "_createEditButton",
                value: function() {
                    var t;
                    this._clean(), this.manipulationDOM = {
                    }, Qu(this.editModeDiv);
                    var e = this.options.locales[this.options.locale], i = this._createButton("editMode", "vis-edit vis-edit-mode", e.edit || this.options.locales.en.edit);
                    this.editModeDiv.appendChild(i), this._bindElementEvents(i, si(t = this.toggleEditMode).call(t, this));
                }
            },
            {
                key: "_clean",
                value: function() {
                    this.inMode = !1, !0 === this.guiEnabled && (Qu(this.editModeDiv), Qu(this.manipulationDiv), this._cleanupDOMEventListeners()), this._cleanupTemporaryNodesAndEdges(), this._unbindTemporaryUIs(), this._unbindTemporaryEvents(), this.body.emitter.emit("restorePhysics");
                }
            },
            {
                key: "_cleanupDOMEventListeners",
                value: function() {
                    var t, e, i = Gw(Od(t = this._domEventListenerCleanupQueue).call(t, 0));
                    try {
                        for(i.s(); !(e = i.n()).done;)(0, e.value)();
                    } catch (t222) {
                        i.e(t222);
                    } finally{
                        i.f();
                    }
                }
            },
            {
                key: "_removeManipulationDOM",
                value: function() {
                    this._clean(), Qu(this.manipulationDiv), Qu(this.editModeDiv), Qu(this.closeDiv), this.manipulationDiv && this.canvas.frame.removeChild(this.manipulationDiv), this.editModeDiv && this.canvas.frame.removeChild(this.editModeDiv), this.closeDiv && this.canvas.frame.removeChild(this.closeDiv), this.manipulationDiv = void 0, this.editModeDiv = void 0, this.closeDiv = void 0;
                }
            },
            {
                key: "_createSeperator",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                    this.manipulationDOM["seperatorLineDiv" + t] = document.createElement("div"), this.manipulationDOM["seperatorLineDiv" + t].className = "vis-separator-line", this.manipulationDiv.appendChild(this.manipulationDOM["seperatorLineDiv" + t]);
                }
            },
            {
                key: "_createAddNodeButton",
                value: function(t) {
                    var e, i = this._createButton("addNode", "vis-add", t.addNode || this.options.locales.en.addNode);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, si(e = this.addNodeMode).call(e, this));
                }
            },
            {
                key: "_createAddEdgeButton",
                value: function(t) {
                    var e, i = this._createButton("addEdge", "vis-connect", t.addEdge || this.options.locales.en.addEdge);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, si(e = this.addEdgeMode).call(e, this));
                }
            },
            {
                key: "_createEditNodeButton",
                value: function(t) {
                    var e, i = this._createButton("editNode", "vis-edit", t.editNode || this.options.locales.en.editNode);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, si(e = this.editNode).call(e, this));
                }
            },
            {
                key: "_createEditEdgeButton",
                value: function(t) {
                    var e, i = this._createButton("editEdge", "vis-edit", t.editEdge || this.options.locales.en.editEdge);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, si(e = this.editEdgeMode).call(e, this));
                }
            },
            {
                key: "_createDeleteButton",
                value: function(t) {
                    var e, i;
                    i = this.options.rtl ? "vis-delete-rtl" : "vis-delete";
                    var o = this._createButton("delete", i, t.del || this.options.locales.en.del);
                    this.manipulationDiv.appendChild(o), this._bindElementEvents(o, si(e = this.deleteSelected).call(e, this));
                }
            },
            {
                key: "_createBackButton",
                value: function(t) {
                    var e, i = this._createButton("back", "vis-back", t.back || this.options.locales.en.back);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, si(e = this.showManipulatorToolbar).call(e, this));
                }
            },
            {
                key: "_createButton",
                value: function(t, e, i) {
                    var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "vis-label";
                    return this.manipulationDOM[t + "Div"] = document.createElement("button"), this.manipulationDOM[t + "Div"].className = "vis-button " + e, this.manipulationDOM[t + "Label"] = document.createElement("div"), this.manipulationDOM[t + "Label"].className = o, this.manipulationDOM[t + "Label"].innerText = i, this.manipulationDOM[t + "Div"].appendChild(this.manipulationDOM[t + "Label"]), this.manipulationDOM[t + "Div"];
                }
            },
            {
                key: "_createDescription",
                value: function(t) {
                    this.manipulationDOM.descriptionLabel = document.createElement("div"), this.manipulationDOM.descriptionLabel.className = "vis-none", this.manipulationDOM.descriptionLabel.innerText = t, this.manipulationDiv.appendChild(this.manipulationDOM.descriptionLabel);
                }
            },
            {
                key: "_temporaryBindEvent",
                value: function(t, e) {
                    this.temporaryEventFunctions.push({
                        event: t,
                        boundFunction: e
                    }), this.body.emitter.on(t, e);
                }
            },
            {
                key: "_temporaryBindUI",
                value: function(t, e) {
                    if (void 0 === this.body.eventListeners[t]) throw new Error("This UI function does not exist. Typo? You tried: " + t + " possible are: " + Wl(Gh(this.body.eventListeners)));
                    this.temporaryUIFunctions[t] = this.body.eventListeners[t], this.body.eventListeners[t] = e;
                }
            },
            {
                key: "_unbindTemporaryUIs",
                value: function() {
                    for(var t in this.temporaryUIFunctions)Object.prototype.hasOwnProperty.call(this.temporaryUIFunctions, t) && (this.body.eventListeners[t] = this.temporaryUIFunctions[t], delete this.temporaryUIFunctions[t]);
                    this.temporaryUIFunctions = {
                    };
                }
            },
            {
                key: "_unbindTemporaryEvents",
                value: function() {
                    for(var t = 0; t < this.temporaryEventFunctions.length; t++){
                        var e = this.temporaryEventFunctions[t].event, i = this.temporaryEventFunctions[t].boundFunction;
                        this.body.emitter.off(e, i);
                    }
                    this.temporaryEventFunctions = [];
                }
            },
            {
                key: "_bindElementEvents",
                value: function(t223, e) {
                    var i88 = new If(t223, {
                    });
                    Fm(i88, e), this._domEventListenerCleanupQueue.push(function() {
                        i88.destroy();
                    });
                    var o31 = function(t) {
                        var i = t.keyCode, o = t.key;
                        "Enter" !== o && " " !== o && 13 !== i && 32 !== i || e();
                    };
                    t223.addEventListener("keyup", o31, !1), this._domEventListenerCleanupQueue.push(function() {
                        t223.removeEventListener("keyup", o31, !1);
                    });
                }
            },
            {
                key: "_cleanupTemporaryNodesAndEdges",
                value: function() {
                    for(var t = 0; t < this.temporaryIds.edges.length; t++){
                        var e;
                        this.body.edges[this.temporaryIds.edges[t]].disconnect(), delete this.body.edges[this.temporaryIds.edges[t]];
                        var i, o = Cl(e = this.body.edgeIndices).call(e, this.temporaryIds.edges[t]);
                        if (-1 !== o) Od(i = this.body.edgeIndices).call(i, o, 1);
                    }
                    for(var n = 0; n < this.temporaryIds.nodes.length; n++){
                        var r;
                        delete this.body.nodes[this.temporaryIds.nodes[n]];
                        var s, a = Cl(r = this.body.nodeIndices).call(r, this.temporaryIds.nodes[n]);
                        if (-1 !== a) Od(s = this.body.nodeIndices).call(s, a, 1);
                    }
                    this.temporaryIds = {
                        nodes: [],
                        edges: []
                    };
                }
            },
            {
                key: "_controlNodeTouch",
                value: function(t) {
                    this.selectionHandler.unselectAll(), this.lastTouch = this.body.functions.getPointer(t.center), this.lastTouch.translation = Ke({
                    }, this.body.view.translation);
                }
            },
            {
                key: "_controlNodeDragStart",
                value: function() {
                    var t = this.lastTouch, e = this.selectionHandler._pointerToPositionObject(t), i = this.body.nodes[this.temporaryIds.nodes[0]], o = this.body.nodes[this.temporaryIds.nodes[1]], n = this.body.edges[this.edgeBeingEditedId];
                    this.selectedControlNode = void 0;
                    var r = i.isOverlappingWith(e), s = o.isOverlappingWith(e);
                    !0 === r ? (this.selectedControlNode = i, n.edgeType.from = i) : !0 === s && (this.selectedControlNode = o, n.edgeType.to = o), void 0 !== this.selectedControlNode && this.selectionHandler.selectObject(this.selectedControlNode), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_controlNodeDrag",
                value: function(t) {
                    this.body.emitter.emit("disablePhysics");
                    var e = this.body.functions.getPointer(t.center), i = this.canvas.DOMtoCanvas(e);
                    void 0 !== this.selectedControlNode ? (this.selectedControlNode.x = i.x, this.selectedControlNode.y = i.y) : this.interactionHandler.onDrag(t), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_controlNodeDragEnd",
                value: function(t) {
                    var e = this.body.functions.getPointer(t.center), i = this.selectionHandler._pointerToPositionObject(e), o = this.body.edges[this.edgeBeingEditedId];
                    if (void 0 !== this.selectedControlNode) {
                        this.selectionHandler.unselectAll();
                        for(var n = this.selectionHandler._getAllNodesOverlappingWith(i), r = void 0, s = n.length - 1; s >= 0; s--)if (n[s] !== this.selectedControlNode.id) {
                            r = this.body.nodes[n[s]];
                            break;
                        }
                        if (void 0 !== r && void 0 !== this.selectedControlNode) {
                            if (!0 === r.isCluster) alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError);
                            else {
                                var a = this.body.nodes[this.temporaryIds.nodes[0]];
                                this.selectedControlNode.id === a.id ? this._performEditEdge(r.id, o.to.id) : this._performEditEdge(o.from.id, r.id);
                            }
                        } else o.updateEdgeType(), this.body.emitter.emit("restorePhysics");
                        this.body.emitter.emit("_redraw");
                    }
                }
            },
            {
                key: "_handleConnect",
                value: function(t) {
                    if ((new Date).valueOf() - this.touchTime > 100) {
                        this.lastTouch = this.body.functions.getPointer(t.center), this.lastTouch.translation = Ke({
                        }, this.body.view.translation), this.interactionHandler.drag.pointer = this.lastTouch, this.interactionHandler.drag.translation = this.lastTouch.translation;
                        var e = this.lastTouch, i = this.selectionHandler.getNodeAt(e);
                        if (void 0 !== i) {
                            if (!0 === i.isCluster) alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError);
                            else {
                                var o = this._getNewTargetNode(i.x, i.y);
                                this.body.nodes[o.id] = o, this.body.nodeIndices.push(o.id);
                                var n = this.body.functions.createEdge({
                                    id: "connectionEdge" + Cm(),
                                    from: i.id,
                                    to: o.id,
                                    physics: !1,
                                    smooth: {
                                        enabled: !0,
                                        type: "continuous",
                                        roundness: 0.5
                                    }
                                });
                                this.body.edges[n.id] = n, this.body.edgeIndices.push(n.id), this.temporaryIds.nodes.push(o.id), this.temporaryIds.edges.push(n.id);
                            }
                        }
                        this.touchTime = (new Date).valueOf();
                    }
                }
            },
            {
                key: "_dragControlNode",
                value: function(t) {
                    var e = this.body.functions.getPointer(t.center), i = this.selectionHandler._pointerToPositionObject(e), o = void 0;
                    void 0 !== this.temporaryIds.edges[0] && (o = this.body.edges[this.temporaryIds.edges[0]].fromId);
                    for(var n = this.selectionHandler._getAllNodesOverlappingWith(i), r = void 0, s = n.length - 1; s >= 0; s--){
                        var a;
                        if (-1 === Cl(a = this.temporaryIds.nodes).call(a, n[s])) {
                            r = this.body.nodes[n[s]];
                            break;
                        }
                    }
                    if (t.controlEdge = {
                        from: o,
                        to: r ? r.id : void 0
                    }, this.selectionHandler.generateClickEvent("controlNodeDragging", t, e), void 0 !== this.temporaryIds.nodes[0]) {
                        var h = this.body.nodes[this.temporaryIds.nodes[0]];
                        h.x = this.canvas._XconvertDOMtoCanvas(e.x), h.y = this.canvas._YconvertDOMtoCanvas(e.y), this.body.emitter.emit("_redraw");
                    } else this.interactionHandler.onDrag(t);
                }
            },
            {
                key: "_finishConnect",
                value: function(t) {
                    var e = this.body.functions.getPointer(t.center), i = this.selectionHandler._pointerToPositionObject(e), o = void 0;
                    void 0 !== this.temporaryIds.edges[0] && (o = this.body.edges[this.temporaryIds.edges[0]].fromId);
                    for(var n = this.selectionHandler._getAllNodesOverlappingWith(i), r = void 0, s = n.length - 1; s >= 0; s--){
                        var a;
                        if (-1 === Cl(a = this.temporaryIds.nodes).call(a, n[s])) {
                            r = this.body.nodes[n[s]];
                            break;
                        }
                    }
                    this._cleanupTemporaryNodesAndEdges(), void 0 !== r && (!0 === r.isCluster ? alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError) : void 0 !== this.body.nodes[o] && void 0 !== this.body.nodes[r.id] && this._performAddEdge(o, r.id)), t.controlEdge = {
                        from: o,
                        to: r ? r.id : void 0
                    }, this.selectionHandler.generateClickEvent("controlNodeDragEnd", t, e), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_dragStartEdge",
                value: function(t) {
                    var e = this.lastTouch;
                    this.selectionHandler.generateClickEvent("dragStart", t, e, void 0, !0);
                }
            },
            {
                key: "_performAddNode",
                value: function(t224) {
                    var e = this, i = {
                        id: Cm(),
                        x: t224.pointer.canvas.x,
                        y: t224.pointer.canvas.y,
                        label: "new"
                    };
                    if ("function" == typeof this.options.addNode) {
                        if (2 !== this.options.addNode.length) throw this.showManipulatorToolbar(), new Error("The function for add does not support two arguments (data,callback)");
                        this.options.addNode(i, function(t) {
                            null != t && "addNode" === e.inMode && e.body.data.nodes.getDataSet().add(t), e.showManipulatorToolbar();
                        });
                    } else this.body.data.nodes.getDataSet().add(i), this.showManipulatorToolbar();
                }
            },
            {
                key: "_performAddEdge",
                value: function(t225, e) {
                    var i = this, o = {
                        from: t225,
                        to: e
                    };
                    if ("function" == typeof this.options.addEdge) {
                        if (2 !== this.options.addEdge.length) throw new Error("The function for connect does not support two arguments (data,callback)");
                        this.options.addEdge(o, function(t) {
                            null != t && "addEdge" === i.inMode && (i.body.data.edges.getDataSet().add(t), i.selectionHandler.unselectAll(), i.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().add(o), this.selectionHandler.unselectAll(), this.showManipulatorToolbar();
                }
            },
            {
                key: "_performEditEdge",
                value: function(t226, e) {
                    var i = this, o = {
                        id: this.edgeBeingEditedId,
                        from: t226,
                        to: e,
                        label: this.body.data.edges.get(this.edgeBeingEditedId).label
                    }, n = this.options.editEdge;
                    if ("object" === zh(n) && (n = n.editWithoutDrag), "function" == typeof n) {
                        if (2 !== n.length) throw new Error("The function for edit does not support two arguments (data, callback)");
                        n(o, function(t) {
                            null == t || "editEdge" !== i.inMode ? (i.body.edges[o.id].updateEdgeType(), i.body.emitter.emit("_redraw"), i.showManipulatorToolbar()) : (i.body.data.edges.getDataSet().update(t), i.selectionHandler.unselectAll(), i.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().update(o), this.selectionHandler.unselectAll(), this.showManipulatorToolbar();
                }
            }
        ]), t221;
    }(), Zw = "string", Qw = "boolean", Jw = "number", tk = "array", ek = "object", ik = [
        "arrow",
        "bar",
        "box",
        "circle",
        "crow",
        "curve",
        "diamond",
        "image",
        "inv_curve",
        "inv_triangle",
        "triangle",
        "vee"
    ], ok = {
        borderWidth: {
            number: Jw
        },
        borderWidthSelected: {
            number: Jw,
            undefined: "undefined"
        },
        brokenImage: {
            string: Zw,
            undefined: "undefined"
        },
        chosen: {
            label: {
                boolean: Qw,
                function: "function"
            },
            node: {
                boolean: Qw,
                function: "function"
            },
            __type__: {
                object: ek,
                boolean: Qw
            }
        },
        color: {
            border: {
                string: Zw
            },
            background: {
                string: Zw
            },
            highlight: {
                border: {
                    string: Zw
                },
                background: {
                    string: Zw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            hover: {
                border: {
                    string: Zw
                },
                background: {
                    string: Zw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            __type__: {
                object: ek,
                string: Zw
            }
        },
        opacity: {
            number: Jw,
            undefined: "undefined"
        },
        fixed: {
            x: {
                boolean: Qw
            },
            y: {
                boolean: Qw
            },
            __type__: {
                object: ek,
                boolean: Qw
            }
        },
        font: {
            align: {
                string: Zw
            },
            color: {
                string: Zw
            },
            size: {
                number: Jw
            },
            face: {
                string: Zw
            },
            background: {
                string: Zw
            },
            strokeWidth: {
                number: Jw
            },
            strokeColor: {
                string: Zw
            },
            vadjust: {
                number: Jw
            },
            multi: {
                boolean: Qw,
                string: Zw
            },
            bold: {
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                face: {
                    string: Zw
                },
                mod: {
                    string: Zw
                },
                vadjust: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            boldital: {
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                face: {
                    string: Zw
                },
                mod: {
                    string: Zw
                },
                vadjust: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            ital: {
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                face: {
                    string: Zw
                },
                mod: {
                    string: Zw
                },
                vadjust: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            mono: {
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                face: {
                    string: Zw
                },
                mod: {
                    string: Zw
                },
                vadjust: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            __type__: {
                object: ek,
                string: Zw
            }
        },
        group: {
            string: Zw,
            number: Jw,
            undefined: "undefined"
        },
        heightConstraint: {
            minimum: {
                number: Jw
            },
            valign: {
                string: Zw
            },
            __type__: {
                object: ek,
                boolean: Qw,
                number: Jw
            }
        },
        hidden: {
            boolean: Qw
        },
        icon: {
            face: {
                string: Zw
            },
            code: {
                string: Zw
            },
            size: {
                number: Jw
            },
            color: {
                string: Zw
            },
            weight: {
                string: Zw,
                number: Jw
            },
            __type__: {
                object: ek
            }
        },
        id: {
            string: Zw,
            number: Jw
        },
        image: {
            selected: {
                string: Zw,
                undefined: "undefined"
            },
            unselected: {
                string: Zw,
                undefined: "undefined"
            },
            __type__: {
                object: ek,
                string: Zw
            }
        },
        imagePadding: {
            top: {
                number: Jw
            },
            right: {
                number: Jw
            },
            bottom: {
                number: Jw
            },
            left: {
                number: Jw
            },
            __type__: {
                object: ek,
                number: Jw
            }
        },
        label: {
            string: Zw,
            undefined: "undefined"
        },
        labelHighlightBold: {
            boolean: Qw
        },
        level: {
            number: Jw,
            undefined: "undefined"
        },
        margin: {
            top: {
                number: Jw
            },
            right: {
                number: Jw
            },
            bottom: {
                number: Jw
            },
            left: {
                number: Jw
            },
            __type__: {
                object: ek,
                number: Jw
            }
        },
        mass: {
            number: Jw
        },
        physics: {
            boolean: Qw
        },
        scaling: {
            min: {
                number: Jw
            },
            max: {
                number: Jw
            },
            label: {
                enabled: {
                    boolean: Qw
                },
                min: {
                    number: Jw
                },
                max: {
                    number: Jw
                },
                maxVisible: {
                    number: Jw
                },
                drawThreshold: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            customScalingFunction: {
                function: "function"
            },
            __type__: {
                object: ek
            }
        },
        shadow: {
            enabled: {
                boolean: Qw
            },
            color: {
                string: Zw
            },
            size: {
                number: Jw
            },
            x: {
                number: Jw
            },
            y: {
                number: Jw
            },
            __type__: {
                object: ek,
                boolean: Qw
            }
        },
        shape: {
            string: [
                "custom",
                "ellipse",
                "circle",
                "database",
                "box",
                "text",
                "image",
                "circularImage",
                "diamond",
                "dot",
                "star",
                "triangle",
                "triangleDown",
                "square",
                "icon",
                "hexagon"
            ]
        },
        ctxRenderer: {
            function: "function"
        },
        shapeProperties: {
            borderDashes: {
                boolean: Qw,
                array: tk
            },
            borderRadius: {
                number: Jw
            },
            interpolation: {
                boolean: Qw
            },
            useImageSize: {
                boolean: Qw
            },
            useBorderWithImage: {
                boolean: Qw
            },
            coordinateOrigin: {
                string: [
                    "center",
                    "top-left"
                ]
            },
            __type__: {
                object: ek
            }
        },
        size: {
            number: Jw
        },
        title: {
            string: Zw,
            dom: "dom",
            undefined: "undefined"
        },
        value: {
            number: Jw,
            undefined: "undefined"
        },
        widthConstraint: {
            minimum: {
                number: Jw
            },
            maximum: {
                number: Jw
            },
            __type__: {
                object: ek,
                boolean: Qw,
                number: Jw
            }
        },
        x: {
            number: Jw
        },
        y: {
            number: Jw
        },
        __type__: {
            object: ek
        }
    }, nk = {
        configure: {
            enabled: {
                boolean: Qw
            },
            filter: {
                boolean: Qw,
                string: Zw,
                array: tk,
                function: "function"
            },
            container: {
                dom: "dom"
            },
            showButton: {
                boolean: Qw
            },
            __type__: {
                object: ek,
                boolean: Qw,
                string: Zw,
                array: tk,
                function: "function"
            }
        },
        edges: {
            arrows: {
                to: {
                    enabled: {
                        boolean: Qw
                    },
                    scaleFactor: {
                        number: Jw
                    },
                    type: {
                        string: ik
                    },
                    imageHeight: {
                        number: Jw
                    },
                    imageWidth: {
                        number: Jw
                    },
                    src: {
                        string: Zw
                    },
                    __type__: {
                        object: ek,
                        boolean: Qw
                    }
                },
                middle: {
                    enabled: {
                        boolean: Qw
                    },
                    scaleFactor: {
                        number: Jw
                    },
                    type: {
                        string: ik
                    },
                    imageWidth: {
                        number: Jw
                    },
                    imageHeight: {
                        number: Jw
                    },
                    src: {
                        string: Zw
                    },
                    __type__: {
                        object: ek,
                        boolean: Qw
                    }
                },
                from: {
                    enabled: {
                        boolean: Qw
                    },
                    scaleFactor: {
                        number: Jw
                    },
                    type: {
                        string: ik
                    },
                    imageWidth: {
                        number: Jw
                    },
                    imageHeight: {
                        number: Jw
                    },
                    src: {
                        string: Zw
                    },
                    __type__: {
                        object: ek,
                        boolean: Qw
                    }
                },
                __type__: {
                    string: [
                        "from",
                        "to",
                        "middle"
                    ],
                    object: ek
                }
            },
            endPointOffset: {
                from: {
                    number: Jw
                },
                to: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    number: Jw
                }
            },
            arrowStrikethrough: {
                boolean: Qw
            },
            background: {
                enabled: {
                    boolean: Qw
                },
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                dashes: {
                    boolean: Qw,
                    array: tk
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            chosen: {
                label: {
                    boolean: Qw,
                    function: "function"
                },
                edge: {
                    boolean: Qw,
                    function: "function"
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            color: {
                color: {
                    string: Zw
                },
                highlight: {
                    string: Zw
                },
                hover: {
                    string: Zw
                },
                inherit: {
                    string: [
                        "from",
                        "to",
                        "both"
                    ],
                    boolean: Qw
                },
                opacity: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            dashes: {
                boolean: Qw,
                array: tk
            },
            font: {
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                face: {
                    string: Zw
                },
                background: {
                    string: Zw
                },
                strokeWidth: {
                    number: Jw
                },
                strokeColor: {
                    string: Zw
                },
                align: {
                    string: [
                        "horizontal",
                        "top",
                        "middle",
                        "bottom"
                    ]
                },
                vadjust: {
                    number: Jw
                },
                multi: {
                    boolean: Qw,
                    string: Zw
                },
                bold: {
                    color: {
                        string: Zw
                    },
                    size: {
                        number: Jw
                    },
                    face: {
                        string: Zw
                    },
                    mod: {
                        string: Zw
                    },
                    vadjust: {
                        number: Jw
                    },
                    __type__: {
                        object: ek,
                        string: Zw
                    }
                },
                boldital: {
                    color: {
                        string: Zw
                    },
                    size: {
                        number: Jw
                    },
                    face: {
                        string: Zw
                    },
                    mod: {
                        string: Zw
                    },
                    vadjust: {
                        number: Jw
                    },
                    __type__: {
                        object: ek,
                        string: Zw
                    }
                },
                ital: {
                    color: {
                        string: Zw
                    },
                    size: {
                        number: Jw
                    },
                    face: {
                        string: Zw
                    },
                    mod: {
                        string: Zw
                    },
                    vadjust: {
                        number: Jw
                    },
                    __type__: {
                        object: ek,
                        string: Zw
                    }
                },
                mono: {
                    color: {
                        string: Zw
                    },
                    size: {
                        number: Jw
                    },
                    face: {
                        string: Zw
                    },
                    mod: {
                        string: Zw
                    },
                    vadjust: {
                        number: Jw
                    },
                    __type__: {
                        object: ek,
                        string: Zw
                    }
                },
                __type__: {
                    object: ek,
                    string: Zw
                }
            },
            hidden: {
                boolean: Qw
            },
            hoverWidth: {
                function: "function",
                number: Jw
            },
            label: {
                string: Zw,
                undefined: "undefined"
            },
            labelHighlightBold: {
                boolean: Qw
            },
            length: {
                number: Jw,
                undefined: "undefined"
            },
            physics: {
                boolean: Qw
            },
            scaling: {
                min: {
                    number: Jw
                },
                max: {
                    number: Jw
                },
                label: {
                    enabled: {
                        boolean: Qw
                    },
                    min: {
                        number: Jw
                    },
                    max: {
                        number: Jw
                    },
                    maxVisible: {
                        number: Jw
                    },
                    drawThreshold: {
                        number: Jw
                    },
                    __type__: {
                        object: ek,
                        boolean: Qw
                    }
                },
                customScalingFunction: {
                    function: "function"
                },
                __type__: {
                    object: ek
                }
            },
            selectionWidth: {
                function: "function",
                number: Jw
            },
            selfReferenceSize: {
                number: Jw
            },
            selfReference: {
                size: {
                    number: Jw
                },
                angle: {
                    number: Jw
                },
                renderBehindTheNode: {
                    boolean: Qw
                },
                __type__: {
                    object: ek
                }
            },
            shadow: {
                enabled: {
                    boolean: Qw
                },
                color: {
                    string: Zw
                },
                size: {
                    number: Jw
                },
                x: {
                    number: Jw
                },
                y: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            smooth: {
                enabled: {
                    boolean: Qw
                },
                type: {
                    string: [
                        "dynamic",
                        "continuous",
                        "discrete",
                        "diagonalCross",
                        "straightCross",
                        "horizontal",
                        "vertical",
                        "curvedCW",
                        "curvedCCW",
                        "cubicBezier"
                    ]
                },
                roundness: {
                    number: Jw
                },
                forceDirection: {
                    string: [
                        "horizontal",
                        "vertical",
                        "none"
                    ],
                    boolean: Qw
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            title: {
                string: Zw,
                undefined: "undefined"
            },
            width: {
                number: Jw
            },
            widthConstraint: {
                maximum: {
                    number: Jw
                },
                __type__: {
                    object: ek,
                    boolean: Qw,
                    number: Jw
                }
            },
            value: {
                number: Jw,
                undefined: "undefined"
            },
            __type__: {
                object: ek
            }
        },
        groups: {
            useDefaultGroups: {
                boolean: Qw
            },
            __any__: ok,
            __type__: {
                object: ek
            }
        },
        interaction: {
            dragNodes: {
                boolean: Qw
            },
            dragView: {
                boolean: Qw
            },
            hideEdgesOnDrag: {
                boolean: Qw
            },
            hideEdgesOnZoom: {
                boolean: Qw
            },
            hideNodesOnDrag: {
                boolean: Qw
            },
            hover: {
                boolean: Qw
            },
            keyboard: {
                enabled: {
                    boolean: Qw
                },
                speed: {
                    x: {
                        number: Jw
                    },
                    y: {
                        number: Jw
                    },
                    zoom: {
                        number: Jw
                    },
                    __type__: {
                        object: ek
                    }
                },
                bindToWindow: {
                    boolean: Qw
                },
                autoFocus: {
                    boolean: Qw
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            multiselect: {
                boolean: Qw
            },
            navigationButtons: {
                boolean: Qw
            },
            selectable: {
                boolean: Qw
            },
            selectConnectedEdges: {
                boolean: Qw
            },
            hoverConnectedEdges: {
                boolean: Qw
            },
            tooltipDelay: {
                number: Jw
            },
            zoomView: {
                boolean: Qw
            },
            zoomSpeed: {
                number: Jw
            },
            __type__: {
                object: ek
            }
        },
        layout: {
            randomSeed: {
                undefined: "undefined",
                number: Jw,
                string: Zw
            },
            improvedLayout: {
                boolean: Qw
            },
            clusterThreshold: {
                number: Jw
            },
            hierarchical: {
                enabled: {
                    boolean: Qw
                },
                levelSeparation: {
                    number: Jw
                },
                nodeSpacing: {
                    number: Jw
                },
                treeSpacing: {
                    number: Jw
                },
                blockShifting: {
                    boolean: Qw
                },
                edgeMinimization: {
                    boolean: Qw
                },
                parentCentralization: {
                    boolean: Qw
                },
                direction: {
                    string: [
                        "UD",
                        "DU",
                        "LR",
                        "RL"
                    ]
                },
                sortMethod: {
                    string: [
                        "hubsize",
                        "directed"
                    ]
                },
                shakeTowards: {
                    string: [
                        "leaves",
                        "roots"
                    ]
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            __type__: {
                object: ek
            }
        },
        manipulation: {
            enabled: {
                boolean: Qw
            },
            initiallyActive: {
                boolean: Qw
            },
            addNode: {
                boolean: Qw,
                function: "function"
            },
            addEdge: {
                boolean: Qw,
                function: "function"
            },
            editNode: {
                function: "function"
            },
            editEdge: {
                editWithoutDrag: {
                    function: "function"
                },
                __type__: {
                    object: ek,
                    boolean: Qw,
                    function: "function"
                }
            },
            deleteNode: {
                boolean: Qw,
                function: "function"
            },
            deleteEdge: {
                boolean: Qw,
                function: "function"
            },
            controlNodeStyle: ok,
            __type__: {
                object: ek,
                boolean: Qw
            }
        },
        nodes: ok,
        physics: {
            enabled: {
                boolean: Qw
            },
            barnesHut: {
                theta: {
                    number: Jw
                },
                gravitationalConstant: {
                    number: Jw
                },
                centralGravity: {
                    number: Jw
                },
                springLength: {
                    number: Jw
                },
                springConstant: {
                    number: Jw
                },
                damping: {
                    number: Jw
                },
                avoidOverlap: {
                    number: Jw
                },
                __type__: {
                    object: ek
                }
            },
            forceAtlas2Based: {
                theta: {
                    number: Jw
                },
                gravitationalConstant: {
                    number: Jw
                },
                centralGravity: {
                    number: Jw
                },
                springLength: {
                    number: Jw
                },
                springConstant: {
                    number: Jw
                },
                damping: {
                    number: Jw
                },
                avoidOverlap: {
                    number: Jw
                },
                __type__: {
                    object: ek
                }
            },
            repulsion: {
                centralGravity: {
                    number: Jw
                },
                springLength: {
                    number: Jw
                },
                springConstant: {
                    number: Jw
                },
                nodeDistance: {
                    number: Jw
                },
                damping: {
                    number: Jw
                },
                __type__: {
                    object: ek
                }
            },
            hierarchicalRepulsion: {
                centralGravity: {
                    number: Jw
                },
                springLength: {
                    number: Jw
                },
                springConstant: {
                    number: Jw
                },
                nodeDistance: {
                    number: Jw
                },
                damping: {
                    number: Jw
                },
                avoidOverlap: {
                    number: Jw
                },
                __type__: {
                    object: ek
                }
            },
            maxVelocity: {
                number: Jw
            },
            minVelocity: {
                number: Jw
            },
            solver: {
                string: [
                    "barnesHut",
                    "repulsion",
                    "hierarchicalRepulsion",
                    "forceAtlas2Based"
                ]
            },
            stabilization: {
                enabled: {
                    boolean: Qw
                },
                iterations: {
                    number: Jw
                },
                updateInterval: {
                    number: Jw
                },
                onlyDynamicEdges: {
                    boolean: Qw
                },
                fit: {
                    boolean: Qw
                },
                __type__: {
                    object: ek,
                    boolean: Qw
                }
            },
            timestep: {
                number: Jw
            },
            adaptiveTimestep: {
                boolean: Qw
            },
            wind: {
                x: {
                    number: Jw
                },
                y: {
                    number: Jw
                },
                __type__: {
                    object: ek
                }
            },
            __type__: {
                object: ek,
                boolean: Qw
            }
        },
        autoResize: {
            boolean: Qw
        },
        clickToUse: {
            boolean: Qw
        },
        locale: {
            string: Zw
        },
        locales: {
            __any__: {
                any: "any"
            },
            __type__: {
                object: ek
            }
        },
        height: {
            string: Zw
        },
        width: {
            string: Zw
        },
        __type__: {
            object: ek
        }
    }, rk = {
        nodes: {
            borderWidth: [
                1,
                0,
                10,
                1
            ],
            borderWidthSelected: [
                2,
                0,
                10,
                1
            ],
            color: {
                border: [
                    "color",
                    "#2B7CE9"
                ],
                background: [
                    "color",
                    "#97C2FC"
                ],
                highlight: {
                    border: [
                        "color",
                        "#2B7CE9"
                    ],
                    background: [
                        "color",
                        "#D2E5FF"
                    ]
                },
                hover: {
                    border: [
                        "color",
                        "#2B7CE9"
                    ],
                    background: [
                        "color",
                        "#D2E5FF"
                    ]
                }
            },
            opacity: [
                0,
                0,
                1,
                0.1
            ],
            fixed: {
                x: !1,
                y: !1
            },
            font: {
                color: [
                    "color",
                    "#343434"
                ],
                size: [
                    14,
                    0,
                    100,
                    1
                ],
                face: [
                    "arial",
                    "verdana",
                    "tahoma"
                ],
                background: [
                    "color",
                    "none"
                ],
                strokeWidth: [
                    0,
                    0,
                    50,
                    1
                ],
                strokeColor: [
                    "color",
                    "#ffffff"
                ]
            },
            hidden: !1,
            labelHighlightBold: !0,
            physics: !0,
            scaling: {
                min: [
                    10,
                    0,
                    200,
                    1
                ],
                max: [
                    30,
                    0,
                    200,
                    1
                ],
                label: {
                    enabled: !1,
                    min: [
                        14,
                        0,
                        200,
                        1
                    ],
                    max: [
                        30,
                        0,
                        200,
                        1
                    ],
                    maxVisible: [
                        30,
                        0,
                        200,
                        1
                    ],
                    drawThreshold: [
                        5,
                        0,
                        20,
                        1
                    ]
                }
            },
            shadow: {
                enabled: !1,
                color: "rgba(0,0,0,0.5)",
                size: [
                    10,
                    0,
                    20,
                    1
                ],
                x: [
                    5,
                    -30,
                    30,
                    1
                ],
                y: [
                    5,
                    -30,
                    30,
                    1
                ]
            },
            shape: [
                "ellipse",
                "box",
                "circle",
                "database",
                "diamond",
                "dot",
                "square",
                "star",
                "text",
                "triangle",
                "triangleDown",
                "hexagon"
            ],
            shapeProperties: {
                borderDashes: !1,
                borderRadius: [
                    6,
                    0,
                    20,
                    1
                ],
                interpolation: !0,
                useImageSize: !1
            },
            size: [
                25,
                0,
                200,
                1
            ]
        },
        edges: {
            arrows: {
                to: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        0.05
                    ],
                    type: "arrow"
                },
                middle: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        0.05
                    ],
                    type: "arrow"
                },
                from: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        0.05
                    ],
                    type: "arrow"
                }
            },
            endPointOffset: {
                from: [
                    0,
                    -10,
                    10,
                    1
                ],
                to: [
                    0,
                    -10,
                    10,
                    1
                ]
            },
            arrowStrikethrough: !0,
            color: {
                color: [
                    "color",
                    "#848484"
                ],
                highlight: [
                    "color",
                    "#848484"
                ],
                hover: [
                    "color",
                    "#848484"
                ],
                inherit: [
                    "from",
                    "to",
                    "both",
                    !0,
                    !1
                ],
                opacity: [
                    1,
                    0,
                    1,
                    0.05
                ]
            },
            dashes: !1,
            font: {
                color: [
                    "color",
                    "#343434"
                ],
                size: [
                    14,
                    0,
                    100,
                    1
                ],
                face: [
                    "arial",
                    "verdana",
                    "tahoma"
                ],
                background: [
                    "color",
                    "none"
                ],
                strokeWidth: [
                    2,
                    0,
                    50,
                    1
                ],
                strokeColor: [
                    "color",
                    "#ffffff"
                ],
                align: [
                    "horizontal",
                    "top",
                    "middle",
                    "bottom"
                ]
            },
            hidden: !1,
            hoverWidth: [
                1.5,
                0,
                5,
                0.1
            ],
            labelHighlightBold: !0,
            physics: !0,
            scaling: {
                min: [
                    1,
                    0,
                    100,
                    1
                ],
                max: [
                    15,
                    0,
                    100,
                    1
                ],
                label: {
                    enabled: !0,
                    min: [
                        14,
                        0,
                        200,
                        1
                    ],
                    max: [
                        30,
                        0,
                        200,
                        1
                    ],
                    maxVisible: [
                        30,
                        0,
                        200,
                        1
                    ],
                    drawThreshold: [
                        5,
                        0,
                        20,
                        1
                    ]
                }
            },
            selectionWidth: [
                1.5,
                0,
                5,
                0.1
            ],
            selfReferenceSize: [
                20,
                0,
                200,
                1
            ],
            selfReference: {
                size: [
                    20,
                    0,
                    200,
                    1
                ],
                angle: [
                    Math.PI / 2,
                    -6 * Math.PI,
                    6 * Math.PI,
                    Math.PI / 8
                ],
                renderBehindTheNode: !0
            },
            shadow: {
                enabled: !1,
                color: "rgba(0,0,0,0.5)",
                size: [
                    10,
                    0,
                    20,
                    1
                ],
                x: [
                    5,
                    -30,
                    30,
                    1
                ],
                y: [
                    5,
                    -30,
                    30,
                    1
                ]
            },
            smooth: {
                enabled: !0,
                type: [
                    "dynamic",
                    "continuous",
                    "discrete",
                    "diagonalCross",
                    "straightCross",
                    "horizontal",
                    "vertical",
                    "curvedCW",
                    "curvedCCW",
                    "cubicBezier"
                ],
                forceDirection: [
                    "horizontal",
                    "vertical",
                    "none"
                ],
                roundness: [
                    0.5,
                    0,
                    1,
                    0.05
                ]
            },
            width: [
                1,
                0,
                30,
                1
            ]
        },
        layout: {
            hierarchical: {
                enabled: !1,
                levelSeparation: [
                    150,
                    20,
                    500,
                    5
                ],
                nodeSpacing: [
                    100,
                    20,
                    500,
                    5
                ],
                treeSpacing: [
                    200,
                    20,
                    500,
                    5
                ],
                blockShifting: !0,
                edgeMinimization: !0,
                parentCentralization: !0,
                direction: [
                    "UD",
                    "DU",
                    "LR",
                    "RL"
                ],
                sortMethod: [
                    "hubsize",
                    "directed"
                ],
                shakeTowards: [
                    "leaves",
                    "roots"
                ]
            }
        },
        interaction: {
            dragNodes: !0,
            dragView: !0,
            hideEdgesOnDrag: !1,
            hideEdgesOnZoom: !1,
            hideNodesOnDrag: !1,
            hover: !1,
            keyboard: {
                enabled: !1,
                speed: {
                    x: [
                        10,
                        0,
                        40,
                        1
                    ],
                    y: [
                        10,
                        0,
                        40,
                        1
                    ],
                    zoom: [
                        0.02,
                        0,
                        0.1,
                        0.005
                    ]
                },
                bindToWindow: !0,
                autoFocus: !0
            },
            multiselect: !1,
            navigationButtons: !1,
            selectable: !0,
            selectConnectedEdges: !0,
            hoverConnectedEdges: !0,
            tooltipDelay: [
                300,
                0,
                1000,
                25
            ],
            zoomView: !0,
            zoomSpeed: [
                1,
                0.1,
                2,
                0.1
            ]
        },
        manipulation: {
            enabled: !1,
            initiallyActive: !1
        },
        physics: {
            enabled: !0,
            barnesHut: {
                theta: [
                    0.5,
                    0.1,
                    1,
                    0.05
                ],
                gravitationalConstant: [
                    -2000,
                    -30000,
                    0,
                    50
                ],
                centralGravity: [
                    0.3,
                    0,
                    10,
                    0.05
                ],
                springLength: [
                    95,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    0.04,
                    0,
                    1.2,
                    0.005
                ],
                damping: [
                    0.09,
                    0,
                    1,
                    0.01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    0.01
                ]
            },
            forceAtlas2Based: {
                theta: [
                    0.5,
                    0.1,
                    1,
                    0.05
                ],
                gravitationalConstant: [
                    -50,
                    -500,
                    0,
                    1
                ],
                centralGravity: [
                    0.01,
                    0,
                    1,
                    0.005
                ],
                springLength: [
                    95,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    0.08,
                    0,
                    1.2,
                    0.005
                ],
                damping: [
                    0.4,
                    0,
                    1,
                    0.01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    0.01
                ]
            },
            repulsion: {
                centralGravity: [
                    0.2,
                    0,
                    10,
                    0.05
                ],
                springLength: [
                    200,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    0.05,
                    0,
                    1.2,
                    0.005
                ],
                nodeDistance: [
                    100,
                    0,
                    500,
                    5
                ],
                damping: [
                    0.09,
                    0,
                    1,
                    0.01
                ]
            },
            hierarchicalRepulsion: {
                centralGravity: [
                    0.2,
                    0,
                    10,
                    0.05
                ],
                springLength: [
                    100,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    0.01,
                    0,
                    1.2,
                    0.005
                ],
                nodeDistance: [
                    120,
                    0,
                    500,
                    5
                ],
                damping: [
                    0.09,
                    0,
                    1,
                    0.01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    0.01
                ]
            },
            maxVelocity: [
                50,
                0,
                150,
                1
            ],
            minVelocity: [
                0.1,
                0.01,
                0.5,
                0.01
            ],
            solver: [
                "barnesHut",
                "forceAtlas2Based",
                "repulsion",
                "hierarchicalRepulsion"
            ],
            timestep: [
                0.5,
                0.01,
                1,
                0.01
            ],
            wind: {
                x: [
                    0,
                    -10,
                    10,
                    0.1
                ],
                y: [
                    0,
                    -10,
                    10,
                    0.1
                ]
            }
        }
    }, sk = function(t, e, i) {
        var o;
        return !(!Hd(t).call(t, "physics") || !Hd(o = rk.physics.solver).call(o, e) || i.physics.solver === e || "wind" === e);
    }, ak = Object.freeze({
        __proto__: null,
        configuratorHideOption: sk,
        allOptions: nk,
        configureOptions: rk
    }), hk = function() {
        function t227() {
            Ra(this, t227);
        }
        return Ha(t227, [
            {
                key: "getDistances",
                value: function(t, e, i) {
                    for(var o = {
                    }, n = t.edges, r = 0; r < e.length; r++){
                        var s = {
                        };
                        o[e[r]] = s;
                        for(var a = 0; a < e.length; a++)s[e[a]] = r == a ? 0 : 1000000000;
                    }
                    for(var h = 0; h < i.length; h++){
                        var d = n[i[h]];
                        !0 === d.connected && void 0 !== o[d.fromId] && void 0 !== o[d.toId] && (o[d.fromId][d.toId] = 1, o[d.toId][d.fromId] = 1);
                    }
                    for(var l = e.length, c = 0; c < l; c++)for(var u = e[c], f = o[u], p = 0; p < l - 1; p++)for(var v = e[p], g = o[v], y = p + 1; y < l; y++){
                        var m = e[y], b = o[m], w = Math.min(g[m], g[u] + f[m]);
                        g[m] = w, b[v] = w;
                    }
                    return o;
                }
            }
        ]), t227;
    }(), dk = function() {
        function t228(e, i, o) {
            Ra(this, t228), this.body = e, this.springLength = i, this.springConstant = o, this.distanceSolver = new hk;
        }
        return Ha(t228, [
            {
                key: "setOptions",
                value: function(t) {
                    t && (t.springLength && (this.springLength = t.springLength), t.springConstant && (this.springConstant = t.springConstant));
                }
            },
            {
                key: "solve",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = this.distanceSolver.getDistances(this.body, t, e);
                    this._createL_matrix(o), this._createK_matrix(o), this._createE_matrix();
                    for(var n = 0.01, r = 1, s = 0, a = Math.max(1000, Math.min(10 * this.body.nodeIndices.length, 6000)), h = 5, d = 1000000000, l = 0, c = 0, u = 0, f = 0, p = 0; d > n && s < a;){
                        s += 1;
                        var v = this._getHighestEnergyNode(i), g = Bh(v, 4);
                        for(l = g[0], d = g[1], c = g[2], u = g[3], f = d, p = 0; f > r && p < h;){
                            p += 1, this._moveNode(l, c, u);
                            var y = this._getEnergy(l), m = Bh(y, 3);
                            f = m[0], c = m[1], u = m[2];
                        }
                    }
                }
            },
            {
                key: "_getHighestEnergyNode",
                value: function(t) {
                    for(var e = this.body.nodeIndices, i = this.body.nodes, o = 0, n = e[0], r = 0, s = 0, a = 0; a < e.length; a++){
                        var h = e[a];
                        if (!0 !== i[h].predefinedPosition || !0 === i[h].isCluster && !0 === t || !0 !== i[h].options.fixed.x || !0 !== i[h].options.fixed.y) {
                            var d = Bh(this._getEnergy(h), 3), l = d[0], c = d[1], u = d[2];
                            o < l && (o = l, n = h, r = c, s = u);
                        }
                    }
                    return [
                        n,
                        o,
                        r,
                        s
                    ];
                }
            },
            {
                key: "_getEnergy",
                value: function(t) {
                    var e = Bh(this.E_sums[t], 2), i = e[0], o = e[1];
                    return [
                        Math.sqrt(Math.pow(i, 2) + Math.pow(o, 2)),
                        i,
                        o
                    ];
                }
            },
            {
                key: "_moveNode",
                value: function(t, e, i) {
                    for(var o = this.body.nodeIndices, n = this.body.nodes, r = 0, s = 0, a = 0, h = n[t].x, d = n[t].y, l = this.K_matrix[t], c = this.L_matrix[t], u = 0; u < o.length; u++){
                        var f = o[u];
                        if (f !== t) {
                            var p = n[f].x, v = n[f].y, g = l[f], y = c[f], m = 1 / Math.pow(Math.pow(h - p, 2) + Math.pow(d - v, 2), 1.5);
                            r += g * (1 - y * Math.pow(d - v, 2) * m), s += g * (y * (h - p) * (d - v) * m), a += g * (1 - y * Math.pow(h - p, 2) * m);
                        }
                    }
                    var b = (e / r + i / s) / (s / r - a / s), w = -(s * b + e) / r;
                    n[t].x += w, n[t].y += b, this._updateE_matrix(t);
                }
            },
            {
                key: "_createL_matrix",
                value: function(t) {
                    var e = this.body.nodeIndices, i = this.springLength;
                    this.L_matrix = [];
                    for(var o = 0; o < e.length; o++){
                        this.L_matrix[e[o]] = {
                        };
                        for(var n = 0; n < e.length; n++)this.L_matrix[e[o]][e[n]] = i * t[e[o]][e[n]];
                    }
                }
            },
            {
                key: "_createK_matrix",
                value: function(t) {
                    var e = this.body.nodeIndices, i = this.springConstant;
                    this.K_matrix = [];
                    for(var o = 0; o < e.length; o++){
                        this.K_matrix[e[o]] = {
                        };
                        for(var n = 0; n < e.length; n++)this.K_matrix[e[o]][e[n]] = i * Math.pow(t[e[o]][e[n]], -2);
                    }
                }
            },
            {
                key: "_createE_matrix",
                value: function() {
                    var t = this.body.nodeIndices, e = this.body.nodes;
                    this.E_matrix = {
                    }, this.E_sums = {
                    };
                    for(var i = 0; i < t.length; i++)this.E_matrix[t[i]] = [];
                    for(var o = 0; o < t.length; o++){
                        for(var n = t[o], r = e[n].x, s = e[n].y, a = 0, h = 0, d = o; d < t.length; d++){
                            var l = t[d];
                            if (l !== n) {
                                var c = e[l].x, u = e[l].y, f = 1 / Math.sqrt(Math.pow(r - c, 2) + Math.pow(s - u, 2));
                                this.E_matrix[n][d] = [
                                    this.K_matrix[n][l] * (r - c - this.L_matrix[n][l] * (r - c) * f),
                                    this.K_matrix[n][l] * (s - u - this.L_matrix[n][l] * (s - u) * f)
                                ], this.E_matrix[l][o] = this.E_matrix[n][d], a += this.E_matrix[n][d][0], h += this.E_matrix[n][d][1];
                            }
                        }
                        this.E_sums[n] = [
                            a,
                            h
                        ];
                    }
                }
            },
            {
                key: "_updateE_matrix",
                value: function(t) {
                    for(var e = this.body.nodeIndices, i = this.body.nodes, o = this.E_matrix[t], n = this.K_matrix[t], r = this.L_matrix[t], s = i[t].x, a = i[t].y, h = 0, d = 0, l = 0; l < e.length; l++){
                        var c = e[l];
                        if (c !== t) {
                            var u = o[l], f = u[0], p = u[1], v = i[c].x, g = i[c].y, y = 1 / Math.sqrt(Math.pow(s - v, 2) + Math.pow(a - g, 2)), m = n[c] * (s - v - r[c] * (s - v) * y), b = n[c] * (a - g - r[c] * (a - g) * y);
                            o[l] = [
                                m,
                                b
                            ], h += m, d += b;
                            var w = this.E_sums[c];
                            w[0] += m - f, w[1] += b - p;
                        }
                    }
                    this.E_sums[t] = [
                        h,
                        d
                    ];
                }
            }
        ]), t228;
    }();
    function lk(t, e, i) {
        var o, n, r, s, a = this;
        if (!(this instanceof lk)) throw new SyntaxError("Constructor must be called with the new operator");
        this.options = {
        }, this.defaultOptions = {
            locale: "en",
            locales: mp,
            clickToUse: !1
        }, Ke(this.options, this.defaultOptions), this.body = {
            container: t,
            nodes: {
            },
            nodeIndices: [],
            edges: {
            },
            edgeIndices: [],
            emitter: {
                on: si(o = this.on).call(o, this),
                off: si(n = this.off).call(n, this),
                emit: si(r = this.emit).call(r, this),
                once: si(s = this.once).call(s, this)
            },
            eventListeners: {
                onTap: function() {
                },
                onTouch: function() {
                },
                onDoubleTap: function() {
                },
                onHold: function() {
                },
                onDragStart: function() {
                },
                onDrag: function() {
                },
                onDragEnd: function() {
                },
                onMouseWheel: function() {
                },
                onPinch: function() {
                },
                onMouseMove: function() {
                },
                onRelease: function() {
                },
                onContext: function() {
                }
            },
            data: {
                nodes: null,
                edges: null
            },
            functions: {
                createNode: function() {
                },
                createEdge: function() {
                },
                getPointer: function() {
                }
            },
            modules: {
            },
            view: {
                scale: 1,
                translation: {
                    x: 0,
                    y: 0
                }
            },
            selectionBox: {
                show: !1,
                position: {
                    start: {
                        x: 0,
                        y: 0
                    },
                    end: {
                        x: 0,
                        y: 0
                    }
                }
            }
        }, this.bindEventListeners(), this.images = new wp(function() {
            return a.body.emitter.emit("_requestRedraw");
        }), this.groups = new Sv, this.canvas = new Am(this.body), this.selectionHandler = new Hb(this.body, this.canvas), this.interactionHandler = new qm(this.body, this.canvas, this.selectionHandler), this.view = new jm(this.body, this.canvas), this.renderer = new Im(this.body, this.canvas), this.physics = new bm(this.body), this.layoutEngine = new Xw(this.body), this.clustering = new Pm(this.body), this.manipulation = new $w(this.body, this.canvas, this.selectionHandler, this.interactionHandler), this.nodesHandler = new vy(this.body, this.images, this.groups, this.layoutEngine), this.edgesHandler = new am(this.body, this.images, this.groups), this.body.modules.kamadaKawai = new dk(this.body, 150, 0.05), this.body.modules.clustering = this.clustering, this.canvas._create(), this.setOptions(i), this.setData(e);
    }
    pi(lk.prototype), lk.prototype.setOptions = function(t229) {
        var e126 = this;
        if (null === t229 && (t229 = void 0), void 0 !== t229) {
            !0 === Nf.validate(t229, nk) && console.error("%cErrors have been found in the supplied options object.", Ff);
            if (nf([
                "locale",
                "locales",
                "clickToUse"
            ], this.options, t229), void 0 !== t229.locale && (t229.locale = (function(t, e) {
                try {
                    var i = Bh(e.split(/[-_ /]/, 2), 2), o = i[0], n = i[1], r = null != o ? o.toLowerCase() : null, s = null != n ? n.toUpperCase() : null;
                    if (r && s) {
                        var a, h = r + "-" + s;
                        if (Object.prototype.hasOwnProperty.call(t, h)) return h;
                        console.warn(jh(a = "Unknown variant ".concat(s, " of language ")).call(a, r, "."));
                    }
                    if (r) {
                        var d = r;
                        if (Object.prototype.hasOwnProperty.call(t, d)) return d;
                        console.warn("Unknown language ".concat(r));
                    }
                    return console.warn("Unknown locale ".concat(e, ", falling back to English.")), "en";
                } catch (t230) {
                    return console.error(t230), console.warn("Unexpected error while normalizing locale ".concat(e, ", falling back to English.")), "en";
                }
            })(t229.locales || this.options.locales, t229.locale)), t229 = this.layoutEngine.setOptions(t229.layout, t229), this.canvas.setOptions(t229), this.groups.setOptions(t229.groups), this.nodesHandler.setOptions(t229.nodes), this.edgesHandler.setOptions(t229.edges), this.physics.setOptions(t229.physics), this.manipulation.setOptions(t229.manipulation, t229, this.options), this.interactionHandler.setOptions(t229.interaction), this.renderer.setOptions(t229.interaction), this.selectionHandler.setOptions(t229.interaction), void 0 !== t229.groups && this.body.emitter.emit("refreshNodes"), "configure" in t229 && (this.configurator || (this.configurator = new Bf(this, this.body.container, rk, this.canvas.pixelRatio, sk)), this.configurator.setOptions(t229.configure)), this.configurator && !0 === this.configurator.options.enabled) {
                var i89 = {
                    nodes: {
                    },
                    edges: {
                    },
                    layout: {
                    },
                    interaction: {
                    },
                    manipulation: {
                    },
                    physics: {
                    },
                    global: {
                    }
                };
                sf(i89.nodes, this.nodesHandler.options), sf(i89.edges, this.edgesHandler.options), sf(i89.layout, this.layoutEngine.options), sf(i89.interaction, this.selectionHandler.options), sf(i89.interaction, this.renderer.options), sf(i89.interaction, this.interactionHandler.options), sf(i89.manipulation, this.manipulation.options), sf(i89.physics, this.physics.options), sf(i89.global, this.canvas.options), sf(i89.global, this.options), this.configurator.setModuleOptions(i89);
            }
            void 0 !== t229.clickToUse ? !0 === t229.clickToUse ? void 0 === this.activator && (this.activator = new Df(this.canvas.frame), this.activator.on("change", function() {
                e126.body.emitter.emit("activate");
            })) : (void 0 !== this.activator && (this.activator.destroy(), delete this.activator), this.body.emitter.emit("activate")) : this.body.emitter.emit("activate"), this.canvas.setSize(), this.body.emitter.emit("startSimulation");
        }
    }, lk.prototype._updateVisibleIndices = function() {
        var t = this.body.nodes, e = this.body.edges;
        for(var i in this.body.nodeIndices = [], this.body.edgeIndices = [], t)Object.prototype.hasOwnProperty.call(t, i) && (this.clustering._isClusteredNode(i) || !1 !== t[i].options.hidden || this.body.nodeIndices.push(t[i].id));
        for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
            var n = e[o], r = t[n.fromId], s = t[n.toId], a = void 0 !== r && void 0 !== s;
            !this.clustering._isClusteredEdge(o) && !1 === n.options.hidden && a && !1 === r.options.hidden && !1 === s.options.hidden && this.body.edgeIndices.push(n.id);
        }
    }, lk.prototype.bindEventListeners = function() {
        var t = this;
        this.body.emitter.on("_dataChanged", function() {
            t.edgesHandler._updateState(), t.body.emitter.emit("_dataUpdated");
        }), this.body.emitter.on("_dataUpdated", function() {
            t.clustering._updateState(), t._updateVisibleIndices(), t._updateValueRange(t.body.nodes), t._updateValueRange(t.body.edges), t.body.emitter.emit("startSimulation"), t.body.emitter.emit("_requestRedraw");
        });
    }, lk.prototype.setData = function(t) {
        if (this.body.emitter.emit("resetPhysics"), this.body.emitter.emit("_resetData"), this.selectionHandler.unselectAll(), t && t.dot && (t.nodes || t.edges)) throw new SyntaxError('Data must contain either parameter "dot" or  parameter pair "nodes" and "edges", but not both.');
        if (this.setOptions(t && t.options), t && t.dot) {
            console.warn("The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);");
            var e = pp(t.dot);
            this.setData(e);
        } else if (t && t.gephi) {
            console.warn("The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);");
            var i = gp(t.gephi);
            this.setData(i);
        } else this.nodesHandler.setData(t && t.nodes, !0), this.edgesHandler.setData(t && t.edges, !0), this.body.emitter.emit("_dataChanged"), this.body.emitter.emit("_dataLoaded"), this.body.emitter.emit("initPhysics");
    }, lk.prototype.destroy = function() {
        for(var t in this.body.emitter.emit("destroy"), this.body.emitter.off(), this.off(), delete this.groups, delete this.canvas, delete this.selectionHandler, delete this.interactionHandler, delete this.view, delete this.renderer, delete this.physics, delete this.layoutEngine, delete this.clustering, delete this.manipulation, delete this.nodesHandler, delete this.edgesHandler, delete this.configurator, delete this.images, this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, t) && delete this.body.nodes[t];
        for(var e in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, e) && delete this.body.edges[e];
        Qu(this.body.container);
    }, lk.prototype._updateValueRange = function(t) {
        var e, i = void 0, o = void 0, n = 0;
        for(e in t)if (Object.prototype.hasOwnProperty.call(t, e)) {
            var r = t[e].getValue();
            void 0 !== r && (i = void 0 === i ? r : Math.min(r, i), o = void 0 === o ? r : Math.max(r, o), n += r);
        }
        if (void 0 !== i && void 0 !== o) for(e in t)Object.prototype.hasOwnProperty.call(t, e) && t[e].setValueRange(i, o, n);
    }, lk.prototype.isActive = function() {
        return !this.activator || this.activator.active;
    }, lk.prototype.setSize = function() {
        return this.canvas.setSize.apply(this.canvas, arguments);
    }, lk.prototype.canvasToDOM = function() {
        return this.canvas.canvasToDOM.apply(this.canvas, arguments);
    }, lk.prototype.DOMtoCanvas = function() {
        return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
    }, lk.prototype.findNode = function() {
        return this.clustering.findNode.apply(this.clustering, arguments);
    }, lk.prototype.isCluster = function() {
        return this.clustering.isCluster.apply(this.clustering, arguments);
    }, lk.prototype.openCluster = function() {
        return this.clustering.openCluster.apply(this.clustering, arguments);
    }, lk.prototype.cluster = function() {
        return this.clustering.cluster.apply(this.clustering, arguments);
    }, lk.prototype.getNodesInCluster = function() {
        return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
    }, lk.prototype.clusterByConnection = function() {
        return this.clustering.clusterByConnection.apply(this.clustering, arguments);
    }, lk.prototype.clusterByHubsize = function() {
        return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
    }, lk.prototype.updateClusteredNode = function() {
        return this.clustering.updateClusteredNode.apply(this.clustering, arguments);
    }, lk.prototype.getClusteredEdges = function() {
        return this.clustering.getClusteredEdges.apply(this.clustering, arguments);
    }, lk.prototype.getBaseEdge = function() {
        return this.clustering.getBaseEdge.apply(this.clustering, arguments);
    }, lk.prototype.getBaseEdges = function() {
        return this.clustering.getBaseEdges.apply(this.clustering, arguments);
    }, lk.prototype.updateEdge = function() {
        return this.clustering.updateEdge.apply(this.clustering, arguments);
    }, lk.prototype.clusterOutliers = function() {
        return this.clustering.clusterOutliers.apply(this.clustering, arguments);
    }, lk.prototype.getSeed = function() {
        return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
    }, lk.prototype.enableEditMode = function() {
        return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
    }, lk.prototype.disableEditMode = function() {
        return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
    }, lk.prototype.addNodeMode = function() {
        return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
    }, lk.prototype.editNode = function() {
        return this.manipulation.editNode.apply(this.manipulation, arguments);
    }, lk.prototype.editNodeMode = function() {
        return console.warn("Deprecated: Please use editNode instead of editNodeMode."), this.manipulation.editNode.apply(this.manipulation, arguments);
    }, lk.prototype.addEdgeMode = function() {
        return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
    }, lk.prototype.editEdgeMode = function() {
        return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
    }, lk.prototype.deleteSelected = function() {
        return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
    }, lk.prototype.getPositions = function() {
        return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
    }, lk.prototype.getPosition = function() {
        return this.nodesHandler.getPosition.apply(this.nodesHandler, arguments);
    }, lk.prototype.storePositions = function() {
        return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
    }, lk.prototype.moveNode = function() {
        return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
    }, lk.prototype.getBoundingBox = function() {
        return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
    }, lk.prototype.getConnectedNodes = function(t) {
        return void 0 !== this.body.nodes[t] ? this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments) : this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
    }, lk.prototype.getConnectedEdges = function() {
        return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
    }, lk.prototype.startSimulation = function() {
        return this.physics.startSimulation.apply(this.physics, arguments);
    }, lk.prototype.stopSimulation = function() {
        return this.physics.stopSimulation.apply(this.physics, arguments);
    }, lk.prototype.stabilize = function() {
        return this.physics.stabilize.apply(this.physics, arguments);
    }, lk.prototype.getSelection = function() {
        return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
    }, lk.prototype.setSelection = function() {
        return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
    }, lk.prototype.getSelectedNodes = function() {
        return this.selectionHandler.getSelectedNodeIds.apply(this.selectionHandler, arguments);
    }, lk.prototype.getSelectedEdges = function() {
        return this.selectionHandler.getSelectedEdgeIds.apply(this.selectionHandler, arguments);
    }, lk.prototype.getNodeAt = function() {
        var t = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
        return void 0 !== t && void 0 !== t.id ? t.id : t;
    }, lk.prototype.getEdgeAt = function() {
        var t = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
        return void 0 !== t && void 0 !== t.id ? t.id : t;
    }, lk.prototype.selectNodes = function() {
        return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
    }, lk.prototype.selectEdges = function() {
        return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
    }, lk.prototype.unselectAll = function() {
        this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments), this.selectionHandler.commitWithoutEmitting.apply(this.selectionHandler), this.redraw();
    }, lk.prototype.redraw = function() {
        return this.renderer.redraw.apply(this.renderer, arguments);
    }, lk.prototype.getScale = function() {
        return this.view.getScale.apply(this.view, arguments);
    }, lk.prototype.getViewPosition = function() {
        return this.view.getViewPosition.apply(this.view, arguments);
    }, lk.prototype.fit = function() {
        return this.view.fit.apply(this.view, arguments);
    }, lk.prototype.moveTo = function() {
        return this.view.moveTo.apply(this.view, arguments);
    }, lk.prototype.focus = function() {
        return this.view.focus.apply(this.view, arguments);
    }, lk.prototype.releaseNode = function() {
        return this.view.releaseNode.apply(this.view, arguments);
    }, lk.prototype.getOptionsFromConfigurator = function() {
        var t = {
        };
        return this.configurator && (t = this.configurator.getOptions.apply(this.configurator)), t;
    };
    var ck = pp;
    t1.Network = lk, t1.NetworkImages = wp, t1.networkDOTParser = vp, t1.networkGephiParser = yp, t1.networkOptions = ak, t1.parseDOTNetwork = ck, t1.parseGephiNetwork = gp, Object.defineProperty(t1, "__esModule", {
        value: !0
    });
});

},{"vis-data/peer/umd/vis-data.js":"4Tmhj"}],"4Tmhj":[function(require,module,exports) {
var global1 = arguments[3];
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define([
        'exports'
    ], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vis = global.vis || {
    }));
})(this, function(exports1) {
    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global1 !== 'undefined' ? global1 : typeof self !== 'undefined' ? self : {
    };
    function createCommonjsModule(fn) {
        var module = {
            exports: {
            }
        };
        return fn(module, module.exports), module.exports;
    }
    var check = function(it) {
        return it && it.Math == Math && it;
    }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global$1 = check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || check(typeof self == 'object' && self) || check(typeof commonjsGlobal == 'object' && commonjsGlobal) || function() {
        return this;
    }() || Function('return this')();
    var fails = function(exec) {
        try {
            return !!exec();
        } catch (error) {
            return true;
        }
    };
    var descriptors = !fails(function() {
        return Object.defineProperty({
        }, 1, {
            get: function() {
                return 7;
            }
        })[1] != 7;
    });
    var nativePropertyIsEnumerable = {
    }.propertyIsEnumerable;
    var getOwnPropertyDescriptor1 = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug
    var NASHORN_BUG = getOwnPropertyDescriptor1 && !nativePropertyIsEnumerable.call({
        1: 2
    }, 1); // `Object.prototype.propertyIsEnumerable` method implementation
    // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
    var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor1(this, V);
        return !!descriptor && descriptor.enumerable;
    } : nativePropertyIsEnumerable;
    var objectPropertyIsEnumerable = {
        f: f
    };
    var createPropertyDescriptor = function(bitmap, value) {
        return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
        };
    };
    var toString = {
    }.toString;
    var classofRaw = function(it) {
        return toString.call(it).slice(8, -1);
    };
    var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var indexedObject = fails(function() {
        // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
        // eslint-disable-next-line no-prototype-builtins
        return !Object('z').propertyIsEnumerable(0);
    }) ? function(it) {
        return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
    } : Object;
    // `RequireObjectCoercible` abstract operation
    // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
    var requireObjectCoercible = function(it) {
        if (it == undefined) throw TypeError("Can't call method on " + it);
        return it;
    };
    var toIndexedObject = function(it) {
        return indexedObject(requireObjectCoercible(it));
    };
    var isObject = function(it) {
        return typeof it === 'object' ? it !== null : typeof it === 'function';
    };
    // https://tc39.github.io/ecma262/#sec-toprimitive
    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string
    var toPrimitive = function(input, PREFERRED_STRING) {
        if (!isObject(input)) return input;
        var fn, val;
        if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
        if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        throw TypeError("Can't convert object to primitive value");
    };
    var hasOwnProperty = {
    }.hasOwnProperty;
    var has = function(it, key) {
        return hasOwnProperty.call(it, key);
    };
    var document$1 = global$1.document; // typeof document.createElement is 'object' in old IE
    var EXISTS = isObject(document$1) && isObject(document$1.createElement);
    var documentCreateElement = function(it) {
        return EXISTS ? document$1.createElement(it) : {
        };
    };
    var ie8DomDefine = !descriptors && !fails(function() {
        return Object.defineProperty(documentCreateElement('div'), 'a', {
            get: function() {
                return 7;
            }
        }).a != 7;
    });
    var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
    var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPrimitive(P, true);
        if (ie8DomDefine) try {
            return nativeGetOwnPropertyDescriptor(O, P);
        } catch (error) {
        /* empty */ }
        if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
    };
    var objectGetOwnPropertyDescriptor = {
        f: f$1
    };
    var replacement1 = /#|\.prototype\./;
    var isForced = function(feature, detection) {
        var value = data1[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
    };
    var normalize = isForced.normalize = function(string) {
        return String(string).replace(replacement1, '.').toLowerCase();
    };
    var data1 = isForced.data = {
    };
    var NATIVE = isForced.NATIVE = 'N';
    var POLYFILL = isForced.POLYFILL = 'P';
    var isForced_1 = isForced;
    var path = {
    };
    var aFunction = function(it) {
        if (typeof it != 'function') throw TypeError(String(it) + ' is not a function');
        return it;
    };
    var functionBindContext = function(fn, that, length) {
        aFunction(fn);
        if (that === undefined) return fn;
        switch(length){
            case 0:
                return function() {
                    return fn.call(that);
                };
            case 1:
                return function(a) {
                    return fn.call(that, a);
                };
            case 2:
                return function(a, b) {
                    return fn.call(that, a, b);
                };
            case 3:
                return function(a, b, c) {
                    return fn.call(that, a, b, c);
                };
        }
        return function() /* ...args */ {
            return fn.apply(that, arguments);
        };
    };
    var anObject = function(it) {
        if (!isObject(it)) throw TypeError(String(it) + ' is not an object');
        return it;
    };
    var nativeDefineProperty = Object.defineProperty; // `Object.defineProperty` method
    // https://tc39.github.io/ecma262/#sec-object.defineproperty
    var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (ie8DomDefine) try {
            return nativeDefineProperty(O, P, Attributes);
        } catch (error) {
        /* empty */ }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
    };
    var objectDefineProperty = {
        f: f$2
    };
    var createNonEnumerableProperty = descriptors ? function(object, key, value) {
        return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
    } : function(object, key, value) {
        object[key] = value;
        return object;
    };
    var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
    var wrapConstructor = function(NativeConstructor) {
        var Wrapper = function(a, b, c) {
            if (this instanceof NativeConstructor) {
                switch(arguments.length){
                    case 0:
                        return new NativeConstructor();
                    case 1:
                        return new NativeConstructor(a);
                    case 2:
                        return new NativeConstructor(a, b);
                }
                return new NativeConstructor(a, b, c);
            }
            return NativeConstructor.apply(this, arguments);
        };
        Wrapper.prototype = NativeConstructor.prototype;
        return Wrapper;
    };
    /*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/ var _export = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var PROTO = options.proto;
        var nativeSource = GLOBAL ? global$1 : STATIC ? global$1[TARGET] : (global$1[TARGET] || {
        }).prototype;
        var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {
        });
        var targetPrototype = target.prototype;
        var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
        var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
        for(key in source){
            FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contains in native
            USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);
            targetProperty = target[key];
            if (USE_NATIVE) {
                if (options.noTargetGet) {
                    descriptor = getOwnPropertyDescriptor$1(nativeSource, key);
                    nativeProperty = descriptor && descriptor.value;
                } else nativeProperty = nativeSource[key]; // export native or implementation
            }
            sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
            if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue; // bind timers to global for call from export context
            if (options.bind && USE_NATIVE) resultProperty = functionBindContext(sourceProperty, global$1); // wrap global constructors for prevent changs in this version
            else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty); // make static versions for prototype methods
            else if (PROTO && typeof sourceProperty == 'function') resultProperty = functionBindContext(Function.call, sourceProperty); // default case
            else resultProperty = sourceProperty; // add a flag to not completely full polyfills
            if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) createNonEnumerableProperty(resultProperty, 'sham', true);
            target[key] = resultProperty;
            if (PROTO) {
                VIRTUAL_PROTOTYPE = TARGET + 'Prototype';
                if (!has(path, VIRTUAL_PROTOTYPE)) createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {
                });
                 // export virtual prototype methods
                path[VIRTUAL_PROTOTYPE][key] = sourceProperty; // export real prototype methods
                if (options.real && targetPrototype && !targetPrototype[key]) createNonEnumerableProperty(targetPrototype, key, sourceProperty);
            }
        }
    };
    // https://tc39.github.io/ecma262/#sec-isarray
    var isArray = Array.isArray || function isArray(arg) {
        return classofRaw(arg) == 'Array';
    };
    var ceil = Math.ceil;
    var floor = Math.floor; // `ToInteger` abstract operation
    // https://tc39.github.io/ecma262/#sec-tointeger
    var toInteger = function(argument) {
        return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
    };
    var min1 = Math.min; // `ToLength` abstract operation
    // https://tc39.github.io/ecma262/#sec-tolength
    var toLength = function(argument) {
        return argument > 0 ? min1(toInteger(argument), 9007199254740991) : 0; // 2 ** 53 - 1 == 9007199254740991
    };
    // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
    var flattenIntoArray = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? functionBindContext(mapper, thisArg, 3) : false;
        var element;
        while(sourceIndex < sourceLen){
            if (sourceIndex in source) {
                element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
                if (depth > 0 && isArray(element)) targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
                else {
                    if (targetIndex >= 9007199254740991) throw TypeError('Exceed the acceptable array length');
                    target[targetIndex] = element;
                }
                targetIndex++;
            }
            sourceIndex++;
        }
        return targetIndex;
    };
    var flattenIntoArray_1 = flattenIntoArray;
    // https://tc39.github.io/ecma262/#sec-toobject
    var toObject = function(argument) {
        return Object(requireObjectCoercible(argument));
    };
    var setGlobal = function(key, value) {
        try {
            createNonEnumerableProperty(global$1, key, value);
        } catch (error) {
            global$1[key] = value;
        }
        return value;
    };
    var SHARED = '__core-js_shared__';
    var store1 = global$1[SHARED] || setGlobal(SHARED, {
    });
    var sharedStore = store1;
    var shared = createCommonjsModule(function(module) {
        (module.exports = function(key, value) {
            return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {
            });
        })('versions', []).push({
            version: '3.7.0',
            mode: 'pure',
            copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
        });
    });
    var id1 = 0;
    var postfix = Math.random();
    var uid = function(key) {
        return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id1 + postfix).toString(36);
    };
    var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function() {
        // Chrome 38 Symbol has incorrect toString conversion
        // eslint-disable-next-line no-undef
        return !String(Symbol());
    });
    var useSymbolAsUid = nativeSymbol // eslint-disable-next-line no-undef
     && !Symbol.sham // eslint-disable-next-line no-undef
     && typeof Symbol.iterator == 'symbol';
    var WellKnownSymbolsStore = shared('wks');
    var Symbol$1 = global$1.Symbol;
    var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;
    var wellKnownSymbol = function(name) {
        if (!has(WellKnownSymbolsStore, name)) {
            if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
            else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
        }
        return WellKnownSymbolsStore[name];
    };
    var SPECIES = wellKnownSymbol('species'); // `ArraySpeciesCreate` abstract operation
    // https://tc39.github.io/ecma262/#sec-arrayspeciescreate
    var arraySpeciesCreate = function(originalArray, length) {
        var C;
        if (isArray(originalArray)) {
            C = originalArray.constructor; // cross-realm fallback
            if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
            else if (isObject(C)) {
                C = C[SPECIES];
                if (C === null) C = undefined;
            }
        }
        return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
    };
    // https://github.com/tc39/proposal-flatMap
    _export({
        target: 'Array',
        proto: true
    }, {
        flatMap: function flatMap(callbackfn) {
            var O = toObject(this);
            var sourceLen = toLength(O.length);
            var A;
            aFunction(callbackfn);
            A = arraySpeciesCreate(O, 0);
            A.length = flattenIntoArray_1(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
            return A;
        }
    });
    var entryVirtual = function(CONSTRUCTOR) {
        return path[CONSTRUCTOR + 'Prototype'];
    };
    var flatMap = entryVirtual('Array').flatMap;
    var ArrayPrototype = Array.prototype;
    var flatMap_1 = function(it) {
        var own = it.flatMap;
        return it === ArrayPrototype || it instanceof Array && own === ArrayPrototype.flatMap ? flatMap : own;
    };
    var flatMap$1 = flatMap_1;
    var flatMap$2 = flatMap$1;
    var push = [].push; // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
    var createMethod = function(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function($this, callbackfn, that, specificCreate) {
            var O = toObject($this);
            var self = indexedObject(O);
            var boundFunction = functionBindContext(callbackfn, that, 3);
            var length = toLength(self.length);
            var index = 0;
            var create = specificCreate || arraySpeciesCreate;
            var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
            var value, result;
            for(; length > index; index++)if (NO_HOLES || index in self) {
                value = self[index];
                result = boundFunction(value, index, O);
                if (TYPE) {
                    if (IS_MAP) target[index] = result; // map
                    else if (result) switch(TYPE){
                        case 3:
                            return true;
                        // some
                        case 5:
                            return value;
                        // find
                        case 6:
                            return index;
                        // findIndex
                        case 2:
                            push.call(target, value);
                    }
                    else if (IS_EVERY) return false; // every
                }
            }
            return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
    };
    var arrayIteration = {
        // `Array.prototype.forEach` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
        forEach: createMethod(0),
        // `Array.prototype.map` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.map
        map: createMethod(1),
        // `Array.prototype.filter` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.filter
        filter: createMethod(2),
        // `Array.prototype.some` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.some
        some: createMethod(3),
        // `Array.prototype.every` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.every
        every: createMethod(4),
        // `Array.prototype.find` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.find
        find: createMethod(5),
        // `Array.prototype.findIndex` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
        findIndex: createMethod(6)
    };
    var aFunction$1 = function(variable) {
        return typeof variable == 'function' ? variable : undefined;
    };
    var getBuiltIn = function(namespace, method) {
        return arguments.length < 2 ? aFunction$1(path[namespace]) || aFunction$1(global$1[namespace]) : path[namespace] && path[namespace][method] || global$1[namespace] && global$1[namespace][method];
    };
    var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';
    var process = global$1.process;
    var versions = process && process.versions;
    var v8 = versions && versions.v8;
    var match1, version;
    if (v8) {
        match1 = v8.split('.');
        version = match1[0] + match1[1];
    } else if (engineUserAgent) {
        match1 = engineUserAgent.match(/Edge\/(\d+)/);
        if (!match1 || match1[1] >= 74) {
            match1 = engineUserAgent.match(/Chrome\/(\d+)/);
            if (match1) version = match1[1];
        }
    }
    var engineV8Version = version && +version;
    var SPECIES$1 = wellKnownSymbol('species');
    var arrayMethodHasSpeciesSupport = function(METHOD_NAME) {
        // We can't use this feature detection in V8 since it causes
        // deoptimization and serious performance degradation
        // https://github.com/zloirock/core-js/issues/677
        return engineV8Version >= 51 || !fails(function() {
            var array = [];
            var constructor = array.constructor = {
            };
            constructor[SPECIES$1] = function() {
                return {
                    foo: 1
                };
            };
            return array[METHOD_NAME](Boolean).foo !== 1;
        });
    };
    var defineProperty1 = Object.defineProperty;
    var cache = {
    };
    var thrower = function(it) {
        throw it;
    };
    var arrayMethodUsesToLength = function(METHOD_NAME, options) {
        if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
        if (!options) options = {
        };
        var method = [][METHOD_NAME];
        var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
        var argument0 = has(options, 0) ? options[0] : thrower;
        var argument1 = has(options, 1) ? options[1] : undefined;
        return cache[METHOD_NAME] = !!method && !fails(function() {
            if (ACCESSORS && !descriptors) return true;
            var O = {
                length: -1
            };
            if (ACCESSORS) defineProperty1(O, 1, {
                enumerable: true,
                get: thrower
            });
            else O[1] = 1;
            method.call(O, argument0, argument1);
        });
    };
    var $map = arrayIteration.map;
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map'); // FF49- issue
    var USES_TO_LENGTH = arrayMethodUsesToLength('map'); // `Array.prototype.map` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.map
    // with adding support of @@species
    _export({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
    }, {
        map: function map(callbackfn) {
            return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var map1 = entryVirtual('Array').map;
    var ArrayPrototype$1 = Array.prototype;
    var map_1 = function(it) {
        var own = it.map;
        return it === ArrayPrototype$1 || it instanceof Array && own === ArrayPrototype$1.map ? map1 : own;
    };
    var map$1 = map_1;
    var map$2 = map$1;
    var $filter = arrayIteration.filter;
    var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('filter'); // Edge 14- issue
    var USES_TO_LENGTH$1 = arrayMethodUsesToLength('filter'); // `Array.prototype.filter` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.filter
    // with adding support of @@species
    _export({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$1
    }, {
        filter: function filter(callbackfn) {
            return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var filter1 = entryVirtual('Array').filter;
    var ArrayPrototype$2 = Array.prototype;
    var filter_1 = function(it) {
        var own = it.filter;
        return it === ArrayPrototype$2 || it instanceof Array && own === ArrayPrototype$2.filter ? filter1 : own;
    };
    var filter$1 = filter_1;
    var filter$2 = filter$1;
    var createMethod$1 = function(IS_RIGHT) {
        return function(that, callbackfn, argumentsLength, memo) {
            aFunction(callbackfn);
            var O = toObject(that);
            var self = indexedObject(O);
            var length = toLength(O.length);
            var index = IS_RIGHT ? length - 1 : 0;
            var i = IS_RIGHT ? -1 : 1;
            if (argumentsLength < 2) while(true){
                if (index in self) {
                    memo = self[index];
                    index += i;
                    break;
                }
                index += i;
                if (IS_RIGHT ? index < 0 : length <= index) throw TypeError('Reduce of empty array with no initial value');
            }
            for(; IS_RIGHT ? index >= 0 : length > index; index += i)if (index in self) memo = callbackfn(memo, self[index], index, O);
            return memo;
        };
    };
    var arrayReduce = {
        // `Array.prototype.reduce` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
        left: createMethod$1(false),
        // `Array.prototype.reduceRight` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
        right: createMethod$1(true)
    };
    var arrayMethodIsStrict = function(METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails(function() {
            // eslint-disable-next-line no-useless-call,no-throw-literal
            method.call(null, argument || function() {
                throw 1;
            }, 1);
        });
    };
    var engineIsNode = classofRaw(global$1.process) == 'process';
    var $reduce = arrayReduce.left;
    var STRICT_METHOD = arrayMethodIsStrict('reduce');
    var USES_TO_LENGTH$2 = arrayMethodUsesToLength('reduce', {
        1: 0
    }); // Chrome 80-82 has a critical bug
    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
    var CHROME_BUG = !engineIsNode && engineV8Version > 79 && engineV8Version < 83; // `Array.prototype.reduce` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
    _export({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD || !USES_TO_LENGTH$2 || CHROME_BUG
    }, {
        reduce: function reduce(callbackfn) {
            return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var reduce = entryVirtual('Array').reduce;
    var ArrayPrototype$3 = Array.prototype;
    var reduce_1 = function(it) {
        var own = it.reduce;
        return it === ArrayPrototype$3 || it instanceof Array && own === ArrayPrototype$3.reduce ? reduce : own;
    };
    var reduce$1 = reduce_1;
    var reduce$2 = reduce$1;
    var slice = [].slice;
    var factories = {
    };
    var construct = function(C, argsLength, args) {
        if (!(argsLength in factories)) {
            for(var list = [], i = 0; i < argsLength; i++)list[i] = 'a[' + i + ']'; // eslint-disable-next-line no-new-func
            factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
        }
        return factories[argsLength](C, args);
    }; // `Function.prototype.bind` method implementation
    // https://tc39.github.io/ecma262/#sec-function.prototype.bind
    var functionBind = Function.bind || function bind(that) {
        var fn = aFunction(this);
        var partArgs = slice.call(arguments, 1);
        var boundFunction = function bound() /* args... */ {
            var args = partArgs.concat(slice.call(arguments));
            return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
        };
        if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
        return boundFunction;
    };
    // https://tc39.github.io/ecma262/#sec-function.prototype.bind
    _export({
        target: 'Function',
        proto: true
    }, {
        bind: functionBind
    });
    var bind = entryVirtual('Function').bind;
    var FunctionPrototype = Function.prototype;
    var bind_1 = function(it) {
        var own = it.bind;
        return it === FunctionPrototype || it instanceof Function && own === FunctionPrototype.bind ? bind : own;
    };
    var bind$1 = bind_1;
    var bind$2 = bind$1;
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    var classCallCheck = _classCallCheck;
    // https://tc39.github.io/ecma262/#sec-object.defineproperty
    _export({
        target: 'Object',
        stat: true,
        forced: !descriptors,
        sham: !descriptors
    }, {
        defineProperty: objectDefineProperty.f
    });
    var defineProperty_1 = createCommonjsModule(function(module) {
        var Object = path.Object;
        var defineProperty = module.exports = function defineProperty(it, key, desc) {
            return Object.defineProperty(it, key, desc);
        };
        if (Object.defineProperty.sham) defineProperty.sham = true;
    });
    var defineProperty$1 = defineProperty_1;
    var defineProperty$2 = defineProperty$1;
    function _defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            defineProperty$2(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    var createClass = _createClass;
    /**
	 * Create new data pipe.
	 *
	 * @param from - The source data set or data view.
	 *
	 * @remarks
	 * Example usage:
	 * ```typescript
	 * interface AppItem {
	 *   whoami: string;
	 *   appData: unknown;
	 *   visData: VisItem;
	 * }
	 * interface VisItem {
	 *   id: number;
	 *   label: string;
	 *   color: string;
	 *   x: number;
	 *   y: number;
	 * }
	 *
	 * const ds1 = new DataSet<AppItem, "whoami">([], { fieldId: "whoami" });
	 * const ds2 = new DataSet<VisItem, "id">();
	 *
	 * const pipe = createNewDataPipeFrom(ds1)
	 *   .filter((item): boolean => item.enabled === true)
	 *   .map<VisItem, "id">((item): VisItem => item.visData)
	 *   .to(ds2);
	 *
	 * pipe.start();
	 * ```
	 *
	 * @returns A factory whose methods can be used to configure the pipe.
	 */ function createNewDataPipeFrom(from) {
        return new DataPipeUnderConstruction1(from);
    }
    /**
	 * Internal implementation of the pipe. This should be accessible only through
	 * `createNewDataPipeFrom` from the outside.
	 *
	 * @typeParam SI - Source item type.
	 * @typeParam SP - Source item type's id property name.
	 * @typeParam TI - Target item type.
	 * @typeParam TP - Target item type's id property name.
	 */ var SimpleDataPipe1 = /*#__PURE__*/ function() {
        /**
	   * Create a new data pipe.
	   *
	   * @param _source - The data set or data view that will be observed.
	   * @param _transformers - An array of transforming functions to be used to
	   * filter or transform the items in the pipe.
	   * @param _target - The data set or data view that will receive the items.
	   */ function SimpleDataPipe(_source, _transformers, _target) {
            var _context, _context2, _context3;
            classCallCheck(this, SimpleDataPipe);
            this._source = _source;
            this._transformers = _transformers;
            this._target = _target;
            /**
	     * Bound listeners for use with `DataInterface['on' | 'off']`.
	     */ this._listeners = {
                add: bind$2(_context = this._add).call(_context, this),
                remove: bind$2(_context2 = this._remove).call(_context2, this),
                update: bind$2(_context3 = this._update).call(_context3, this)
            };
        }
        /** @inheritDoc */ createClass(SimpleDataPipe, [
            {
                key: "all",
                value: function all() {
                    this._target.update(this._transformItems(this._source.get()));
                    return this;
                }
            },
            {
                key: "start",
                value: function start() {
                    this._source.on("add", this._listeners.add);
                    this._source.on("remove", this._listeners.remove);
                    this._source.on("update", this._listeners.update);
                    return this;
                }
            },
            {
                key: "stop",
                value: function stop() {
                    this._source.off("add", this._listeners.add);
                    this._source.off("remove", this._listeners.remove);
                    this._source.off("update", this._listeners.update);
                    return this;
                }
            },
            {
                key: "_transformItems",
                value: function _transformItems(items1) {
                    var _context4;
                    return reduce$2(_context4 = this._transformers).call(_context4, function(items, transform) {
                        return transform(items);
                    }, items1);
                }
            },
            {
                key: "_add",
                value: function _add(_name, payload) {
                    if (payload == null) return;
                    this._target.add(this._transformItems(this._source.get(payload.items)));
                }
            },
            {
                key: "_update",
                value: function _update(_name, payload) {
                    if (payload == null) return;
                    this._target.update(this._transformItems(this._source.get(payload.items)));
                }
            },
            {
                key: "_remove",
                value: function _remove(_name, payload) {
                    if (payload == null) return;
                    this._target.remove(this._transformItems(payload.oldData));
                }
            }
        ]);
        return SimpleDataPipe;
    }();
    /**
	 * Internal implementation of the pipe factory. This should be accessible
	 * only through `createNewDataPipeFrom` from the outside.
	 *
	 * @typeParam TI - Target item type.
	 * @typeParam TP - Target item type's id property name.
	 */ var DataPipeUnderConstruction1 = /*#__PURE__*/ function() {
        /**
	   * Create a new data pipe factory. This is an internal constructor that
	   * should never be called from outside of this file.
	   *
	   * @param _source - The source data set or data view for this pipe.
	   */ function DataPipeUnderConstruction(_source) {
            classCallCheck(this, DataPipeUnderConstruction);
            this._source = _source;
            /**
	     * Array transformers used to transform items within the pipe. This is typed
	     * as any for the sake of simplicity.
	     */ this._transformers = [];
        }
        /**
	   * Filter the items.
	   *
	   * @param callback - A filtering function that returns true if given item
	   * should be piped and false if not.
	   *
	   * @returns This factory for further configuration.
	   */ createClass(DataPipeUnderConstruction, [
            {
                key: "filter",
                value: function filter(callback) {
                    this._transformers.push(function(input) {
                        return filter$2(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "map",
                value: function map(callback) {
                    this._transformers.push(function(input) {
                        return map$2(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "flatMap",
                value: function flatMap(callback) {
                    this._transformers.push(function(input) {
                        return flatMap$2(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "to",
                value: function to(target) {
                    return new SimpleDataPipe1(this._source, this._transformers, target);
                }
            }
        ]);
        return DataPipeUnderConstruction;
    }();
    var defineProperty$3 = defineProperty_1;
    var defineProperty$4 = defineProperty$3;
    var max1 = Math.max;
    var min$1 = Math.min; // Helper for a popular repeating case of the spec:
    // Let integer be ? ToInteger(index).
    // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
    var toAbsoluteIndex = function(index, length) {
        var integer = toInteger(index);
        return integer < 0 ? max1(integer + length, 0) : min$1(integer, length);
    };
    var createMethod$2 = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
            var O = toIndexedObject($this);
            var length = toLength(O.length);
            var index = toAbsoluteIndex(fromIndex, length);
            var value; // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare
            if (IS_INCLUDES && el != el) while(length > index){
                value = O[index++]; // eslint-disable-next-line no-self-compare
                if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
            }
            else for(; length > index; index++){
                if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
            }
            return !IS_INCLUDES && -1;
        };
    };
    var arrayIncludes = {
        // `Array.prototype.includes` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.includes
        includes: createMethod$2(true),
        // `Array.prototype.indexOf` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod$2(false)
    };
    var hiddenKeys = {
    };
    var indexOf = arrayIncludes.indexOf;
    var objectKeysInternal = function(object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;
        for(key in O)!has(hiddenKeys, key) && has(O, key) && result.push(key); // Don't enum bug & hidden keys
        while(names.length > i)if (has(O, key = names[i++])) ~indexOf(result, key) || result.push(key);
        return result;
    };
    // IE8- don't enum bug keys
    var enumBugKeys = [
        'constructor',
        'hasOwnProperty',
        'isPrototypeOf',
        'propertyIsEnumerable',
        'toLocaleString',
        'toString',
        'valueOf'
    ];
    // https://tc39.github.io/ecma262/#sec-object.keys
    var objectKeys = Object.keys || function keys(O) {
        return objectKeysInternal(O, enumBugKeys);
    };
    // https://tc39.github.io/ecma262/#sec-object.defineproperties
    var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index = 0;
        var key;
        while(length > index)objectDefineProperty.f(O, key = keys[index++], Properties[key]);
        return O;
    };
    // https://tc39.github.io/ecma262/#sec-object.defineproperties
    _export({
        target: 'Object',
        stat: true,
        forced: !descriptors,
        sham: !descriptors
    }, {
        defineProperties: objectDefineProperties
    });
    var defineProperties_1 = createCommonjsModule(function(module) {
        var Object = path.Object;
        var defineProperties = module.exports = function defineProperties(T, D) {
            return Object.defineProperties(T, D);
        };
        if (Object.defineProperties.sham) defineProperties.sham = true;
    });
    var defineProperties1 = defineProperties_1;
    var defineProperties$1 = defineProperties1;
    var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
    var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return objectKeysInternal(O, hiddenKeys$1);
    };
    var objectGetOwnPropertyNames = {
        f: f$3
    };
    var f$4 = Object.getOwnPropertySymbols;
    var objectGetOwnPropertySymbols = {
        f: f$4
    };
    var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
        var keys = objectGetOwnPropertyNames.f(anObject(it));
        var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
        return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
    };
    var createProperty = function(object, key, value) {
        var propertyKey = toPrimitive(key);
        if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
        else object[propertyKey] = value;
    };
    // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
    _export({
        target: 'Object',
        stat: true,
        sham: !descriptors
    }, {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
            var O = toIndexedObject(object);
            var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
            var keys = ownKeys(O);
            var result = {
            };
            var index = 0;
            var key, descriptor;
            while(keys.length > index){
                descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
                if (descriptor !== undefined) createProperty(result, key, descriptor);
            }
            return result;
        }
    });
    var getOwnPropertyDescriptors = path.Object.getOwnPropertyDescriptors;
    var getOwnPropertyDescriptors$1 = getOwnPropertyDescriptors;
    var getOwnPropertyDescriptors$2 = getOwnPropertyDescriptors$1;
    var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
    var FAILS_ON_PRIMITIVES = fails(function() {
        nativeGetOwnPropertyDescriptor$1(1);
    });
    var FORCED1 = !descriptors || FAILS_ON_PRIMITIVES; // `Object.getOwnPropertyDescriptor` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
    _export({
        target: 'Object',
        stat: true,
        forced: FORCED1,
        sham: !descriptors
    }, {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
            return nativeGetOwnPropertyDescriptor$1(toIndexedObject(it), key);
        }
    });
    var getOwnPropertyDescriptor_1 = createCommonjsModule(function(module) {
        var Object = path.Object;
        var getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor(it, key) {
            return Object.getOwnPropertyDescriptor(it, key);
        };
        if (Object.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor.sham = true;
    });
    var getOwnPropertyDescriptor$2 = getOwnPropertyDescriptor_1;
    var getOwnPropertyDescriptor$3 = getOwnPropertyDescriptor$2;
    var html = getBuiltIn('document', 'documentElement');
    var keys1 = shared('keys');
    var sharedKey = function(key) {
        return keys1[key] || (keys1[key] = uid(key));
    };
    var GT = '>';
    var LT = '<';
    var PROTOTYPE = 'prototype';
    var SCRIPT = 'script';
    var IE_PROTO = sharedKey('IE_PROTO');
    var EmptyConstructor = function() {
    /* empty */ };
    var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
    }; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
    var NullProtoObjectViaActiveX = function(activeXDocument) {
        activeXDocument.write(scriptTag(''));
        activeXDocument.close();
        var temp = activeXDocument.parentWindow.Object;
        activeXDocument = null; // avoid memory leak
        return temp;
    }; // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var NullProtoObjectViaIFrame = function() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = documentCreateElement('iframe');
        var JS = 'java' + SCRIPT + ':';
        var iframeDocument;
        iframe.style.display = 'none';
        html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag('document.F=Object'));
        iframeDocument.close();
        return iframeDocument.F;
    }; // Check for document.domain and active x support
    // No need to use active x approach when document.domain is not set
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    // avoid IE GC bug
    var activeXDocument1;
    var NullProtoObject = function() {
        try {
            /* global ActiveXObject */ activeXDocument1 = document.domain && new ActiveXObject('htmlfile');
        } catch (error) {
        /* ignore */ }
        NullProtoObject = activeXDocument1 ? NullProtoObjectViaActiveX(activeXDocument1) : NullProtoObjectViaIFrame();
        var length = enumBugKeys.length;
        while(length--)delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        return NullProtoObject();
    };
    hiddenKeys[IE_PROTO] = true; // `Object.create` method
    // https://tc39.github.io/ecma262/#sec-object.create
    var objectCreate = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
            EmptyConstructor[PROTOTYPE] = anObject(O);
            result = new EmptyConstructor();
            EmptyConstructor[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill
            result[IE_PROTO] = O;
        } else result = NullProtoObject();
        return Properties === undefined ? result : objectDefineProperties(result, Properties);
    };
    var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;
    var toString$1 = {
    }.toString;
    var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    var getWindowNames = function(it) {
        try {
            return nativeGetOwnPropertyNames(it);
        } catch (error) {
            return windowNames.slice();
        }
    }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    var f$5 = function getOwnPropertyNames(it) {
        return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : nativeGetOwnPropertyNames(toIndexedObject(it));
    };
    var objectGetOwnPropertyNamesExternal = {
        f: f$5
    };
    var redefine = function(target, key, value, options) {
        if (options && options.enumerable) target[key] = value;
        else createNonEnumerableProperty(target, key, value);
    };
    var f$6 = wellKnownSymbol;
    var wellKnownSymbolWrapped = {
        f: f$6
    };
    var defineProperty$5 = objectDefineProperty.f;
    var defineWellKnownSymbol = function(NAME) {
        var Symbol = path.Symbol || (path.Symbol = {
        });
        if (!has(Symbol, NAME)) defineProperty$5(Symbol, NAME, {
            value: wellKnownSymbolWrapped.f(NAME)
        });
    };
    var TO_STRING_TAG1 = wellKnownSymbol('toStringTag');
    var test1 = {
    };
    test1[TO_STRING_TAG1] = 'z';
    var toStringTagSupport = String(test1) === '[object z]';
    var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag'); // ES3 wrong here
    var CORRECT_ARGUMENTS = classofRaw(function() {
        return arguments;
    }()) == 'Arguments'; // fallback for IE11 Script Access Denied error
    var tryGet = function(it, key) {
        try {
            return it[key];
        } catch (error) {
        /* empty */ }
    }; // getting tag from ES6+ `Object.prototype.toString`
    var classof = toStringTagSupport ? classofRaw : function(it) {
        var O, tag, result;
        return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
         : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag // builtinTag case
         : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
         : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
    };
    // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
    var objectToString = toStringTagSupport ? {
    }.toString : function toString() {
        return '[object ' + classof(this) + ']';
    };
    var defineProperty$6 = objectDefineProperty.f;
    var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
    var setToStringTag = function(it, TAG, STATIC, SET_METHOD) {
        if (it) {
            var target = STATIC ? it : it.prototype;
            if (!has(target, TO_STRING_TAG$2)) defineProperty$6(target, TO_STRING_TAG$2, {
                configurable: true,
                value: TAG
            });
            if (SET_METHOD && !toStringTagSupport) createNonEnumerableProperty(target, 'toString', objectToString);
        }
    };
    var functionToString = Function.toString; // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
    if (typeof sharedStore.inspectSource != 'function') sharedStore.inspectSource = function(it) {
        return functionToString.call(it);
    };
    var inspectSource = sharedStore.inspectSource;
    var WeakMap = global$1.WeakMap;
    var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));
    var WeakMap$1 = global$1.WeakMap;
    var set1, get, has$1;
    var enforce = function(it) {
        return has$1(it) ? get(it) : set1(it, {
        });
    };
    var getterFor = function(TYPE) {
        return function(it) {
            var state;
            if (!isObject(it) || (state = get(it)).type !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required');
            return state;
        };
    };
    if (nativeWeakMap) {
        var store$1 = sharedStore.state || (sharedStore.state = new WeakMap$1());
        var wmget = store$1.get;
        var wmhas = store$1.has;
        var wmset = store$1.set;
        set1 = function(it, metadata) {
            metadata.facade = it;
            wmset.call(store$1, it, metadata);
            return metadata;
        };
        get = function(it) {
            return wmget.call(store$1, it) || {
            };
        };
        has$1 = function(it) {
            return wmhas.call(store$1, it);
        };
    } else {
        var STATE = sharedKey('state');
        hiddenKeys[STATE] = true;
        set1 = function(it, metadata) {
            metadata.facade = it;
            createNonEnumerableProperty(it, STATE, metadata);
            return metadata;
        };
        get = function(it) {
            return has(it, STATE) ? it[STATE] : {
            };
        };
        has$1 = function(it) {
            return has(it, STATE);
        };
    }
    var internalState = {
        set: set1,
        get: get,
        has: has$1,
        enforce: enforce,
        getterFor: getterFor
    };
    var $forEach = arrayIteration.forEach;
    var HIDDEN = sharedKey('hidden');
    var SYMBOL = 'Symbol';
    var PROTOTYPE$1 = 'prototype';
    var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
    var setInternalState = internalState.set;
    var getInternalState1 = internalState.getterFor(SYMBOL);
    var ObjectPrototype = Object[PROTOTYPE$1];
    var $Symbol1 = global$1.Symbol;
    var $stringify = getBuiltIn('JSON', 'stringify');
    var nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
    var nativeDefineProperty$1 = objectDefineProperty.f;
    var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;
    var nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;
    var AllSymbols = shared('symbols');
    var ObjectPrototypeSymbols = shared('op-symbols');
    var StringToSymbolRegistry = shared('string-to-symbol-registry');
    var SymbolToStringRegistry = shared('symbol-to-string-registry');
    var WellKnownSymbolsStore$1 = shared('wks');
    var QObject = global$1.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
    var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
    var setSymbolDescriptor = descriptors && fails(function() {
        return objectCreate(nativeDefineProperty$1({
        }, 'a', {
            get: function() {
                return nativeDefineProperty$1(this, 'a', {
                    value: 7
                }).a;
            }
        })).a != 7;
    }) ? function(O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$2(ObjectPrototype, P);
        if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
        nativeDefineProperty$1(O, P, Attributes);
        if (ObjectPrototypeDescriptor && O !== ObjectPrototype) nativeDefineProperty$1(ObjectPrototype, P, ObjectPrototypeDescriptor);
    } : nativeDefineProperty$1;
    var wrap1 = function(tag, description) {
        var symbol = AllSymbols[tag] = objectCreate($Symbol1[PROTOTYPE$1]);
        setInternalState(symbol, {
            type: SYMBOL,
            tag: tag,
            description: description
        });
        if (!descriptors) symbol.description = description;
        return symbol;
    };
    var isSymbol = useSymbolAsUid ? function(it) {
        return typeof it == 'symbol';
    } : function(it) {
        return Object(it) instanceof $Symbol1;
    };
    var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject(O);
        var key = toPrimitive(P, true);
        anObject(Attributes);
        if (has(AllSymbols, key)) {
            if (!Attributes.enumerable) {
                if (!has(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor(1, {
                }));
                O[HIDDEN][key] = true;
            } else {
                if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
                Attributes = objectCreate(Attributes, {
                    enumerable: createPropertyDescriptor(0, false)
                });
            }
            return setSymbolDescriptor(O, key, Attributes);
        }
        return nativeDefineProperty$1(O, key, Attributes);
    };
    var $defineProperties = function defineProperties(O, Properties) {
        anObject(O);
        var properties = toIndexedObject(Properties);
        var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
        $forEach(keys, function(key) {
            if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
        });
        return O;
    };
    var $create = function create(O, Properties) {
        return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
    };
    var $propertyIsEnumerable = function propertyIsEnumerable(V) {
        var P = toPrimitive(V, true);
        var enumerable = nativePropertyIsEnumerable$1.call(this, P);
        if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
        return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject(O);
        var key = toPrimitive(P, true);
        if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
        var descriptor = nativeGetOwnPropertyDescriptor$2(it, key);
        if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) descriptor.enumerable = true;
        return descriptor;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names = nativeGetOwnPropertyNames$1(toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
            if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
        });
        return result;
    };
    var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
        var names = nativeGetOwnPropertyNames$1(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
            if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) result.push(AllSymbols[key]);
        });
        return result;
    }; // `Symbol` constructor
    // https://tc39.github.io/ecma262/#sec-symbol-constructor
    if (!nativeSymbol) {
        $Symbol1 = function Symbol() {
            if (this instanceof $Symbol1) throw TypeError('Symbol is not a constructor');
            var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
            var tag = uid(description);
            var setter = function(value) {
                if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
                if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
            };
            if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
                configurable: true,
                set: setter
            });
            return wrap1(tag, description);
        };
        redefine($Symbol1[PROTOTYPE$1], 'toString', function toString() {
            return getInternalState1(this).tag;
        });
        redefine($Symbol1, 'withoutSetter', function(description) {
            return wrap1(uid(description), description);
        });
        objectPropertyIsEnumerable.f = $propertyIsEnumerable;
        objectDefineProperty.f = $defineProperty;
        objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
        objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;
        wellKnownSymbolWrapped.f = function(name) {
            return wrap1(wellKnownSymbol(name), name);
        };
        if (descriptors) // https://github.com/tc39/proposal-Symbol-description
        nativeDefineProperty$1($Symbol1[PROTOTYPE$1], 'description', {
            configurable: true,
            get: function description() {
                return getInternalState1(this).description;
            }
        });
    }
    _export({
        global: true,
        wrap: true,
        forced: !nativeSymbol,
        sham: !nativeSymbol
    }, {
        Symbol: $Symbol1
    });
    $forEach(objectKeys(WellKnownSymbolsStore$1), function(name) {
        defineWellKnownSymbol(name);
    });
    _export({
        target: SYMBOL,
        stat: true,
        forced: !nativeSymbol
    }, {
        // `Symbol.for` method
        // https://tc39.github.io/ecma262/#sec-symbol.for
        'for': function(key) {
            var string = String(key);
            if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
            var symbol = $Symbol1(string);
            StringToSymbolRegistry[string] = symbol;
            SymbolToStringRegistry[symbol] = string;
            return symbol;
        },
        // `Symbol.keyFor` method
        // https://tc39.github.io/ecma262/#sec-symbol.keyfor
        keyFor: function keyFor(sym) {
            if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
            if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
        },
        useSetter: function() {
            USE_SETTER = true;
        },
        useSimple: function() {
            USE_SETTER = false;
        }
    });
    _export({
        target: 'Object',
        stat: true,
        forced: !nativeSymbol,
        sham: !descriptors
    }, {
        // `Object.create` method
        // https://tc39.github.io/ecma262/#sec-object.create
        create: $create,
        // `Object.defineProperty` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperty
        defineProperty: $defineProperty,
        // `Object.defineProperties` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperties
        defineProperties: $defineProperties,
        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });
    _export({
        target: 'Object',
        stat: true,
        forced: !nativeSymbol
    }, {
        // `Object.getOwnPropertyNames` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
        getOwnPropertyNames: $getOwnPropertyNames,
        // `Object.getOwnPropertySymbols` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
        getOwnPropertySymbols: $getOwnPropertySymbols
    }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
    // https://bugs.chromium.org/p/v8/issues/detail?id=3443
    _export({
        target: 'Object',
        stat: true,
        forced: fails(function() {
            objectGetOwnPropertySymbols.f(1);
        })
    }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
            return objectGetOwnPropertySymbols.f(toObject(it));
        }
    }); // `JSON.stringify` method behavior with symbols
    // https://tc39.github.io/ecma262/#sec-json.stringify
    if ($stringify) {
        var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function() {
            var symbol = $Symbol1(); // MS Edge converts symbol values to JSON as {}
            return $stringify([
                symbol
            ]) != '[null]' // WebKit converts symbol values to JSON as null
             || $stringify({
                a: symbol
            }) != '{}' // V8 throws on boxed symbols
             || $stringify(Object(symbol)) != '{}';
        });
        _export({
            target: 'JSON',
            stat: true,
            forced: FORCED_JSON_STRINGIFY
        }, {
            // eslint-disable-next-line no-unused-vars
            stringify: function stringify(it, replacer, space) {
                var args = [
                    it
                ];
                var index = 1;
                var $replacer;
                while(arguments.length > index)args.push(arguments[index++]);
                $replacer = replacer;
                if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
                if (!isArray(replacer)) replacer = function(key, value) {
                    if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
                    if (!isSymbol(value)) return value;
                };
                args[1] = replacer;
                return $stringify.apply(null, args);
            }
        });
    } // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
    if (!$Symbol1[PROTOTYPE$1][TO_PRIMITIVE]) createNonEnumerableProperty($Symbol1[PROTOTYPE$1], TO_PRIMITIVE, $Symbol1[PROTOTYPE$1].valueOf);
     // `Symbol.prototype[@@toStringTag]` property
    // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
    setToStringTag($Symbol1, SYMBOL);
    hiddenKeys[HIDDEN] = true;
    var getOwnPropertySymbols1 = path.Object.getOwnPropertySymbols;
    var getOwnPropertySymbols$1 = getOwnPropertySymbols1;
    var getOwnPropertySymbols$2 = getOwnPropertySymbols$1;
    var iterators = {
    };
    var correctPrototypeGetter = !fails(function() {
        function F() {
        /* empty */ }
        F.prototype.constructor = null;
        return Object.getPrototypeOf(new F()) !== F.prototype;
    });
    var IE_PROTO$1 = sharedKey('IE_PROTO');
    var ObjectPrototype$1 = Object.prototype; // `Object.getPrototypeOf` method
    // https://tc39.github.io/ecma262/#sec-object.getprototypeof
    var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function(O) {
        O = toObject(O);
        if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];
        if (typeof O.constructor == 'function' && O instanceof O.constructor) return O.constructor.prototype;
        return O instanceof Object ? ObjectPrototype$1 : null;
    };
    var ITERATOR = wellKnownSymbol('iterator');
    var BUGGY_SAFARI_ITERATORS = false;
    // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
    var IteratorPrototype1, PrototypeOfArrayIteratorPrototype, arrayIterator;
    if ([].keys) {
        arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`
        if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
        else {
            PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype1 = PrototypeOfArrayIteratorPrototype;
        }
    }
    if (IteratorPrototype1 == undefined) IteratorPrototype1 = {
    }; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
    var iteratorsCore = {
        IteratorPrototype: IteratorPrototype1,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
    };
    var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
    var returnThis = function() {
        return this;
    };
    var createIteratorConstructor = function(IteratorConstructor, NAME, next) {
        var TO_STRING_TAG = NAME + ' Iterator';
        IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, {
            next: createPropertyDescriptor(1, next)
        });
        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
        iterators[TO_STRING_TAG] = returnThis;
        return IteratorConstructor;
    };
    var aPossiblePrototype = function(it) {
        if (!isObject(it) && it !== null) throw TypeError("Can't set " + String(it) + ' as a prototype');
        return it;
    };
    // https://tc39.github.io/ecma262/#sec-object.setprototypeof
    // Works with __proto__ only. Old v8 can't work with null proto objects.
    /* eslint-disable no-proto */ var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {
    } ? function() {
        var CORRECT_SETTER = false;
        var test = {
        };
        var setter;
        try {
            setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
            setter.call(test, []);
            CORRECT_SETTER = test instanceof Array;
        } catch (error) {
        /* empty */ }
        return function setPrototypeOf(O, proto) {
            anObject(O);
            aPossiblePrototype(proto);
            if (CORRECT_SETTER) setter.call(O, proto);
            else O.__proto__ = proto;
            return O;
        };
    }() : undefined);
    var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR$1 = wellKnownSymbol('iterator');
    var KEYS = 'keys';
    var VALUES = 'values';
    var ENTRIES1 = 'entries';
    var returnThis$1 = function() {
        return this;
    };
    var defineIterator = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);
        var getIterationMethod = function(KIND) {
            if (KIND === DEFAULT && defaultIterator) return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
            switch(KIND){
                case KEYS:
                    return function keys() {
                        return new IteratorConstructor(this, KIND);
                    };
                case VALUES:
                    return function values() {
                        return new IteratorConstructor(this, KIND);
                    };
                case ENTRIES1:
                    return function entries() {
                        return new IteratorConstructor(this, KIND);
                    };
            }
            return function() {
                return new IteratorConstructor(this);
            };
        };
        var TO_STRING_TAG = NAME + ' Iterator';
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR$1] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY; // fix native
        if (anyNativeIterator) {
            CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
            if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
                setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                iterators[TO_STRING_TAG] = returnThis$1;
            }
        } // fix Array#{values, @@iterator}.name in V8 / FF
        if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
                return nativeIterator.call(this);
            };
        } // define iterator
        if (FORCED && IterablePrototype[ITERATOR$1] !== defaultIterator) createNonEnumerableProperty(IterablePrototype, ITERATOR$1, defaultIterator);
        iterators[NAME] = defaultIterator; // export additional methods
        if (DEFAULT) {
            methods = {
                values: getIterationMethod(VALUES),
                keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                entries: getIterationMethod(ENTRIES1)
            };
            if (FORCED) {
                for(KEY in methods)if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) redefine(IterablePrototype, KEY, methods[KEY]);
            } else _export({
                target: NAME,
                proto: true,
                forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME
            }, methods);
        }
        return methods;
    };
    var ARRAY_ITERATOR = 'Array Iterator';
    var setInternalState$1 = internalState.set;
    var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.entries
    // `Array.prototype.keys` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.keys
    // `Array.prototype.values` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.values
    // `Array.prototype[@@iterator]` method
    // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
    // `CreateArrayIterator` internal method
    // https://tc39.github.io/ecma262/#sec-createarrayiterator
    var es_array_iterator = defineIterator(Array, 'Array', function(iterated, kind) {
        setInternalState$1(this, {
            type: ARRAY_ITERATOR,
            target: toIndexedObject(iterated),
            // target
            index: 0,
            // next index
            kind: kind // kind
        }); // `%ArrayIteratorPrototype%.next` method
    // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
    }, function() {
        var state = getInternalState$1(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;
        if (!target || index >= target.length) {
            state.target = undefined;
            return {
                value: undefined,
                done: true
            };
        }
        if (kind == 'keys') return {
            value: index,
            done: false
        };
        if (kind == 'values') return {
            value: target[index],
            done: false
        };
        return {
            value: [
                index,
                target[index]
            ],
            done: false
        };
    }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
    // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
    // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
    iterators.Arguments = iterators.Array; // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
    // iterable DOM collections
    // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
    var domIterables = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    };
    var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
    for(var COLLECTION_NAME in domIterables){
        var Collection = global$1[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype;
        if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG$3) createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME);
        iterators[COLLECTION_NAME] = iterators.Array;
    }
    var createMethod$3 = function(CONVERT_TO_STRING) {
        return function($this, pos) {
            var S = String(requireObjectCoercible($this));
            var position = toInteger(pos);
            var size = S.length;
            var first, second;
            if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
            first = S.charCodeAt(position);
            return first < 55296 || first > 56319 || position + 1 === size || (second = S.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
        };
    };
    var stringMultibyte = {
        // `String.prototype.codePointAt` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod$3(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod$3(true)
    };
    var charAt = stringMultibyte.charAt;
    var STRING_ITERATOR = 'String Iterator';
    var setInternalState$2 = internalState.set;
    var getInternalState$2 = internalState.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
    // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
    defineIterator(String, 'String', function(iterated) {
        setInternalState$2(this, {
            type: STRING_ITERATOR,
            string: String(iterated),
            index: 0
        }); // `%StringIteratorPrototype%.next` method
    // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
    }, function next() {
        var state = getInternalState$2(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return {
            value: undefined,
            done: true
        };
        point = charAt(string, index);
        state.index += point.length;
        return {
            value: point,
            done: false
        };
    });
    var ITERATOR$2 = wellKnownSymbol('iterator');
    var getIteratorMethod = function(it) {
        if (it != undefined) return it[ITERATOR$2] || it['@@iterator'] || iterators[classof(it)];
    };
    var getIterator = function(it) {
        var iteratorMethod = getIteratorMethod(it);
        if (typeof iteratorMethod != 'function') throw TypeError(String(it) + ' is not iterable');
        return anObject(iteratorMethod.call(it));
    };
    var getIterator_1 = getIterator;
    var getIterator$1 = getIterator_1;
    var getIteratorMethod_1 = getIteratorMethod;
    var getIteratorMethod$1 = getIteratorMethod_1;
    var iteratorClose = function(iterator) {
        var returnMethod = iterator['return'];
        if (returnMethod !== undefined) return anObject(returnMethod.call(iterator)).value;
    };
    var callWithSafeIterationClosing = function(iterator, fn, value, ENTRIES) {
        try {
            return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
        } catch (error) {
            iteratorClose(iterator);
            throw error;
        }
    };
    var ITERATOR$3 = wellKnownSymbol('iterator');
    var ArrayPrototype$4 = Array.prototype; // check on default Array iterator
    var isArrayIteratorMethod = function(it) {
        return it !== undefined && (iterators.Array === it || ArrayPrototype$4[ITERATOR$3] === it);
    };
    // https://tc39.github.io/ecma262/#sec-array.from
    var arrayFrom = function from(arrayLike) {
        var O = toObject(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iteratorMethod = getIteratorMethod(O);
        var index = 0;
        var length, result, step, iterator, next, value;
        if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2); // if the target is not iterable or it's an array with the default iterator - use a simple case
        if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
            iterator = iteratorMethod.call(O);
            next = iterator.next;
            result = new C();
            for(; !(step = next.call(iterator)).done; index++){
                value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [
                    step.value,
                    index
                ], true) : step.value;
                createProperty(result, index, value);
            }
        } else {
            length = toLength(O.length);
            result = new C(length);
            for(; length > index; index++){
                value = mapping ? mapfn(O[index], index) : O[index];
                createProperty(result, index, value);
            }
        }
        result.length = index;
        return result;
    };
    var ITERATOR$4 = wellKnownSymbol('iterator');
    var SAFE_CLOSING = false;
    try {
        var called = 0;
        var iteratorWithReturn = {
            next: function() {
                return {
                    done: !!called++
                };
            },
            'return': function() {
                SAFE_CLOSING = true;
            }
        };
        iteratorWithReturn[ITERATOR$4] = function() {
            return this;
        }; // eslint-disable-next-line no-throw-literal
        Array.from(iteratorWithReturn, function() {
            throw 2;
        });
    } catch (error1) {
    /* empty */ }
    var checkCorrectnessOfIteration = function(exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
        var ITERATION_SUPPORT = false;
        try {
            var object = {
            };
            object[ITERATOR$4] = function() {
                return {
                    next: function() {
                        return {
                            done: ITERATION_SUPPORT = true
                        };
                    }
                };
            };
            exec(object);
        } catch (error) {
        /* empty */ }
        return ITERATION_SUPPORT;
    };
    var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
        Array.from(iterable);
    }); // `Array.from` method
    // https://tc39.github.io/ecma262/#sec-array.from
    _export({
        target: 'Array',
        stat: true,
        forced: INCORRECT_ITERATION
    }, {
        from: arrayFrom
    });
    var from1 = path.Array.from;
    var from$1 = from1;
    var from$2 = from$1;
    // https://tc39.github.io/ecma262/#sec-array.prototype.fill
    var arrayFill = function fill(value) {
        var O = toObject(this);
        var length = toLength(O.length);
        var argumentsLength = arguments.length;
        var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
        var end = argumentsLength > 2 ? arguments[2] : undefined;
        var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
        while(endPos > index)O[index++] = value;
        return O;
    };
    // https://tc39.github.io/ecma262/#sec-array.prototype.fill
    _export({
        target: 'Array',
        proto: true
    }, {
        fill: arrayFill
    }); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
    var fill = entryVirtual('Array').fill;
    var slice$1 = [].slice;
    var MSIE = /MSIE .\./.test(engineUserAgent); // <- dirty ie9- check
    var wrap$1 = function(scheduler) {
        return function(handler, timeout) {
            var boundArgs = arguments.length > 2;
            var args = boundArgs ? slice$1.call(arguments, 2) : undefined;
            return scheduler(boundArgs ? function() {
                // eslint-disable-next-line no-new-func
                (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
            } : handler, timeout);
        };
    }; // ie9- setTimeout & setInterval additional parameters fix
    // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
    _export({
        global: true,
        bind: true,
        forced: MSIE
    }, {
        // `setTimeout` method
        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
        setTimeout: wrap$1(global$1.setTimeout),
        // `setInterval` method
        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
        setInterval: wrap$1(global$1.setInterval)
    });
    var setTimeout$1 = path.setTimeout;
    var setTimeout$2 = setTimeout$1;
    var $stringify$1 = getBuiltIn('JSON', 'stringify');
    var re = /[\uD800-\uDFFF]/g;
    var low = /^[\uD800-\uDBFF]$/;
    var hi = /^[\uDC00-\uDFFF]$/;
    var fix = function(match, offset, string) {
        var prev = string.charAt(offset - 1);
        var next = string.charAt(offset + 1);
        if (low.test(match) && !hi.test(next) || hi.test(match) && !low.test(prev)) return '\\u' + match.charCodeAt(0).toString(16);
        return match;
    };
    var FORCED$1 = fails(function() {
        return $stringify$1('\uDF06\uD834') !== '"\\udf06\\ud834"' || $stringify$1('\uDEAD') !== '"\\udead"';
    });
    if ($stringify$1) // https://github.com/tc39/proposal-well-formed-stringify
    _export({
        target: 'JSON',
        stat: true,
        forced: FORCED$1
    }, {
        // eslint-disable-next-line no-unused-vars
        stringify: function stringify(it, replacer, space) {
            var result = $stringify$1.apply(null, arguments);
            return typeof result == 'string' ? result.replace(re, fix) : result;
        }
    });
    if (!path.JSON) path.JSON = {
        stringify: JSON.stringify
    }; // eslint-disable-next-line no-unused-vars
    var stringify = function stringify(it, replacer, space) {
        return path.JSON.stringify.apply(null, arguments);
    };
    var stringify$1 = stringify;
    var stringify$2 = stringify$1;
    // https://tc39.github.io/ecma262/#sec-object.create
    _export({
        target: 'Object',
        stat: true,
        sham: !descriptors
    }, {
        create: objectCreate
    });
    var Object$1 = path.Object;
    var create1 = function create(P, D) {
        return Object$1.create(P, D);
    };
    var create$1 = create1;
    var create$2 = create$1;
    function _defineProperty(obj, key, value) {
        if (key in obj) defineProperty$2(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        else obj[key] = value;
        return obj;
    }
    var defineProperty$7 = _defineProperty;
    // a string of all valid unicode whitespaces
    // eslint-disable-next-line max-len
    var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
    var whitespace = '[' + whitespaces + ']';
    var ltrim = RegExp('^' + whitespace + whitespace + '*');
    var rtrim = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
    var createMethod$4 = function(TYPE) {
        return function($this) {
            var string = String(requireObjectCoercible($this));
            if (TYPE & 1) string = string.replace(ltrim, '');
            if (TYPE & 2) string = string.replace(rtrim, '');
            return string;
        };
    };
    var stringTrim = {
        // `String.prototype.{ trimLeft, trimStart }` methods
        // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
        start: createMethod$4(1),
        // `String.prototype.{ trimRight, trimEnd }` methods
        // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
        end: createMethod$4(2),
        // `String.prototype.trim` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.trim
        trim: createMethod$4(3)
    };
    var non = '\u200B\u0085\u180E'; // check that a method works with the correct list
    // of whitespaces and has a correct name
    var stringTrimForced = function(METHOD_NAME) {
        return fails(function() {
            return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
        });
    };
    var $trim = stringTrim.trim; // `String.prototype.trim` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.trim
    _export({
        target: 'String',
        proto: true,
        forced: stringTrimForced('trim')
    }, {
        trim: function trim() {
            return $trim(this);
        }
    });
    var trim = entryVirtual('String').trim;
    var $indexOf = arrayIncludes.indexOf;
    var nativeIndexOf = [].indexOf;
    var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [
        1
    ].indexOf(1, -0) < 0;
    var STRICT_METHOD$1 = arrayMethodIsStrict('indexOf');
    var USES_TO_LENGTH$3 = arrayMethodUsesToLength('indexOf', {
        ACCESSORS: true,
        1: 0
    }); // `Array.prototype.indexOf` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
    _export({
        target: 'Array',
        proto: true,
        forced: NEGATIVE_ZERO || !STRICT_METHOD$1 || !USES_TO_LENGTH$3
    }, {
        indexOf: function indexOf(searchElement) {
            return NEGATIVE_ZERO // convert -0 to +0
             ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var indexOf$1 = entryVirtual('Array').indexOf;
    var trim$1 = stringTrim.trim;
    var $parseInt = global$1.parseInt;
    var hex = /^[+-]?0[Xx]/;
    var FORCED$2 = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22; // `parseInt` method
    // https://tc39.github.io/ecma262/#sec-parseint-string-radix
    var numberParseInt = FORCED$2 ? function parseInt(string, radix) {
        var S = trim$1(String(string));
        return $parseInt(S, radix >>> 0 || (hex.test(S) ? 16 : 10));
    } : $parseInt;
    // https://tc39.github.io/ecma262/#sec-parseint-string-radix
    _export({
        global: true,
        forced: parseInt != numberParseInt
    }, {
        parseInt: numberParseInt
    });
    var propertyIsEnumerable1 = objectPropertyIsEnumerable.f; // `Object.{ entries, values }` methods implementation
    var createMethod$5 = function(TO_ENTRIES) {
        return function(it) {
            var O = toIndexedObject(it);
            var keys = objectKeys(O);
            var length = keys.length;
            var i = 0;
            var result = [];
            var key;
            while(length > i){
                key = keys[i++];
                if (!descriptors || propertyIsEnumerable1.call(O, key)) result.push(TO_ENTRIES ? [
                    key,
                    O[key]
                ] : O[key]);
            }
            return result;
        };
    };
    var objectToArray = {
        // `Object.entries` method
        // https://tc39.github.io/ecma262/#sec-object.entries
        entries: createMethod$5(true),
        // `Object.values` method
        // https://tc39.github.io/ecma262/#sec-object.values
        values: createMethod$5(false)
    };
    var $values = objectToArray.values; // `Object.values` method
    // https://tc39.github.io/ecma262/#sec-object.values
    _export({
        target: 'Object',
        stat: true
    }, {
        values: function values(O) {
            return $values(O);
        }
    });
    var values1 = path.Object.values;
    var FAILS_ON_PRIMITIVES$1 = fails(function() {
        objectGetPrototypeOf(1);
    }); // `Object.getPrototypeOf` method
    // https://tc39.github.io/ecma262/#sec-object.getprototypeof
    _export({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES$1,
        sham: !correctPrototypeGetter
    }, {
        getPrototypeOf: function getPrototypeOf(it) {
            return objectGetPrototypeOf(toObject(it));
        }
    });
    var getPrototypeOf = path.Object.getPrototypeOf;
    var $includes = arrayIncludes.includes;
    var USES_TO_LENGTH$4 = arrayMethodUsesToLength('indexOf', {
        ACCESSORS: true,
        1: 0
    }); // `Array.prototype.includes` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.includes
    _export({
        target: 'Array',
        proto: true,
        forced: !USES_TO_LENGTH$4
    }, {
        includes: function includes(el) {
            return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
        }
    }); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
    var includes = entryVirtual('Array').includes;
    var MATCH = wellKnownSymbol('match'); // `IsRegExp` abstract operation
    // https://tc39.github.io/ecma262/#sec-isregexp
    var isRegexp = function(it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
    };
    var notARegexp = function(it) {
        if (isRegexp(it)) throw TypeError("The method doesn't accept regular expressions");
        return it;
    };
    var MATCH$1 = wellKnownSymbol('match');
    var correctIsRegexpLogic = function(METHOD_NAME) {
        var regexp = /./;
        try {
            '/./'[METHOD_NAME](regexp);
        } catch (error1) {
            try {
                regexp[MATCH$1] = false;
                return '/./'[METHOD_NAME](regexp);
            } catch (error2) {
            /* empty */ }
        }
        return false;
    };
    // https://tc39.github.io/ecma262/#sec-string.prototype.includes
    _export({
        target: 'String',
        proto: true,
        forced: !correctIsRegexpLogic('includes')
    }, {
        includes: function includes(searchString) {
            return !!~String(requireObjectCoercible(this)).indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var includes$1 = entryVirtual('String').includes;
    var nativeAssign = Object.assign;
    var defineProperty$8 = Object.defineProperty; // `Object.assign` method
    // https://tc39.github.io/ecma262/#sec-object.assign
    var objectAssign = !nativeAssign || fails(function() {
        // should have correct order of operations (Edge bug)
        if (descriptors && nativeAssign({
            b: 1
        }, nativeAssign(defineProperty$8({
        }, 'a', {
            enumerable: true,
            get: function() {
                defineProperty$8(this, 'b', {
                    value: 3,
                    enumerable: false
                });
            }
        }), {
            b: 2
        })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)
        var A = {
        };
        var B = {
        }; // eslint-disable-next-line no-undef
        var symbol = Symbol();
        var alphabet = 'abcdefghijklmnopqrst';
        A[symbol] = 7;
        alphabet.split('').forEach(function(chr) {
            B[chr] = chr;
        });
        return nativeAssign({
        }, A)[symbol] != 7 || objectKeys(nativeAssign({
        }, B)).join('') != alphabet;
    }) ? function assign(target, source) {
        // eslint-disable-line no-unused-vars
        var T = toObject(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
        var propertyIsEnumerable = objectPropertyIsEnumerable.f;
        while(argumentsLength > index){
            var S = indexedObject(arguments[index++]);
            var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
            var length = keys.length;
            var j = 0;
            var key;
            while(length > j){
                key = keys[j++];
                if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
            }
        }
        return T;
    } : nativeAssign;
    // https://tc39.github.io/ecma262/#sec-object.assign
    _export({
        target: 'Object',
        stat: true,
        forced: Object.assign !== objectAssign
    }, {
        assign: objectAssign
    });
    var assign = path.Object.assign;
    var assign$1 = assign;
    var assign$2 = assign$1;
    var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('splice');
    var USES_TO_LENGTH$5 = arrayMethodUsesToLength('splice', {
        ACCESSORS: true,
        0: 0,
        1: 2
    });
    var max$1 = Math.max;
    var min$2 = Math.min;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded'; // `Array.prototype.splice` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.splice
    // with adding support of @@species
    _export({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$2 || !USES_TO_LENGTH$5
    }, {
        splice: function splice(start, deleteCount) {
            var O = toObject(this);
            var len = toLength(O.length);
            var actualStart = toAbsoluteIndex(start, len);
            var argumentsLength = arguments.length;
            var insertCount, actualDeleteCount, A, k, from, to;
            if (argumentsLength === 0) insertCount = actualDeleteCount = 0;
            else if (argumentsLength === 1) {
                insertCount = 0;
                actualDeleteCount = len - actualStart;
            } else {
                insertCount = argumentsLength - 2;
                actualDeleteCount = min$2(max$1(toInteger(deleteCount), 0), len - actualStart);
            }
            if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
            A = arraySpeciesCreate(O, actualDeleteCount);
            for(k = 0; k < actualDeleteCount; k++){
                from = actualStart + k;
                if (from in O) createProperty(A, k, O[from]);
            }
            A.length = actualDeleteCount;
            if (insertCount < actualDeleteCount) {
                for(k = actualStart; k < len - actualDeleteCount; k++){
                    from = k + actualDeleteCount;
                    to = k + insertCount;
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                }
                for(k = len; k > len - actualDeleteCount + insertCount; k--)delete O[k - 1];
            } else if (insertCount > actualDeleteCount) for(k = len - actualDeleteCount; k > actualStart; k--){
                from = k + actualDeleteCount - 1;
                to = k + insertCount - 1;
                if (from in O) O[to] = O[from];
                else delete O[to];
            }
            for(k = 0; k < insertCount; k++)O[k + actualStart] = arguments[k + 2];
            O.length = len - actualDeleteCount + insertCount;
            return A;
        }
    });
    var splice = entryVirtual('Array').splice;
    var ArrayPrototype$5 = Array.prototype;
    var splice_1 = function(it) {
        var own = it.splice;
        return it === ArrayPrototype$5 || it instanceof Array && own === ArrayPrototype$5.splice ? splice : own;
    };
    var splice$1 = splice_1;
    var splice$2 = splice$1;
    var nativeReverse = [].reverse;
    var test$1 = [
        1,
        2
    ]; // `Array.prototype.reverse` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.reverse
    // fix for Safari 12.0 bug
    // https://bugs.webkit.org/show_bug.cgi?id=188794
    _export({
        target: 'Array',
        proto: true,
        forced: String(test$1) === String(test$1.reverse())
    }, {
        reverse: function reverse() {
            // eslint-disable-next-line no-self-assign
            if (isArray(this)) this.length = this.length;
            return nativeReverse.call(this);
        }
    });
    var reverse = entryVirtual('Array').reverse;
    var ArrayPrototype$6 = Array.prototype;
    var reverse_1 = function(it) {
        var own = it.reverse;
        return it === ArrayPrototype$6 || it instanceof Array && own === ArrayPrototype$6.reverse ? reverse : own;
    };
    var reverse$1 = reverse_1;
    var reverse$2 = reverse$1;
    var $forEach$1 = arrayIteration.forEach;
    var STRICT_METHOD$2 = arrayMethodIsStrict('forEach');
    var USES_TO_LENGTH$6 = arrayMethodUsesToLength('forEach'); // `Array.prototype.forEach` method implementation
    // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
    var arrayForEach = !STRICT_METHOD$2 || !USES_TO_LENGTH$6 ? function forEach(callbackfn) {
        return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    } : [].forEach;
    // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
    _export({
        target: 'Array',
        proto: true,
        forced: [].forEach != arrayForEach
    }, {
        forEach: arrayForEach
    });
    var forEach = entryVirtual('Array').forEach;
    var forEach$1 = forEach;
    var ArrayPrototype$7 = Array.prototype;
    var DOMIterables = {
        DOMTokenList: true,
        NodeList: true
    };
    var forEach_1 = function(it) {
        var own = it.forEach;
        return it === ArrayPrototype$7 || it instanceof Array && own === ArrayPrototype$7.forEach // eslint-disable-next-line no-prototype-builtins
         || DOMIterables.hasOwnProperty(classof(it)) ? forEach$1 : own;
    };
    var forEach$2 = forEach_1;
    // https://tc39.github.io/ecma262/#sec-array.isarray
    _export({
        target: 'Array',
        stat: true
    }, {
        isArray: isArray
    });
    var isArray$1 = path.Array.isArray;
    var isArray$2 = isArray$1;
    var isArray$3 = isArray$2;
    function _arrayWithHoles(arr) {
        if (isArray$3(arr)) return arr;
    }
    var arrayWithHoles = _arrayWithHoles;
    var ITERATOR$5 = wellKnownSymbol('iterator');
    var isIterable = function(it) {
        var O = Object(it);
        return O[ITERATOR$5] !== undefined || '@@iterator' in O // eslint-disable-next-line no-prototype-builtins
         || iterators.hasOwnProperty(classof(O));
    };
    var isIterable_1 = isIterable;
    var isIterable$1 = isIterable_1;
    var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
    var MAX_SAFE_INTEGER$1 = 9007199254740991;
    var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded'; // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/679
    var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function() {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
    });
    var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');
    var isConcatSpreadable = function(O) {
        if (!isObject(O)) return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== undefined ? !!spreadable : isArray(O);
    };
    var FORCED$3 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.concat
    // with adding support of @@isConcatSpreadable and @@species
    _export({
        target: 'Array',
        proto: true,
        forced: FORCED$3
    }, {
        concat: function concat(arg) {
            // eslint-disable-line no-unused-vars
            var O = toObject(this);
            var A = arraySpeciesCreate(O, 0);
            var n = 0;
            var i, k, length, len, E;
            for(i = -1, length = arguments.length; i < length; i++){
                E = i === -1 ? O : arguments[i];
                if (isConcatSpreadable(E)) {
                    len = toLength(E.length);
                    if (n + len > MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    for(k = 0; k < len; k++, n++)if (k in E) createProperty(A, n, E[k]);
                } else {
                    if (n >= MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    createProperty(A, n++, E);
                }
            }
            A.length = n;
            return A;
        }
    });
    // https://tc39.github.io/ecma262/#sec-symbol.asynciterator
    defineWellKnownSymbol('asyncIterator');
    // https://tc39.github.io/ecma262/#sec-symbol.hasinstance
    defineWellKnownSymbol('hasInstance');
    // https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
    defineWellKnownSymbol('isConcatSpreadable');
    // https://tc39.github.io/ecma262/#sec-symbol.iterator
    defineWellKnownSymbol('iterator');
    // https://tc39.github.io/ecma262/#sec-symbol.match
    defineWellKnownSymbol('match');
    defineWellKnownSymbol('matchAll');
    // https://tc39.github.io/ecma262/#sec-symbol.replace
    defineWellKnownSymbol('replace');
    // https://tc39.github.io/ecma262/#sec-symbol.search
    defineWellKnownSymbol('search');
    // https://tc39.github.io/ecma262/#sec-symbol.species
    defineWellKnownSymbol('species');
    // https://tc39.github.io/ecma262/#sec-symbol.split
    defineWellKnownSymbol('split');
    // https://tc39.github.io/ecma262/#sec-symbol.toprimitive
    defineWellKnownSymbol('toPrimitive');
    // https://tc39.github.io/ecma262/#sec-symbol.tostringtag
    defineWellKnownSymbol('toStringTag');
    // https://tc39.github.io/ecma262/#sec-symbol.unscopables
    defineWellKnownSymbol('unscopables');
    // https://tc39.github.io/ecma262/#sec-json-@@tostringtag
    setToStringTag(global$1.JSON, 'JSON', true);
    var symbol1 = path.Symbol;
    // https://github.com/tc39/proposal-using-statement
    defineWellKnownSymbol('asyncDispose');
    // https://github.com/tc39/proposal-using-statement
    defineWellKnownSymbol('dispose');
    // https://github.com/tc39/proposal-observable
    defineWellKnownSymbol('observable');
    // https://github.com/tc39/proposal-pattern-matching
    defineWellKnownSymbol('patternMatch');
    defineWellKnownSymbol('replaceAll');
    var symbol$1 = symbol1;
    var symbol$2 = symbol$1;
    function _iterableToArrayLimit(arr, i) {
        if (typeof symbol$2 === "undefined" || !isIterable$1(Object(arr))) return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for(var _i = getIterator$1(arr), _s; !(_n = (_s = _i.next()).done); _n = true){
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally{
            try {
                if (!_n && _i["return"] != null) _i["return"]();
            } finally{
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    var iterableToArrayLimit = _iterableToArrayLimit;
    var from$3 = from1;
    var from$4 = from$3;
    var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('slice');
    var USES_TO_LENGTH$7 = arrayMethodUsesToLength('slice', {
        ACCESSORS: true,
        0: 0,
        1: 2
    });
    var SPECIES$2 = wellKnownSymbol('species');
    var nativeSlice = [].slice;
    var max$2 = Math.max; // `Array.prototype.slice` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.slice
    // fallback for not array-like ES3 strings and DOM objects
    _export({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$3 || !USES_TO_LENGTH$7
    }, {
        slice: function slice(start, end) {
            var O = toIndexedObject(this);
            var length = toLength(O.length);
            var k = toAbsoluteIndex(start, length);
            var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
            var Constructor, result, n;
            if (isArray(O)) {
                Constructor = O.constructor; // cross-realm fallback
                if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) Constructor = undefined;
                else if (isObject(Constructor)) {
                    Constructor = Constructor[SPECIES$2];
                    if (Constructor === null) Constructor = undefined;
                }
                if (Constructor === Array || Constructor === undefined) return nativeSlice.call(O, k, fin);
            }
            result = new (Constructor === undefined ? Array : Constructor)(max$2(fin - k, 0));
            for(n = 0; k < fin; k++, n++)if (k in O) createProperty(result, n, O[k]);
            result.length = n;
            return result;
        }
    });
    var slice$2 = entryVirtual('Array').slice;
    var ArrayPrototype$8 = Array.prototype;
    var slice_1 = function(it) {
        var own = it.slice;
        return it === ArrayPrototype$8 || it instanceof Array && own === ArrayPrototype$8.slice ? slice$2 : own;
    };
    var slice$3 = slice_1;
    var slice$4 = slice$3;
    function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    var arrayLikeToArray = _arrayLikeToArray;
    function _unsupportedIterableToArray(o, minLen) {
        var _context;
        if (!o) return;
        if (typeof o === "string") return arrayLikeToArray(o, minLen);
        var n = slice$4(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$4(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
    }
    var unsupportedIterableToArray = _unsupportedIterableToArray;
    function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var nonIterableRest = _nonIterableRest;
    function _slicedToArray(arr, i) {
        return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
    }
    var slicedToArray = _slicedToArray;
    // https://tc39.github.io/ecma262/#sec-date.now
    _export({
        target: 'Date',
        stat: true
    }, {
        now: function now() {
            return new Date().getTime();
        }
    });
    var now = path.Date.now;
    var FAILS_ON_PRIMITIVES$2 = fails(function() {
        objectKeys(1);
    }); // `Object.keys` method
    // https://tc39.github.io/ecma262/#sec-object.keys
    _export({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES$2
    }, {
        keys: function keys(it) {
            return objectKeys(toObject(it));
        }
    });
    var keys$1 = path.Object.keys;
    var keys$2 = keys$1;
    var keys$3 = keys$2;
    var isArray$4 = isArray$1;
    var isArray$5 = isArray$4;
    var iterator1 = wellKnownSymbolWrapped.f('iterator');
    var iterator$1 = iterator1;
    var iterator$2 = iterator$1;
    var _typeof_1 = createCommonjsModule(function(module) {
        function _typeof(obj1) {
            if (typeof symbol$2 === "function" && typeof iterator$2 === "symbol") module.exports = _typeof = function _typeof(obj) {
                return typeof obj;
            };
            else module.exports = _typeof = function _typeof(obj) {
                return obj && typeof symbol$2 === "function" && obj.constructor === symbol$2 && obj !== symbol$2.prototype ? "symbol" : typeof obj;
            };
            return _typeof(obj1);
        }
        module.exports = _typeof;
    });
    // https://tc39.github.io/ecma262/#sec-reflect.ownkeys
    _export({
        target: 'Reflect',
        stat: true
    }, {
        ownKeys: ownKeys
    });
    var ownKeys$1 = path.Reflect.ownKeys;
    var ownKeys$2 = ownKeys$1;
    var ownKeys$3 = ownKeys$2;
    var slice$5 = slice_1;
    var slice$6 = slice$5;
    function _arrayWithoutHoles(arr) {
        if (isArray$3(arr)) return arrayLikeToArray(arr);
    }
    var arrayWithoutHoles = _arrayWithoutHoles;
    function _iterableToArray(iter) {
        if (typeof symbol$2 !== "undefined" && isIterable$1(Object(iter))) return from$4(iter);
    }
    var iterableToArray = _iterableToArray;
    function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var nonIterableSpread = _nonIterableSpread;
    function _toConsumableArray(arr) {
        return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
    }
    var toConsumableArray = _toConsumableArray;
    var concat = entryVirtual('Array').concat;
    var ArrayPrototype$9 = Array.prototype;
    var concat_1 = function(it) {
        var own = it.concat;
        return it === ArrayPrototype$9 || it instanceof Array && own === ArrayPrototype$9.concat ? concat : own;
    };
    var concat$1 = concat_1;
    var concat$2 = concat$1;
    var symbol$3 = symbol1;
    var symbol$4 = symbol$3;
    var componentEmitter = createCommonjsModule(function(module) {
        module.exports = Emitter;
        /**
	   * Initialize a new `Emitter`.
	   *
	   * @api public
	   */ function Emitter(obj) {
            if (obj) return mixin(obj);
        }
        /**
	   * Mixin the emitter properties.
	   *
	   * @param {Object} obj
	   * @return {Object}
	   * @api private
	   */ function mixin(obj) {
            for(var key in Emitter.prototype)obj[key] = Emitter.prototype[key];
            return obj;
        }
        /**
	   * Listen on the given `event` with `fn`.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */ Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
            this._callbacks = this._callbacks || {
            };
            (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
            return this;
        };
        /**
	   * Adds an `event` listener that will be invoked a single
	   * time then automatically removed.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */ Emitter.prototype.once = function(event, fn) {
            function on() {
                this.off(event, on);
                fn.apply(this, arguments);
            }
            on.fn = fn;
            this.on(event, on);
            return this;
        };
        /**
	   * Remove the given callback for `event` or all
	   * registered callbacks.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */ Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
            this._callbacks = this._callbacks || {
            }; // all
            if (0 == arguments.length) {
                this._callbacks = {
                };
                return this;
            } // specific event
            var callbacks = this._callbacks['$' + event];
            if (!callbacks) return this; // remove all handlers
            if (1 == arguments.length) {
                delete this._callbacks['$' + event];
                return this;
            } // remove specific handler
            var cb;
            for(var i = 0; i < callbacks.length; i++){
                cb = callbacks[i];
                if (cb === fn || cb.fn === fn) {
                    callbacks.splice(i, 1);
                    break;
                }
            } // Remove event specific arrays for event types that no
            // one is subscribed for to avoid memory leak.
            if (callbacks.length === 0) delete this._callbacks['$' + event];
            return this;
        };
        /**
	   * Emit `event` with the given args.
	   *
	   * @param {String} event
	   * @param {Mixed} ...
	   * @return {Emitter}
	   */ Emitter.prototype.emit = function(event) {
            this._callbacks = this._callbacks || {
            };
            var args = new Array(arguments.length - 1), callbacks = this._callbacks['$' + event];
            for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
            if (callbacks) {
                callbacks = callbacks.slice(0);
                for(var i = 0, len = callbacks.length; i < len; ++i)callbacks[i].apply(this, args);
            }
            return this;
        };
        /**
	   * Return array of callbacks for `event`.
	   *
	   * @param {String} event
	   * @return {Array}
	   * @api public
	   */ Emitter.prototype.listeners = function(event) {
            this._callbacks = this._callbacks || {
            };
            return this._callbacks['$' + event] || [];
        };
        /**
	   * Check if this emitter has `event` handlers.
	   *
	   * @param {String} event
	   * @return {Boolean}
	   * @api public
	   */ Emitter.prototype.hasListeners = function(event) {
            return !!this.listeners(event).length;
        };
    });
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
	 * http://naver.github.io/egjs
	 *
	 * Forked By Naver egjs
	 * Copyright (c) hammerjs
	 * Licensed under the MIT license */ function _extends() {
        _extends = Object.assign || function(target) {
            for(var i = 1; i < arguments.length; i++){
                var source = arguments[i];
                for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
            }
            return target;
        };
        return _extends.apply(this, arguments);
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }
    function _assertThisInitialized(self) {
        if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self;
    }
    /**
	 * @private
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} target
	 * @param {...Object} objects_to_assign
	 * @returns {Object} target
	 */ var assign$3;
    if (typeof Object.assign !== 'function') assign$3 = function assign(target) {
        if (target === undefined || target === null) throw new TypeError('Cannot convert undefined or null to object');
        var output = Object(target);
        for(var index = 1; index < arguments.length; index++){
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for(var nextKey in source)if (source.hasOwnProperty(nextKey)) output[nextKey] = source[nextKey];
            }
        }
        return output;
    };
    else assign$3 = Object.assign;
    var assign$1$1 = assign$3;
    var VENDOR_PREFIXES = [
        '',
        'webkit',
        'Moz',
        'MS',
        'ms',
        'o'
    ];
    var TEST_ELEMENT = typeof document === "undefined" ? {
        style: {
        }
    } : document.createElement('div');
    var TYPE_FUNCTION = 'function';
    var round = Math.round, abs = Math.abs;
    var now$1 = Date.now;
    /**
	 * @private
	 * get the prefixed property
	 * @param {Object} obj
	 * @param {String} property
	 * @returns {String|Undefined} prefixed
	 */ function prefixed(obj, property) {
        var prefix;
        var prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);
        var i = 0;
        while(i < VENDOR_PREFIXES.length){
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;
            if (prop in obj) return prop;
            i++;
        }
        return undefined;
    }
    /* eslint-disable no-new-func, no-nested-ternary */ var win;
    if (typeof window === "undefined") // window is undefined in node.js
    win = {
    };
    else win = window;
    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
    function getTouchActionProps() {
        if (!NATIVE_TOUCH_ACTION) return false;
        var touchMap = {
        };
        var cssSupports = win.CSS && win.CSS.supports;
        [
            'auto',
            'manipulation',
            'pan-y',
            'pan-x',
            'pan-x pan-y',
            'none'
        ].forEach(function(val) {
            // If css.supports is not supported but there is native touch-action assume it supports
            // all values. This is the case for IE 10 and 11.
            return touchMap[val] = cssSupports ? win.CSS.supports('touch-action', val) : true;
        });
        return touchMap;
    }
    var TOUCH_ACTION_COMPUTE = 'compute';
    var TOUCH_ACTION_AUTO = 'auto';
    var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
    var TOUCH_ACTION_NONE = 'none';
    var TOUCH_ACTION_PAN_X = 'pan-x';
    var TOUCH_ACTION_PAN_Y = 'pan-y';
    var TOUCH_ACTION_MAP = getTouchActionProps();
    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
    var SUPPORT_TOUCH = 'ontouchstart' in win;
    var SUPPORT_POINTER_EVENTS = prefixed(win, 'PointerEvent') !== undefined;
    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
    var INPUT_TYPE_TOUCH = 'touch';
    var INPUT_TYPE_PEN = 'pen';
    var INPUT_TYPE_MOUSE = 'mouse';
    var INPUT_TYPE_KINECT = 'kinect';
    var COMPUTE_INTERVAL = 25;
    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;
    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;
    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
    var PROPS_XY = [
        'x',
        'y'
    ];
    var PROPS_CLIENT_XY = [
        'clientX',
        'clientY'
    ];
    /**
	 * @private
	 * walk objects and arrays
	 * @param {Object} obj
	 * @param {Function} iterator
	 * @param {Object} context
	 */ function each(obj, iterator, context) {
        var i;
        if (!obj) return;
        if (obj.forEach) obj.forEach(iterator, context);
        else if (obj.length !== undefined) {
            i = 0;
            while(i < obj.length){
                iterator.call(context, obj[i], i, obj);
                i++;
            }
        } else for(i in obj)obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
    }
    /**
	 * @private
	 * let a boolean value also be a function that must return a boolean
	 * this first item in args will be used as the context
	 * @param {Boolean|Function} val
	 * @param {Array} [args]
	 * @returns {Boolean}
	 */ function boolOrFn(val, args) {
        if (typeof val === TYPE_FUNCTION) return val.apply(args ? args[0] || undefined : undefined, args);
        return val;
    }
    /**
	 * @private
	 * small indexOf wrapper
	 * @param {String} str
	 * @param {String} find
	 * @returns {Boolean} found
	 */ function inStr(str, find) {
        return str.indexOf(find) > -1;
    }
    /**
	 * @private
	 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	 * @param {String} actions
	 * @returns {*}
	 */ function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) return TOUCH_ACTION_NONE;
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning
        if (hasPanX && hasPanY) return TOUCH_ACTION_NONE;
         // pan-x OR pan-y
        if (hasPanX || hasPanY) return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
         // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) return TOUCH_ACTION_MANIPULATION;
        return TOUCH_ACTION_AUTO;
    }
    /**
	 * @private
	 * Touch Action
	 * sets the touchAction property or uses the js alternative
	 * @param {Manager} manager
	 * @param {String} value
	 * @constructor
	 */ var TouchAction1 = /*#__PURE__*/ function() {
        function TouchAction(manager, value) {
            this.manager = manager;
            this.set(value);
        }
        /**
	   * @private
	   * set the touchAction value on the element or enable the polyfill
	   * @param {String} value
	   */ var _proto = TouchAction.prototype;
        _proto.set = function set(value) {
            // find out the touch-action by the event handlers
            if (value === TOUCH_ACTION_COMPUTE) value = this.compute();
            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            this.actions = value.toLowerCase().trim();
        };
        /**
	   * @private
	   * just re-set the touchAction value
	   */ _proto.update = function update() {
            this.set(this.manager.options.touchAction);
        };
        /**
	   * @private
	   * compute the value for the touchAction property based on the recognizer's settings
	   * @returns {String} value
	   */ _proto.compute = function compute() {
            var actions = [];
            each(this.manager.recognizers, function(recognizer) {
                if (boolOrFn(recognizer.options.enable, [
                    recognizer
                ])) actions = actions.concat(recognizer.getTouchAction());
            });
            return cleanTouchActions(actions.join(' '));
        };
        /**
	   * @private
	   * this method is called on each input cycle and provides the preventing of the browser behavior
	   * @param {Object} input
	   */ _proto.preventDefaults = function preventDefaults(input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection; // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
                srcEvent.preventDefault();
                return;
            }
            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
            if (hasNone) {
                // do not prevent defaults if this is a tap gesture
                var isTapPointer = input.pointers.length === 1;
                var isTapMovement = input.distance < 2;
                var isTapTouchTime = input.deltaTime < 250;
                if (isTapPointer && isTapMovement && isTapTouchTime) return;
            }
            if (hasPanX && hasPanY) // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) return this.preventSrc(srcEvent);
        };
        /**
	   * @private
	   * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	   * @param {Object} srcEvent
	   */ _proto.preventSrc = function preventSrc(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
        };
        return TouchAction;
    }();
    /**
	 * @private
	 * find if a node is in the given parent
	 * @method hasParent
	 * @param {HTMLElement} node
	 * @param {HTMLElement} parent
	 * @return {Boolean} found
	 */ function hasParent(node, parent) {
        while(node){
            if (node === parent) return true;
            node = node.parentNode;
        }
        return false;
    }
    /**
	 * @private
	 * get the center of all the pointers
	 * @param {Array} pointers
	 * @return {Object} center contains `x` and `y` properties
	 */ function getCenter(pointers) {
        var pointersLength = pointers.length; // no need to loop when only one touch
        if (pointersLength === 1) return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
        var x = 0;
        var y = 0;
        var i = 0;
        while(i < pointersLength){
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }
        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }
    /**
	 * @private
	 * create a simple clone from the input used for storage of firstInput and firstMultiple
	 * @param {Object} input
	 * @returns {Object} clonedInputData
	 */ function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while(i < input.pointers.length){
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }
        return {
            timeStamp: now$1(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }
    /**
	 * @private
	 * calculate the absolute distance between two points
	 * @param {Object} p1 {x, y}
	 * @param {Object} p2 {x, y}
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} distance
	 */ function getDistance(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]];
        var y = p2[props[1]] - p1[props[1]];
        return Math.sqrt(x * x + y * y);
    }
    /**
	 * @private
	 * calculate the angle between two coordinates
	 * @param {Object} p1
	 * @param {Object} p2
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} angle
	 */ function getAngle(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]];
        var y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }
    /**
	 * @private
	 * get the direction between two points
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Number} direction
	 */ function getDirection(x, y) {
        if (x === y) return DIRECTION_NONE;
        if (abs(x) >= abs(y)) return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }
    function computeDeltaXY(session, input) {
        var center = input.center; // let { offsetDelta:offset = {}, prevDelta = {}, prevInput = {} } = session;
        // jscs throwing error on defalut destructured values and without defaults tests fail
        var offset = session.offsetDelta || {
        };
        var prevDelta = session.prevDelta || {
        };
        var prevInput = session.prevInput || {
        };
        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };
            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }
        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }
    /**
	 * @private
	 * calculate the velocity between two points. unit is in px per ms.
	 * @param {Number} deltaTime
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Object} velocity `x` and `y`
	 */ function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }
    /**
	 * @private
	 * calculate the scale factor between two pointersets
	 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} scale
	 */ function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }
    /**
	 * @private
	 * calculate the rotation degrees between two pointersets
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} rotation
	 */ function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }
    /**
	 * @private
	 * velocity is calculated every x ms
	 * @param {Object} session
	 * @param {Object} input
	 */ function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input;
        var deltaTime = input.timeStamp - last.timeStamp;
        var velocity;
        var velocityX;
        var velocityY;
        var direction;
        if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;
            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);
            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }
        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }
    /**
	* @private
	 * extend the data with some usable properties like scale, rotate, velocity etc
	 * @param {Object} manager
	 * @param {Object} input
	 */ function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length; // store the first input to calculate the distance and direction
        if (!session.firstInput) session.firstInput = simpleCloneInputData(input);
         // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) session.firstMultiple = simpleCloneInputData(input);
        else if (pointersLength === 1) session.firstMultiple = false;
        var firstInput = session.firstInput, firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
        var center = input.center = getCenter(pointers);
        input.timeStamp = now$1();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;
        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);
        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);
        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
        computeIntervalInputData(session, input); // find the correct target
        var target = manager.element;
        var srcEvent = input.srcEvent;
        var srcEventTarget;
        if (srcEvent.composedPath) srcEventTarget = srcEvent.composedPath()[0];
        else if (srcEvent.path) srcEventTarget = srcEvent.path[0];
        else srcEventTarget = srcEvent.target;
        if (hasParent(srcEventTarget, target)) target = srcEventTarget;
        input.target = target;
    }
    /**
	 * @private
	 * handle input events
	 * @param {Manager} manager
	 * @param {String} eventType
	 * @param {Object} input
	 */ function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;
        if (isFirst) manager.session = {
        };
         // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType; // compute scale, rotation etc
        computeInputData(manager, input); // emit secret event
        manager.emit('hammer.input', input);
        manager.recognize(input);
        manager.session.prevInput = input;
    }
    /**
	 * @private
	 * split string on whitespace
	 * @param {String} str
	 * @returns {Array} words
	 */ function splitStr(str) {
        return str.trim().split(/\s+/g);
    }
    /**
	 * @private
	 * addEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */ function addEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.addEventListener(type, handler, false);
        });
    }
    /**
	 * @private
	 * removeEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */ function removeEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.removeEventListener(type, handler, false);
        });
    }
    /**
	 * @private
	 * get the window object of an element
	 * @param {HTMLElement} element
	 * @returns {DocumentView|Window}
	 */ function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return doc.defaultView || doc.parentWindow || window;
    }
    /**
	 * @private
	 * create new input type manager
	 * @param {Manager} manager
	 * @param {Function} callback
	 * @returns {Input}
	 * @constructor
	 */ var Input1 = /*#__PURE__*/ function() {
        function Input(manager, callback) {
            var self = this;
            this.manager = manager;
            this.callback = callback;
            this.element = manager.element;
            this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,
            // so when disabled the input events are completely bypassed.
            this.domHandler = function(ev) {
                if (boolOrFn(manager.options.enable, [
                    manager
                ])) self.handler(ev);
            };
            this.init();
        }
        /**
	   * @private
	   * should handle the inputEvent data and trigger the callback
	   * @virtual
	   */ var _proto = Input.prototype;
        _proto.handler = function handler() {
        };
        /**
	   * @private
	   * bind the events
	   */ _proto.init = function init() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        };
        /**
	   * @private
	   * unbind the events
	   */ _proto.destroy = function destroy() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        };
        return Input;
    }();
    /**
	 * @private
	 * find if a array contains the object using indexOf or a simple polyFill
	 * @param {Array} src
	 * @param {String} find
	 * @param {String} [findByKey]
	 * @return {Boolean|Number} false when not found, or the index
	 */ function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) return src.indexOf(find);
        else {
            var i = 0;
            while(i < src.length){
                if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) // do not use === here, test fails
                return i;
                i++;
            }
            return -1;
        }
    }
    var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
    }; // in IE10 the pointer types is defined as an enum
    var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
    };
    var POINTER_ELEMENT_EVENTS = 'pointerdown';
    var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive
    if (win.MSPointerEvent && !win.PointerEvent) {
        POINTER_ELEMENT_EVENTS = 'MSPointerDown';
        POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
    }
    /**
	 * @private
	 * Pointer events input
	 * @constructor
	 * @extends Input
	 */ var PointerEventInput1 = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(PointerEventInput, _Input);
        function PointerEventInput() {
            var _this;
            var proto = PointerEventInput.prototype;
            proto.evEl = POINTER_ELEMENT_EVENTS;
            proto.evWin = POINTER_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.store = _this.manager.session.pointerEvents = [];
            return _this;
        }
        /**
	   * @private
	   * handle mouse events
	   * @param {Object} ev
	   */ var _proto = PointerEventInput.prototype;
        _proto.handler = function handler(ev) {
            var store = this.store;
            var removePointer = false;
            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
            var isTouch = pointerType === INPUT_TYPE_TOUCH; // get index of the event in the store
            var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                if (storeIndex < 0) {
                    store.push(ev);
                    storeIndex = store.length - 1;
                }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) removePointer = true;
             // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) return;
             // update the event in the store
            store[storeIndex] = ev;
            this.callback(this.manager, eventType, {
                pointers: store,
                changedPointers: [
                    ev
                ],
                pointerType: pointerType,
                srcEvent: ev
            });
            if (removePointer) // remove from the store
            store.splice(storeIndex, 1);
        };
        return PointerEventInput;
    }(Input1);
    /**
	 * @private
	 * convert array-like objects to real arrays
	 * @param {Object} obj
	 * @returns {Array}
	 */ function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }
    /**
	 * @private
	 * unique array with objects based on a key (like 'id') or just by the array's value
	 * @param {Array} src [{id:1},{id:2},{id:1}]
	 * @param {String} [key]
	 * @param {Boolean} [sort=False]
	 * @returns {Array} [{id:1},{id:2}]
	 */ function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;
        while(i < src.length){
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) results.push(src[i]);
            values[i] = val;
            i++;
        }
        if (sort) {
            if (!key) results = results.sort();
            else results = results.sort(function(a, b) {
                return a[key] > b[key];
            });
        }
        return results;
    }
    var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
    /**
	 * @private
	 * Multi-user touch events input
	 * @constructor
	 * @extends Input
	 */ var TouchInput1 = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(TouchInput, _Input);
        function TouchInput() {
            var _this;
            TouchInput.prototype.evTarget = TOUCH_TARGET_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.targetIds = {
            }; // this.evTarget = TOUCH_TARGET_EVENTS;
            return _this;
        }
        var _proto = TouchInput.prototype;
        _proto.handler = function handler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) return;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        };
        return TouchInput;
    }(Input1);
    function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds; // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [
                allTouches,
                allTouches
            ];
        }
        var i;
        var targetTouches;
        var changedTouches = toArray(ev.changedTouches);
        var changedTargetTouches = [];
        var target = this.target; // get target touches from touches
        targetTouches = allTouches.filter(function(touch) {
            return hasParent(touch.target, target);
        }); // collect touches
        if (type === INPUT_START) {
            i = 0;
            while(i < targetTouches.length){
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        } // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while(i < changedTouches.length){
            if (targetIds[changedTouches[i].identifier]) changedTargetTouches.push(changedTouches[i]);
             // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) delete targetIds[changedTouches[i].identifier];
            i++;
        }
        if (!changedTargetTouches.length) return;
        return [
            uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
            changedTargetTouches
        ];
    }
    var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
    };
    var MOUSE_ELEMENT_EVENTS = 'mousedown';
    var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
    /**
	 * @private
	 * Mouse events input
	 * @constructor
	 * @extends Input
	 */ var MouseInput1 = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(MouseInput, _Input);
        function MouseInput() {
            var _this;
            var proto = MouseInput.prototype;
            proto.evEl = MOUSE_ELEMENT_EVENTS;
            proto.evWin = MOUSE_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.pressed = false; // mousedown state
            return _this;
        }
        /**
	   * @private
	   * handle mouse events
	   * @param {Object} ev
	   */ var _proto = MouseInput.prototype;
        _proto.handler = function handler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down
            if (eventType & INPUT_START && ev.button === 0) this.pressed = true;
            if (eventType & INPUT_MOVE && ev.which !== 1) eventType = INPUT_END;
             // mouse must be down
            if (!this.pressed) return;
            if (eventType & INPUT_END) this.pressed = false;
            this.callback(this.manager, eventType, {
                pointers: [
                    ev
                ],
                changedPointers: [
                    ev
                ],
                pointerType: INPUT_TYPE_MOUSE,
                srcEvent: ev
            });
        };
        return MouseInput;
    }(Input1);
    /**
	 * @private
	 * Combined touch and mouse input
	 *
	 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	 * This because touch devices also emit mouse events while doing a touch.
	 *
	 * @constructor
	 * @extends Input
	 */ var DEDUP_TIMEOUT = 2500;
    var DEDUP_DISTANCE = 25;
    function setLastTouch(eventData) {
        var _eventData$changedPoi = eventData.changedPointers, touch = _eventData$changedPoi[0];
        if (touch.identifier === this.primaryTouch) {
            var lastTouch = {
                x: touch.clientX,
                y: touch.clientY
            };
            var lts = this.lastTouches;
            this.lastTouches.push(lastTouch);
            var removeLastTouch = function removeLastTouch() {
                var i = lts.indexOf(lastTouch);
                if (i > -1) lts.splice(i, 1);
            };
            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
        }
    }
    function recordTouches(eventType, eventData) {
        if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) setLastTouch.call(this, eventData);
    }
    function isSyntheticEvent(eventData) {
        var x = eventData.srcEvent.clientX;
        var y = eventData.srcEvent.clientY;
        for(var i = 0; i < this.lastTouches.length; i++){
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x);
            var dy = Math.abs(y - t.y);
            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) return true;
        }
        return false;
    }
    var TouchMouseInput1 = /*#__PURE__*/ function() {
        var TouchMouseInput2 = /*#__PURE__*/ function(_Input) {
            _inheritsLoose(TouchMouseInput, _Input);
            function TouchMouseInput(_manager, callback) {
                var _this;
                _this = _Input.call(this, _manager, callback) || this;
                _this.handler = function(manager, inputEvent, inputData) {
                    var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;
                    var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;
                    if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) return;
                     // when we're in a touch event, record touches to  de-dupe synthetic mouse event
                    if (isTouch) recordTouches.call(_assertThisInitialized(_assertThisInitialized(_this)), inputEvent, inputData);
                    else if (isMouse && isSyntheticEvent.call(_assertThisInitialized(_assertThisInitialized(_this)), inputData)) return;
                    _this.callback(manager, inputEvent, inputData);
                };
                _this.touch = new TouchInput1(_this.manager, _this.handler);
                _this.mouse = new MouseInput1(_this.manager, _this.handler);
                _this.primaryTouch = null;
                _this.lastTouches = [];
                return _this;
            }
            /**
	     * @private
	     * handle mouse and touch events
	     * @param {Hammer} manager
	     * @param {String} inputEvent
	     * @param {Object} inputData
	     */ var _proto = TouchMouseInput.prototype;
            /**
	     * @private
	     * remove the event listeners
	     */ _proto.destroy = function destroy() {
                this.touch.destroy();
                this.mouse.destroy();
            };
            return TouchMouseInput;
        }(Input1);
        return TouchMouseInput2;
    }();
    /**
	 * @private
	 * create new input type manager
	 * called by the Manager constructor
	 * @param {Hammer} manager
	 * @returns {Input}
	 */ function createInputInstance(manager) {
        var Type; // let inputClass = manager.options.inputClass;
        var inputClass = manager.options.inputClass;
        if (inputClass) Type = inputClass;
        else if (SUPPORT_POINTER_EVENTS) Type = PointerEventInput1;
        else if (SUPPORT_ONLY_TOUCH) Type = TouchInput1;
        else if (!SUPPORT_TOUCH) Type = MouseInput1;
        else Type = TouchMouseInput1;
        return new Type(manager, inputHandler);
    }
    /**
	 * @private
	 * if the argument is an array, we want to execute the fn on each entry
	 * if it aint an array we don't want to do a thing.
	 * this is used by all the methods that accept a single and array argument.
	 * @param {*|Array} arg
	 * @param {String} fn
	 * @param {Object} [context]
	 * @returns {Boolean}
	 */ function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }
    var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;
    /**
	 * @private
	 * get a unique id
	 * @returns {number} uniqueId
	 */ var _uniqueId = 1;
    function uniqueId() {
        return _uniqueId++;
    }
    /**
	 * @private
	 * get a recognizer by name if it is bound to a manager
	 * @param {Recognizer|String} otherRecognizer
	 * @param {Recognizer} recognizer
	 * @returns {Recognizer}
	 */ function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) return manager.get(otherRecognizer);
        return otherRecognizer;
    }
    /**
	 * @private
	 * get a usable string, used as event postfix
	 * @param {constant} state
	 * @returns {String} state
	 */ function stateStr(state) {
        if (state & STATE_CANCELLED) return 'cancel';
        else if (state & STATE_ENDED) return 'end';
        else if (state & STATE_CHANGED) return 'move';
        else if (state & STATE_BEGAN) return 'start';
        return '';
    }
    /**
	 * @private
	 * Recognizer flow explained; *
	 * All recognizers have the initial state of POSSIBLE when a input session starts.
	 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	 * Example session for mouse-input: mousedown -> mousemove -> mouseup
	 *
	 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	 * which determines with state it should be.
	 *
	 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	 * POSSIBLE to give it another change on the next cycle.
	 *
	 *               Possible
	 *                  |
	 *            +-----+---------------+
	 *            |                     |
	 *      +-----+-----+               |
	 *      |           |               |
	 *   Failed      Cancelled          |
	 *                          +-------+------+
	 *                          |              |
	 *                      Recognized       Began
	 *                                         |
	 *                                      Changed
	 *                                         |
	 *                                  Ended/Recognized
	 */ /**
	 * @private
	 * Recognizer
	 * Every recognizer needs to extend from this class.
	 * @constructor
	 * @param {Object} options
	 */ var Recognizer1 = /*#__PURE__*/ function() {
        function Recognizer(options) {
            if (options === void 0) options = {
            };
            this.options = _extends({
                enable: true
            }, options);
            this.id = uniqueId();
            this.manager = null; // default is enable true
            this.state = STATE_POSSIBLE;
            this.simultaneous = {
            };
            this.requireFail = [];
        }
        /**
	   * @private
	   * set options
	   * @param {Object} options
	   * @return {Recognizer}
	   */ var _proto = Recognizer.prototype;
        _proto.set = function set(options) {
            assign$1$1(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
        };
        /**
	   * @private
	   * recognize simultaneous with an other recognizer.
	   * @param {Recognizer} otherRecognizer
	   * @returns {Recognizer} this
	   */ _proto.recognizeWith = function recognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) return this;
            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
                simultaneous[otherRecognizer.id] = otherRecognizer;
                otherRecognizer.recognizeWith(this);
            }
            return this;
        };
        /**
	   * @private
	   * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	   * @param {Recognizer} otherRecognizer
	   * @returns {Recognizer} this
	   */ _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
        };
        /**
	   * @private
	   * recognizer can only run when an other is failing
	   * @param {Recognizer} otherRecognizer
	   * @returns {Recognizer} this
	   */ _proto.requireFailure = function requireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) return this;
            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
                requireFail.push(otherRecognizer);
                otherRecognizer.requireFailure(this);
            }
            return this;
        };
        /**
	   * @private
	   * drop the requireFailure link. it does not remove the link on the other recognizer.
	   * @param {Recognizer} otherRecognizer
	   * @returns {Recognizer} this
	   */ _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) this.requireFail.splice(index, 1);
            return this;
        };
        /**
	   * @private
	   * has require failures boolean
	   * @returns {boolean}
	   */ _proto.hasRequireFailures = function hasRequireFailures() {
            return this.requireFail.length > 0;
        };
        /**
	   * @private
	   * if the recognizer can recognize simultaneous with an other recognizer
	   * @param {Recognizer} otherRecognizer
	   * @returns {Boolean}
	   */ _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
        };
        /**
	   * @private
	   * You should use `tryEmit` instead of `emit` directly to check
	   * that all the needed recognizers has failed before emitting.
	   * @param {Object} input
	   */ _proto.emit = function emit(input) {
            var self = this;
            var state = this.state;
            function emit(event) {
                self.manager.emit(event, input);
            } // 'panstart' and 'panmove'
            if (state < STATE_ENDED) emit(self.options.event + stateStr(state));
            emit(self.options.event); // simple 'eventName' events
            if (input.additionalEvent) // additional event(panleft, panright, pinchin, pinchout...)
            emit(input.additionalEvent);
             // panend and pancancel
            if (state >= STATE_ENDED) emit(self.options.event + stateStr(state));
        };
        /**
	   * @private
	   * Check that all the require failure recognizers has failed,
	   * if true, it emits a gesture event,
	   * otherwise, setup the state to FAILED.
	   * @param {Object} input
	   */ _proto.tryEmit = function tryEmit(input) {
            if (this.canEmit()) return this.emit(input);
             // it's failing anyway
            this.state = STATE_FAILED;
        };
        /**
	   * @private
	   * can we emit?
	   * @returns {boolean}
	   */ _proto.canEmit = function canEmit() {
            var i = 0;
            while(i < this.requireFail.length){
                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) return false;
                i++;
            }
            return true;
        };
        /**
	   * @private
	   * update the recognizer
	   * @param {Object} inputData
	   */ _proto.recognize = function recognize(inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign$1$1({
            }, inputData); // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [
                this,
                inputDataClone
            ])) {
                this.reset();
                this.state = STATE_FAILED;
                return;
            } // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) this.state = STATE_POSSIBLE;
            this.state = this.process(inputDataClone); // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) this.tryEmit(inputDataClone);
        };
        /**
	   * @private
	   * return the state of the recognizer
	   * the actual recognizing happens in this method
	   * @virtual
	   * @param {Object} inputData
	   * @returns {constant} STATE
	   */ /* jshint ignore:start */ _proto.process = function process(inputData) {
        };
        /* jshint ignore:end */ /**
	   * @private
	   * return the preferred touch-action
	   * @virtual
	   * @returns {Array}
	   */ _proto.getTouchAction = function getTouchAction() {
        };
        /**
	   * @private
	   * called when the gesture isn't allowed to recognize
	   * like when another is being recognized or it is disabled
	   * @virtual
	   */ _proto.reset = function reset() {
        };
        return Recognizer;
    }();
    /**
	 * @private
	 * A tap is recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	 * a single tap.
	 *
	 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	 * multi-taps being recognized.
	 * @constructor
	 * @extends Recognizer
	 */ var TapRecognizer1 = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(TapRecognizer, _Recognizer);
        function TapRecognizer(options) {
            var _this;
            if (options === void 0) options = {
            };
            _this = _Recognizer.call(this, _extends({
                event: 'tap',
                pointers: 1,
                taps: 1,
                interval: 300,
                // max time between the multi-tap taps
                time: 250,
                // max time of the pointer to be down (like finger on the screen)
                threshold: 9,
                // a minimal movement is ok, but keep it low
                posThreshold: 10
            }, options)) || this; // previous time and center,
            // used for tap counting
            _this.pTime = false;
            _this.pCenter = false;
            _this._timer = null;
            _this._input = null;
            _this.count = 0;
            return _this;
        }
        var _proto = TapRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_MANIPULATION
            ];
        };
        _proto.process = function process(input) {
            var _this2 = this;
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;
            this.reset();
            if (input.eventType & INPUT_START && this.count === 0) return this.failTimeout();
             // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
                if (input.eventType !== INPUT_END) return this.failTimeout();
                var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
                this.pTime = input.timeStamp;
                this.pCenter = input.center;
                if (!validMultiTap || !validInterval) this.count = 1;
                else this.count += 1;
                this._input = input; // if tap count matches we have recognized it,
                // else it has began recognizing...
                var tapCount = this.count % options.taps;
                if (tapCount === 0) {
                    // no failing requirements, immediately trigger the tap event
                    // or wait as long as the multitap interval to trigger
                    if (!this.hasRequireFailures()) return STATE_RECOGNIZED;
                    else {
                        this._timer = setTimeout(function() {
                            _this2.state = STATE_RECOGNIZED;
                            _this2.tryEmit();
                        }, options.interval);
                        return STATE_BEGAN;
                    }
                }
            }
            return STATE_FAILED;
        };
        _proto.failTimeout = function failTimeout() {
            var _this3 = this;
            this._timer = setTimeout(function() {
                _this3.state = STATE_FAILED;
            }, this.options.interval);
            return STATE_FAILED;
        };
        _proto.reset = function reset() {
            clearTimeout(this._timer);
        };
        _proto.emit = function emit() {
            if (this.state === STATE_RECOGNIZED) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        };
        return TapRecognizer;
    }(Recognizer1);
    /**
	 * @private
	 * This recognizer is just used as a base for the simple attribute recognizers.
	 * @constructor
	 * @extends Recognizer
	 */ var AttrRecognizer1 = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(AttrRecognizer, _Recognizer);
        function AttrRecognizer(options) {
            if (options === void 0) options = {
            };
            return _Recognizer.call(this, _extends({
                pointers: 1
            }, options)) || this;
        }
        /**
	   * @private
	   * Used to check if it the recognizer receives valid input, like input.distance > 10.
	   * @memberof AttrRecognizer
	   * @param {Object} input
	   * @returns {Boolean} recognized
	   */ var _proto = AttrRecognizer.prototype;
        _proto.attrTest = function attrTest(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
        };
        /**
	   * @private
	   * Process the input and return the state for the recognizer
	   * @memberof AttrRecognizer
	   * @param {Object} input
	   * @returns {*} State
	   */ _proto.process = function process(input) {
            var state = this.state;
            var eventType = input.eventType;
            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) return state | STATE_CANCELLED;
            else if (isRecognized || isValid) {
                if (eventType & INPUT_END) return state | STATE_ENDED;
                else if (!(state & STATE_BEGAN)) return STATE_BEGAN;
                return state | STATE_CHANGED;
            }
            return STATE_FAILED;
        };
        return AttrRecognizer;
    }(Recognizer1);
    /**
	 * @private
	 * direction cons to string
	 * @param {constant} direction
	 * @returns {String}
	 */ function directionStr(direction) {
        if (direction === DIRECTION_DOWN) return 'down';
        else if (direction === DIRECTION_UP) return 'up';
        else if (direction === DIRECTION_LEFT) return 'left';
        else if (direction === DIRECTION_RIGHT) return 'right';
        return '';
    }
    /**
	 * @private
	 * Pan
	 * Recognized when the pointer is down and moved in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */ var PanRecognizer1 = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(PanRecognizer, _AttrRecognizer);
        function PanRecognizer(options) {
            var _this;
            if (options === void 0) options = {
            };
            _this = _AttrRecognizer.call(this, _extends({
                event: 'pan',
                threshold: 10,
                pointers: 1,
                direction: DIRECTION_ALL
            }, options)) || this;
            _this.pX = null;
            _this.pY = null;
            return _this;
        }
        var _proto = PanRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) actions.push(TOUCH_ACTION_PAN_Y);
            if (direction & DIRECTION_VERTICAL) actions.push(TOUCH_ACTION_PAN_X);
            return actions;
        };
        _proto.directionTest = function directionTest(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY; // lock to axis?
            if (!(direction & options.direction)) {
                if (options.direction & DIRECTION_HORIZONTAL) {
                    direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                    hasMoved = x !== this.pX;
                    distance = Math.abs(input.deltaX);
                } else {
                    direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                    hasMoved = y !== this.pY;
                    distance = Math.abs(input.deltaY);
                }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
        };
        _proto.attrTest = function attrTest(input) {
            return AttrRecognizer1.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
        };
        _proto.emit = function emit(input) {
            this.pX = input.deltaX;
            this.pY = input.deltaY;
            var direction = directionStr(input.direction);
            if (direction) input.additionalEvent = this.options.event + direction;
            _AttrRecognizer.prototype.emit.call(this, input);
        };
        return PanRecognizer;
    }(AttrRecognizer1);
    /**
	 * @private
	 * Swipe
	 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */ var SwipeRecognizer1 = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(SwipeRecognizer, _AttrRecognizer);
        function SwipeRecognizer(options) {
            if (options === void 0) options = {
            };
            return _AttrRecognizer.call(this, _extends({
                event: 'swipe',
                threshold: 10,
                velocity: 0.3,
                direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
                pointers: 1
            }, options)) || this;
        }
        var _proto = SwipeRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return PanRecognizer1.prototype.getTouchAction.call(this);
        };
        _proto.attrTest = function attrTest(input) {
            var direction = this.options.direction;
            var velocity;
            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) velocity = input.overallVelocity;
            else if (direction & DIRECTION_HORIZONTAL) velocity = input.overallVelocityX;
            else if (direction & DIRECTION_VERTICAL) velocity = input.overallVelocityY;
            return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        };
        _proto.emit = function emit(input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) this.manager.emit(this.options.event + direction, input);
            this.manager.emit(this.options.event, input);
        };
        return SwipeRecognizer;
    }(AttrRecognizer1);
    /**
	 * @private
	 * Pinch
	 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	 * @constructor
	 * @extends AttrRecognizer
	 */ var PinchRecognizer1 = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(PinchRecognizer, _AttrRecognizer);
        function PinchRecognizer(options) {
            if (options === void 0) options = {
            };
            return _AttrRecognizer.call(this, _extends({
                event: 'pinch',
                threshold: 0,
                pointers: 2
            }, options)) || this;
        }
        var _proto = PinchRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_NONE
            ];
        };
        _proto.attrTest = function attrTest(input) {
            return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        };
        _proto.emit = function emit(input) {
            if (input.scale !== 1) {
                var inOut = input.scale < 1 ? 'in' : 'out';
                input.additionalEvent = this.options.event + inOut;
            }
            _AttrRecognizer.prototype.emit.call(this, input);
        };
        return PinchRecognizer;
    }(AttrRecognizer1);
    /**
	 * @private
	 * Rotate
	 * Recognized when two or more pointer are moving in a circular motion.
	 * @constructor
	 * @extends AttrRecognizer
	 */ var RotateRecognizer1 = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(RotateRecognizer, _AttrRecognizer);
        function RotateRecognizer(options) {
            if (options === void 0) options = {
            };
            return _AttrRecognizer.call(this, _extends({
                event: 'rotate',
                threshold: 0,
                pointers: 2
            }, options)) || this;
        }
        var _proto = RotateRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_NONE
            ];
        };
        _proto.attrTest = function attrTest(input) {
            return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        };
        return RotateRecognizer;
    }(AttrRecognizer1);
    /**
	 * @private
	 * Press
	 * Recognized when the pointer is down for x ms without any movement.
	 * @constructor
	 * @extends Recognizer
	 */ var PressRecognizer1 = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(PressRecognizer, _Recognizer);
        function PressRecognizer(options) {
            var _this;
            if (options === void 0) options = {
            };
            _this = _Recognizer.call(this, _extends({
                event: 'press',
                pointers: 1,
                time: 251,
                // minimal time of the pointer to be pressed
                threshold: 9
            }, options)) || this;
            _this._timer = null;
            _this._input = null;
            return _this;
        }
        var _proto = PressRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_AUTO
            ];
        };
        _proto.process = function process(input) {
            var _this2 = this;
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;
            this._input = input; // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) this.reset();
            else if (input.eventType & INPUT_START) {
                this.reset();
                this._timer = setTimeout(function() {
                    _this2.state = STATE_RECOGNIZED;
                    _this2.tryEmit();
                }, options.time);
            } else if (input.eventType & INPUT_END) return STATE_RECOGNIZED;
            return STATE_FAILED;
        };
        _proto.reset = function reset() {
            clearTimeout(this._timer);
        };
        _proto.emit = function emit(input) {
            if (this.state !== STATE_RECOGNIZED) return;
            if (input && input.eventType & INPUT_END) this.manager.emit(this.options.event + "up", input);
            else {
                this._input.timeStamp = now$1();
                this.manager.emit(this.options.event, this._input);
            }
        };
        return PressRecognizer;
    }(Recognizer1);
    var defaults = {
        /**
	   * @private
	   * set if DOM events are being triggered.
	   * But this is slower and unused by simple implementations, so disabled by default.
	   * @type {Boolean}
	   * @default false
	   */ domEvents: false,
        /**
	   * @private
	   * The value for the touchAction property/fallback.
	   * When set to `compute` it will magically set the correct value based on the added recognizers.
	   * @type {String}
	   * @default compute
	   */ touchAction: TOUCH_ACTION_COMPUTE,
        /**
	   * @private
	   * @type {Boolean}
	   * @default true
	   */ enable: true,
        /**
	   * @private
	   * EXPERIMENTAL FEATURE -- can be removed/changed
	   * Change the parent input target element.
	   * If Null, then it is being set the to main element.
	   * @type {Null|EventTarget}
	   * @default null
	   */ inputTarget: null,
        /**
	   * @private
	   * force an input class
	   * @type {Null|Function}
	   * @default null
	   */ inputClass: null,
        /**
	   * @private
	   * Some CSS properties can be used to improve the working of Hammer.
	   * Add them to this method and they will be set when creating a new Manager.
	   * @namespace
	   */ cssProps: {
            /**
	     * @private
	     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	     * @type {String}
	     * @default 'none'
	     */ userSelect: "none",
            /**
	     * @private
	     * Disable the Windows Phone grippers when pressing an element.
	     * @type {String}
	     * @default 'none'
	     */ touchSelect: "none",
            /**
	     * @private
	     * Disables the default callout shown when you touch and hold a touch target.
	     * On iOS, when you touch and hold a touch target such as a link, Safari displays
	     * a callout containing information about the link. This property allows you to disable that callout.
	     * @type {String}
	     * @default 'none'
	     */ touchCallout: "none",
            /**
	     * @private
	     * Specifies whether zooming is enabled. Used by IE10>
	     * @type {String}
	     * @default 'none'
	     */ contentZooming: "none",
            /**
	     * @private
	     * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	     * @type {String}
	     * @default 'none'
	     */ userDrag: "none",
            /**
	     * @private
	     * Overrides the highlight color shown when the user taps a link or a JavaScript
	     * clickable element in iOS. This property obeys the alpha value, if specified.
	     * @type {String}
	     * @default 'rgba(0,0,0,0)'
	     */ tapHighlightColor: "rgba(0,0,0,0)"
        }
    };
    /**
	 * @private
	 * Default recognizer setup when calling `Hammer()`
	 * When creating a new Manager these will be skipped.
	 * This is separated with other defaults because of tree-shaking.
	 * @type {Array}
	 */ var preset = [
        [
            RotateRecognizer1,
            {
                enable: false
            }
        ],
        [
            PinchRecognizer1,
            {
                enable: false
            },
            [
                'rotate'
            ]
        ],
        [
            SwipeRecognizer1,
            {
                direction: DIRECTION_HORIZONTAL
            }
        ],
        [
            PanRecognizer1,
            {
                direction: DIRECTION_HORIZONTAL
            },
            [
                'swipe'
            ]
        ],
        [
            TapRecognizer1
        ],
        [
            TapRecognizer1,
            {
                event: 'doubletap',
                taps: 2
            },
            [
                'tap'
            ]
        ],
        [
            PressRecognizer1
        ]
    ];
    var STOP = 1;
    var FORCED_STOP = 2;
    /**
	 * @private
	 * add/remove the css properties as defined in manager.options.cssProps
	 * @param {Manager} manager
	 * @param {Boolean} add
	 */ function toggleCssProps(manager, add) {
        var element = manager.element;
        if (!element.style) return;
        var prop;
        each(manager.options.cssProps, function(value, name) {
            prop = prefixed(element.style, name);
            if (add) {
                manager.oldCssProps[prop] = element.style[prop];
                element.style[prop] = value;
            } else element.style[prop] = manager.oldCssProps[prop] || "";
        });
        if (!add) manager.oldCssProps = {
        };
    }
    /**
	 * @private
	 * trigger dom event
	 * @param {String} event
	 * @param {Object} data
	 */ function triggerDomEvent(event, data) {
        var gestureEvent = document.createEvent("Event");
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
    }
    /**
	* @private
	 * Manager
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */ var Manager1 = /*#__PURE__*/ function() {
        function Manager(element, options) {
            var _this = this;
            this.options = assign$1$1({
            }, defaults, options || {
            });
            this.options.inputTarget = this.options.inputTarget || element;
            this.handlers = {
            };
            this.session = {
            };
            this.recognizers = [];
            this.oldCssProps = {
            };
            this.element = element;
            this.input = createInputInstance(this);
            this.touchAction = new TouchAction1(this, this.options.touchAction);
            toggleCssProps(this, true);
            each(this.options.recognizers, function(item) {
                var recognizer = _this.add(new item[0](item[1]));
                item[2] && recognizer.recognizeWith(item[2]);
                item[3] && recognizer.requireFailure(item[3]);
            }, this);
        }
        /**
	   * @private
	   * set options
	   * @param {Object} options
	   * @returns {Manager}
	   */ var _proto = Manager.prototype;
        _proto.set = function set(options) {
            assign$1$1(this.options, options); // Options that need a little more setup
            if (options.touchAction) this.touchAction.update();
            if (options.inputTarget) {
                // Clean up existing event listeners and reinitialize
                this.input.destroy();
                this.input.target = options.inputTarget;
                this.input.init();
            }
            return this;
        };
        /**
	   * @private
	   * stop recognizing for this session.
	   * This session will be discarded, when a new [input]start event is fired.
	   * When forced, the recognizer cycle is stopped immediately.
	   * @param {Boolean} [force]
	   */ _proto.stop = function stop(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
        };
        /**
	   * @private
	   * run the recognizers!
	   * called by the inputHandler function on every movement of the pointers (touches)
	   * it walks through all the recognizers and tries to detect the gesture that is being made
	   * @param {Object} inputData
	   */ _proto.recognize = function recognize(inputData) {
            var session = this.session;
            if (session.stopped) return;
             // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);
            var recognizer;
            var recognizers = this.recognizers; // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
                session.curRecognizer = null;
                curRecognizer = null;
            }
            var i = 0;
            while(i < recognizers.length){
                recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.
                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                //      that is being recognized.
                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                //      this can be setup with the `recognizeWith()` method on the recognizer.
                if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer === curRecognizer || recognizer.canRecognizeWith(curRecognizer))) // 3
                recognizer.recognize(inputData);
                else recognizer.reset();
                 // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                // current active recognizer. but only if we don't already have an active recognizer
                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                    session.curRecognizer = recognizer;
                    curRecognizer = recognizer;
                }
                i++;
            }
        };
        /**
	   * @private
	   * get a recognizer by its event name.
	   * @param {Recognizer|String} recognizer
	   * @returns {Recognizer|Null}
	   */ _proto.get = function get(recognizer) {
            if (recognizer instanceof Recognizer1) return recognizer;
            var recognizers = this.recognizers;
            for(var i = 0; i < recognizers.length; i++){
                if (recognizers[i].options.event === recognizer) return recognizers[i];
            }
            return null;
        };
        /**
	   * @private add a recognizer to the manager
	   * existing recognizers with the same event name will be removed
	   * @param {Recognizer} recognizer
	   * @returns {Recognizer|Manager}
	   */ _proto.add = function add(recognizer) {
            if (invokeArrayArg(recognizer, "add", this)) return this;
             // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) this.remove(existing);
            this.recognizers.push(recognizer);
            recognizer.manager = this;
            this.touchAction.update();
            return recognizer;
        };
        /**
	   * @private
	   * remove a recognizer by name or instance
	   * @param {Recognizer|String} recognizer
	   * @returns {Manager}
	   */ _proto.remove = function remove(recognizer) {
            if (invokeArrayArg(recognizer, "remove", this)) return this;
            var targetRecognizer = this.get(recognizer); // let's make sure this recognizer exists
            if (recognizer) {
                var recognizers = this.recognizers;
                var index = inArray(recognizers, targetRecognizer);
                if (index !== -1) {
                    recognizers.splice(index, 1);
                    this.touchAction.update();
                }
            }
            return this;
        };
        /**
	   * @private
	   * bind event
	   * @param {String} events
	   * @param {Function} handler
	   * @returns {EventEmitter} this
	   */ _proto.on = function on(events, handler) {
            if (events === undefined || handler === undefined) return this;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(handler);
            });
            return this;
        };
        /**
	   * @private unbind event, leave emit blank to remove all handlers
	   * @param {String} events
	   * @param {Function} [handler]
	   * @returns {EventEmitter} this
	   */ _proto.off = function off(events, handler) {
            if (events === undefined) return this;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                if (!handler) delete handlers[event];
                else handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            });
            return this;
        };
        /**
	   * @private emit event to the listeners
	   * @param {String} event
	   * @param {Object} data
	   */ _proto.emit = function emit(event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) triggerDomEvent(event, data);
             // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) return;
            data.type = event;
            data.preventDefault = function() {
                data.srcEvent.preventDefault();
            };
            var i = 0;
            while(i < handlers.length){
                handlers[i](data);
                i++;
            }
        };
        /**
	   * @private
	   * destroy the manager and unbinds all events
	   * it doesn't unbind dom events, that is the user own responsibility
	   */ _proto.destroy = function destroy() {
            this.element && toggleCssProps(this, false);
            this.handlers = {
            };
            this.session = {
            };
            this.input.destroy();
            this.element = null;
        };
        return Manager;
    }();
    var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
    var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
    /**
	 * @private
	 * Touch events input
	 * @constructor
	 * @extends Input
	 */ var SingleTouchInput1 = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(SingleTouchInput, _Input);
        function SingleTouchInput() {
            var _this;
            var proto = SingleTouchInput.prototype;
            proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
            proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.started = false;
            return _this;
        }
        var _proto = SingleTouchInput.prototype;
        _proto.handler = function handler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?
            if (type === INPUT_START) this.started = true;
            if (!this.started) return;
            var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) this.started = false;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        };
        return SingleTouchInput;
    }(Input1);
    function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);
        if (type & (INPUT_END | INPUT_CANCEL)) all = uniqueArray(all.concat(changed), 'identifier', true);
        return [
            all,
            changed
        ];
    }
    /**
	 * @private
	 * wrap a method with a deprecation warning and stack trace
	 * @param {Function} method
	 * @param {String} name
	 * @param {String} message
	 * @returns {Function} A new function wrapping the supplied method.
	 */ function deprecate(method, name, message) {
        var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message + " AT \n";
        return function() {
            var e = new Error('get-stack-trace');
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';
            var log = window.console && (window.console.warn || window.console.log);
            if (log) log.call(window.console, deprecationMessage, stack);
            return method.apply(this, arguments);
        };
    }
    /**
	 * @private
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} dest
	 * @param {Object} src
	 * @param {Boolean} [merge=false]
	 * @returns {Object} dest
	 */ var extend = deprecate(function(dest, src, merge) {
        var keys = Object.keys(src);
        var i = 0;
        while(i < keys.length){
            if (!merge || merge && dest[keys[i]] === undefined) dest[keys[i]] = src[keys[i]];
            i++;
        }
        return dest;
    }, 'extend', 'Use `assign`.');
    /**
	 * @private
	 * merge the values from src in the dest.
	 * means that properties that exist in dest will not be overwritten by src
	 * @param {Object} dest
	 * @param {Object} src
	 * @returns {Object} dest
	 */ var merge1 = deprecate(function(dest, src) {
        return extend(dest, src, true);
    }, 'merge', 'Use `assign`.');
    /**
	 * @private
	 * simple class inheritance
	 * @param {Function} child
	 * @param {Function} base
	 * @param {Object} [properties]
	 */ function inherit(child, base, properties) {
        var baseP = base.prototype;
        var childP;
        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;
        if (properties) assign$1$1(childP, properties);
    }
    /**
	 * @private
	 * simple function bind
	 * @param {Function} fn
	 * @param {Object} context
	 * @returns {Function}
	 */ function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }
    /**
	 * @private
	 * Simple way to create a manager with a default set of recognizers.
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */ var Hammer1 = /*#__PURE__*/ function() {
        var Hammer = /**
	    * @private
	    * @const {string}
	    */ function Hammer(element, options) {
            if (options === void 0) options = {
            };
            return new Manager1(element, _extends({
                recognizers: preset.concat()
            }, options));
        };
        Hammer.VERSION = "2.0.17-rc";
        Hammer.DIRECTION_ALL = DIRECTION_ALL;
        Hammer.DIRECTION_DOWN = DIRECTION_DOWN;
        Hammer.DIRECTION_LEFT = DIRECTION_LEFT;
        Hammer.DIRECTION_RIGHT = DIRECTION_RIGHT;
        Hammer.DIRECTION_UP = DIRECTION_UP;
        Hammer.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;
        Hammer.DIRECTION_VERTICAL = DIRECTION_VERTICAL;
        Hammer.DIRECTION_NONE = DIRECTION_NONE;
        Hammer.DIRECTION_DOWN = DIRECTION_DOWN;
        Hammer.INPUT_START = INPUT_START;
        Hammer.INPUT_MOVE = INPUT_MOVE;
        Hammer.INPUT_END = INPUT_END;
        Hammer.INPUT_CANCEL = INPUT_CANCEL;
        Hammer.STATE_POSSIBLE = STATE_POSSIBLE;
        Hammer.STATE_BEGAN = STATE_BEGAN;
        Hammer.STATE_CHANGED = STATE_CHANGED;
        Hammer.STATE_ENDED = STATE_ENDED;
        Hammer.STATE_RECOGNIZED = STATE_RECOGNIZED;
        Hammer.STATE_CANCELLED = STATE_CANCELLED;
        Hammer.STATE_FAILED = STATE_FAILED;
        Hammer.Manager = Manager1;
        Hammer.Input = Input1;
        Hammer.TouchAction = TouchAction1;
        Hammer.TouchInput = TouchInput1;
        Hammer.MouseInput = MouseInput1;
        Hammer.PointerEventInput = PointerEventInput1;
        Hammer.TouchMouseInput = TouchMouseInput1;
        Hammer.SingleTouchInput = SingleTouchInput1;
        Hammer.Recognizer = Recognizer1;
        Hammer.AttrRecognizer = AttrRecognizer1;
        Hammer.Tap = TapRecognizer1;
        Hammer.Pan = PanRecognizer1;
        Hammer.Swipe = SwipeRecognizer1;
        Hammer.Pinch = PinchRecognizer1;
        Hammer.Rotate = RotateRecognizer1;
        Hammer.Press = PressRecognizer1;
        Hammer.on = addEventListeners;
        Hammer.off = removeEventListeners;
        Hammer.each = each;
        Hammer.merge = merge1;
        Hammer.extend = extend;
        Hammer.bindFn = bindFn;
        Hammer.assign = assign$1$1;
        Hammer.inherit = inherit;
        Hammer.bindFn = bindFn;
        Hammer.prefixed = prefixed;
        Hammer.toArray = toArray;
        Hammer.inArray = inArray;
        Hammer.uniqueArray = uniqueArray;
        Hammer.splitStr = splitStr;
        Hammer.boolOrFn = boolOrFn;
        Hammer.hasParent = hasParent;
        Hammer.addEventListeners = addEventListeners;
        Hammer.removeEventListeners = removeEventListeners;
        Hammer.defaults = assign$1$1({
        }, defaults, {
            preset: preset
        });
        return Hammer;
    }(); //  style loader but by script tag, not by the loader.
    function _createForOfIteratorHelper(o, allowArrayLike) {
        var it;
        if (typeof symbol$4 === "undefined" || getIteratorMethod$1(o) == null) {
            if (isArray$5(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {
                };
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = getIterator$1(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$1(o, minLen) {
        var _context21;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
        var n = slice$6(_context21 = Object.prototype.toString.call(o)).call(_context21, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$2(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
    }
    function _arrayLikeToArray$1(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    /**
	 * Use this symbol to delete properies in deepObjectAssign.
	 */ var DELETE = symbol$4("DELETE");
    /**
	 * Pure version of deepObjectAssign, it doesn't modify any of it's arguments.
	 *
	 * @param base - The base object that fullfils the whole interface T.
	 * @param updates - Updates that may change or delete props.
	 *
	 * @returns A brand new instance with all the supplied objects deeply merged.
	 */ function pureDeepObjectAssign(base) {
        var _context;
        for(var _len = arguments.length, updates = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)updates[_key - 1] = arguments[_key];
        return deepObjectAssign.apply(void 0, concat$2(_context = [
            {
            },
            base
        ]).call(_context, updates));
    }
    /**
	 * Deep version of object assign with additional deleting by the DELETE symbol.
	 *
	 * @param values - Objects to be deeply merged.
	 *
	 * @returns The first object from values.
	 */ function deepObjectAssign() {
        var merged = deepObjectAssignNonentry.apply(void 0, arguments);
        stripDelete(merged);
        return merged;
    }
    /**
	 * Deep version of object assign with additional deleting by the DELETE symbol.
	 *
	 * @remarks
	 * This doesn't strip the DELETE symbols so they may end up in the final object.
	 *
	 * @param values - Objects to be deeply merged.
	 *
	 * @returns The first object from values.
	 */ function deepObjectAssignNonentry() {
        for(var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)values[_key2] = arguments[_key2];
        if (values.length < 2) return values[0];
        else if (values.length > 2) {
            var _context2;
            return deepObjectAssignNonentry.apply(void 0, concat$2(_context2 = [
                deepObjectAssign(values[0], values[1])
            ]).call(_context2, toConsumableArray(slice$6(values).call(values, 2))));
        }
        var a = values[0];
        var b = values[1];
        var _iterator = _createForOfIteratorHelper(ownKeys$3(b)), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var prop = _step.value;
                if (!Object.prototype.propertyIsEnumerable.call(b, prop)) ;
                else if (b[prop] === DELETE) delete a[prop];
                else if (a[prop] !== null && b[prop] !== null && _typeof_1(a[prop]) === "object" && _typeof_1(b[prop]) === "object" && !isArray$5(a[prop]) && !isArray$5(b[prop])) a[prop] = deepObjectAssignNonentry(a[prop], b[prop]);
                else a[prop] = clone(b[prop]);
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        return a;
    }
    /**
	 * Deep clone given object or array. In case of primitive simply return.
	 *
	 * @param a - Anything.
	 *
	 * @returns Deep cloned object/array or unchanged a.
	 */ function clone(a) {
        if (isArray$5(a)) return map$2(a).call(a, function(value) {
            return clone(value);
        });
        else if (_typeof_1(a) === "object" && a !== null) return deepObjectAssignNonentry({
        }, a);
        else return a;
    }
    /**
	 * Strip DELETE from given object.
	 *
	 * @param a - Object which may contain DELETE but won't after this is executed.
	 */ function stripDelete(a) {
        for(var _i = 0, _Object$keys = keys$3(a); _i < _Object$keys.length; _i++){
            var prop = _Object$keys[_i];
            if (a[prop] === DELETE) delete a[prop];
            else if (_typeof_1(a[prop]) === "object" && a[prop] !== null) stripDelete(a[prop]);
        }
    }
    /**
	 * Setup a mock hammer.js object, for unit testing.
	 *
	 * Inspiration: https://github.com/uber/deck.gl/pull/658
	 *
	 * @returns {{on: noop, off: noop, destroy: noop, emit: noop, get: get}}
	 */ function hammerMock() {
        var noop = function noop() {
        };
        return {
            on: noop,
            off: noop,
            destroy: noop,
            emit: noop,
            get: function get() {
                return {
                    set: noop
                };
            }
        };
    }
    var Hammer$1 = typeof window !== "undefined" ? window.Hammer || Hammer1 : function() {
        // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.
        return hammerMock();
    };
    /**
	 * Turn an element into an clickToUse element.
	 * When not active, the element has a transparent overlay. When the overlay is
	 * clicked, the mode is changed to active.
	 * When active, the element is displayed with a blue border around it, and
	 * the interactive contents of the element can be used. When clicked outside
	 * the element, the elements mode is changed to inactive.
	 *
	 * @param {Element} container
	 * @class Activator
	 */ function Activator(container) {
        var _this = this, _context3;
        this._cleanupQueue = [];
        this.active = false;
        this._dom = {
            container: container,
            overlay: document.createElement("div")
        };
        this._dom.overlay.classList.add("vis-overlay");
        this._dom.container.appendChild(this._dom.overlay);
        this._cleanupQueue.push(function() {
            _this._dom.overlay.parentNode.removeChild(_this._dom.overlay);
        });
        var hammer = Hammer$1(this._dom.overlay);
        hammer.on("tap", bind$2(_context3 = this._onTapOverlay).call(_context3, this));
        this._cleanupQueue.push(function() {
            hammer.destroy(); // FIXME: cleaning up hammer instances doesn't work (Timeline not removed
        // from memory)
        }); // block all touch events (except tap)
        var events = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        forEach$2(events).call(events, function(event1) {
            hammer.on(event1, function(event) {
                event.srcEvent.stopPropagation();
            });
        }); // attach a click event to the window, in order to deactivate when clicking outside the timeline
        if (document && document.body) {
            this._onClick = function(event) {
                if (!_hasParent(event.target, container)) _this.deactivate();
            };
            document.body.addEventListener("click", this._onClick);
            this._cleanupQueue.push(function() {
                document.body.removeEventListener("click", _this._onClick);
            });
        } // prepare escape key listener for deactivating when active
        this._escListener = function(event) {
            if ("key" in event ? event.key === "Escape" : event.keyCode === 27) _this.deactivate();
        };
    } // turn into an event emitter
    componentEmitter(Activator.prototype); // The currently active activator
    Activator.current = null;
    /**
	 * Destroy the activator. Cleans up all created DOM and event listeners
	 */ Activator.prototype.destroy = function() {
        var _context4, _context5;
        this.deactivate();
        var _iterator2 = _createForOfIteratorHelper(reverse$2(_context4 = splice$2(_context5 = this._cleanupQueue).call(_context5, 0)).call(_context4)), _step2;
        try {
            for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                var callback = _step2.value;
                callback();
            }
        } catch (err) {
            _iterator2.e(err);
        } finally{
            _iterator2.f();
        }
    };
    /**
	 * Activate the element
	 * Overlay is hidden, element is decorated with a blue shadow border
	 */ Activator.prototype.activate = function() {
        // we allow only one active activator at a time
        if (Activator.current) Activator.current.deactivate();
        Activator.current = this;
        this.active = true;
        this._dom.overlay.style.display = "none";
        this._dom.container.classList.add("vis-active");
        this.emit("change");
        this.emit("activate"); // ugly hack: bind ESC after emitting the events, as the Network rebinds all
        // keyboard events on a 'change' event
        document.body.addEventListener("keydown", this._escListener);
    };
    /**
	 * Deactivate the element
	 * Overlay is displayed on top of the element
	 */ Activator.prototype.deactivate = function() {
        this.active = false;
        this._dom.overlay.style.display = "block";
        this._dom.container.classList.remove("vis-active");
        document.body.removeEventListener("keydown", this._escListener);
        this.emit("change");
        this.emit("deactivate");
    };
    /**
	 * Handle a tap event: activate the container
	 *
	 * @param {Event}  event   The event
	 * @private
	 */ Activator.prototype._onTapOverlay = function(event) {
        // activate the container
        this.activate();
        event.srcEvent.stopPropagation();
    };
    /**
	 * Test whether the element has the requested parent element somewhere in
	 * its chain of parent nodes.
	 *
	 * @param {HTMLElement} element
	 * @param {HTMLElement} parent
	 * @returns {boolean} Returns true when the parent is found somewhere in the
	 *                    chain of parent nodes.
	 * @private
	 */ function _hasParent(element, parent) {
        while(element){
            if (element === parent) return true;
            element = element.parentNode;
        }
        return false;
    } // utility functions
    var nativeConstruct = getBuiltIn('Reflect', 'construct'); // `Reflect.construct` method
    // https://tc39.github.io/ecma262/#sec-reflect.construct
    // MS Edge supports only 2 arguments and argumentsList argument is optional
    // FF Nightly sets third argument as `new.target`, but does not create `this` from it
    var NEW_TARGET_BUG = fails(function() {
        function F() {
        /* empty */ }
        return !(nativeConstruct(function() {
        /* empty */ }, [], F) instanceof F);
    });
    var ARGS_BUG = !fails(function() {
        nativeConstruct(function() {
        /* empty */ });
    });
    var FORCED$4 = NEW_TARGET_BUG || ARGS_BUG;
    _export({
        target: 'Reflect',
        stat: true,
        forced: FORCED$4,
        sham: FORCED$4
    }, {
        construct: function construct(Target, args) {
            aFunction(Target);
            anObject(args);
            var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
            if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
            if (Target == newTarget) {
                // w/o altered newTarget, optimization for 0-4 arguments
                switch(args.length){
                    case 0:
                        return new Target();
                    case 1:
                        return new Target(args[0]);
                    case 2:
                        return new Target(args[0], args[1]);
                    case 3:
                        return new Target(args[0], args[1], args[2]);
                    case 4:
                        return new Target(args[0], args[1], args[2], args[3]);
                } // w/o altered newTarget, lot of arguments case
                var $args = [
                    null
                ];
                $args.push.apply($args, args);
                return new (functionBind.apply(Target, $args))();
            } // with altered newTarget, not support built-in constructors
            var proto = newTarget.prototype;
            var instance = objectCreate(isObject(proto) ? proto : Object.prototype);
            var result = Function.apply.call(Target, instance, args);
            return isObject(result) ? result : instance;
        }
    });
    var construct$1 = path.Reflect.construct;
    var construct$2 = construct$1;
    var construct$3 = construct$2;
    var entries1 = entryVirtual('Array').entries;
    var entries$1 = entries1;
    var ArrayPrototype$a = Array.prototype;
    var DOMIterables$1 = {
        DOMTokenList: true,
        NodeList: true
    };
    var entries_1 = function(it) {
        var own = it.entries;
        return it === ArrayPrototype$a || it instanceof Array && own === ArrayPrototype$a.entries // eslint-disable-next-line no-prototype-builtins
         || DOMIterables$1.hasOwnProperty(classof(it)) ? entries$1 : own;
    };
    var entries$2 = entries_1;
    /**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */ var runtime_1 = createCommonjsModule(function(module) {
        var runtime = function(exports) {
            var Op = Object.prototype;
            var hasOwn = Op.hasOwnProperty;
            var undefined$1; // More compressible than void 0.
            var $Symbol = typeof Symbol === "function" ? Symbol : {
            };
            var iteratorSymbol = $Symbol.iterator || "@@iterator";
            var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
            var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
            function define(obj, key, value) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
                return obj[key];
            }
            try {
                // IE 8 has a broken Object.defineProperty that only works on DOM objects.
                define({
                }, "");
            } catch (err1) {
                define = function(obj, key, value) {
                    return obj[key] = value;
                };
            }
            function wrap(innerFn, outerFn, self, tryLocsList) {
                // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
                // .throw, and .return methods.
                generator._invoke = makeInvokeMethod(innerFn, self, context);
                return generator;
            }
            exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
            // record like context.tryEntries[i].completion. This interface could
            // have been (and was previously) designed to take a closure to be
            // invoked without arguments, but in all the cases we care about we
            // already have an existing method we want to call, so there's no need
            // to create a new function object. We can even get away with assuming
            // the method takes exactly one argument, since that happens to be true
            // in every case, so we don't have to touch the arguments object. The
            // only additional allocation required is the completion record, which
            // has a stable shape and so hopefully should be cheap to allocate.
            function tryCatch(fn, obj, arg) {
                try {
                    return {
                        type: "normal",
                        arg: fn.call(obj, arg)
                    };
                } catch (err) {
                    return {
                        type: "throw",
                        arg: err
                    };
                }
            }
            var GenStateSuspendedStart = "suspendedStart";
            var GenStateSuspendedYield = "suspendedYield";
            var GenStateExecuting = "executing";
            var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
            // breaking out of the dispatch switch statement.
            var ContinueSentinel = {
            }; // Dummy constructor functions that we use as the .constructor and
            // .constructor.prototype properties for functions that return Generator
            // objects. For full spec compliance, you may wish to configure your
            // minifier not to mangle the names of these two functions.
            function Generator() {
            }
            function GeneratorFunction() {
            }
            function GeneratorFunctionPrototype() {
            } // This is a polyfill for %IteratorPrototype% for environments that
            // don't natively support it.
            var IteratorPrototype = {
            };
            IteratorPrototype[iteratorSymbol] = function() {
                return this;
            };
            var getProto = Object.getPrototypeOf;
            var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
            if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) // This environment has a native %IteratorPrototype%; use it instead
            // of the polyfill.
            IteratorPrototype = NativeIteratorPrototype;
            var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
            GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
            GeneratorFunctionPrototype.constructor = GeneratorFunction;
            GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
            // Iterator interface in terms of a single ._invoke method.
            function defineIteratorMethods(prototype) {
                [
                    "next",
                    "throw",
                    "return"
                ].forEach(function(method) {
                    define(prototype, method, function(arg) {
                        return this._invoke(method, arg);
                    });
                });
            }
            exports.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ? ctor === GeneratorFunction || // do is to check its .name property.
                (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
            };
            exports.mark = function(genFun) {
                if (Object.setPrototypeOf) Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                else {
                    genFun.__proto__ = GeneratorFunctionPrototype;
                    define(genFun, toStringTagSymbol, "GeneratorFunction");
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
            }; // Within the body of any async function, `await x` is transformed to
            // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
            // `hasOwn.call(value, "__await")` to determine if the yielded value is
            // meant to be awaited.
            exports.awrap = function(arg) {
                return {
                    __await: arg
                };
            };
            function AsyncIterator(generator, PromiseImpl) {
                function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);
                    if (record.type === "throw") reject(record.arg);
                    else {
                        var result = record.arg;
                        var value1 = result.value;
                        if (value1 && typeof value1 === "object" && hasOwn.call(value1, "__await")) return PromiseImpl.resolve(value1.__await).then(function(value) {
                            invoke("next", value, resolve, reject);
                        }, function(err) {
                            invoke("throw", err, resolve, reject);
                        });
                        return PromiseImpl.resolve(value1).then(function(unwrapped) {
                            // When a yielded Promise is resolved, its final value becomes
                            // the .value of the Promise<{value,done}> result for the
                            // current iteration.
                            result.value = unwrapped;
                            resolve(result);
                        }, function(error) {
                            // If a rejected Promise was yielded, throw the rejection back
                            // into the async generator function so it can be handled there.
                            return invoke("throw", error, resolve, reject);
                        });
                    }
                }
                var previousPromise;
                function enqueue(method, arg) {
                    function callInvokeWithMethodAndArg() {
                        return new PromiseImpl(function(resolve, reject) {
                            invoke(method, arg, resolve, reject);
                        });
                    }
                    return previousPromise = // all previous Promises have been resolved before calling invoke,
                    // so that results are always delivered in the correct order. If
                    // enqueue has not been called before, then it is important to
                    // call invoke immediately, without waiting on a callback to fire,
                    // so that the async generator function has the opportunity to do
                    // any necessary setup in a predictable way. This predictability
                    // is why the Promise constructor synchronously invokes its
                    // executor callback, and why async functions synchronously
                    // execute code before the first await. Since we implement simple
                    // async functions in terms of async generators, it is especially
                    // important to get this right, even though it requires care.
                    previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // invocations of the iterator.
                    callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                } // Define the unified helper method that is used to implement .next,
                // .throw, and .return (see defineIteratorMethods).
                this._invoke = enqueue;
            }
            defineIteratorMethods(AsyncIterator.prototype);
            AsyncIterator.prototype[asyncIteratorSymbol] = function() {
                return this;
            };
            exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
            // AsyncIterator objects; they just return a Promise for the value of
            // the final result produced by the iterator.
            exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
                if (PromiseImpl === void 0) PromiseImpl = Promise;
                var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
                return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
                 : iter.next().then(function(result) {
                    return result.done ? result.value : iter.next();
                });
            };
            function makeInvokeMethod(innerFn, self, context) {
                var state = GenStateSuspendedStart;
                return function invoke(method, arg) {
                    if (state === GenStateExecuting) throw new Error("Generator is already running");
                    if (state === GenStateCompleted) {
                        if (method === "throw") throw arg;
                         // Be forgiving, per 25.3.3.3.3 of the spec:
                        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                        return doneResult();
                    }
                    context.method = method;
                    context.arg = arg;
                    while(true){
                        var delegate = context.delegate;
                        if (delegate) {
                            var delegateResult = maybeInvokeDelegate(delegate, context);
                            if (delegateResult) {
                                if (delegateResult === ContinueSentinel) continue;
                                return delegateResult;
                            }
                        }
                        if (context.method === "next") // Setting context._sent for legacy support of Babel's
                        // function.sent implementation.
                        context.sent = context._sent = context.arg;
                        else if (context.method === "throw") {
                            if (state === GenStateSuspendedStart) {
                                state = GenStateCompleted;
                                throw context.arg;
                            }
                            context.dispatchException(context.arg);
                        } else if (context.method === "return") context.abrupt("return", context.arg);
                        state = GenStateExecuting;
                        var record = tryCatch(innerFn, self, context);
                        if (record.type === "normal") {
                            // If an exception is thrown from innerFn, we leave state ===
                            // GenStateExecuting and loop back for another invocation.
                            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                            if (record.arg === ContinueSentinel) continue;
                            return {
                                value: record.arg,
                                done: context.done
                            };
                        } else if (record.type === "throw") {
                            state = GenStateCompleted; // Dispatch the exception by looping back around to the
                            // context.dispatchException(context.arg) call above.
                            context.method = "throw";
                            context.arg = record.arg;
                        }
                    }
                };
            } // Call delegate.iterator[context.method](context.arg) and handle the
            // result, either by returning a { value, done } result from the
            // delegate iterator, or by modifying context.method and context.arg,
            // setting context.delegate to null, and returning the ContinueSentinel.
            function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined$1) {
                    // A .throw or .return when the delegate iterator has no .throw
                    // method always terminates the yield* loop.
                    context.delegate = null;
                    if (context.method === "throw") {
                        // Note: ["return"] must be used for ES3 parsing compatibility.
                        if (delegate.iterator["return"]) {
                            // If the delegate iterator has a return method, give it a
                            // chance to clean up.
                            context.method = "return";
                            context.arg = undefined$1;
                            maybeInvokeDelegate(delegate, context);
                            if (context.method === "throw") // If maybeInvokeDelegate(context) changed context.method from
                            // "return" to "throw", let that override the TypeError below.
                            return ContinueSentinel;
                        }
                        context.method = "throw";
                        context.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }
                    return ContinueSentinel;
                }
                var record = tryCatch(method, delegate.iterator, context.arg);
                if (record.type === "throw") {
                    context.method = "throw";
                    context.arg = record.arg;
                    context.delegate = null;
                    return ContinueSentinel;
                }
                var info = record.arg;
                if (!info) {
                    context.method = "throw";
                    context.arg = new TypeError("iterator result is not an object");
                    context.delegate = null;
                    return ContinueSentinel;
                }
                if (info.done) {
                    // Assign the result of the finished delegate to the temporary
                    // variable specified by delegate.resultName (see delegateYield).
                    context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).
                    context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
                    // exception, let the outer generator proceed normally. If
                    // context.method was "next", forget context.arg since it has been
                    // "consumed" by the delegate iterator. If context.method was
                    // "return", allow the original .return call to continue in the
                    // outer generator.
                    if (context.method !== "return") {
                        context.method = "next";
                        context.arg = undefined$1;
                    }
                } else // Re-yield the result returned by the delegate method.
                return info;
                 // The delegate iterator is finished, so forget it and continue with
                // the outer generator.
                context.delegate = null;
                return ContinueSentinel;
            } // Define Generator.prototype.{next,throw,return} in terms of the
            // unified ._invoke helper method.
            defineIteratorMethods(Gp);
            define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
            // @@iterator function is called on it. Some browsers' implementations of the
            // iterator prototype chain incorrectly implement this, causing the Generator
            // object to not be returned from this call. This ensures that doesn't happen.
            // See https://github.com/facebook/regenerator/issues/274 for more details.
            Gp[iteratorSymbol] = function() {
                return this;
            };
            Gp.toString = function() {
                return "[object Generator]";
            };
            function pushTryEntry(locs) {
                var entry = {
                    tryLoc: locs[0]
                };
                if (1 in locs) entry.catchLoc = locs[1];
                if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
            }
            function resetTryEntry(entry) {
                var record = entry.completion || {
                };
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
            }
            function Context(tryLocsList) {
                // The root entry object (effectively a try statement without a catch
                // or a finally block) gives us a place to store values thrown from
                // locations where there is no enclosing try statement.
                this.tryEntries = [
                    {
                        tryLoc: "root"
                    }
                ];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
            }
            exports.keys = function(object) {
                var keys = [];
                for(var key1 in object)keys.push(key1);
                keys.reverse(); // Rather than returning an object with a next method, we keep
                // things simple and return the next function itself.
                return function next() {
                    while(keys.length){
                        var key = keys.pop();
                        if (key in object) {
                            next.value = key;
                            next.done = false;
                            return next;
                        }
                    } // To avoid creating an additional object, we just hang the .value
                    // and .done properties off the next function object itself. This
                    // also ensures that the minifier will not anonymize the function.
                    next.done = true;
                    return next;
                };
            };
            function values(iterable) {
                if (iterable) {
                    var iteratorMethod = iterable[iteratorSymbol];
                    if (iteratorMethod) return iteratorMethod.call(iterable);
                    if (typeof iterable.next === "function") return iterable;
                    if (!isNaN(iterable.length)) {
                        var i = -1, next1 = function next() {
                            while(++i < iterable.length)if (hasOwn.call(iterable, i)) {
                                next.value = iterable[i];
                                next.done = false;
                                return next;
                            }
                            next.value = undefined$1;
                            next.done = true;
                            return next;
                        };
                        return next1.next = next1;
                    }
                } // Return an iterator with no values.
                return {
                    next: doneResult
                };
            }
            exports.values = values;
            function doneResult() {
                return {
                    value: undefined$1,
                    done: true
                };
            }
            Context.prototype = {
                constructor: Context,
                reset: function(skipTempReset) {
                    this.prev = 0;
                    this.next = 0; // Resetting context._sent for legacy support of Babel's
                    // function.sent implementation.
                    this.sent = this._sent = undefined$1;
                    this.done = false;
                    this.delegate = null;
                    this.method = "next";
                    this.arg = undefined$1;
                    this.tryEntries.forEach(resetTryEntry);
                    if (!skipTempReset) {
                        for(var name in this)// Not sure about the optimal order of these conditions:
                        if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) this[name] = undefined$1;
                    }
                },
                stop: function() {
                    this.done = true;
                    var rootEntry = this.tryEntries[0];
                    var rootRecord = rootEntry.completion;
                    if (rootRecord.type === "throw") throw rootRecord.arg;
                    return this.rval;
                },
                dispatchException: function(exception) {
                    if (this.done) throw exception;
                    var context = this;
                    function handle(loc, caught) {
                        record.type = "throw";
                        record.arg = exception;
                        context.next = loc;
                        if (caught) {
                            // If the dispatched exception was caught by a catch block,
                            // then let that catch block handle the exception normally.
                            context.method = "next";
                            context.arg = undefined$1;
                        }
                        return !!caught;
                    }
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        var record = entry.completion;
                        if (entry.tryLoc === "root") // Exception thrown outside of any try block that could handle
                        // it, so set the completion value of the entire function to
                        // throw the exception.
                        return handle("end");
                        if (entry.tryLoc <= this.prev) {
                            var hasCatch = hasOwn.call(entry, "catchLoc");
                            var hasFinally = hasOwn.call(entry, "finallyLoc");
                            if (hasCatch && hasFinally) {
                                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                                else if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                            } else if (hasCatch) {
                                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                            } else if (hasFinally) {
                                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                            } else throw new Error("try statement without catch or finally");
                        }
                    }
                },
                abrupt: function(type, arg) {
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                            var finallyEntry = entry;
                            break;
                        }
                    }
                    if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) // Ignore the finally entry if control is not jumping to a
                    // location outside the try/catch block.
                    finallyEntry = null;
                    var record = finallyEntry ? finallyEntry.completion : {
                    };
                    record.type = type;
                    record.arg = arg;
                    if (finallyEntry) {
                        this.method = "next";
                        this.next = finallyEntry.finallyLoc;
                        return ContinueSentinel;
                    }
                    return this.complete(record);
                },
                complete: function(record, afterLoc) {
                    if (record.type === "throw") throw record.arg;
                    if (record.type === "break" || record.type === "continue") this.next = record.arg;
                    else if (record.type === "return") {
                        this.rval = this.arg = record.arg;
                        this.method = "return";
                        this.next = "end";
                    } else if (record.type === "normal" && afterLoc) this.next = afterLoc;
                    return ContinueSentinel;
                },
                finish: function(finallyLoc) {
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        if (entry.finallyLoc === finallyLoc) {
                            this.complete(entry.completion, entry.afterLoc);
                            resetTryEntry(entry);
                            return ContinueSentinel;
                        }
                    }
                },
                "catch": function(tryLoc) {
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc === tryLoc) {
                            var record = entry.completion;
                            if (record.type === "throw") {
                                var thrown = record.arg;
                                resetTryEntry(entry);
                            }
                            return thrown;
                        }
                    } // The context.catch method must only be called with a location
                    // argument that corresponds to a known catch block.
                    throw new Error("illegal catch attempt");
                },
                delegateYield: function(iterable, resultName, nextLoc) {
                    this.delegate = {
                        iterator: values(iterable),
                        resultName: resultName,
                        nextLoc: nextLoc
                    };
                    if (this.method === "next") // Deliberately forget the last sent value so that we don't
                    // accidentally pass it on to the delegate.
                    this.arg = undefined$1;
                    return ContinueSentinel;
                }
            }; // Regardless of whether this script is executing as a CommonJS module
            // or not, return the runtime object so that we can declare the variable
            // regeneratorRuntime in the outer scope, which allows this module to be
            // injected easily by `bin/regenerator --include-runtime script.js`.
            return exports;
        }(// as the regeneratorRuntime namespace. Otherwise create a new empty
        // object. Either way, the resulting object will be used to initialize
        // the regeneratorRuntime variable at the top of this file.
        module.exports);
        try {
            regeneratorRuntime = runtime;
        } catch (accidentalStrictMode) {
            // This module should not be running in strict mode, so the above
            // assignment should always work unless something is misconfigured. Just
            // in case runtime.js accidentally runs in strict mode, we can escape
            // strict mode using a global Function call. This could conceivably fail
            // if a Content Security Policy forbids using Function, but in that case
            // the proper solution is to fix the accidental strict mode problem. If
            // you've misconfigured your bundler to force strict mode and applied a
            // CSP to forbid Function, and you're not willing to fix either of those
            // problems, please detail your unique predicament in a GitHub issue.
            Function("r", "regeneratorRuntime = r")(runtime);
        }
    });
    var regenerator = runtime_1;
    var iterator$3 = iterator1;
    var iterator$4 = iterator$3;
    var values$1 = entryVirtual('Array').values;
    var values$2 = values$1;
    var ArrayPrototype$b = Array.prototype;
    var DOMIterables$2 = {
        DOMTokenList: true,
        NodeList: true
    };
    var values_1 = function(it) {
        var own = it.values;
        return it === ArrayPrototype$b || it instanceof Array && own === ArrayPrototype$b.values // eslint-disable-next-line no-prototype-builtins
         || DOMIterables$2.hasOwnProperty(classof(it)) ? values$2 : own;
    };
    var values$3 = values_1;
    var test$2 = [];
    var nativeSort = test$2.sort; // IE8-
    var FAILS_ON_UNDEFINED = fails(function() {
        test$2.sort(undefined);
    }); // V8 bug
    var FAILS_ON_NULL = fails(function() {
        test$2.sort(null);
    }); // Old WebKit
    var STRICT_METHOD$3 = arrayMethodIsStrict('sort');
    var FORCED$5 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$3; // `Array.prototype.sort` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.sort
    _export({
        target: 'Array',
        proto: true,
        forced: FORCED$5
    }, {
        sort: function sort(comparefn) {
            return comparefn === undefined ? nativeSort.call(toObject(this)) : nativeSort.call(toObject(this), aFunction(comparefn));
        }
    });
    var sort1 = entryVirtual('Array').sort;
    var ArrayPrototype$c = Array.prototype;
    var sort_1 = function(it) {
        var own = it.sort;
        return it === ArrayPrototype$c || it instanceof Array && own === ArrayPrototype$c.sort ? sort1 : own;
    };
    var sort$1 = sort_1;
    var sort$2 = sort$1;
    var keys$4 = entryVirtual('Array').keys;
    var keys$5 = keys$4;
    var ArrayPrototype$d = Array.prototype;
    var DOMIterables$3 = {
        DOMTokenList: true,
        NodeList: true
    };
    var keys_1 = function(it) {
        var own = it.keys;
        return it === ArrayPrototype$d || it instanceof Array && own === ArrayPrototype$d.keys // eslint-disable-next-line no-prototype-builtins
         || DOMIterables$3.hasOwnProperty(classof(it)) ? keys$5 : own;
    };
    var keys$6 = keys_1;
    var $some = arrayIteration.some;
    var STRICT_METHOD$4 = arrayMethodIsStrict('some');
    var USES_TO_LENGTH$8 = arrayMethodUsesToLength('some'); // `Array.prototype.some` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.some
    _export({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD$4 || !USES_TO_LENGTH$8
    }, {
        some: function some(callbackfn) {
            return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var some = entryVirtual('Array').some;
    var ArrayPrototype$e = Array.prototype;
    var some_1 = function(it) {
        var own = it.some;
        return it === ArrayPrototype$e || it instanceof Array && own === ArrayPrototype$e.some ? some : own;
    };
    var some$1 = some_1;
    var some$2 = some$1;
    var freezing = !fails(function() {
        return Object.isExtensible(Object.preventExtensions({
        }));
    });
    var internalMetadata = createCommonjsModule(function(module) {
        var defineProperty = objectDefineProperty.f;
        var METADATA = uid('meta');
        var id = 0;
        var isExtensible = Object.isExtensible || function() {
            return true;
        };
        var setMetadata = function(it) {
            defineProperty(it, METADATA, {
                value: {
                    objectID: 'O' + ++id,
                    // object ID
                    weakData: {
                    } // weak collections IDs
                }
            });
        };
        var fastKey = function(it, create) {
            // return a primitive with prefix
            if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
            if (!has(it, METADATA)) {
                // can't set metadata to uncaught frozen object
                if (!isExtensible(it)) return 'F'; // not necessary to add metadata
                if (!create) return 'E'; // add missing metadata
                setMetadata(it); // return object ID
            }
            return it[METADATA].objectID;
        };
        var getWeakData = function(it, create) {
            if (!has(it, METADATA)) {
                // can't set metadata to uncaught frozen object
                if (!isExtensible(it)) return true; // not necessary to add metadata
                if (!create) return false; // add missing metadata
                setMetadata(it); // return the store of weak collections IDs
            }
            return it[METADATA].weakData;
        }; // add metadata on freeze-family methods calling
        var onFreeze = function(it) {
            if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
            return it;
        };
        var meta = module.exports = {
            REQUIRED: false,
            fastKey: fastKey,
            getWeakData: getWeakData,
            onFreeze: onFreeze
        };
        hiddenKeys[METADATA] = true;
    });
    var Result = function(stopped, result) {
        this.stopped = stopped;
        this.result = result;
    };
    var iterate = function(iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = functionBindContext(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
        var iterator, iterFn, index, length, result, next, step;
        var stop = function(condition) {
            if (iterator) iteratorClose(iterator);
            return new Result(true, condition);
        };
        var callFn = function(value) {
            if (AS_ENTRIES) {
                anObject(value);
                return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
            }
            return INTERRUPTED ? fn(value, stop) : fn(value);
        };
        if (IS_ITERATOR) iterator = iterable;
        else {
            iterFn = getIteratorMethod(iterable);
            if (typeof iterFn != 'function') throw TypeError('Target is not iterable'); // optimisation for array iterators
            if (isArrayIteratorMethod(iterFn)) {
                for(index = 0, length = toLength(iterable.length); length > index; index++){
                    result = callFn(iterable[index]);
                    if (result && result instanceof Result) return result;
                }
                return new Result(false);
            }
            iterator = iterFn.call(iterable);
        }
        next = iterator.next;
        while(!(step = next.call(iterator)).done){
            try {
                result = callFn(step.value);
            } catch (error) {
                iteratorClose(iterator);
                throw error;
            }
            if (typeof result == 'object' && result && result instanceof Result) return result;
        }
        return new Result(false);
    };
    var anInstance = function(it, Constructor, name) {
        if (!(it instanceof Constructor)) throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
        return it;
    };
    var defineProperty$9 = objectDefineProperty.f;
    var forEach$3 = arrayIteration.forEach;
    var setInternalState$3 = internalState.set;
    var internalStateGetterFor = internalState.getterFor;
    var collection1 = function(CONSTRUCTOR_NAME, wrapper, common) {
        var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
        var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
        var ADDER = IS_MAP ? 'set' : 'add';
        var NativeConstructor = global$1[CONSTRUCTOR_NAME];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        var exported = {
        };
        var Constructor;
        if (!descriptors || typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
            new NativeConstructor().entries().next();
        }))) {
            // create collection constructor
            Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
            internalMetadata.REQUIRED = true;
        } else {
            Constructor = wrapper(function(target, iterable) {
                setInternalState$3(anInstance(target, Constructor, CONSTRUCTOR_NAME), {
                    type: CONSTRUCTOR_NAME,
                    collection: new NativeConstructor()
                });
                if (iterable != undefined) iterate(iterable, target[ADDER], {
                    that: target,
                    AS_ENTRIES: IS_MAP
                });
            });
            var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
            forEach$3([
                'add',
                'clear',
                'delete',
                'forEach',
                'get',
                'has',
                'set',
                'keys',
                'values',
                'entries'
            ], function(KEY) {
                var IS_ADDER = KEY == 'add' || KEY == 'set';
                if (KEY in NativePrototype && !(IS_WEAK && KEY == 'clear')) createNonEnumerableProperty(Constructor.prototype, KEY, function(a, b) {
                    var collection = getInternalState(this).collection;
                    if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
                    var result = collection[KEY](a === 0 ? 0 : a, b);
                    return IS_ADDER ? this : result;
                });
            });
            IS_WEAK || defineProperty$9(Constructor.prototype, 'size', {
                configurable: true,
                get: function() {
                    return getInternalState(this).collection.size;
                }
            });
        }
        setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
        exported[CONSTRUCTOR_NAME] = Constructor;
        _export({
            global: true,
            forced: true
        }, exported);
        if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
        return Constructor;
    };
    var redefineAll = function(target, src, options) {
        for(var key in src)if (options && options.unsafe && target[key]) target[key] = src[key];
        else redefine(target, key, src[key], options);
        return target;
    };
    var SPECIES$3 = wellKnownSymbol('species');
    var setSpecies = function(CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty = objectDefineProperty.f;
        if (descriptors && Constructor && !Constructor[SPECIES$3]) defineProperty(Constructor, SPECIES$3, {
            configurable: true,
            get: function() {
                return this;
            }
        });
    };
    var defineProperty$a = objectDefineProperty.f;
    var fastKey1 = internalMetadata.fastKey;
    var setInternalState$4 = internalState.set;
    var internalStateGetterFor$1 = internalState.getterFor;
    var collectionStrong = {
        getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
            var C = wrapper(function(that, iterable) {
                anInstance(that, C, CONSTRUCTOR_NAME);
                setInternalState$4(that, {
                    type: CONSTRUCTOR_NAME,
                    index: objectCreate(null),
                    first: undefined,
                    last: undefined,
                    size: 0
                });
                if (!descriptors) that.size = 0;
                if (iterable != undefined) iterate(iterable, that[ADDER], {
                    that: that,
                    AS_ENTRIES: IS_MAP
                });
            });
            var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
            var define = function(that, key, value) {
                var state = getInternalState(that);
                var entry = getEntry(that, key);
                var previous, index; // change existing entry
                if (entry) entry.value = value; // create new entry
                else {
                    state.last = entry = {
                        index: index = fastKey1(key, true),
                        key: key,
                        value: value,
                        previous: previous = state.last,
                        next: undefined,
                        removed: false
                    };
                    if (!state.first) state.first = entry;
                    if (previous) previous.next = entry;
                    if (descriptors) state.size++;
                    else that.size++; // add to index
                    if (index !== 'F') state.index[index] = entry;
                }
                return that;
            };
            var getEntry = function(that, key) {
                var state = getInternalState(that); // fast case
                var index = fastKey1(key);
                var entry;
                if (index !== 'F') return state.index[index]; // frozen object case
                for(entry = state.first; entry; entry = entry.next){
                    if (entry.key == key) return entry;
                }
            };
            redefineAll(C.prototype, {
                // 23.1.3.1 Map.prototype.clear()
                // 23.2.3.2 Set.prototype.clear()
                clear: function clear() {
                    var that = this;
                    var state = getInternalState(that);
                    var data = state.index;
                    var entry = state.first;
                    while(entry){
                        entry.removed = true;
                        if (entry.previous) entry.previous = entry.previous.next = undefined;
                        delete data[entry.index];
                        entry = entry.next;
                    }
                    state.first = state.last = undefined;
                    if (descriptors) state.size = 0;
                    else that.size = 0;
                },
                // 23.1.3.3 Map.prototype.delete(key)
                // 23.2.3.4 Set.prototype.delete(value)
                'delete': function(key) {
                    var that = this;
                    var state = getInternalState(that);
                    var entry = getEntry(that, key);
                    if (entry) {
                        var next = entry.next;
                        var prev = entry.previous;
                        delete state.index[entry.index];
                        entry.removed = true;
                        if (prev) prev.next = next;
                        if (next) next.previous = prev;
                        if (state.first == entry) state.first = next;
                        if (state.last == entry) state.last = prev;
                        if (descriptors) state.size--;
                        else that.size--;
                    }
                    return !!entry;
                },
                // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
                // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
                forEach: function forEach(callbackfn) {
                    var state = getInternalState(this);
                    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
                    var entry;
                    while(entry = entry ? entry.next : state.first){
                        boundFunction(entry.value, entry.key, this); // revert to the last existing entry
                        while(entry && entry.removed)entry = entry.previous;
                    }
                },
                // 23.1.3.7 Map.prototype.has(key)
                // 23.2.3.7 Set.prototype.has(value)
                has: function has(key) {
                    return !!getEntry(this, key);
                }
            });
            redefineAll(C.prototype, IS_MAP ? {
                // 23.1.3.6 Map.prototype.get(key)
                get: function get(key) {
                    var entry = getEntry(this, key);
                    return entry && entry.value;
                },
                // 23.1.3.9 Map.prototype.set(key, value)
                set: function set(key, value) {
                    return define(this, key === 0 ? 0 : key, value);
                }
            } : {
                // 23.2.3.1 Set.prototype.add(value)
                add: function add(value) {
                    return define(this, value = value === 0 ? 0 : value, value);
                }
            });
            if (descriptors) defineProperty$a(C.prototype, 'size', {
                get: function() {
                    return getInternalState(this).size;
                }
            });
            return C;
        },
        setStrong: function(C, CONSTRUCTOR_NAME, IS_MAP) {
            var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
            var getInternalCollectionState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
            var getInternalIteratorState = internalStateGetterFor$1(ITERATOR_NAME); // add .keys, .values, .entries, [@@iterator]
            // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
            defineIterator(C, CONSTRUCTOR_NAME, function(iterated, kind) {
                setInternalState$4(this, {
                    type: ITERATOR_NAME,
                    target: iterated,
                    state: getInternalCollectionState(iterated),
                    kind: kind,
                    last: undefined
                });
            }, function() {
                var state = getInternalIteratorState(this);
                var kind = state.kind;
                var entry = state.last; // revert to the last existing entry
                while(entry && entry.removed)entry = entry.previous; // get next entry
                if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
                    // or finish the iteration
                    state.target = undefined;
                    return {
                        value: undefined,
                        done: true
                    };
                } // return step by kind
                if (kind == 'keys') return {
                    value: entry.key,
                    done: false
                };
                if (kind == 'values') return {
                    value: entry.value,
                    done: false
                };
                return {
                    value: [
                        entry.key,
                        entry.value
                    ],
                    done: false
                };
            }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2
            setSpecies(CONSTRUCTOR_NAME);
        }
    };
    // https://tc39.github.io/ecma262/#sec-map-objects
    var es_map = collection1('Map', function(init) {
        return function Map() {
            return init(this, arguments.length ? arguments[0] : undefined);
        };
    }, collectionStrong);
    var map$3 = path.Map;
    var map$4 = map$3;
    var map$5 = map$4;
    var create$3 = create1;
    var create$4 = create$3;
    // https://tc39.github.io/ecma262/#sec-object.setprototypeof
    _export({
        target: 'Object',
        stat: true
    }, {
        setPrototypeOf: objectSetPrototypeOf
    });
    var setPrototypeOf = path.Object.setPrototypeOf;
    var setPrototypeOf$1 = setPrototypeOf;
    var setPrototypeOf$2 = setPrototypeOf$1;
    var setPrototypeOf$3 = createCommonjsModule(function(module) {
        function _setPrototypeOf(o1, p1) {
            module.exports = _setPrototypeOf = setPrototypeOf$2 || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
            };
            return _setPrototypeOf(o1, p1);
        }
        module.exports = _setPrototypeOf;
    });
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
        subClass.prototype = create$4(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) setPrototypeOf$3(subClass, superClass);
    }
    var inherits = _inherits;
    function _assertThisInitialized$1(self) {
        if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self;
    }
    var assertThisInitialized = _assertThisInitialized$1;
    function _possibleConstructorReturn(self, call) {
        if (call && (_typeof_1(call) === "object" || typeof call === "function")) return call;
        return assertThisInitialized(self);
    }
    var possibleConstructorReturn = _possibleConstructorReturn;
    var getPrototypeOf$1 = getPrototypeOf;
    var getPrototypeOf$2 = getPrototypeOf$1;
    var getPrototypeOf$3 = createCommonjsModule(function(module) {
        function _getPrototypeOf(o2) {
            module.exports = _getPrototypeOf = setPrototypeOf$2 ? getPrototypeOf$2 : function _getPrototypeOf(o) {
                return o.__proto__ || getPrototypeOf$2(o);
            };
            return _getPrototypeOf(o2);
        }
        module.exports = _getPrototypeOf;
    });
    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
        // lazy load so that environments that need to polyfill have a chance to do so
        if (!getRandomValues) {
            // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
            // find the complete implementation of crypto (msCrypto) on IE11.
            getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
            if (!getRandomValues) throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
        return getRandomValues(rnds8);
    }
    var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    function validate(uuid) {
        return typeof uuid === 'string' && REGEX.test(uuid);
    }
    /**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */ var byteToHex = [];
    for(var i1 = 0; i1 < 256; ++i1)byteToHex.push((i1 + 256).toString(16).substr(1));
    function stringify$3(arr) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
        // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
        var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
        // of the following:
        // - One or more input array values don't map to a hex octet (leading to
        // "undefined" in the uuid)
        // - Invalid input values for the RFC `version` or `variant` fields
        if (!validate(uuid)) throw TypeError('Stringified UUID is invalid');
        return uuid;
    }
    function v4(options, buf, offset) {
        options = options || {
        };
        var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
        rnds[6] = rnds[6] & 15 | 64;
        rnds[8] = rnds[8] & 63 | 128; // Copy bytes to buffer, if provided
        if (buf) {
            offset = offset || 0;
            for(var i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
            return buf;
        }
        return stringify$3(rnds);
    }
    /**
	 * Determine whether a value can be used as an id.
	 *
	 * @param value - Input value of unknown type.
	 *
	 * @returns True if the value is valid id, false otherwise.
	 */ function isId(value) {
        return typeof value === "string" || typeof value === "number";
    }
    /**
	 * A queue.
	 *
	 * @typeParam T - The type of method names to be replaced by queued versions.
	 */ var Queue1 = /*#__PURE__*/ function() {
        /**
	   * Construct a new Queue.
	   *
	   * @param options - Queue configuration.
	   */ function Queue(options) {
            classCallCheck(this, Queue);
            this._queue = [];
            this._timeout = null;
            this._extended = null; // options
            this.delay = null;
            this.max = Infinity;
            this.setOptions(options);
        }
        /**
	   * Update the configuration of the queue.
	   *
	   * @param options - Queue configuration.
	   */ createClass(Queue, [
            {
                key: "setOptions",
                value: function setOptions(options) {
                    if (options && typeof options.delay !== "undefined") this.delay = options.delay;
                    if (options && typeof options.max !== "undefined") this.max = options.max;
                    this._flushIfNeeded();
                }
            },
            {
                key: "destroy",
                /**
	     * Destroy the queue. The queue will first flush all queued actions, and in case it has extended an object, will restore the original object.
	     */ value: function destroy() {
                    this.flush();
                    if (this._extended) {
                        var object = this._extended.object;
                        var methods = this._extended.methods;
                        for(var i = 0; i < methods.length; i++){
                            var method = methods[i];
                            if (method.original) // @TODO: better solution?
                            object[method.name] = method.original;
                            else // @TODO: better solution?
                            delete object[method.name];
                        }
                        this._extended = null;
                    }
                }
            },
            {
                key: "replace",
                value: function replace(object, method) {
                    /* eslint-disable-next-line @typescript-eslint/no-this-alias -- Function this is necessary in the function bellow, so class this has to be saved into a variable here. */ var me = this;
                    var original = object[method];
                    if (!original) throw new Error("Method " + method + " undefined");
                    object[method] = function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                        // add this call to the queue
                        me.queue({
                            args: args,
                            fn: original,
                            context: this
                        });
                    };
                }
            },
            {
                key: "queue",
                value: function queue(entry) {
                    if (typeof entry === "function") this._queue.push({
                        fn: entry
                    });
                    else this._queue.push(entry);
                    this._flushIfNeeded();
                }
            },
            {
                key: "_flushIfNeeded",
                value: function _flushIfNeeded() {
                    var _this = this;
                    // flush when the maximum is exceeded.
                    if (this._queue.length > this.max) this.flush();
                     // flush after a period of inactivity when a delay is configured
                    if (this._timeout != null) {
                        clearTimeout(this._timeout);
                        this._timeout = null;
                    }
                    if (this.queue.length > 0 && typeof this.delay === "number") this._timeout = setTimeout$2(function() {
                        _this.flush();
                    }, this.delay);
                }
            },
            {
                key: "flush",
                value: function flush() {
                    var _context, _context2;
                    forEach$2(_context = splice$2(_context2 = this._queue).call(_context2, 0)).call(_context, function(entry) {
                        entry.fn.apply(entry.context || entry.fn, entry.args || []);
                    });
                }
            }
        ], [
            {
                key: "extend",
                value: function extend(object, options) {
                    var queue = new Queue(options);
                    if (object.flush !== undefined) throw new Error("Target object already has a property flush");
                    object.flush = function() {
                        queue.flush();
                    };
                    var methods = [
                        {
                            name: "flush",
                            original: undefined
                        }
                    ];
                    if (options && options.replace) for(var i = 0; i < options.replace.length; i++){
                        var name = options.replace[i];
                        methods.push({
                            name: name,
                            // @TODO: better solution?
                            original: object[name]
                        }); // @TODO: better solution?
                        queue.replace(object, name);
                    }
                    queue._extended = {
                        object: object,
                        methods: methods
                    };
                    return queue;
                }
            }
        ]);
        return Queue;
    }();
    /**
	 * [[DataSet]] code that can be reused in [[DataView]] or other similar implementations of [[DataInterface]].
	 *
	 * @typeParam Item - Item type that may or may not have an id.
	 * @typeParam IdProp - Name of the property that contains the id.
	 */ var DataSetPart1 = /*#__PURE__*/ function() {
        function DataSetPart() {
            classCallCheck(this, DataSetPart);
            this._subscribers = {
                "*": [],
                add: [],
                remove: [],
                update: []
            };
            /**
	     * @deprecated Use on instead (PS: DataView.subscribe === DataView.on).
	     */ this.subscribe = DataSetPart.prototype.on;
            /**
	     * @deprecated Use off instead (PS: DataView.unsubscribe === DataView.off).
	     */ this.unsubscribe = DataSetPart.prototype.off;
        }
        /**
	   * Trigger an event
	   *
	   * @param event - Event name.
	   * @param payload - Event payload.
	   * @param senderId - Id of the sender.
	   */ createClass(DataSetPart, [
            {
                key: "_trigger",
                value: function _trigger(event, payload, senderId) {
                    var _context, _context2;
                    if (event === "*") throw new Error("Cannot trigger event *");
                    forEach$2(_context = concat$2(_context2 = []).call(_context2, toConsumableArray(this._subscribers[event]), toConsumableArray(this._subscribers["*"]))).call(_context, function(subscriber) {
                        subscriber(event, payload, senderId != null ? senderId : null);
                    });
                }
            },
            {
                key: "on",
                value: function on(event, callback) {
                    if (typeof callback === "function") this._subscribers[event].push(callback);
                     // @TODO: Maybe throw for invalid callbacks?
                }
            },
            {
                key: "off",
                value: function off(event, callback) {
                    var _context3;
                    this._subscribers[event] = filter$2(_context3 = this._subscribers[event]).call(_context3, function(subscriber) {
                        return subscriber !== callback;
                    });
                }
            }
        ]);
        return DataSetPart;
    }();
    // https://tc39.github.io/ecma262/#sec-set-objects
    var es_set = collection1('Set', function(init) {
        return function Set() {
            return init(this, arguments.length ? arguments[0] : undefined);
        };
    }, collectionStrong);
    var set$1 = path.Set;
    var set$2 = set$1;
    var set$3 = set$2;
    function _createForOfIteratorHelper$1(o, allowArrayLike) {
        var it;
        if (typeof symbol$4 === "undefined" || getIteratorMethod$1(o) == null) {
            if (isArray$5(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {
                };
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = getIterator$1(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$2(o, minLen) {
        var _context10;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
        var n = slice$6(_context10 = Object.prototype.toString.call(o)).call(_context10, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$2(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
    }
    function _arrayLikeToArray$2(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    /**
	 * Data stream
	 *
	 * @remarks
	 * [[DataStream]] offers an always up to date stream of items from a [[DataSet]] or [[DataView]].
	 * That means that the stream is evaluated at the time of iteration, conversion to another data type or when [[cache]] is called, not when the [[DataStream]] was created.
	 * Multiple invocations of for example [[toItemArray]] may yield different results (if the data source like for example [[DataSet]] gets modified).
	 *
	 * @typeParam Item - The item type this stream is going to work with.
	 */ var DataStream1 = /*#__PURE__*/ function() {
        /**
	   * Create a new data stream.
	   *
	   * @param pairs - The id, item pairs.
	   */ function DataStream(pairs) {
            classCallCheck(this, DataStream);
            this._pairs = pairs;
        }
        /**
	   * Return an iterable of key, value pairs for every entry in the stream.
	   */ createClass(DataStream, [
            {
                key: iterator$4,
                value: /*#__PURE__*/ regenerator.mark(function value() {
                    var _iterator, _step, _step$value, id, item;
                    return regenerator.wrap(function value$(_context) {
                        while(true)switch(_context.prev = _context.next){
                            case 0:
                                _iterator = _createForOfIteratorHelper$1(this._pairs);
                                _context.prev = 1;
                                _iterator.s();
                            case 3:
                                if ((_step = _iterator.n()).done) {
                                    _context.next = 9;
                                    break;
                                }
                                _step$value = slicedToArray(_step.value, 2), id = _step$value[0], item = _step$value[1];
                                _context.next = 7;
                                return [
                                    id,
                                    item
                                ];
                            case 7:
                                _context.next = 3;
                                break;
                            case 9:
                                _context.next = 14;
                                break;
                            case 11:
                                _context.prev = 11;
                                _context.t0 = _context["catch"](1);
                                _iterator.e(_context.t0);
                            case 14:
                                _context.prev = 14;
                                _iterator.f();
                                return _context.finish(14);
                            case 17:
                            case "end":
                                return _context.stop();
                        }
                    }, value, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "entries",
                value: /*#__PURE__*/ regenerator.mark(function entries() {
                    var _iterator2, _step2, _step2$value, id, item;
                    return regenerator.wrap(function entries$(_context2) {
                        while(true)switch(_context2.prev = _context2.next){
                            case 0:
                                _iterator2 = _createForOfIteratorHelper$1(this._pairs);
                                _context2.prev = 1;
                                _iterator2.s();
                            case 3:
                                if ((_step2 = _iterator2.n()).done) {
                                    _context2.next = 9;
                                    break;
                                }
                                _step2$value = slicedToArray(_step2.value, 2), id = _step2$value[0], item = _step2$value[1];
                                _context2.next = 7;
                                return [
                                    id,
                                    item
                                ];
                            case 7:
                                _context2.next = 3;
                                break;
                            case 9:
                                _context2.next = 14;
                                break;
                            case 11:
                                _context2.prev = 11;
                                _context2.t0 = _context2["catch"](1);
                                _iterator2.e(_context2.t0);
                            case 14:
                                _context2.prev = 14;
                                _iterator2.f();
                                return _context2.finish(14);
                            case 17:
                            case "end":
                                return _context2.stop();
                        }
                    }, entries, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "keys",
                value: /*#__PURE__*/ regenerator.mark(function keys() {
                    var _iterator3, _step3, _step3$value, id;
                    return regenerator.wrap(function keys$(_context3) {
                        while(true)switch(_context3.prev = _context3.next){
                            case 0:
                                _iterator3 = _createForOfIteratorHelper$1(this._pairs);
                                _context3.prev = 1;
                                _iterator3.s();
                            case 3:
                                if ((_step3 = _iterator3.n()).done) {
                                    _context3.next = 9;
                                    break;
                                }
                                _step3$value = slicedToArray(_step3.value, 1), id = _step3$value[0];
                                _context3.next = 7;
                                return id;
                            case 7:
                                _context3.next = 3;
                                break;
                            case 9:
                                _context3.next = 14;
                                break;
                            case 11:
                                _context3.prev = 11;
                                _context3.t0 = _context3["catch"](1);
                                _iterator3.e(_context3.t0);
                            case 14:
                                _context3.prev = 14;
                                _iterator3.f();
                                return _context3.finish(14);
                            case 17:
                            case "end":
                                return _context3.stop();
                        }
                    }, keys, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "values",
                value: /*#__PURE__*/ regenerator.mark(function values() {
                    var _iterator4, _step4, _step4$value, item;
                    return regenerator.wrap(function values$(_context4) {
                        while(true)switch(_context4.prev = _context4.next){
                            case 0:
                                _iterator4 = _createForOfIteratorHelper$1(this._pairs);
                                _context4.prev = 1;
                                _iterator4.s();
                            case 3:
                                if ((_step4 = _iterator4.n()).done) {
                                    _context4.next = 9;
                                    break;
                                }
                                _step4$value = slicedToArray(_step4.value, 2), item = _step4$value[1];
                                _context4.next = 7;
                                return item;
                            case 7:
                                _context4.next = 3;
                                break;
                            case 9:
                                _context4.next = 14;
                                break;
                            case 11:
                                _context4.prev = 11;
                                _context4.t0 = _context4["catch"](1);
                                _iterator4.e(_context4.t0);
                            case 14:
                                _context4.prev = 14;
                                _iterator4.f();
                                return _context4.finish(14);
                            case 17:
                            case "end":
                                return _context4.stop();
                        }
                    }, values, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "toIdArray",
                value: function toIdArray() {
                    var _context5;
                    return map$2(_context5 = toConsumableArray(this._pairs)).call(_context5, function(pair) {
                        return pair[0];
                    });
                }
            },
            {
                key: "toItemArray",
                value: function toItemArray() {
                    var _context6;
                    return map$2(_context6 = toConsumableArray(this._pairs)).call(_context6, function(pair) {
                        return pair[1];
                    });
                }
            },
            {
                key: "toEntryArray",
                value: function toEntryArray() {
                    return toConsumableArray(this._pairs);
                }
            },
            {
                key: "toObjectMap",
                value: function toObjectMap() {
                    var map = create$2(null);
                    var _iterator5 = _createForOfIteratorHelper$1(this._pairs), _step5;
                    try {
                        for(_iterator5.s(); !(_step5 = _iterator5.n()).done;){
                            var _step5$value = slicedToArray(_step5.value, 2), id = _step5$value[0], item = _step5$value[1];
                            map[id] = item;
                        }
                    } catch (err) {
                        _iterator5.e(err);
                    } finally{
                        _iterator5.f();
                    }
                    return map;
                }
            },
            {
                key: "toMap",
                value: function toMap() {
                    return new map$5(this._pairs);
                }
            },
            {
                key: "toIdSet",
                value: function toIdSet() {
                    return new set$3(this.toIdArray());
                }
            },
            {
                key: "toItemSet",
                value: function toItemSet() {
                    return new set$3(this.toItemArray());
                }
            },
            {
                key: "cache",
                value: function cache() {
                    return new DataStream(toConsumableArray(this._pairs));
                }
            },
            {
                key: "distinct",
                value: function distinct(callback) {
                    var set = new set$3();
                    var _iterator6 = _createForOfIteratorHelper$1(this._pairs), _step6;
                    try {
                        for(_iterator6.s(); !(_step6 = _iterator6.n()).done;){
                            var _step6$value = slicedToArray(_step6.value, 2), id = _step6$value[0], item = _step6$value[1];
                            set.add(callback(item, id));
                        }
                    } catch (err) {
                        _iterator6.e(err);
                    } finally{
                        _iterator6.f();
                    }
                    return set;
                }
            },
            {
                key: "filter",
                value: function filter(callback) {
                    var pairs = this._pairs;
                    return new DataStream(defineProperty$7({
                    }, iterator$4, /*#__PURE__*/ regenerator.mark(function _callee() {
                        var _iterator7, _step7, _step7$value, id, item;
                        return regenerator.wrap(function _callee$(_context7) {
                            while(true)switch(_context7.prev = _context7.next){
                                case 0:
                                    _iterator7 = _createForOfIteratorHelper$1(pairs);
                                    _context7.prev = 1;
                                    _iterator7.s();
                                case 3:
                                    if ((_step7 = _iterator7.n()).done) {
                                        _context7.next = 10;
                                        break;
                                    }
                                    _step7$value = slicedToArray(_step7.value, 2), id = _step7$value[0], item = _step7$value[1];
                                    if (!callback(item, id)) {
                                        _context7.next = 8;
                                        break;
                                    }
                                    _context7.next = 8;
                                    return [
                                        id,
                                        item
                                    ];
                                case 8:
                                    _context7.next = 3;
                                    break;
                                case 10:
                                    _context7.next = 15;
                                    break;
                                case 12:
                                    _context7.prev = 12;
                                    _context7.t0 = _context7["catch"](1);
                                    _iterator7.e(_context7.t0);
                                case 15:
                                    _context7.prev = 15;
                                    _iterator7.f();
                                    return _context7.finish(15);
                                case 18:
                                case "end":
                                    return _context7.stop();
                            }
                        }, _callee, null, [
                            [
                                1,
                                12,
                                15,
                                18
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "forEach",
                value: function forEach(callback) {
                    var _iterator8 = _createForOfIteratorHelper$1(this._pairs), _step8;
                    try {
                        for(_iterator8.s(); !(_step8 = _iterator8.n()).done;){
                            var _step8$value = slicedToArray(_step8.value, 2), id = _step8$value[0], item = _step8$value[1];
                            callback(item, id);
                        }
                    } catch (err) {
                        _iterator8.e(err);
                    } finally{
                        _iterator8.f();
                    }
                }
            },
            {
                key: "map",
                value: function map(callback) {
                    var pairs = this._pairs;
                    return new DataStream(defineProperty$7({
                    }, iterator$4, /*#__PURE__*/ regenerator.mark(function _callee2() {
                        var _iterator9, _step9, _step9$value, id, item;
                        return regenerator.wrap(function _callee2$(_context8) {
                            while(true)switch(_context8.prev = _context8.next){
                                case 0:
                                    _iterator9 = _createForOfIteratorHelper$1(pairs);
                                    _context8.prev = 1;
                                    _iterator9.s();
                                case 3:
                                    if ((_step9 = _iterator9.n()).done) {
                                        _context8.next = 9;
                                        break;
                                    }
                                    _step9$value = slicedToArray(_step9.value, 2), id = _step9$value[0], item = _step9$value[1];
                                    _context8.next = 7;
                                    return [
                                        id,
                                        callback(item, id)
                                    ];
                                case 7:
                                    _context8.next = 3;
                                    break;
                                case 9:
                                    _context8.next = 14;
                                    break;
                                case 11:
                                    _context8.prev = 11;
                                    _context8.t0 = _context8["catch"](1);
                                    _iterator9.e(_context8.t0);
                                case 14:
                                    _context8.prev = 14;
                                    _iterator9.f();
                                    return _context8.finish(14);
                                case 17:
                                case "end":
                                    return _context8.stop();
                            }
                        }, _callee2, null, [
                            [
                                1,
                                11,
                                14,
                                17
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "max",
                value: function max(callback) {
                    var iter = getIterator$1(this._pairs);
                    var curr = iter.next();
                    if (curr.done) return null;
                    var maxItem = curr.value[1];
                    var maxValue = callback(curr.value[1], curr.value[0]);
                    while(!(curr = iter.next()).done){
                        var _curr$value = slicedToArray(curr.value, 2), id = _curr$value[0], item = _curr$value[1];
                        var _value = callback(item, id);
                        if (_value > maxValue) {
                            maxValue = _value;
                            maxItem = item;
                        }
                    }
                    return maxItem;
                }
            },
            {
                key: "min",
                value: function min(callback) {
                    var iter = getIterator$1(this._pairs);
                    var curr = iter.next();
                    if (curr.done) return null;
                    var minItem = curr.value[1];
                    var minValue = callback(curr.value[1], curr.value[0]);
                    while(!(curr = iter.next()).done){
                        var _curr$value2 = slicedToArray(curr.value, 2), id = _curr$value2[0], item = _curr$value2[1];
                        var _value2 = callback(item, id);
                        if (_value2 < minValue) {
                            minValue = _value2;
                            minItem = item;
                        }
                    }
                    return minItem;
                }
            },
            {
                key: "reduce",
                value: function reduce(callback, accumulator) {
                    var _iterator10 = _createForOfIteratorHelper$1(this._pairs), _step10;
                    try {
                        for(_iterator10.s(); !(_step10 = _iterator10.n()).done;){
                            var _step10$value = slicedToArray(_step10.value, 2), id = _step10$value[0], item = _step10$value[1];
                            accumulator = callback(accumulator, item, id);
                        }
                    } catch (err) {
                        _iterator10.e(err);
                    } finally{
                        _iterator10.f();
                    }
                    return accumulator;
                }
            },
            {
                key: "sort",
                value: function sort(callback) {
                    var _this = this;
                    return new DataStream(defineProperty$7({
                    }, iterator$4, function() {
                        var _context9;
                        return getIterator$1(sort$2(_context9 = toConsumableArray(_this._pairs)).call(_context9, function(_ref, _ref2) {
                            var _ref3 = slicedToArray(_ref, 2), idA = _ref3[0], itemA = _ref3[1];
                            var _ref4 = slicedToArray(_ref2, 2), idB = _ref4[0], itemB = _ref4[1];
                            return callback(itemA, itemB, idA, idB);
                        }));
                    }));
                }
            }
        ]);
        return DataStream;
    }();
    function ownKeys$4(object, enumerableOnly) {
        var keys = keys$3(object);
        if (getOwnPropertySymbols$2) {
            var symbols = getOwnPropertySymbols$2(object);
            if (enumerableOnly) symbols = filter$2(symbols).call(symbols, function(sym) {
                return getOwnPropertyDescriptor$3(object, sym).enumerable;
            });
            keys.push.apply(keys, symbols);
        }
        return keys;
    }
    function _objectSpread(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i] != null ? arguments[i] : {
            };
            if (i % 2) {
                var _context10;
                forEach$2(_context10 = ownKeys$4(Object(source), true)).call(_context10, function(key) {
                    defineProperty$7(target, key, source[key]);
                });
            } else if (getOwnPropertyDescriptors$2) defineProperties$1(target, getOwnPropertyDescriptors$2(source));
            else {
                var _context11;
                forEach$2(_context11 = ownKeys$4(Object(source))).call(_context11, function(key) {
                    defineProperty$4(target, key, getOwnPropertyDescriptor$3(source, key));
                });
            }
        }
        return target;
    }
    function _createForOfIteratorHelper$2(o, allowArrayLike) {
        var it;
        if (typeof symbol$4 === "undefined" || getIteratorMethod$1(o) == null) {
            if (isArray$5(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {
                };
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = getIterator$1(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$3(o, minLen) {
        var _context9;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
        var n = slice$6(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$2(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
    }
    function _arrayLikeToArray$3(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
            var Super = getPrototypeOf$3(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = getPrototypeOf$3(this).constructor;
                result = construct$3(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return possibleConstructorReturn(this, result);
        };
    }
    function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !construct$3) return false;
        if (construct$3.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Date.prototype.toString.call(construct$3(Date, [], function() {
            }));
            return true;
        } catch (e) {
            return false;
        }
    }
    /**
	 * Add an id to given item if it doesn't have one already.
	 *
	 * @remarks
	 * The item will be modified.
	 *
	 * @param item - The item that will have an id after a call to this function.
	 * @param idProp - The key of the id property.
	 *
	 * @typeParam Item - Item type that may or may not have an id.
	 * @typeParam IdProp - Name of the property that contains the id.
	 *
	 * @returns true
	 */ function ensureFullItem(item, idProp) {
        if (item[idProp] == null) // generate an id
        item[idProp] = v4();
        return item;
    }
    /**
	 * # DataSet
	 *
	 * Vis.js comes with a flexible DataSet, which can be used to hold and
	 * manipulate unstructured data and listen for changes in the data. The DataSet
	 * is key/value based. Data items can be added, updated and removed from the
	 * DataSet, and one can subscribe to changes in the DataSet. The data in the
	 * DataSet can be filtered and ordered. Data can be normalized when appending it
	 * to the DataSet as well.
	 *
	 * ## Example
	 *
	 * The following example shows how to use a DataSet.
	 *
	 * ```javascript
	 * // create a DataSet
	 * var options = {};
	 * var data = new vis.DataSet(options);
	 *
	 * // add items
	 * // note that the data items can contain different properties and data formats
	 * data.add([
	 *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
	 *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
	 *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
	 *   {id: 4, text: 'item 4'}
	 * ]);
	 *
	 * // subscribe to any change in the DataSet
	 * data.on('*', function (event, properties, senderId) {
	 *   console.log('event', event, properties);
	 * });
	 *
	 * // update an existing item
	 * data.update({id: 2, group: 1});
	 *
	 * // remove an item
	 * data.remove(4);
	 *
	 * // get all ids
	 * var ids = data.getIds();
	 * console.log('ids', ids);
	 *
	 * // get a specific item
	 * var item1 = data.get(1);
	 * console.log('item1', item1);
	 *
	 * // retrieve a filtered subset of the data
	 * var items = data.get({
	 *   filter: function (item) {
	 *     return item.group == 1;
	 *   }
	 * });
	 * console.log('filtered items', items);
	 * ```
	 *
	 * @typeParam Item - Item type that may or may not have an id.
	 * @typeParam IdProp - Name of the property that contains the id.
	 */ var DataSet1 = /*#__PURE__*/ function(_DataSetPart) {
        inherits(DataSet, _DataSetPart);
        var _super = _createSuper(DataSet);
        /**
	   * Construct a new DataSet.
	   *
	   * @param data - Initial data or options.
	   * @param options - Options (type error if data is also options).
	   */ function DataSet(data, options) {
            var _this;
            classCallCheck(this, DataSet);
            _this = _super.call(this);
            _this._queue = null; // correctly read optional arguments
            if (data && !isArray$5(data)) {
                options = data;
                data = [];
            }
            _this._options = options || {
            };
            _this._data = new map$5(); // map with data indexed by id
            _this.length = 0; // number of items in the DataSet
            _this._idProp = _this._options.fieldId || "id"; // name of the field containing id
            // add initial data when provided
            if (data && data.length) _this.add(data);
            _this.setOptions(options);
            return _this;
        }
        /** @inheritDoc */ createClass(DataSet, [
            {
                key: "setOptions",
                /**
	     * Set new options.
	     *
	     * @param options - The new options.
	     */ value: function setOptions(options) {
                    if (options && options.queue !== undefined) {
                        if (options.queue === false) // delete queue if loaded
                        {
                            if (this._queue) {
                                this._queue.destroy();
                                this._queue = null;
                            }
                        } else {
                            // create queue and update its options
                            if (!this._queue) this._queue = Queue1.extend(this, {
                                replace: [
                                    "add",
                                    "update",
                                    "remove"
                                ]
                            });
                            if (options.queue && _typeof_1(options.queue) === "object") this._queue.setOptions(options.queue);
                        }
                    }
                }
            },
            {
                key: "add",
                value: function add(data, senderId) {
                    var _this2 = this;
                    var addedIds = [];
                    var id2;
                    if (isArray$5(data)) {
                        // Array
                        var idsToAdd = map$2(data).call(data, function(d) {
                            return d[_this2._idProp];
                        });
                        if (some$2(idsToAdd).call(idsToAdd, function(id) {
                            return _this2._data.has(id);
                        })) throw new Error("A duplicate id was found in the parameter array.");
                        for(var i = 0, len = data.length; i < len; i++){
                            id2 = this._addItem(data[i]);
                            addedIds.push(id2);
                        }
                    } else if (data && _typeof_1(data) === "object") {
                        // Single item
                        id2 = this._addItem(data);
                        addedIds.push(id2);
                    } else throw new Error("Unknown dataType");
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    return addedIds;
                }
            },
            {
                key: "update",
                value: function update(data, senderId) {
                    var _this3 = this;
                    var addedIds = [];
                    var updatedIds = [];
                    var oldData = [];
                    var updatedData = [];
                    var idProp = this._idProp;
                    var addOrUpdate = function addOrUpdate(item) {
                        var origId = item[idProp];
                        if (origId != null && _this3._data.has(origId)) {
                            var fullItem = item; // it has an id, therefore it is a fullitem
                            var oldItem = assign$2({
                            }, _this3._data.get(origId)); // update item
                            var id = _this3._updateItem(fullItem);
                            updatedIds.push(id);
                            updatedData.push(fullItem);
                            oldData.push(oldItem);
                        } else {
                            // add new item
                            var _id = _this3._addItem(item);
                            addedIds.push(_id);
                        }
                    };
                    if (isArray$5(data)) {
                        // Array
                        for(var i = 0, len = data.length; i < len; i++)if (data[i] && _typeof_1(data[i]) === "object") addOrUpdate(data[i]);
                        else console.warn("Ignoring input item, which is not an object at index " + i);
                    } else if (data && _typeof_1(data) === "object") // Single item
                    addOrUpdate(data);
                    else throw new Error("Unknown dataType");
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    if (updatedIds.length) {
                        var props = {
                            items: updatedIds,
                            oldData: oldData,
                            data: updatedData
                        }; // TODO: remove deprecated property 'data' some day
                        //Object.defineProperty(props, 'data', {
                        //  'get': (function() {
                        //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
                        //    return updatedData;
                        //  }).bind(this)
                        //});
                        this._trigger("update", props, senderId);
                    }
                    return concat$2(addedIds).call(addedIds, updatedIds);
                }
            },
            {
                key: "updateOnly",
                value: function updateOnly(data, senderId) {
                    var _context, _this4 = this;
                    if (!isArray$5(data)) data = [
                        data
                    ];
                    var updateEventData = map$2(_context = map$2(data).call(data, function(update) {
                        var oldData = _this4._data.get(update[_this4._idProp]);
                        if (oldData == null) throw new Error("Updating non-existent items is not allowed.");
                        return {
                            oldData: oldData,
                            update: update
                        };
                    })).call(_context, function(_ref) {
                        var oldData = _ref.oldData, update = _ref.update;
                        var id = oldData[_this4._idProp];
                        var updatedData = pureDeepObjectAssign(oldData, update);
                        _this4._data.set(id, updatedData);
                        return {
                            id: id,
                            oldData: oldData,
                            updatedData: updatedData
                        };
                    });
                    if (updateEventData.length) {
                        var props = {
                            items: map$2(updateEventData).call(updateEventData, function(value) {
                                return value.id;
                            }),
                            oldData: map$2(updateEventData).call(updateEventData, function(value) {
                                return value.oldData;
                            }),
                            data: map$2(updateEventData).call(updateEventData, function(value) {
                                return value.updatedData;
                            })
                        }; // TODO: remove deprecated property 'data' some day
                        //Object.defineProperty(props, 'data', {
                        //  'get': (function() {
                        //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
                        //    return updatedData;
                        //  }).bind(this)
                        //});
                        this._trigger("update", props, senderId);
                        return props.items;
                    } else return [];
                }
            },
            {
                key: "get",
                value: function get(first, second) {
                    // @TODO: Woudn't it be better to split this into multiple methods?
                    // parse the arguments
                    var id = undefined;
                    var ids = undefined;
                    var options = undefined;
                    if (isId(first)) {
                        // get(id [, options])
                        id = first;
                        options = second;
                    } else if (isArray$5(first)) {
                        // get(ids [, options])
                        ids = first;
                        options = second;
                    } else // get([, options])
                    options = first;
                     // determine the return type
                    var returnType = options && options.returnType === "Object" ? "Object" : "Array"; // @TODO: WTF is this? Or am I missing something?
                    // var returnType
                    // if (options && options.returnType) {
                    //   var allowedValues = ['Array', 'Object']
                    //   returnType =
                    //     allowedValues.indexOf(options.returnType) == -1
                    //       ? 'Array'
                    //       : options.returnType
                    // } else {
                    //   returnType = 'Array'
                    // }
                    // build options
                    var filter = options && filter$2(options);
                    var items = [];
                    var item = undefined;
                    var itemIds = undefined;
                    var itemId = undefined; // convert items
                    if (id != null) {
                        // return a single item
                        item = this._data.get(id);
                        if (item && filter && !filter(item)) item = undefined;
                    } else if (ids != null) // return a subset of items
                    for(var i = 0, len = ids.length; i < len; i++){
                        item = this._data.get(ids[i]);
                        if (item != null && (!filter || filter(item))) items.push(item);
                    }
                    else {
                        var _context2;
                        // return all items
                        itemIds = toConsumableArray(keys$6(_context2 = this._data).call(_context2));
                        for(var _i = 0, _len = itemIds.length; _i < _len; _i++){
                            itemId = itemIds[_i];
                            item = this._data.get(itemId);
                            if (item != null && (!filter || filter(item))) items.push(item);
                        }
                    } // order the results
                    if (options && options.order && id == undefined) this._sort(items, options.order);
                     // filter fields of the items
                    if (options && options.fields) {
                        var fields = options.fields;
                        if (id != undefined && item != null) item = this._filterFields(item, fields);
                        else for(var _i2 = 0, _len2 = items.length; _i2 < _len2; _i2++)items[_i2] = this._filterFields(items[_i2], fields);
                    } // return the results
                    if (returnType == "Object") {
                        var result = {
                        };
                        for(var _i3 = 0, _len3 = items.length; _i3 < _len3; _i3++){
                            var resultant = items[_i3]; // @TODO: Shoudn't this be this._fieldId?
                            // result[resultant.id] = resultant
                            var _id2 = resultant[this._idProp];
                            result[_id2] = resultant;
                        }
                        return result;
                    } else {
                        if (id != null) {
                            var _item;
                            // a single item
                            return (_item = item) !== null && _item !== void 0 ? _item : null;
                        } else // just return our array
                        return items;
                    }
                }
            },
            {
                key: "getIds",
                value: function getIds(options) {
                    var data = this._data;
                    var filter = options && filter$2(options);
                    var order = options && options.order;
                    var itemIds = toConsumableArray(keys$6(data).call(data));
                    var ids = [];
                    if (filter) {
                        // get filtered items
                        if (order) {
                            // create ordered list
                            var items = [];
                            for(var i = 0, len = itemIds.length; i < len; i++){
                                var id = itemIds[i];
                                var item = this._data.get(id);
                                if (item != null && filter(item)) items.push(item);
                            }
                            this._sort(items, order);
                            for(var _i4 = 0, _len4 = items.length; _i4 < _len4; _i4++)ids.push(items[_i4][this._idProp]);
                        } else // create unordered list
                        for(var _i5 = 0, _len5 = itemIds.length; _i5 < _len5; _i5++){
                            var _id3 = itemIds[_i5];
                            var _item2 = this._data.get(_id3);
                            if (_item2 != null && filter(_item2)) ids.push(_item2[this._idProp]);
                        }
                    } else {
                        // get all items
                        if (order) {
                            // create an ordered list
                            var _items = [];
                            for(var _i6 = 0, _len6 = itemIds.length; _i6 < _len6; _i6++){
                                var _id4 = itemIds[_i6];
                                _items.push(data.get(_id4));
                            }
                            this._sort(_items, order);
                            for(var _i7 = 0, _len7 = _items.length; _i7 < _len7; _i7++)ids.push(_items[_i7][this._idProp]);
                        } else // create unordered list
                        for(var _i8 = 0, _len8 = itemIds.length; _i8 < _len8; _i8++){
                            var _id5 = itemIds[_i8];
                            var _item3 = data.get(_id5);
                            if (_item3 != null) ids.push(_item3[this._idProp]);
                        }
                    }
                    return ids;
                }
            },
            {
                key: "getDataSet",
                value: function getDataSet() {
                    return this;
                }
            },
            {
                key: "forEach",
                value: function forEach(callback, options) {
                    var filter = options && filter$2(options);
                    var data = this._data;
                    var itemIds = toConsumableArray(keys$6(data).call(data));
                    if (options && options.order) {
                        // execute forEach on ordered list
                        var items = this.get(options);
                        for(var i = 0, len = items.length; i < len; i++){
                            var item = items[i];
                            var id = item[this._idProp];
                            callback(item, id);
                        }
                    } else // unordered
                    for(var _i9 = 0, _len9 = itemIds.length; _i9 < _len9; _i9++){
                        var _id6 = itemIds[_i9];
                        var _item4 = this._data.get(_id6);
                        if (_item4 != null && (!filter || filter(_item4))) callback(_item4, _id6);
                    }
                }
            },
            {
                key: "map",
                value: function map(callback, options) {
                    var filter = options && filter$2(options);
                    var mappedItems = [];
                    var data = this._data;
                    var itemIds = toConsumableArray(keys$6(data).call(data)); // convert and filter items
                    for(var i = 0, len = itemIds.length; i < len; i++){
                        var id = itemIds[i];
                        var item = this._data.get(id);
                        if (item != null && (!filter || filter(item))) mappedItems.push(callback(item, id));
                    } // order items
                    if (options && options.order) this._sort(mappedItems, options.order);
                    return mappedItems;
                }
            },
            {
                key: "_filterFields",
                value: function _filterFields(item, fields) {
                    var _context3;
                    if (!item) // item is null
                    return item;
                    return reduce$2(_context3 = isArray$5(fields) ? fields : keys$3(fields)).call(_context3, function(filteredItem, field) {
                        filteredItem[field] = item[field];
                        return filteredItem;
                    }, {
                    });
                }
            },
            {
                key: "_sort",
                value: function _sort(items, order) {
                    if (typeof order === "string") {
                        // order by provided field name
                        var name = order; // field name
                        sort$2(items).call(items, function(a, b) {
                            // @TODO: How to treat missing properties?
                            var av = a[name];
                            var bv = b[name];
                            return av > bv ? 1 : av < bv ? -1 : 0;
                        });
                    } else if (typeof order === "function") // order by sort function
                    sort$2(items).call(items, order);
                    else // TODO: extend order by an Object {field:string, direction:string}
                    //       where direction can be 'asc' or 'desc'
                    throw new TypeError("Order must be a function or a string");
                }
            },
            {
                key: "remove",
                value: function remove(id, senderId) {
                    var removedIds = [];
                    var removedItems = []; // force everything to be an array for simplicity
                    var ids = isArray$5(id) ? id : [
                        id
                    ];
                    for(var i = 0, len = ids.length; i < len; i++){
                        var item = this._remove(ids[i]);
                        if (item) {
                            var itemId = item[this._idProp];
                            if (itemId != null) {
                                removedIds.push(itemId);
                                removedItems.push(item);
                            }
                        }
                    }
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    }, senderId);
                    return removedIds;
                }
            },
            {
                key: "_remove",
                value: function _remove(id) {
                    // @TODO: It origianlly returned the item although the docs say id.
                    // The code expects the item, so probably an error in the docs.
                    var ident; // confirm the id to use based on the args type
                    if (isId(id)) ident = id;
                    else if (id && _typeof_1(id) === "object") ident = id[this._idProp]; // look for the identifier field using ._idProp
                     // do the removing if the item is found
                    if (ident != null && this._data.has(ident)) {
                        var item = this._data.get(ident) || null;
                        this._data.delete(ident);
                        --this.length;
                        return item;
                    }
                    return null;
                }
            },
            {
                key: "clear",
                value: function clear(senderId) {
                    var _context4;
                    var ids = toConsumableArray(keys$6(_context4 = this._data).call(_context4));
                    var items = [];
                    for(var i = 0, len = ids.length; i < len; i++)items.push(this._data.get(ids[i]));
                    this._data.clear();
                    this.length = 0;
                    this._trigger("remove", {
                        items: ids,
                        oldData: items
                    }, senderId);
                    return ids;
                }
            },
            {
                key: "max",
                value: function max(field) {
                    var _context5;
                    var max = null;
                    var maxField = null;
                    var _iterator = _createForOfIteratorHelper$2(values$3(_context5 = this._data).call(_context5)), _step;
                    try {
                        for(_iterator.s(); !(_step = _iterator.n()).done;){
                            var item = _step.value;
                            var itemField = item[field];
                            if (typeof itemField === "number" && (maxField == null || itemField > maxField)) {
                                max = item;
                                maxField = itemField;
                            }
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally{
                        _iterator.f();
                    }
                    return max || null;
                }
            },
            {
                key: "min",
                value: function min(field) {
                    var _context6;
                    var min = null;
                    var minField = null;
                    var _iterator2 = _createForOfIteratorHelper$2(values$3(_context6 = this._data).call(_context6)), _step2;
                    try {
                        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                            var item = _step2.value;
                            var itemField = item[field];
                            if (typeof itemField === "number" && (minField == null || itemField < minField)) {
                                min = item;
                                minField = itemField;
                            }
                        }
                    } catch (err) {
                        _iterator2.e(err);
                    } finally{
                        _iterator2.f();
                    }
                    return min || null;
                }
            },
            {
                key: "distinct",
                value: function distinct(prop) {
                    var data = this._data;
                    var itemIds = toConsumableArray(keys$6(data).call(data));
                    var values = [];
                    var count = 0;
                    for(var i = 0, len = itemIds.length; i < len; i++){
                        var id = itemIds[i];
                        var item = data.get(id);
                        var value = item[prop];
                        var exists = false;
                        for(var j = 0; j < count; j++)if (values[j] == value) {
                            exists = true;
                            break;
                        }
                        if (!exists && value !== undefined) {
                            values[count] = value;
                            count++;
                        }
                    }
                    return values;
                }
            },
            {
                key: "_addItem",
                value: function _addItem(item) {
                    var fullItem = ensureFullItem(item, this._idProp);
                    var id = fullItem[this._idProp]; // check whether this id is already taken
                    if (this._data.has(id)) // item already exists
                    throw new Error("Cannot add item: item with id " + id + " already exists");
                    this._data.set(id, fullItem);
                    ++this.length;
                    return id;
                }
            },
            {
                key: "_updateItem",
                value: function _updateItem(update) {
                    var id = update[this._idProp];
                    if (id == null) throw new Error("Cannot update item: item has no id (item: " + stringify$2(update) + ")");
                    var item = this._data.get(id);
                    if (!item) // item doesn't exist
                    throw new Error("Cannot update item: no item with id " + id + " found");
                    this._data.set(id, _objectSpread(_objectSpread({
                    }, item), update));
                    return id;
                }
            },
            {
                key: "stream",
                value: function stream(ids) {
                    if (ids) {
                        var data = this._data;
                        return new DataStream1(defineProperty$7({
                        }, iterator$4, /*#__PURE__*/ regenerator.mark(function _callee() {
                            var _iterator3, _step3, id, item;
                            return regenerator.wrap(function _callee$(_context7) {
                                while(true)switch(_context7.prev = _context7.next){
                                    case 0:
                                        _iterator3 = _createForOfIteratorHelper$2(ids);
                                        _context7.prev = 1;
                                        _iterator3.s();
                                    case 3:
                                        if ((_step3 = _iterator3.n()).done) {
                                            _context7.next = 11;
                                            break;
                                        }
                                        id = _step3.value;
                                        item = data.get(id);
                                        if (!(item != null)) {
                                            _context7.next = 9;
                                            break;
                                        }
                                        _context7.next = 9;
                                        return [
                                            id,
                                            item
                                        ];
                                    case 9:
                                        _context7.next = 3;
                                        break;
                                    case 11:
                                        _context7.next = 16;
                                        break;
                                    case 13:
                                        _context7.prev = 13;
                                        _context7.t0 = _context7["catch"](1);
                                        _iterator3.e(_context7.t0);
                                    case 16:
                                        _context7.prev = 16;
                                        _iterator3.f();
                                        return _context7.finish(16);
                                    case 19:
                                    case "end":
                                        return _context7.stop();
                                }
                            }, _callee, null, [
                                [
                                    1,
                                    13,
                                    16,
                                    19
                                ]
                            ]);
                        })));
                    } else {
                        var _context8;
                        return new DataStream1(defineProperty$7({
                        }, iterator$4, bind$2(_context8 = entries$2(this._data)).call(_context8, this._data)));
                    }
                }
            },
            {
                key: "idProp",
                get: function get() {
                    return this._idProp;
                }
            }
        ]);
        return DataSet;
    }(DataSetPart1);
    function _createForOfIteratorHelper$3(o, allowArrayLike) {
        var it;
        if (typeof symbol$4 === "undefined" || getIteratorMethod$1(o) == null) {
            if (isArray$5(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {
                };
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = getIterator$1(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$4(o, minLen) {
        var _context5;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
        var n = slice$6(_context5 = Object.prototype.toString.call(o)).call(_context5, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$2(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);
    }
    function _arrayLikeToArray$4(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    function _createSuper$1(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
        return function _createSuperInternal() {
            var Super = getPrototypeOf$3(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = getPrototypeOf$3(this).constructor;
                result = construct$3(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return possibleConstructorReturn(this, result);
        };
    }
    function _isNativeReflectConstruct$1() {
        if (typeof Reflect === "undefined" || !construct$3) return false;
        if (construct$3.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Date.prototype.toString.call(construct$3(Date, [], function() {
            }));
            return true;
        } catch (e) {
            return false;
        }
    }
    /**
	 * DataView
	 *
	 * A DataView offers a filtered and/or formatted view on a DataSet. One can subscribe to changes in a DataView, and easily get filtered or formatted data without having to specify filters and field types all the time.
	 *
	 * ## Example
	 * ```javascript
	 * // create a DataSet
	 * var data = new vis.DataSet();
	 * data.add([
	 *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
	 *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
	 *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
	 *   {id: 4, text: 'item 4'}
	 * ]);
	 *
	 * // create a DataView
	 * // the view will only contain items having a property group with value 1,
	 * // and will only output fields id, text, and date.
	 * var view = new vis.DataView(data, {
	 *   filter: function (item) {
	 *     return (item.group == 1);
	 *   },
	 *   fields: ['id', 'text', 'date']
	 * });
	 *
	 * // subscribe to any change in the DataView
	 * view.on('*', function (event, properties, senderId) {
	 *   console.log('event', event, properties);
	 * });
	 *
	 * // update an item in the data set
	 * data.update({id: 2, group: 1});
	 *
	 * // get all ids in the view
	 * var ids = view.getIds();
	 * console.log('ids', ids); // will output [1, 2]
	 *
	 * // get all items in the view
	 * var items = view.get();
	 * ```
	 *
	 * @typeParam Item - Item type that may or may not have an id.
	 * @typeParam IdProp - Name of the property that contains the id.
	 */ var DataView1 = /*#__PURE__*/ function(_DataSetPart) {
        inherits(DataView, _DataSetPart);
        var _super = _createSuper$1(DataView);
        /**
	   * Create a DataView.
	   *
	   * @param data - The instance containing data (directly or indirectly).
	   * @param options - Options to configure this data view.
	   */ function DataView(data, options) {
            var _context;
            var _this;
            classCallCheck(this, DataView);
            _this = _super.call(this);
            /** @inheritDoc */ _this.length = 0;
            _this._ids = new set$3(); // ids of the items currently in memory (just contains a boolean true)
            _this._options = options || {
            };
            _this._listener = bind$2(_context = _this._onEvent).call(_context, assertThisInitialized(_this));
            _this.setData(data);
            return _this;
        }
        /** @inheritDoc */ createClass(DataView, [
            {
                key: "setData",
                // TODO: implement a function .config() to dynamically update things like configured filter
                // and trigger changes accordingly
                /**
	     * Set a data source for the view.
	     *
	     * @param data - The instance containing data (directly or indirectly).
	     *
	     * @remarks
	     * Note that when the data view is bound to a data set it won't be garbage
	     * collected unless the data set is too. Use `dataView.setData(null)` or
	     * `dataView.dispose()` to enable garbage collection before you lose the last
	     * reference.
	     */ value: function setData(data) {
                    if (this._data) {
                        // unsubscribe from current dataset
                        if (this._data.off) this._data.off("*", this._listener);
                         // trigger a remove of all items in memory
                        var ids = this._data.getIds({
                            filter: filter$2(this._options)
                        });
                        var items = this._data.get(ids);
                        this._ids.clear();
                        this.length = 0;
                        this._trigger("remove", {
                            items: ids,
                            oldData: items
                        });
                    }
                    if (data != null) {
                        this._data = data; // trigger an add of all added items
                        var _ids = this._data.getIds({
                            filter: filter$2(this._options)
                        });
                        for(var i = 0, len = _ids.length; i < len; i++){
                            var id = _ids[i];
                            this._ids.add(id);
                        }
                        this.length = _ids.length;
                        this._trigger("add", {
                            items: _ids
                        });
                    } else this._data = new DataSet1();
                     // subscribe to new dataset
                    if (this._data.on) this._data.on("*", this._listener);
                }
            },
            {
                key: "refresh",
                value: function refresh() {
                    var ids = this._data.getIds({
                        filter: filter$2(this._options)
                    });
                    var oldIds = toConsumableArray(this._ids);
                    var newIds = {
                    };
                    var addedIds = [];
                    var removedIds = [];
                    var removedItems = []; // check for additions
                    for(var i = 0, len = ids.length; i < len; i++){
                        var id = ids[i];
                        newIds[id] = true;
                        if (!this._ids.has(id)) {
                            addedIds.push(id);
                            this._ids.add(id);
                        }
                    } // check for removals
                    for(var _i = 0, _len = oldIds.length; _i < _len; _i++){
                        var _id = oldIds[_i];
                        var item = this._data.get(_id);
                        if (item == null) // @TODO: Investigate.
                        // Doesn't happen during tests or examples.
                        // Is it really impossible or could it eventually happen?
                        // How to handle it if it does? The types guarantee non-nullable items.
                        console.error("If you see this, report it please.");
                        else if (!newIds[_id]) {
                            removedIds.push(_id);
                            removedItems.push(item);
                            this._ids.delete(_id);
                        }
                    }
                    this.length += addedIds.length - removedIds.length; // trigger events
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    });
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    });
                }
            },
            {
                key: "get",
                value: function get(first, second) {
                    if (this._data == null) return null;
                     // parse the arguments
                    var ids = null;
                    var options;
                    if (isId(first) || isArray$5(first)) {
                        ids = first;
                        options = second;
                    } else options = first;
                     // extend the options with the default options and provided options
                    var viewOptions = assign$2({
                    }, this._options, options); // create a combined filter method when needed
                    var thisFilter = filter$2(this._options);
                    var optionsFilter = options && filter$2(options);
                    if (thisFilter && optionsFilter) viewOptions.filter = function(item) {
                        return thisFilter(item) && optionsFilter(item);
                    };
                    if (ids == null) return this._data.get(viewOptions);
                    else return this._data.get(ids, viewOptions);
                }
            },
            {
                key: "getIds",
                value: function getIds(options) {
                    if (this._data.length) {
                        var defaultFilter = filter$2(this._options);
                        var optionsFilter = options != null ? filter$2(options) : null;
                        var filter;
                        if (optionsFilter) {
                            if (defaultFilter) filter = function filter(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter = optionsFilter;
                        } else filter = defaultFilter;
                        return this._data.getIds({
                            filter: filter,
                            order: options && options.order
                        });
                    } else return [];
                }
            },
            {
                key: "forEach",
                value: function forEach(callback, options) {
                    if (this._data) {
                        var _context2;
                        var defaultFilter = filter$2(this._options);
                        var optionsFilter = options && filter$2(options);
                        var filter;
                        if (optionsFilter) {
                            if (defaultFilter) filter = function filter(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter = optionsFilter;
                        } else filter = defaultFilter;
                        forEach$2(_context2 = this._data).call(_context2, callback, {
                            filter: filter,
                            order: options && options.order
                        });
                    }
                }
            },
            {
                key: "map",
                value: function map(callback, options) {
                    if (this._data) {
                        var _context3;
                        var defaultFilter = filter$2(this._options);
                        var optionsFilter = options && filter$2(options);
                        var filter;
                        if (optionsFilter) {
                            if (defaultFilter) filter = function filter(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter = optionsFilter;
                        } else filter = defaultFilter;
                        return map$2(_context3 = this._data).call(_context3, callback, {
                            filter: filter,
                            order: options && options.order
                        });
                    } else return [];
                }
            },
            {
                key: "getDataSet",
                value: function getDataSet() {
                    return this._data.getDataSet();
                }
            },
            {
                key: "stream",
                value: function stream(ids) {
                    var _context4;
                    return this._data.stream(ids || defineProperty$7({
                    }, iterator$4, bind$2(_context4 = keys$6(this._ids)).call(_context4, this._ids)));
                }
            },
            {
                key: "dispose",
                value: function dispose() {
                    var _this$_data;
                    if ((_this$_data = this._data) !== null && _this$_data !== void 0 && _this$_data.off) this._data.off("*", this._listener);
                    var message = "This data view has already been disposed of.";
                    var replacement = {
                        get: function get() {
                            throw new Error(message);
                        },
                        set: function set() {
                            throw new Error(message);
                        },
                        configurable: false
                    };
                    var _iterator = _createForOfIteratorHelper$3(ownKeys$3(DataView.prototype)), _step;
                    try {
                        for(_iterator.s(); !(_step = _iterator.n()).done;){
                            var key = _step.value;
                            defineProperty$4(this, key, replacement);
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally{
                        _iterator.f();
                    }
                }
            },
            {
                key: "_onEvent",
                value: function _onEvent(event, params, senderId) {
                    if (!params || !params.items || !this._data) return;
                    var ids = params.items;
                    var addedIds = [];
                    var updatedIds = [];
                    var removedIds = [];
                    var oldItems = [];
                    var updatedItems = [];
                    var removedItems = [];
                    switch(event){
                        case "add":
                            // filter the ids of the added items
                            for(var i = 0, len = ids.length; i < len; i++){
                                var id = ids[i];
                                var item = this.get(id);
                                if (item) {
                                    this._ids.add(id);
                                    addedIds.push(id);
                                }
                            }
                            break;
                        case "update":
                            // determine the event from the views viewpoint: an updated
                            // item can be added, updated, or removed from this view.
                            for(var _i2 = 0, _len2 = ids.length; _i2 < _len2; _i2++){
                                var _id2 = ids[_i2];
                                var _item = this.get(_id2);
                                if (_item) {
                                    if (this._ids.has(_id2)) {
                                        updatedIds.push(_id2);
                                        updatedItems.push(params.data[_i2]);
                                        oldItems.push(params.oldData[_i2]);
                                    } else {
                                        this._ids.add(_id2);
                                        addedIds.push(_id2);
                                    }
                                } else if (this._ids.has(_id2)) {
                                    this._ids.delete(_id2);
                                    removedIds.push(_id2);
                                    removedItems.push(params.oldData[_i2]);
                                }
                            }
                            break;
                        case "remove":
                            // filter the ids of the removed items
                            for(var _i3 = 0, _len3 = ids.length; _i3 < _len3; _i3++){
                                var _id3 = ids[_i3];
                                if (this._ids.has(_id3)) {
                                    this._ids.delete(_id3);
                                    removedIds.push(_id3);
                                    removedItems.push(params.oldData[_i3]);
                                }
                            }
                            break;
                    }
                    this.length += addedIds.length - removedIds.length;
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    if (updatedIds.length) this._trigger("update", {
                        items: updatedIds,
                        oldData: oldItems,
                        data: updatedItems
                    }, senderId);
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    }, senderId);
                }
            },
            {
                key: "idProp",
                get: function get() {
                    return this.getDataSet().idProp;
                }
            }
        ]);
        return DataView;
    }(DataSetPart1);
    /**
	 * Check that given value is compatible with Vis Data Set interface.
	 *
	 * @param idProp - The expected property to contain item id.
	 * @param v - The value to be tested.
	 *
	 * @returns True if all expected values and methods match, false otherwise.
	 */ function isDataSetLike(idProp, v) {
        return _typeof_1(v) === "object" && v !== null && idProp === v.idProp && typeof v.add === "function" && typeof v.clear === "function" && typeof v.distinct === "function" && typeof forEach$2(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof map$2(v) === "function" && typeof v.max === "function" && typeof v.min === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.remove === "function" && typeof v.setOptions === "function" && typeof v.stream === "function" && typeof v.update === "function" && typeof v.updateOnly === "function";
    }
    /**
	 * Check that given value is compatible with Vis Data View interface.
	 *
	 * @param idProp - The expected property to contain item id.
	 * @param v - The value to be tested.
	 *
	 * @returns True if all expected values and methods match, false otherwise.
	 */ function isDataViewLike(idProp, v) {
        return _typeof_1(v) === "object" && v !== null && idProp === v.idProp && typeof forEach$2(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof map$2(v) === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.stream === "function" && isDataSetLike(idProp, v.getDataSet());
    }
    exports1.DELETE = DELETE;
    exports1.DataSet = DataSet1;
    exports1.DataStream = DataStream1;
    exports1.DataView = DataView1;
    exports1.Queue = Queue1;
    exports1.createNewDataPipeFrom = createNewDataPipeFrom;
    exports1.isDataSetLike = isDataSetLike;
    exports1.isDataViewLike = isDataViewLike;
    Object.defineProperty(exports1, '__esModule', {
        value: true
    });
});

},{}],"l0t0w":[function(require,module,exports) {
//     uuid.js
//
//     Copyright (c) 2010-2012 Robert Kieffer
//     MIT License - http://opensource.org/licenses/mit-license.php
// Unique ID creation requires a high quality random # generator.  We feature
// detect to determine the best RNG source, normalizing to a function that
// returns 128-bits of randomness, since that's what's usually required
var _rng = require('./rng');
// Maps for number <-> hex string conversion
var _byteToHex = [];
var _hexToByte = {
};
for(var i = 0; i < 256; i++){
    _byteToHex[i] = (i + 256).toString(16).substr(1);
    _hexToByte[_byteToHex[i]] = i;
}
// **`parse()` - Parse a UUID into it's component bytes**
function parse(s, buf, offset) {
    var i = buf && offset || 0, ii = 0;
    buf = buf || [];
    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
        if (ii < 16) buf[i + ii++] = _hexToByte[oct];
    });
    // Zero out remaining bytes if string was short
    while(ii < 16)buf[i + ii++] = 0;
    return buf;
}
// **`unparse()` - Convert UUID byte array (ala parse()) into a string**
function unparse(buf, offset) {
    var i = offset || 0, bth = _byteToHex;
    return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
}
// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
// random #'s we need to init node and clockseq
var _seedBytes = _rng();
// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
var _nodeId = [
    _seedBytes[0] | 1,
    _seedBytes[1],
    _seedBytes[2],
    _seedBytes[3],
    _seedBytes[4],
    _seedBytes[5]
];
// Per 4.2.2, randomize (14 bit) clockseq
var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 16383;
// Previous uuid creation time
var _lastMSecs = 0, _lastNSecs = 0;
// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];
    options = options || {
    };
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
    // Time since last uuid creation (in msecs)
    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;
    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) clockseq = clockseq + 1 & 16383;
    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) nsecs = 0;
    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;
    // `time_low`
    var tl = ((msecs & 268435455) * 10000 + nsecs) % 4294967296;
    b[i++] = tl >>> 24 & 255;
    b[i++] = tl >>> 16 & 255;
    b[i++] = tl >>> 8 & 255;
    b[i++] = tl & 255;
    // `time_mid`
    var tmh = msecs / 4294967296 * 10000 & 268435455;
    b[i++] = tmh >>> 8 & 255;
    b[i++] = tmh & 255;
    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 15 | 16; // include version
    b[i++] = tmh >>> 16 & 255;
    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 128;
    // `clock_seq_low`
    b[i++] = clockseq & 255;
    // `node`
    var node = options.node || _nodeId;
    for(var n = 0; n < 6; n++)b[i + n] = node[n];
    return buf ? buf : unparse(b);
}
// **`v4()` - Generate random UUID**
// See https://github.com/broofa/node-uuid for API details
function v4(options, buf, offset) {
    // Deprecated - 'format' argument, as supported in v1.2
    var i = buf && offset || 0;
    if (typeof options == 'string') {
        buf = options == 'binary' ? new Array(16) : null;
        options = null;
    }
    options = options || {
    };
    var rnds = options.random || (options.rng || _rng)();
    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    // Copy bytes to buffer, if provided
    if (buf) for(var ii = 0; ii < 16; ii++)buf[i + ii] = rnds[ii];
    return buf || unparse(rnds);
}
// Export public API
var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;
uuid.parse = parse;
uuid.unparse = unparse;
module.exports = uuid;

},{"./rng":"gPiem"}],"gPiem":[function(require,module,exports) {
var global = arguments[3];
var rng;
var crypto = global.crypto || global.msCrypto; // for IE 11
if (crypto && crypto.getRandomValues) {
    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
    // Moderately fast, high quality
    var _rnds8 = new Uint8Array(16);
    rng = function whatwgRNG() {
        crypto.getRandomValues(_rnds8);
        return _rnds8;
    };
}
if (!rng) {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var _rnds = new Array(16);
    rng = function() {
        for(var i = 0, r; i < 16; i++){
            if ((i & 3) === 0) r = Math.random() * 4294967296;
            _rnds[i] = r >>> ((i & 3) << 3) & 255;
        }
        return _rnds;
    };
}
module.exports = rng;

},{}],"9pz13":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args1;
    var timeout = undefined;
    return function(args) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"aeH4U"}],"9qMdX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Accordion", ()=>_accordionDefault.default
);
parcelHelpers.export(exports, "AccordionContext", ()=>_accordionContextDefault.default
);
parcelHelpers.export(exports, "AccordionCollapse", ()=>_accordionCollapseDefault.default
);
parcelHelpers.export(exports, "AccordionButton", ()=>_accordionButtonDefault.default
);
parcelHelpers.export(exports, "useAccordionButton", ()=>_accordionButton.useAccordionButton
);
parcelHelpers.export(exports, "Alert", ()=>_alertDefault.default
);
parcelHelpers.export(exports, "Anchor", ()=>_anchorDefault.default
);
parcelHelpers.export(exports, "Badge", ()=>_badgeDefault.default
);
parcelHelpers.export(exports, "Breadcrumb", ()=>_breadcrumbDefault.default
);
parcelHelpers.export(exports, "BreadcrumbItem", ()=>_breadcrumbItemDefault.default
);
parcelHelpers.export(exports, "Button", ()=>_buttonDefault.default
);
parcelHelpers.export(exports, "ButtonGroup", ()=>_buttonGroupDefault.default
);
parcelHelpers.export(exports, "ButtonToolbar", ()=>_buttonToolbarDefault.default
);
parcelHelpers.export(exports, "Card", ()=>_cardDefault.default
);
parcelHelpers.export(exports, "CardImg", ()=>_cardImgDefault.default
);
parcelHelpers.export(exports, "CardGroup", ()=>_cardGroupDefault.default
);
parcelHelpers.export(exports, "Carousel", ()=>_carouselDefault.default
);
parcelHelpers.export(exports, "CarouselItem", ()=>_carouselItemDefault.default
);
parcelHelpers.export(exports, "CloseButton", ()=>_closeButtonDefault.default
);
parcelHelpers.export(exports, "Col", ()=>_colDefault.default
);
parcelHelpers.export(exports, "Collapse", ()=>_collapseDefault.default
);
parcelHelpers.export(exports, "Dropdown", ()=>_dropdownDefault.default
);
parcelHelpers.export(exports, "DropdownButton", ()=>_dropdownButtonDefault.default
);
parcelHelpers.export(exports, "Fade", ()=>_fadeDefault.default
);
parcelHelpers.export(exports, "Form", ()=>_formDefault.default
);
parcelHelpers.export(exports, "FormControl", ()=>_formControlDefault.default
);
parcelHelpers.export(exports, "FormCheck", ()=>_formCheckDefault.default
);
parcelHelpers.export(exports, "FormFloating", ()=>_formFloatingDefault.default
);
parcelHelpers.export(exports, "FloatingLabel", ()=>_floatingLabelDefault.default
);
parcelHelpers.export(exports, "FormGroup", ()=>_formGroupDefault.default
);
parcelHelpers.export(exports, "FormLabel", ()=>_formLabelDefault.default
);
parcelHelpers.export(exports, "FormText", ()=>_formTextDefault.default
);
parcelHelpers.export(exports, "FormSelect", ()=>_formSelectDefault.default
);
parcelHelpers.export(exports, "Container", ()=>_containerDefault.default
);
parcelHelpers.export(exports, "Image", ()=>_imageDefault.default
);
parcelHelpers.export(exports, "Figure", ()=>_figureDefault.default
);
parcelHelpers.export(exports, "InputGroup", ()=>_inputGroupDefault.default
);
parcelHelpers.export(exports, "ListGroup", ()=>_listGroupDefault.default
);
parcelHelpers.export(exports, "ListGroupItem", ()=>_listGroupItemDefault.default
);
parcelHelpers.export(exports, "Modal", ()=>_modalDefault.default
);
parcelHelpers.export(exports, "ModalBody", ()=>_modalBodyDefault.default
);
parcelHelpers.export(exports, "ModalDialog", ()=>_modalDialogDefault.default
);
parcelHelpers.export(exports, "ModalFooter", ()=>_modalFooterDefault.default
);
parcelHelpers.export(exports, "ModalTitle", ()=>_modalTitleDefault.default
);
parcelHelpers.export(exports, "Nav", ()=>_navDefault.default
);
parcelHelpers.export(exports, "Navbar", ()=>_navbarDefault.default
);
parcelHelpers.export(exports, "NavbarBrand", ()=>_navbarBrandDefault.default
);
parcelHelpers.export(exports, "NavDropdown", ()=>_navDropdownDefault.default
);
parcelHelpers.export(exports, "NavItem", ()=>_navItemDefault.default
);
parcelHelpers.export(exports, "NavLink", ()=>_navLinkDefault.default
);
parcelHelpers.export(exports, "Offcanvas", ()=>_offcanvasDefault.default
);
parcelHelpers.export(exports, "OffcanvasHeader", ()=>_offcanvasHeaderDefault.default
);
parcelHelpers.export(exports, "OffcanvasTitle", ()=>_offcanvasTitleDefault.default
);
parcelHelpers.export(exports, "OffcanvasBody", ()=>_offcanvasBodyDefault.default
);
parcelHelpers.export(exports, "Overlay", ()=>_overlayDefault.default
);
parcelHelpers.export(exports, "OverlayTrigger", ()=>_overlayTriggerDefault.default
);
parcelHelpers.export(exports, "PageItem", ()=>_pageItemDefault.default
);
parcelHelpers.export(exports, "Pagination", ()=>_paginationDefault.default
);
parcelHelpers.export(exports, "Placeholder", ()=>_placeholderDefault.default
);
parcelHelpers.export(exports, "PlaceholderButton", ()=>_placeholderButtonDefault.default
);
parcelHelpers.export(exports, "Popover", ()=>_popoverDefault.default
);
parcelHelpers.export(exports, "PopoverHeader", ()=>_popoverHeaderDefault.default
);
parcelHelpers.export(exports, "PopoverBody", ()=>_popoverBodyDefault.default
);
parcelHelpers.export(exports, "ProgressBar", ()=>_progressBarDefault.default
);
parcelHelpers.export(exports, "Ratio", ()=>_ratioDefault.default
);
parcelHelpers.export(exports, "Row", ()=>_rowDefault.default
);
parcelHelpers.export(exports, "Spinner", ()=>_spinnerDefault.default
);
parcelHelpers.export(exports, "SplitButton", ()=>_splitButtonDefault.default
);
parcelHelpers.export(exports, "SSRProvider", ()=>_ssrproviderDefault.default
);
parcelHelpers.export(exports, "Stack", ()=>_stackDefault.default
);
parcelHelpers.export(exports, "Tab", ()=>_tabDefault.default
);
parcelHelpers.export(exports, "TabContainer", ()=>_tabContainerDefault.default
);
parcelHelpers.export(exports, "TabContent", ()=>_tabContentDefault.default
);
parcelHelpers.export(exports, "Table", ()=>_tableDefault.default
);
parcelHelpers.export(exports, "TabPane", ()=>_tabPaneDefault.default
);
parcelHelpers.export(exports, "Tabs", ()=>_tabsDefault.default
);
parcelHelpers.export(exports, "ThemeProvider", ()=>_themeProviderDefault.default
);
parcelHelpers.export(exports, "Toast", ()=>_toastDefault.default
);
parcelHelpers.export(exports, "ToastBody", ()=>_toastBodyDefault.default
);
parcelHelpers.export(exports, "ToastHeader", ()=>_toastHeaderDefault.default
);
parcelHelpers.export(exports, "ToastContainer", ()=>_toastContainerDefault.default
);
parcelHelpers.export(exports, "ToggleButton", ()=>_toggleButtonDefault.default
);
parcelHelpers.export(exports, "ToggleButtonGroup", ()=>_toggleButtonGroupDefault.default
);
parcelHelpers.export(exports, "Tooltip", ()=>_tooltipDefault.default
);
var _accordion = require("./Accordion");
var _accordionDefault = parcelHelpers.interopDefault(_accordion);
var _accordionContext = require("./AccordionContext");
var _accordionContextDefault = parcelHelpers.interopDefault(_accordionContext);
var _accordionCollapse = require("./AccordionCollapse");
var _accordionCollapseDefault = parcelHelpers.interopDefault(_accordionCollapse);
var _accordionButton = require("./AccordionButton");
var _accordionButtonDefault = parcelHelpers.interopDefault(_accordionButton);
var _alert = require("./Alert");
var _alertDefault = parcelHelpers.interopDefault(_alert);
var _anchor = require("./Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _badge = require("./Badge");
var _badgeDefault = parcelHelpers.interopDefault(_badge);
var _breadcrumb = require("./Breadcrumb");
var _breadcrumbDefault = parcelHelpers.interopDefault(_breadcrumb);
var _breadcrumbItem = require("./BreadcrumbItem");
var _breadcrumbItemDefault = parcelHelpers.interopDefault(_breadcrumbItem);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _buttonGroup = require("./ButtonGroup");
var _buttonGroupDefault = parcelHelpers.interopDefault(_buttonGroup);
var _buttonToolbar = require("./ButtonToolbar");
var _buttonToolbarDefault = parcelHelpers.interopDefault(_buttonToolbar);
var _card = require("./Card");
var _cardDefault = parcelHelpers.interopDefault(_card);
var _cardImg = require("./CardImg");
var _cardImgDefault = parcelHelpers.interopDefault(_cardImg);
var _cardGroup = require("./CardGroup");
var _cardGroupDefault = parcelHelpers.interopDefault(_cardGroup);
var _carousel = require("./Carousel");
var _carouselDefault = parcelHelpers.interopDefault(_carousel);
var _carouselItem = require("./CarouselItem");
var _carouselItemDefault = parcelHelpers.interopDefault(_carouselItem);
var _closeButton = require("./CloseButton");
var _closeButtonDefault = parcelHelpers.interopDefault(_closeButton);
var _col = require("./Col");
var _colDefault = parcelHelpers.interopDefault(_col);
var _collapse = require("./Collapse");
var _collapseDefault = parcelHelpers.interopDefault(_collapse);
var _dropdown = require("./Dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _dropdownButton = require("./DropdownButton");
var _dropdownButtonDefault = parcelHelpers.interopDefault(_dropdownButton);
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _form = require("./Form");
var _formDefault = parcelHelpers.interopDefault(_form);
var _formControl = require("./FormControl");
var _formControlDefault = parcelHelpers.interopDefault(_formControl);
var _formCheck = require("./FormCheck");
var _formCheckDefault = parcelHelpers.interopDefault(_formCheck);
var _formFloating = require("./FormFloating");
var _formFloatingDefault = parcelHelpers.interopDefault(_formFloating);
var _floatingLabel = require("./FloatingLabel");
var _floatingLabelDefault = parcelHelpers.interopDefault(_floatingLabel);
var _formGroup = require("./FormGroup");
var _formGroupDefault = parcelHelpers.interopDefault(_formGroup);
var _formLabel = require("./FormLabel");
var _formLabelDefault = parcelHelpers.interopDefault(_formLabel);
var _formText = require("./FormText");
var _formTextDefault = parcelHelpers.interopDefault(_formText);
var _formSelect = require("./FormSelect");
var _formSelectDefault = parcelHelpers.interopDefault(_formSelect);
var _container = require("./Container");
var _containerDefault = parcelHelpers.interopDefault(_container);
var _image = require("./Image");
var _imageDefault = parcelHelpers.interopDefault(_image);
var _figure = require("./Figure");
var _figureDefault = parcelHelpers.interopDefault(_figure);
var _inputGroup = require("./InputGroup");
var _inputGroupDefault = parcelHelpers.interopDefault(_inputGroup);
var _listGroup = require("./ListGroup");
var _listGroupDefault = parcelHelpers.interopDefault(_listGroup);
var _listGroupItem = require("./ListGroupItem");
var _listGroupItemDefault = parcelHelpers.interopDefault(_listGroupItem);
var _modal = require("./Modal");
var _modalDefault = parcelHelpers.interopDefault(_modal);
var _modalBody = require("./ModalBody");
var _modalBodyDefault = parcelHelpers.interopDefault(_modalBody);
var _modalDialog = require("./ModalDialog");
var _modalDialogDefault = parcelHelpers.interopDefault(_modalDialog);
var _modalFooter = require("./ModalFooter");
var _modalFooterDefault = parcelHelpers.interopDefault(_modalFooter);
var _modalTitle = require("./ModalTitle");
var _modalTitleDefault = parcelHelpers.interopDefault(_modalTitle);
var _nav = require("./Nav");
var _navDefault = parcelHelpers.interopDefault(_nav);
var _navbar = require("./Navbar");
var _navbarDefault = parcelHelpers.interopDefault(_navbar);
var _navbarBrand = require("./NavbarBrand");
var _navbarBrandDefault = parcelHelpers.interopDefault(_navbarBrand);
var _navDropdown = require("./NavDropdown");
var _navDropdownDefault = parcelHelpers.interopDefault(_navDropdown);
var _navItem = require("./NavItem");
var _navItemDefault = parcelHelpers.interopDefault(_navItem);
var _navLink = require("./NavLink");
var _navLinkDefault = parcelHelpers.interopDefault(_navLink);
var _offcanvas = require("./Offcanvas");
var _offcanvasDefault = parcelHelpers.interopDefault(_offcanvas);
var _offcanvasHeader = require("./OffcanvasHeader");
var _offcanvasHeaderDefault = parcelHelpers.interopDefault(_offcanvasHeader);
var _offcanvasTitle = require("./OffcanvasTitle");
var _offcanvasTitleDefault = parcelHelpers.interopDefault(_offcanvasTitle);
var _offcanvasBody = require("./OffcanvasBody");
var _offcanvasBodyDefault = parcelHelpers.interopDefault(_offcanvasBody);
var _overlay = require("./Overlay");
var _overlayDefault = parcelHelpers.interopDefault(_overlay);
var _overlayTrigger = require("./OverlayTrigger");
var _overlayTriggerDefault = parcelHelpers.interopDefault(_overlayTrigger);
var _pageItem = require("./PageItem");
var _pageItemDefault = parcelHelpers.interopDefault(_pageItem);
var _pagination = require("./Pagination");
var _paginationDefault = parcelHelpers.interopDefault(_pagination);
var _placeholder = require("./Placeholder");
var _placeholderDefault = parcelHelpers.interopDefault(_placeholder);
var _placeholderButton = require("./PlaceholderButton");
var _placeholderButtonDefault = parcelHelpers.interopDefault(_placeholderButton);
var _popover = require("./Popover");
var _popoverDefault = parcelHelpers.interopDefault(_popover);
var _popoverHeader = require("./PopoverHeader");
var _popoverHeaderDefault = parcelHelpers.interopDefault(_popoverHeader);
var _popoverBody = require("./PopoverBody");
var _popoverBodyDefault = parcelHelpers.interopDefault(_popoverBody);
var _progressBar = require("./ProgressBar");
var _progressBarDefault = parcelHelpers.interopDefault(_progressBar);
var _ratio = require("./Ratio");
var _ratioDefault = parcelHelpers.interopDefault(_ratio);
var _row = require("./Row");
var _rowDefault = parcelHelpers.interopDefault(_row);
var _spinner = require("./Spinner");
var _spinnerDefault = parcelHelpers.interopDefault(_spinner);
var _splitButton = require("./SplitButton");
var _splitButtonDefault = parcelHelpers.interopDefault(_splitButton);
var _ssrprovider = require("./SSRProvider");
var _ssrproviderDefault = parcelHelpers.interopDefault(_ssrprovider);
var _stack = require("./Stack");
var _stackDefault = parcelHelpers.interopDefault(_stack);
var _tab = require("./Tab");
var _tabDefault = parcelHelpers.interopDefault(_tab);
var _tabContainer = require("./TabContainer");
var _tabContainerDefault = parcelHelpers.interopDefault(_tabContainer);
var _tabContent = require("./TabContent");
var _tabContentDefault = parcelHelpers.interopDefault(_tabContent);
var _table = require("./Table");
var _tableDefault = parcelHelpers.interopDefault(_table);
var _tabPane = require("./TabPane");
var _tabPaneDefault = parcelHelpers.interopDefault(_tabPane);
var _tabs = require("./Tabs");
var _tabsDefault = parcelHelpers.interopDefault(_tabs);
var _themeProvider = require("./ThemeProvider");
var _themeProviderDefault = parcelHelpers.interopDefault(_themeProvider);
var _toast = require("./Toast");
var _toastDefault = parcelHelpers.interopDefault(_toast);
var _toastBody = require("./ToastBody");
var _toastBodyDefault = parcelHelpers.interopDefault(_toastBody);
var _toastHeader = require("./ToastHeader");
var _toastHeaderDefault = parcelHelpers.interopDefault(_toastHeader);
var _toastContainer = require("./ToastContainer");
var _toastContainerDefault = parcelHelpers.interopDefault(_toastContainer);
var _toggleButton = require("./ToggleButton");
var _toggleButtonDefault = parcelHelpers.interopDefault(_toggleButton);
var _toggleButtonGroup = require("./ToggleButtonGroup");
var _toggleButtonGroupDefault = parcelHelpers.interopDefault(_toggleButtonGroup);
var _tooltip = require("./Tooltip");
var _tooltipDefault = parcelHelpers.interopDefault(_tooltip);

},{"./Accordion":"4xdrS","./AccordionContext":"ewZOe","./AccordionCollapse":"bk2tr","./AccordionButton":"fkLUQ","./Alert":"jCNVG","./Anchor":"1sqBH","./Badge":"655UP","./Breadcrumb":"jersl","./BreadcrumbItem":"h6vFq","./Button":"64Pgd","./ButtonGroup":"lNHIX","./ButtonToolbar":"eZyti","./Card":"jeXXJ","./CardImg":"2QSkt","./CardGroup":"cyfp1","./Carousel":"gCbs7","./CarouselItem":"3uqGs","./CloseButton":"arc5K","./Col":"kxhZp","./Collapse":"ilxlq","./Dropdown":"7gNYx","./DropdownButton":"bqS2l","./Fade":"cHHEJ","./Form":"PeiIB","./FormControl":"3iZ43","./FormCheck":"k9egm","./FormFloating":"2z0Ti","./FloatingLabel":"1Xz1h","./FormGroup":"6eZW8","./FormLabel":"4E1MN","./FormText":"gsCyO","./FormSelect":"cLBuq","./Container":"gFkXb","./Image":"lntx1","./Figure":"dD7yw","./InputGroup":"jHgra","./ListGroup":"5ZBCJ","./ListGroupItem":"lStPp","./Modal":"3e8qu","./ModalBody":"eiGfM","./ModalDialog":"5L3Ev","./ModalFooter":"5ZZee","./ModalTitle":"bXx7g","./Nav":"3TTuV","./Navbar":"6tJ6F","./NavbarBrand":"3BfVc","./NavDropdown":"ieiTF","./NavItem":"lgp9h","./NavLink":"aGfFg","./Offcanvas":"k5ln7","./OffcanvasHeader":"8XL24","./OffcanvasTitle":"7WoM0","./OffcanvasBody":"gbeym","./Overlay":"92F4y","./OverlayTrigger":"90D2y","./PageItem":"aLJu6","./Pagination":"j9EMR","./Placeholder":"cGyxn","./PlaceholderButton":"GdRy3","./Popover":"cRMw9","./PopoverHeader":"aQjaj","./PopoverBody":"4h2uh","./ProgressBar":"fjWS2","./Ratio":"ap3iS","./Row":"eR7YE","./Spinner":"fIUSy","./SplitButton":"cRJfo","./SSRProvider":"hFbgz","./Stack":"jyr8Z","./Tab":"aP3XF","./TabContainer":"ciJeM","./TabContent":"kjnDo","./Table":"g38lh","./TabPane":"dgZMl","./Tabs":"7zOeE","./ThemeProvider":"oG7Uz","./Toast":"b3kl2","./ToastBody":"1FEN9","./ToastHeader":"e7EVr","./ToastContainer":"8m5Zr","./ToggleButton":"g8FN5","./ToggleButtonGroup":"c1Mk9","./Tooltip":"aUst3","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4xdrS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _themeProvider = require("./ThemeProvider");
var _accordionBody = require("./AccordionBody");
var _accordionBodyDefault = parcelHelpers.interopDefault(_accordionBody);
var _accordionButton = require("./AccordionButton");
var _accordionButtonDefault = parcelHelpers.interopDefault(_accordionButton);
var _accordionCollapse = require("./AccordionCollapse");
var _accordionCollapseDefault = parcelHelpers.interopDefault(_accordionCollapse);
var _accordionContext = require("./AccordionContext");
var _accordionContextDefault = parcelHelpers.interopDefault(_accordionContext);
var _accordionHeader = require("./AccordionHeader");
var _accordionHeaderDefault = parcelHelpers.interopDefault(_accordionHeader);
var _accordionItem = require("./AccordionItem");
var _accordionItemDefault = parcelHelpers.interopDefault(_accordionItem);
var _jsxRuntime = require("react/jsx-runtime");
const Accordion = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    const { // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'div' , activeKey , bsPrefix , className , onSelect , flush , ...controlledProps } = _uncontrollable.useUncontrolled(props, {
        activeKey: 'onSelect'
    });
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion');
    const contextValue = _react.useMemo(()=>({
            activeEventKey: activeKey,
            onSelect
        })
    , [
        activeKey,
        onSelect
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_accordionContextDefault.default.Provider, {
        value: contextValue,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, {
            ref: ref,
            ...controlledProps,
            className: _classnamesDefault.default(className, prefix, flush && `${prefix}-flush`)
        })
    }));
});
Accordion.displayName = 'Accordion';
exports.default = Object.assign(Accordion, {
    Button: _accordionButtonDefault.default,
    Collapse: _accordionCollapseDefault.default,
    Item: _accordionItemDefault.default,
    Header: _accordionHeaderDefault.default,
    Body: _accordionBodyDefault.default
});

},{"classnames":"2cVcN","react":"4mchR","uncontrollable":"aG99Z","./ThemeProvider":"oG7Uz","./AccordionBody":"60jad","./AccordionButton":"fkLUQ","./AccordionCollapse":"bk2tr","./AccordionContext":"ewZOe","./AccordionHeader":"ePjXr","./AccordionItem":"7pMYo","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2cVcN":[function(require,module,exports) {
(function() {
    var hasOwn = {
    }.hasOwnProperty;
    function classNames() {
        var classes = [];
        for(var i = 0; i < arguments.length; i++){
            var arg = arguments[i];
            if (!arg) continue;
            var argType = typeof arg;
            if (argType === 'string' || argType === 'number') classes.push(arg);
            else if (Array.isArray(arg)) {
                if (arg.length) {
                    var inner = classNames.apply(null, arg);
                    if (inner) classes.push(inner);
                }
            } else if (argType === 'object') {
                if (arg.toString === Object.prototype.toString) {
                    for(var key in arg)if (hasOwn.call(arg, key) && arg[key]) classes.push(key);
                } else classes.push(arg.toString());
            }
        }
        return classes.join(' ');
    }
    if (typeof module !== 'undefined' && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
    } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) // register as 'classnames', consistent with npm package name
    define('classnames', [], function() {
        return classNames;
    });
    else window.classNames = classNames;
})();

},{}],"aG99Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useUncontrolled", ()=>_hookDefault.default
);
parcelHelpers.export(exports, "useUncontrolledProp", ()=>_hook.useUncontrolledProp
);
parcelHelpers.export(exports, "uncontrollable", ()=>_uncontrollableDefault.default
);
var _hook = require("./hook");
var _hookDefault = parcelHelpers.interopDefault(_hook);
var _uncontrollable = require("./uncontrollable");
var _uncontrollableDefault = parcelHelpers.interopDefault(_uncontrollable);

},{"./hook":"agkdx","./uncontrollable":"xUGGj","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"agkdx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useUncontrolledProp", ()=>useUncontrolledProp
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _react = require("react");
var _utils = require("./utils");
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
function useUncontrolledProp(propValue, defaultValue, handler) {
    var wasPropRef = _react.useRef(propValue !== undefined);
    var _useState = _react.useState(defaultValue), stateValue = _useState[0], setState = _useState[1];
    var isProp = propValue !== undefined;
    var wasProp = wasPropRef.current;
    wasPropRef.current = isProp;
    /**
   * If a prop switches from controlled to Uncontrolled
   * reset its value to the defaultValue
   */ if (!isProp && wasProp && stateValue !== defaultValue) setState(defaultValue);
    return [
        isProp ? propValue : stateValue,
        _react.useCallback(function(value) {
            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
            if (handler) handler.apply(void 0, [
                value
            ].concat(args));
            setState(value);
        }, [
            handler
        ])
    ];
}
function useUncontrolled(props, config) {
    return Object.keys(config).reduce(function(result, fieldName) {
        var _extends2;
        var _ref = result, defaultValue = _ref[_utils.defaultKey(fieldName)], propsValue = _ref[fieldName], rest = _objectWithoutPropertiesLooseDefault.default(_ref, [
            _utils.defaultKey(fieldName),
            fieldName
        ].map(_toPropertyKey));
        var handlerName = config[fieldName];
        var _useUncontrolledProp = useUncontrolledProp(propsValue, defaultValue, props[handlerName]), value = _useUncontrolledProp[0], handler = _useUncontrolledProp[1];
        return _extendsDefault.default({
        }, rest, (_extends2 = {
        }, _extends2[fieldName] = value, _extends2[handlerName] = handler, _extends2));
    }, props);
}
exports.default = useUncontrolled;

},{"@babel/runtime/helpers/esm/extends":"5inYT","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"9unNO","react":"4mchR","./utils":"5zfpz","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5inYT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
exports.default = _extends;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9unNO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports.default = _objectWithoutPropertiesLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5zfpz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "uncontrolledPropTypes", ()=>uncontrolledPropTypes
);
parcelHelpers.export(exports, "isProp", ()=>isProp
);
parcelHelpers.export(exports, "defaultKey", ()=>defaultKey
);
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */ parcelHelpers.export(exports, "canAcceptRef", ()=>canAcceptRef
);
var _invariant = require("invariant");
var _invariantDefault = parcelHelpers.interopDefault(_invariant);
var noop = function noop() {
};
function readOnlyPropType(handler, name) {
    return function(props, propName) {
        if (props[propName] !== undefined) {
            if (!props[handler]) return new Error("You have provided a `" + propName + "` prop to `" + name + "` " + ("without an `" + handler + "` handler prop. This will render a read-only field. ") + ("If the field should be mutable use `" + defaultKey(propName) + "`. ") + ("Otherwise, set `" + handler + "`."));
        }
    };
}
function uncontrolledPropTypes(controlledValues, displayName) {
    var propTypes = {
    };
    Object.keys(controlledValues).forEach(function(prop) {
        // add default propTypes for folks that use runtime checks
        propTypes[defaultKey(prop)] = noop;
        var handler = controlledValues[prop];
        !(typeof handler === 'string' && handler.trim().length) && _invariantDefault.default(false, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop);
        propTypes[prop] = readOnlyPropType(handler, displayName);
    });
    return propTypes;
}
function isProp(props, prop) {
    return props[prop] !== undefined;
}
function defaultKey(key) {
    return 'default' + key.charAt(0).toUpperCase() + key.substr(1);
}
function canAcceptRef(component) {
    return !!component && (typeof component !== 'function' || component.prototype && component.prototype.isReactComponent);
}

},{"invariant":"Xxs2W","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"Xxs2W":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */ var invariant = function(condition, format, a, b, c, d, e, f) {
    if (format === undefined) throw new Error('invariant requires an error message argument');
    if (!condition) {
        var error;
        if (format === undefined) error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
        else {
            var args = [
                a,
                b,
                c,
                d,
                e,
                f
            ];
            var argIndex = 0;
            error = new Error(format.replace(/%s/g, function() {
                return args[argIndex++];
            }));
            error.name = 'Invariant Violation';
        }
        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
    }
};
module.exports = invariant;

},{}],"xUGGj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactLifecyclesCompat = require("react-lifecycles-compat");
var _invariant = require("invariant");
var _invariantDefault = parcelHelpers.interopDefault(_invariant);
var _utils = require("./utils");
var _jsxFileName = "/Users/jquense/src/uncontrollable/src/uncontrollable.js";
function uncontrollable(Component, controlledValues, methods) {
    if (methods === void 0) methods = [];
    var displayName = Component.displayName || Component.name || 'Component';
    var canAcceptRef = _utils.canAcceptRef(Component);
    var controlledProps = Object.keys(controlledValues);
    var PROPS_TO_OMIT = controlledProps.map(_utils.defaultKey);
    !(canAcceptRef || !methods.length) && _invariantDefault.default(false, "[uncontrollable] stateless function components cannot pass through methods because they have no associated instances. Check component: " + displayName + ', ' + 'attempting to pass through methods: ' + methods.join(', '));
    var UncontrolledComponent1 = /*#__PURE__*/ function(_React$Component) {
        _inheritsLooseDefault.default(UncontrolledComponent, _React$Component);
        function UncontrolledComponent() {
            var _this;
            for(var _len = arguments.length, args1 = new Array(_len), _key = 0; _key < _len; _key++)args1[_key] = arguments[_key];
            _this = _React$Component.call.apply(_React$Component, [
                this
            ].concat(args1)) || this;
            _this.handlers = Object.create(null);
            controlledProps.forEach(function(propName) {
                var handlerName = controlledValues[propName];
                var handleChange = function handleChange(value) {
                    if (_this.props[handlerName]) {
                        var _this$props;
                        _this._notifying = true;
                        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
                        (_this$props = _this.props)[handlerName].apply(_this$props, [
                            value
                        ].concat(args));
                        _this._notifying = false;
                    }
                    if (!_this.unmounted) _this.setState(function(_ref) {
                        var _extends2;
                        var values = _ref.values;
                        return {
                            values: _extendsDefault.default(Object.create(null), values, (_extends2 = {
                            }, _extends2[propName] = value, _extends2))
                        };
                    });
                };
                _this.handlers[handlerName] = handleChange;
            });
            if (methods.length) _this.attachRef = function(ref) {
                _this.inner = ref;
            };
            var values1 = Object.create(null);
            controlledProps.forEach(function(key) {
                values1[key] = _this.props[_utils.defaultKey(key)];
            });
            _this.state = {
                values: values1,
                prevProps: {
                }
            };
            return _this;
        }
        var _proto = UncontrolledComponent.prototype;
        _proto.shouldComponentUpdate = function shouldComponentUpdate() {
            //let setState trigger the update
            return !this._notifying;
        };
        UncontrolledComponent.getDerivedStateFromProps = function getDerivedStateFromProps(props, _ref2) {
            var values = _ref2.values, prevProps = _ref2.prevProps;
            var nextState = {
                values: _extendsDefault.default(Object.create(null), values),
                prevProps: {
                }
            };
            controlledProps.forEach(function(key) {
                /**
         * If a prop switches from controlled to Uncontrolled
         * reset its value to the defaultValue
         */ nextState.prevProps[key] = props[key];
                if (!_utils.isProp(props, key) && _utils.isProp(prevProps, key)) nextState.values[key] = props[_utils.defaultKey(key)];
            });
            return nextState;
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            this.unmounted = true;
        };
        _proto.render = function render() {
            var _this2 = this;
            var _this$props2 = this.props, innerRef = _this$props2.innerRef, props = _objectWithoutPropertiesLooseDefault.default(_this$props2, [
                "innerRef"
            ]);
            PROPS_TO_OMIT.forEach(function(prop) {
                delete props[prop];
            });
            var newProps = {
            };
            controlledProps.forEach(function(propName) {
                var propValue = _this2.props[propName];
                newProps[propName] = propValue !== undefined ? propValue : _this2.state.values[propName];
            });
            return _reactDefault.default.createElement(Component, _extendsDefault.default({
            }, props, newProps, this.handlers, {
                ref: innerRef || this.attachRef
            }));
        };
        return UncontrolledComponent;
    }(_reactDefault.default.Component);
    _reactLifecyclesCompat.polyfill(UncontrolledComponent1);
    UncontrolledComponent1.displayName = "Uncontrolled(" + displayName + ")";
    UncontrolledComponent1.propTypes = _extendsDefault.default({
        innerRef: function innerRef() {
        }
    }, _utils.uncontrolledPropTypes(controlledValues, displayName));
    methods.forEach(function(method) {
        UncontrolledComponent1.prototype[method] = function $proxiedMethod() {
            var _this$inner;
            return (_this$inner = this.inner)[method].apply(_this$inner, arguments);
        };
    });
    var WrappedComponent = UncontrolledComponent1;
    if (_reactDefault.default.forwardRef) {
        WrappedComponent = _reactDefault.default.forwardRef(function(props, ref) {
            return _reactDefault.default.createElement(UncontrolledComponent1, _extendsDefault.default({
            }, props, {
                innerRef: ref,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 128
                },
                __self: this
            }));
        });
        WrappedComponent.propTypes = UncontrolledComponent1.propTypes;
    }
    WrappedComponent.ControlledComponent = Component;
    /**
   * useful when wrapping a Component and you want to control
   * everything
   */ WrappedComponent.deferControlTo = function(newComponent, additions, nextMethods) {
        if (additions === void 0) additions = {
        };
        return uncontrollable(newComponent, _extendsDefault.default({
        }, controlledValues, additions), nextMethods);
    };
    return WrappedComponent;
}
exports.default = uncontrollable;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"9unNO","@babel/runtime/helpers/esm/extends":"5inYT","@babel/runtime/helpers/esm/inheritsLoose":"6cZja","react":"4mchR","react-lifecycles-compat":"cW1jb","invariant":"Xxs2W","./utils":"5zfpz","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6cZja":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setPrototypeOfJs = require("./setPrototypeOf.js");
var _setPrototypeOfJsDefault = parcelHelpers.interopDefault(_setPrototypeOfJs);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOfJsDefault.default(subClass, superClass);
}
exports.default = _inheritsLoose;

},{"./setPrototypeOf.js":"fhfrK","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fhfrK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _setPrototypeOf(o1, p1) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o1, p1);
}
exports.default = _setPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cW1jb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "polyfill", ()=>polyfill
);
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ function componentWillMount() {
    // Call this.constructor.gDSFP to support sub-classes.
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
    if (state !== null && state !== undefined) this.setState(state);
}
function componentWillReceiveProps(nextProps) {
    // Call this.constructor.gDSFP to support sub-classes.
    // Use the setState() updater to ensure state isn't stale in certain edge cases.
    function updater(prevState) {
        var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
        return state !== null && state !== undefined ? state : null;
    }
    // Binding "this" is important for shallow renderer support.
    this.setState(updater.bind(this));
}
function componentWillUpdate(nextProps, nextState) {
    try {
        var prevProps = this.props;
        var prevState = this.state;
        this.props = nextProps;
        this.state = nextState;
        this.__reactInternalSnapshotFlag = true;
        this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
    } finally{
        this.props = prevProps;
        this.state = prevState;
    }
}
// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;
function polyfill(Component) {
    var prototype = Component.prototype;
    if (!prototype || !prototype.isReactComponent) throw new Error('Can only polyfill class components');
    if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') return Component;
    // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Error if any of these lifecycles are present,
    // Because they would work differently between older and newer (16.3+) versions of React.
    var foundWillMountName = null;
    var foundWillReceivePropsName = null;
    var foundWillUpdateName = null;
    if (typeof prototype.componentWillMount === 'function') foundWillMountName = 'componentWillMount';
    else if (typeof prototype.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
    if (typeof prototype.componentWillReceiveProps === 'function') foundWillReceivePropsName = 'componentWillReceiveProps';
    else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
    if (typeof prototype.componentWillUpdate === 'function') foundWillUpdateName = 'componentWillUpdate';
    else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var componentName = Component.displayName || Component.name;
        var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
        throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') + '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks');
    }
    // React <= 16.2 does not support static getDerivedStateFromProps.
    // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
    // Newer versions of React will ignore these lifecycles if gDSFP exists.
    if (typeof Component.getDerivedStateFromProps === 'function') {
        prototype.componentWillMount = componentWillMount;
        prototype.componentWillReceiveProps = componentWillReceiveProps;
    }
    // React <= 16.2 does not support getSnapshotBeforeUpdate.
    // As a workaround, use cWU to invoke the new lifecycle.
    // Newer versions of React will ignore that lifecycle if gSBU exists.
    if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
        if (typeof prototype.componentDidUpdate !== 'function') throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
        prototype.componentWillUpdate = componentWillUpdate;
        var componentDidUpdate = prototype.componentDidUpdate;
        prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
            // 16.3+ will not execute our will-update method;
            // It will pass a snapshot value to did-update though.
            // Older versions will require our polyfilled will-update value.
            // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
            // Because for <= 15.x versions this might be a "prevContext" object.
            // We also can't just check "__reactInternalSnapshot",
            // Because get-snapshot might return a falsy value.
            // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
            var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
            componentDidUpdate.call(this, prevProps, prevState, snapshot);
        };
    }
    return Component;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"oG7Uz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useBootstrapPrefix", ()=>useBootstrapPrefix
);
parcelHelpers.export(exports, "useIsRTL", ()=>useIsRTL
);
parcelHelpers.export(exports, "createBootstrapComponent", ()=>createBootstrapComponent
);
parcelHelpers.export(exports, "ThemeConsumer", ()=>Consumer
);
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
const ThemeContext = /*#__PURE__*/ _react.createContext({
    prefixes: {
    }
});
const { Consumer , Provider  } = ThemeContext;
function ThemeProvider({ prefixes ={
} , dir , children  }) {
    const contextValue = _react.useMemo(()=>({
            prefixes: {
                ...prefixes
            },
            dir
        })
    , [
        prefixes,
        dir
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(Provider, {
        value: contextValue,
        children: children
    }));
}
function useBootstrapPrefix(prefix, defaultPrefix) {
    const { prefixes  } = _react.useContext(ThemeContext);
    return prefix || prefixes[defaultPrefix] || defaultPrefix;
}
function useIsRTL() {
    const { dir  } = _react.useContext(ThemeContext);
    return dir === 'rtl';
}
function createBootstrapComponent(Component, opts) {
    if (typeof opts === 'string') opts = {
        prefix: opts
    };
    const isClassy = Component.prototype && Component.prototype.isReactComponent; // If it's a functional component make sure we don't break it with a ref
    const { prefix , forwardRefAs =isClassy ? 'ref' : 'innerRef'  } = opts;
    const Wrapped = /*#__PURE__*/ _react.forwardRef(({ ...props }, ref)=>{
        props[forwardRefAs] = ref;
        const bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);
        return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
            ...props,
            bsPrefix: bsPrefix
        }));
    });
    Wrapped.displayName = `Bootstrap(${Component.displayName || Component.name})`;
    return Wrapped;
}
exports.default = ThemeProvider;

},{"react":"4mchR","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"60jad":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _accordionCollapse = require("./AccordionCollapse");
var _accordionCollapseDefault = parcelHelpers.interopDefault(_accordionCollapse);
var _accordionItemContext = require("./AccordionItemContext");
var _accordionItemContextDefault = parcelHelpers.interopDefault(_accordionItemContext);
var _jsxRuntime = require("react/jsx-runtime");
const AccordionBody = /*#__PURE__*/ _react.forwardRef(({ // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , bsPrefix , className , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion-body');
    const { eventKey  } = _react.useContext(_accordionItemContextDefault.default);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_accordionCollapseDefault.default, {
        eventKey: eventKey,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, {
            ref: ref,
            ...props,
            className: _classnamesDefault.default(className, bsPrefix)
        })
    }));
});
AccordionBody.displayName = 'AccordionBody';
exports.default = AccordionBody;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./AccordionCollapse":"bk2tr","./AccordionItemContext":"lXxJI","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bk2tr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _collapse = require("./Collapse");
var _collapseDefault = parcelHelpers.interopDefault(_collapse);
var _accordionContext = require("./AccordionContext");
var _accordionContextDefault = parcelHelpers.interopDefault(_accordionContext);
var _jsxRuntime = require("react/jsx-runtime");
const AccordionCollapse = /*#__PURE__*/ _react.forwardRef(({ as: Component = 'div' , bsPrefix , className , children , eventKey , ...props }, ref)=>{
    const { activeEventKey  } = _react.useContext(_accordionContextDefault.default);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion-collapse');
    return(/*#__PURE__*/ _jsxRuntime.jsx(_collapseDefault.default, {
        ref: ref,
        in: activeEventKey === eventKey,
        ...props,
        className: _classnamesDefault.default(className, bsPrefix),
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, {
            children: _react.Children.only(children)
        })
    }));
});
AccordionCollapse.displayName = 'AccordionCollapse';
exports.default = AccordionCollapse;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./Collapse":"ilxlq","./AccordionContext":"ewZOe","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ilxlq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _css = require("dom-helpers/css");
var _cssDefault = parcelHelpers.interopDefault(_css);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _transition = require("react-transition-group/Transition");
var _transitionEndListener = require("./transitionEndListener");
var _transitionEndListenerDefault = parcelHelpers.interopDefault(_transitionEndListener);
var _createChainedFunction = require("./createChainedFunction");
var _createChainedFunctionDefault = parcelHelpers.interopDefault(_createChainedFunction);
var _triggerBrowserReflow = require("./triggerBrowserReflow");
var _triggerBrowserReflowDefault = parcelHelpers.interopDefault(_triggerBrowserReflow);
var _transitionWrapper = require("./TransitionWrapper");
var _transitionWrapperDefault = parcelHelpers.interopDefault(_transitionWrapper);
var _jsxRuntime = require("react/jsx-runtime");
const MARGINS = {
    height: [
        'marginTop',
        'marginBottom'
    ],
    width: [
        'marginLeft',
        'marginRight'
    ]
};
function getDefaultDimensionValue(dimension, elem) {
    const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;
    const value = elem[offset];
    const margins = MARGINS[dimension];
    return value + parseInt(_cssDefault.default(elem, margins[0]), 10) + parseInt(_cssDefault.default(elem, margins[1]), 10);
}
const collapseStyles = {
    [_transition.EXITED]: 'collapse',
    [_transition.EXITING]: 'collapsing',
    [_transition.ENTERING]: 'collapsing',
    [_transition.ENTERED]: 'collapse show'
};
const defaultProps = {
    in: false,
    timeout: 300,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    getDimensionValue: getDefaultDimensionValue
};
const Collapse = /*#__PURE__*/ _reactDefault.default.forwardRef(({ onEnter , onEntering , onEntered , onExit , onExiting , className , children , dimension ='height' , getDimensionValue =getDefaultDimensionValue , ...props }, ref)=>{
    /* Compute dimension */ const computedDimension = typeof dimension === 'function' ? dimension() : dimension;
    /* -- Expanding -- */ const handleEnter = _react.useMemo(()=>_createChainedFunctionDefault.default((elem)=>{
            elem.style[computedDimension] = '0';
        }, onEnter)
    , [
        computedDimension,
        onEnter
    ]);
    const handleEntering = _react.useMemo(()=>_createChainedFunctionDefault.default((elem)=>{
            const scroll = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;
            elem.style[computedDimension] = `${elem[scroll]}px`;
        }, onEntering)
    , [
        computedDimension,
        onEntering
    ]);
    const handleEntered = _react.useMemo(()=>_createChainedFunctionDefault.default((elem)=>{
            elem.style[computedDimension] = null;
        }, onEntered)
    , [
        computedDimension,
        onEntered
    ]);
    /* -- Collapsing -- */ const handleExit = _react.useMemo(()=>_createChainedFunctionDefault.default((elem)=>{
            elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;
            _triggerBrowserReflowDefault.default(elem);
        }, onExit)
    , [
        onExit,
        getDimensionValue,
        computedDimension
    ]);
    const handleExiting = _react.useMemo(()=>_createChainedFunctionDefault.default((elem)=>{
            elem.style[computedDimension] = null;
        }, onExiting)
    , [
        computedDimension,
        onExiting
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_transitionWrapperDefault.default, {
        ref: ref,
        addEndListener: _transitionEndListenerDefault.default,
        ...props,
        "aria-expanded": props.role ? props.in : null,
        onEnter: handleEnter,
        onEntering: handleEntering,
        onEntered: handleEntered,
        onExit: handleExit,
        onExiting: handleExiting,
        childRef: children.ref,
        children: (state, innerProps)=>/*#__PURE__*/ _reactDefault.default.cloneElement(children, {
                ...innerProps,
                className: _classnamesDefault.default(className, children.props.className, collapseStyles[state], computedDimension === 'width' && 'collapse-horizontal')
            })
    }));
}); // @ts-ignore
// @ts-ignore
Collapse.defaultProps = defaultProps;
exports.default = Collapse;

},{"classnames":"2cVcN","dom-helpers/css":"k69TG","react":"4mchR","react-transition-group/Transition":"5xmpQ","./transitionEndListener":"6qkK8","./createChainedFunction":"bhPCF","./triggerBrowserReflow":"aOcXp","./TransitionWrapper":"7XqYo","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"k69TG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getComputedStyle = require("./getComputedStyle");
var _getComputedStyleDefault = parcelHelpers.interopDefault(_getComputedStyle);
var _hyphenateStyle = require("./hyphenateStyle");
var _hyphenateStyleDefault = parcelHelpers.interopDefault(_hyphenateStyle);
var _isTransform = require("./isTransform");
var _isTransformDefault = parcelHelpers.interopDefault(_isTransform);
function style(node, property) {
    var css = '';
    var transforms = '';
    if (typeof property === 'string') return node.style.getPropertyValue(_hyphenateStyleDefault.default(property)) || _getComputedStyleDefault.default(node).getPropertyValue(_hyphenateStyleDefault.default(property));
    Object.keys(property).forEach(function(key) {
        var value = property[key];
        if (!value && value !== 0) node.style.removeProperty(_hyphenateStyleDefault.default(key));
        else if (_isTransformDefault.default(key)) transforms += key + "(" + value + ") ";
        else css += _hyphenateStyleDefault.default(key) + ": " + value + ";";
    });
    if (transforms) css += "transform: " + transforms + ";";
    node.style.cssText += ";" + css;
}
exports.default = style;

},{"./getComputedStyle":"jIQgC","./hyphenateStyle":"6klkX","./isTransform":"4Kv9P","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jIQgC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ownerWindow = require("./ownerWindow");
var _ownerWindowDefault = parcelHelpers.interopDefault(_ownerWindow);
function getComputedStyle(node, psuedoElement) {
    return _ownerWindowDefault.default(node).getComputedStyle(node, psuedoElement);
}
exports.default = getComputedStyle;

},{"./ownerWindow":"iLNvx","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iLNvx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ownerDocument = require("./ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
function ownerWindow(node) {
    var doc = _ownerDocumentDefault.default(node);
    return doc && doc.defaultView || window;
}
exports.default = ownerWindow;

},{"./ownerDocument":"b8OFQ","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b8OFQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function ownerDocument(node) {
    return node && node.ownerDocument || document;
}
exports.default = ownerDocument;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6klkX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
 */ var _hyphenate = require("./hyphenate");
var _hyphenateDefault = parcelHelpers.interopDefault(_hyphenate);
var msPattern = /^ms-/;
function hyphenateStyleName(string) {
    return _hyphenateDefault.default(string).replace(msPattern, '-ms-');
}
exports.default = hyphenateStyleName;

},{"./hyphenate":"lgwCL","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lgwCL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var rUpper = /([A-Z])/g;
function hyphenate(string) {
    return string.replace(rUpper, '-$1').toLowerCase();
}
exports.default = hyphenate;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4Kv9P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
function isTransform(value) {
    return !!(value && supportedTransforms.test(value));
}
exports.default = isTransform;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5xmpQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UNMOUNTED", ()=>UNMOUNTED
);
parcelHelpers.export(exports, "EXITED", ()=>EXITED
);
parcelHelpers.export(exports, "ENTERING", ()=>ENTERING
);
parcelHelpers.export(exports, "ENTERED", ()=>ENTERED
);
parcelHelpers.export(exports, "EXITING", ()=>EXITING
);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _config = require("./config");
var _configDefault = parcelHelpers.interopDefault(_config);
var _propTypes1 = require("./utils/PropTypes");
var _transitionGroupContext = require("./TransitionGroupContext");
var _transitionGroupContextDefault = parcelHelpers.interopDefault(_transitionGroupContext);
var UNMOUNTED = 'unmounted';
var EXITED = 'exited';
var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 1 },
 *   entered:  { opacity: 1 },
 *   exiting:  { opacity: 0 },
 *   exited:  { opacity: 0 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */ var Transition1 = /*#__PURE__*/ function(_React$Component) {
    _inheritsLooseDefault.default(Transition, _React$Component);
    function Transition(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context; // In the context of a TransitionGroup all enters are really appears
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
        if (props.in) {
            if (appear) {
                initialStatus = EXITED;
                _this.appearStatus = ENTERING;
            } else initialStatus = ENTERED;
        } else if (props.unmountOnExit || props.mountOnEnter) initialStatus = UNMOUNTED;
        else initialStatus = EXITED;
        _this.state = {
            status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
    }
    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
        if (nextIn && prevState.status === UNMOUNTED) return {
            status: EXITED
        };
        return null;
    } // getSnapshotBeforeUpdate(prevProps) {
    ;
    var _proto = Transition.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
            var status = this.state.status;
            if (this.props.in) {
                if (status !== ENTERING && status !== ENTERED) nextStatus = ENTERING;
            } else if (status === ENTERING || status === ENTERED) nextStatus = EXITING;
        }
        this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;
        if (timeout != null && typeof timeout !== 'number') {
            exit = timeout.exit;
            enter = timeout.enter; // TODO: remove fallback for next major
            appear = timeout.appear !== undefined ? timeout.appear : enter;
        }
        return {
            exit: exit,
            enter: enter,
            appear: appear
        };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) mounting = false;
        if (nextStatus !== null) {
            // nextStatus will always be ENTERING or EXITING.
            this.cancelNextCallback();
            if (nextStatus === ENTERING) this.performEnter(mounting);
            else this.performExit();
        } else if (this.props.unmountOnExit && this.state.status === EXITED) this.setState({
            status: UNMOUNTED
        });
    };
    _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;
        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;
        var _ref2 = this.props.nodeRef ? [
            appearing
        ] : [
            _reactDomDefault.default.findDOMNode(this),
            appearing
        ], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set
        if (!mounting && !enter || _configDefault.default.disabled) {
            this.safeSetState({
                status: ENTERED
            }, function() {
                _this2.props.onEntered(maybeNode);
            });
            return;
        }
        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
            status: ENTERING
        }, function() {
            _this2.props.onEntering(maybeNode, maybeAppearing);
            _this2.onTransitionEnd(enterTimeout, function() {
                _this2.safeSetState({
                    status: ENTERED
                }, function() {
                    _this2.props.onEntered(maybeNode, maybeAppearing);
                });
            });
        });
    };
    _proto.performExit = function performExit() {
        var _this3 = this;
        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? undefined : _reactDomDefault.default.findDOMNode(this); // no exit animation skip right to EXITED
        if (!exit || _configDefault.default.disabled) {
            this.safeSetState({
                status: EXITED
            }, function() {
                _this3.props.onExited(maybeNode);
            });
            return;
        }
        this.props.onExit(maybeNode);
        this.safeSetState({
            status: EXITING
        }, function() {
            _this3.props.onExiting(maybeNode);
            _this3.onTransitionEnd(timeouts.exit, function() {
                _this3.safeSetState({
                    status: EXITED
                }, function() {
                    _this3.props.onExited(maybeNode);
                });
            });
        });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
            this.nextCallback.cancel();
            this.nextCallback = null;
        }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
        var active = true;
        this.nextCallback = function(event) {
            if (active) {
                active = false;
                _this4.nextCallback = null;
                callback(event);
            }
        };
        this.nextCallback.cancel = function() {
            active = false;
        };
        return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node = this.props.nodeRef ? this.props.nodeRef.current : _reactDomDefault.default.findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
        if (!node || doesNotHaveTimeoutOrListener) {
            setTimeout(this.nextCallback, 0);
            return;
        }
        if (this.props.addEndListener) {
            var _ref3 = this.props.nodeRef ? [
                this.nextCallback
            ] : [
                node,
                this.nextCallback
            ], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
            this.props.addEndListener(maybeNode, maybeNextCallback);
        }
        if (timeout != null) setTimeout(this.nextCallback, timeout);
    };
    _proto.render = function render() {
        var status = this.state.status;
        if (status === UNMOUNTED) return null;
        var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLooseDefault.default(_this$props, [
            "children",
            "in",
            "mountOnEnter",
            "unmountOnExit",
            "appear",
            "enter",
            "exit",
            "timeout",
            "addEndListener",
            "onEnter",
            "onEntering",
            "onEntered",
            "onExit",
            "onExiting",
            "onExited",
            "nodeRef"
        ]);
        return(/*#__PURE__*/ // allows for nested Transitions
        _reactDefault.default.createElement(_transitionGroupContextDefault.default.Provider, {
            value: null
        }, typeof children === 'function' ? children(status, childProps) : _reactDefault.default.cloneElement(_reactDefault.default.Children.only(children), childProps)));
    };
    return Transition;
}(_reactDefault.default.Component);
Transition1.contextType = _transitionGroupContextDefault.default;
Transition1.propTypes = {
    /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */ nodeRef: _propTypesDefault.default.shape({
        current: typeof Element === 'undefined' ? _propTypesDefault.default.any : function(propValue, key, componentName, location, propFullName, secret) {
            var value = propValue[key];
            return _propTypesDefault.default.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
        }
    }),
    /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */ children: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.func.isRequired,
        _propTypesDefault.default.element.isRequired
    ]).isRequired,
    /**
   * Show the component; triggers the enter or exit states
   */ in: _propTypesDefault.default.bool,
    /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */ mountOnEnter: _propTypesDefault.default.bool,
    /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */ unmountOnExit: _propTypesDefault.default.bool,
    /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */ appear: _propTypesDefault.default.bool,
    /**
   * Enable or disable enter transitions.
   */ enter: _propTypesDefault.default.bool,
    /**
   * Enable or disable exit transitions.
   */ exit: _propTypesDefault.default.bool,
    /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */ timeout: function timeout(props) {
        var pt = _propTypes1.timeoutsShape;
        if (!props.addEndListener) pt = pt.isRequired;
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        return pt.apply(void 0, [
            props
        ].concat(args));
    },
    /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */ addEndListener: _propTypesDefault.default.func,
    /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */ onEnter: _propTypesDefault.default.func,
    /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */ onEntering: _propTypesDefault.default.func,
    /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */ onEntered: _propTypesDefault.default.func,
    /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */ onExit: _propTypesDefault.default.func,
    /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */ onExiting: _propTypesDefault.default.func,
    /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */ onExited: _propTypesDefault.default.func
}; // Name the function so it is clearer in the documentation
function noop() {
}
Transition1.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
};
Transition1.UNMOUNTED = UNMOUNTED;
Transition1.EXITED = EXITED;
Transition1.ENTERING = ENTERING;
Transition1.ENTERED = ENTERED;
Transition1.EXITING = EXITING;
exports.default = Transition1;

},{"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"9unNO","@babel/runtime/helpers/esm/inheritsLoose":"6cZja","prop-types":"2bysO","react":"4mchR","react-dom":"afyCw","./config":"33G8w","./utils/PropTypes":"kLICv","./TransitionGroupContext":"frJY2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"33G8w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    disabled: false
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kLICv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeoutsShape", ()=>timeoutsShape
);
parcelHelpers.export(exports, "classNamesShape", ()=>classNamesShape
);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var timeoutsShape = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.number,
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.number,
        exit: _propTypesDefault.default.number,
        appear: _propTypesDefault.default.number
    }).isRequired
]);
var classNamesShape = _propTypesDefault.default.oneOfType([
    _propTypesDefault.default.string,
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.string,
        exit: _propTypesDefault.default.string,
        active: _propTypesDefault.default.string
    }),
    _propTypesDefault.default.shape({
        enter: _propTypesDefault.default.string,
        enterDone: _propTypesDefault.default.string,
        enterActive: _propTypesDefault.default.string,
        exit: _propTypesDefault.default.string,
        exitDone: _propTypesDefault.default.string,
        exitActive: _propTypesDefault.default.string
    })
]);

},{"prop-types":"2bysO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"frJY2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
exports.default = _reactDefault.default.createContext(null);

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6qkK8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _css = require("dom-helpers/css");
var _cssDefault = parcelHelpers.interopDefault(_css);
var _transitionEnd = require("dom-helpers/transitionEnd");
var _transitionEndDefault = parcelHelpers.interopDefault(_transitionEnd);
function parseDuration(node, property) {
    const str = _cssDefault.default(node, property) || '';
    const mult = str.indexOf('ms') === -1 ? 1000 : 1;
    return parseFloat(str) * mult;
}
function transitionEndListener(element, handler) {
    const duration = parseDuration(element, 'transitionDuration');
    const delay = parseDuration(element, 'transitionDelay');
    const remove = _transitionEndDefault.default(element, (e)=>{
        if (e.target === element) {
            remove();
            handler(e);
        }
    }, duration + delay);
}
exports.default = transitionEndListener;

},{"dom-helpers/css":"k69TG","dom-helpers/transitionEnd":"5WYHD","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5WYHD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _css = require("./css");
var _cssDefault = parcelHelpers.interopDefault(_css);
var _listen = require("./listen");
var _listenDefault = parcelHelpers.interopDefault(_listen);
var _triggerEvent = require("./triggerEvent");
var _triggerEventDefault = parcelHelpers.interopDefault(_triggerEvent);
function parseDuration(node) {
    var str = _cssDefault.default(node, 'transitionDuration') || '';
    var mult = str.indexOf('ms') === -1 ? 1000 : 1;
    return parseFloat(str) * mult;
}
function emulateTransitionEnd(element, duration, padding) {
    if (padding === void 0) padding = 5;
    var called = false;
    var handle = setTimeout(function() {
        if (!called) _triggerEventDefault.default(element, 'transitionend', true);
    }, duration + padding);
    var remove = _listenDefault.default(element, 'transitionend', function() {
        called = true;
    }, {
        once: true
    });
    return function() {
        clearTimeout(handle);
        remove();
    };
}
function transitionEnd(element, handler, duration, padding) {
    if (duration == null) duration = parseDuration(element) || 0;
    var removeEmulate = emulateTransitionEnd(element, duration, padding);
    var remove = _listenDefault.default(element, 'transitionend', handler);
    return function() {
        removeEmulate();
        remove();
    };
}
exports.default = transitionEnd;

},{"./css":"k69TG","./listen":"fotiI","./triggerEvent":"1pvkH","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fotiI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addEventListener = require("./addEventListener");
var _addEventListenerDefault = parcelHelpers.interopDefault(_addEventListener);
var _removeEventListener = require("./removeEventListener");
var _removeEventListenerDefault = parcelHelpers.interopDefault(_removeEventListener);
function listen(node, eventName, handler, options) {
    _addEventListenerDefault.default(node, eventName, handler, options);
    return function() {
        _removeEventListenerDefault.default(node, eventName, handler, options);
    };
}
exports.default = listen;

},{"./addEventListener":"kM7Ny","./removeEventListener":"6Rtjt","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kM7Ny":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "optionsSupported", ()=>optionsSupported
);
parcelHelpers.export(exports, "onceSupported", ()=>onceSupported
);
/* eslint-disable no-return-assign */ var _canUseDOM = require("./canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
var optionsSupported = false;
var onceSupported = false;
try {
    var options = {
        get passive () {
            return optionsSupported = true;
        },
        get once () {
            // eslint-disable-next-line no-multi-assign
            return onceSupported = optionsSupported = true;
        }
    };
    if (_canUseDOMDefault.default) {
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, true);
    }
} catch (e) {
/* */ }
/**
 * An `addEventListener` ponyfill, supports the `once` option
 * 
 * @param node the element
 * @param eventName the event name
 * @param handle the handler
 * @param options event options
 */ function addEventListener(node, eventName, handler, options) {
    if (options && typeof options !== 'boolean' && !onceSupported) {
        var once = options.once, capture = options.capture;
        var wrappedHandler = handler;
        if (!onceSupported && once) {
            wrappedHandler = handler.__once || function onceHandler(event) {
                this.removeEventListener(eventName, onceHandler, capture);
                handler.call(this, event);
            };
            handler.__once = wrappedHandler;
        }
        node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);
    }
    node.addEventListener(eventName, handler, options);
}
exports.default = addEventListener;

},{"./canUseDOM":"b2ppt","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b2ppt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6Rtjt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A `removeEventListener` ponyfill
 * 
 * @param node the element
 * @param eventName the event name
 * @param handle the handler
 * @param options event options
 */ function removeEventListener(node, eventName, handler, options) {
    var capture = options && typeof options !== 'boolean' ? options.capture : options;
    node.removeEventListener(eventName, handler, capture);
    if (handler.__once) node.removeEventListener(eventName, handler.__once, capture);
}
exports.default = removeEventListener;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1pvkH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function triggerEvent(node, eventName, bubbles, cancelable) {
    if (bubbles === void 0) bubbles = false;
    if (cancelable === void 0) cancelable = true;
    if (node) {
        var event = document.createEvent('HTMLEvents');
        event.initEvent(eventName, bubbles, cancelable);
        node.dispatchEvent(event);
    }
}
exports.default = triggerEvent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bhPCF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Safe chained function
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 *
 * @param {function} functions to chain
 * @returns {function|null}
 */ function createChainedFunction(...funcs) {
    return funcs.filter((f)=>f != null
    ).reduce((acc, f)=>{
        if (typeof f !== 'function') throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
        if (acc === null) return f;
        return function chainedFunction(...args) {
            // @ts-ignore
            acc.apply(this, args); // @ts-ignore
            f.apply(this, args);
        };
    }, null);
}
exports.default = createChainedFunction;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aOcXp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function triggerBrowserReflow(node) {
    // eslint-disable-next-line @typescript-eslint/no-unused-expressions
    node.offsetHeight;
}
exports.default = triggerBrowserReflow;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7XqYo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _transition = require("react-transition-group/Transition");
var _transitionDefault = parcelHelpers.interopDefault(_transition);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _safeFindDOMNode = require("./safeFindDOMNode");
var _safeFindDOMNodeDefault = parcelHelpers.interopDefault(_safeFindDOMNode);
var _jsxRuntime = require("react/jsx-runtime");
// Normalizes Transition callbacks when nodeRef is used.
const TransitionWrapper = /*#__PURE__*/ _reactDefault.default.forwardRef(({ onEnter , onEntering , onEntered , onExit , onExiting , onExited , addEndListener , children , childRef , ...props }, ref)=>{
    const nodeRef = _react.useRef(null);
    const mergedRef = _useMergedRefsDefault.default(nodeRef, childRef);
    const attachRef = (r)=>{
        mergedRef(_safeFindDOMNodeDefault.default(r));
    };
    const normalize = (callback)=>(param)=>{
            if (callback && nodeRef.current) callback(nodeRef.current, param);
        }
    ;
    /* eslint-disable react-hooks/exhaustive-deps */ const handleEnter = _react.useCallback(normalize(onEnter), [
        onEnter
    ]);
    const handleEntering = _react.useCallback(normalize(onEntering), [
        onEntering
    ]);
    const handleEntered = _react.useCallback(normalize(onEntered), [
        onEntered
    ]);
    const handleExit = _react.useCallback(normalize(onExit), [
        onExit
    ]);
    const handleExiting = _react.useCallback(normalize(onExiting), [
        onExiting
    ]);
    const handleExited = _react.useCallback(normalize(onExited), [
        onExited
    ]);
    const handleAddEndListener = _react.useCallback(normalize(addEndListener), [
        addEndListener
    ]);
    /* eslint-enable react-hooks/exhaustive-deps */ return(/*#__PURE__*/ _jsxRuntime.jsx(_transitionDefault.default, {
        ref: ref,
        ...props,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        nodeRef: nodeRef,
        children: typeof children === 'function' ? (status, innerProps)=>children(status, {
                ...innerProps,
                ref: attachRef
            })
         : /*#__PURE__*/ _reactDefault.default.cloneElement(children, {
            ref: attachRef
        })
    }));
});
exports.default = TransitionWrapper;

},{"react":"4mchR","react-transition-group/Transition":"5xmpQ","@restart/hooks/useMergedRefs":"fj3d7","./safeFindDOMNode":"7yjLB","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fj3d7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mergeRefs", ()=>mergeRefs
);
var _react = require("react");
var toFnRef = function toFnRef(ref) {
    return !ref || typeof ref === 'function' ? ref : function(value) {
        ref.current = value;
    };
};
function mergeRefs(refA, refB) {
    var a = toFnRef(refA);
    var b = toFnRef(refB);
    return function(value) {
        if (a) a(value);
        if (b) b(value);
    };
}
/**
 * Create and returns a single callback ref composed from two other Refs.
 *
 * ```tsx
 * const Button = React.forwardRef((props, ref) => {
 *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();
 *   const mergedRef = useMergedRefs(ref, attachRef);
 *
 *   return <button ref={mergedRef} {...props}/>
 * })
 * ```
 *
 * @param refA A Callback or mutable Ref
 * @param refB A Callback or mutable Ref
 * @category refs
 */ function useMergedRefs(refA, refB) {
    return _react.useMemo(function() {
        return mergeRefs(refA, refB);
    }, [
        refA,
        refB
    ]);
}
exports.default = useMergedRefs;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7yjLB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
function safeFindDOMNode(componentOrElement) {
    if (componentOrElement && 'setState' in componentOrElement) return _reactDomDefault.default.findDOMNode(componentOrElement);
    return componentOrElement != null ? componentOrElement : null;
}
exports.default = safeFindDOMNode;

},{"react-dom":"afyCw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ewZOe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const context = /*#__PURE__*/ _react.createContext({
});
context.displayName = 'AccordionContext';
exports.default = context;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lXxJI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const context = /*#__PURE__*/ _react.createContext({
    eventKey: ''
});
context.displayName = 'AccordionItemContext';
exports.default = context;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fkLUQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useAccordionButton", ()=>useAccordionButton
);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _accordionContext = require("./AccordionContext");
var _accordionContextDefault = parcelHelpers.interopDefault(_accordionContext);
var _accordionItemContext = require("./AccordionItemContext");
var _accordionItemContextDefault = parcelHelpers.interopDefault(_accordionItemContext);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
function useAccordionButton(eventKey, onClick) {
    const { activeEventKey , onSelect  } = _react.useContext(_accordionContextDefault.default);
    return (e)=>{
        /*
      Compare the event key in context with the given event key.
      If they are the same, then collapse the component.
    */ const eventKeyPassed = eventKey === activeEventKey ? null : eventKey;
        if (onSelect) onSelect(eventKeyPassed, e);
        if (onClick) onClick(e);
    };
}
const AccordionButton = /*#__PURE__*/ _react.forwardRef(({ // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'button' , bsPrefix , className , onClick , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion-button');
    const { eventKey  } = _react.useContext(_accordionItemContextDefault.default);
    const accordionOnClick = useAccordionButton(eventKey, onClick);
    const { activeEventKey  } = _react.useContext(_accordionContextDefault.default);
    if (Component === 'button') props.type = 'button';
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        onClick: accordionOnClick,
        ...props,
        "aria-expanded": eventKey === activeEventKey,
        className: _classnamesDefault.default(className, bsPrefix, eventKey !== activeEventKey && 'collapsed')
    }));
});
AccordionButton.displayName = 'AccordionButton';
exports.default = AccordionButton;

},{"react":"4mchR","classnames":"2cVcN","./AccordionContext":"ewZOe","./AccordionItemContext":"lXxJI","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ePjXr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _accordionButton = require("./AccordionButton");
var _accordionButtonDefault = parcelHelpers.interopDefault(_accordionButton);
var _jsxRuntime = require("react/jsx-runtime");
const AccordionHeader = /*#__PURE__*/ _react.forwardRef(({ // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'h2' , bsPrefix , className , children , onClick , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion-header');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, bsPrefix),
        children: /*#__PURE__*/ _jsxRuntime.jsx(_accordionButtonDefault.default, {
            onClick: onClick,
            children: children
        })
    }));
});
AccordionHeader.displayName = 'AccordionHeader';
exports.default = AccordionHeader;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./AccordionButton":"fkLUQ","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7pMYo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _accordionItemContext = require("./AccordionItemContext");
var _accordionItemContextDefault = parcelHelpers.interopDefault(_accordionItemContext);
var _jsxRuntime = require("react/jsx-runtime");
const AccordionItem = /*#__PURE__*/ _react.forwardRef(({ // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , bsPrefix , className , eventKey , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'accordion-item');
    const contextValue = _react.useMemo(()=>({
            eventKey
        })
    , [
        eventKey
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_accordionItemContextDefault.default.Provider, {
        value: contextValue,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, {
            ref: ref,
            ...props,
            className: _classnamesDefault.default(className, bsPrefix)
        })
    }));
});
AccordionItem.displayName = 'AccordionItem';
exports.default = AccordionItem;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./AccordionItemContext":"lXxJI","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jCNVG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _themeProvider = require("./ThemeProvider");
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _closeButton = require("./CloseButton");
var _closeButtonDefault = parcelHelpers.interopDefault(_closeButton);
var _divWithClassName = require("./divWithClassName");
var _divWithClassNameDefault = parcelHelpers.interopDefault(_divWithClassName);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _jsxRuntime = require("react/jsx-runtime");
const DivStyledAsH4 = _divWithClassNameDefault.default('h4');
DivStyledAsH4.displayName = 'DivStyledAsH4';
const AlertHeading = _createWithBsPrefixDefault.default('alert-heading', {
    Component: DivStyledAsH4
});
const AlertLink = _createWithBsPrefixDefault.default('alert-link', {
    Component: _anchorDefault.default
});
const defaultProps = {
    variant: 'primary',
    show: true,
    transition: _fadeDefault.default,
    closeLabel: 'Close alert'
};
const Alert = /*#__PURE__*/ _react.forwardRef((uncontrolledProps, ref)=>{
    const { bsPrefix , show , closeLabel , closeVariant , className , children , variant , onClose , dismissible , transition , ...props } = _uncontrollable.useUncontrolled(uncontrolledProps, {
        show: 'onClose'
    });
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'alert');
    const handleClose = _useEventCallbackDefault.default((e)=>{
        if (onClose) onClose(false, e);
    });
    const Transition = transition === true ? _fadeDefault.default : transition;
    const alert = /*#__PURE__*/ _jsxRuntime.jsxs("div", {
        role: "alert",
        ...!Transition ? props : undefined,
        ref: ref,
        className: _classnamesDefault.default(className, prefix, variant && `${prefix}-${variant}`, dismissible && `${prefix}-dismissible`),
        children: [
            dismissible && /*#__PURE__*/ _jsxRuntime.jsx(_closeButtonDefault.default, {
                onClick: handleClose,
                "aria-label": closeLabel,
                variant: closeVariant
            }),
            children
        ]
    });
    if (!Transition) return show ? alert : null;
    return(/*#__PURE__*/ _jsxRuntime.jsx(Transition, {
        unmountOnExit: true,
        ...props,
        ref: undefined,
        in: show,
        children: alert
    }));
});
Alert.displayName = 'Alert';
Alert.defaultProps = defaultProps;
exports.default = Object.assign(Alert, {
    Link: AlertLink,
    Heading: AlertHeading
});

},{"classnames":"2cVcN","react":"4mchR","uncontrollable":"aG99Z","@restart/hooks/useEventCallback":"8QyIg","@restart/ui/Anchor":"c3Vvr","./ThemeProvider":"oG7Uz","./Fade":"cHHEJ","./CloseButton":"arc5K","./divWithClassName":"28Yge","./createWithBsPrefix":"8IH8I","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8QyIg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useCommittedRef = require("./useCommittedRef");
var _useCommittedRefDefault = parcelHelpers.interopDefault(_useCommittedRef);
function useEventCallback(fn) {
    var ref = _useCommittedRefDefault.default(fn);
    return _react.useCallback(function() {
        return ref.current && ref.current.apply(ref, arguments);
    }, [
        ref
    ]);
}
exports.default = useEventCallback;

},{"react":"4mchR","./useCommittedRef":"663QR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"663QR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
/**
 * Creates a `Ref` whose value is updated in an effect, ensuring the most recent
 * value is the one rendered with. Generally only required for Concurrent mode usage
 * where previous work in `render()` may be discarded before being used.
 *
 * This is safe to access in an event handler.
 *
 * @param value The `Ref` value
 */ function useCommittedRef(value) {
    var ref = _react.useRef(value);
    _react.useEffect(function() {
        ref.current = value;
    }, [
        value
    ]);
    return ref;
}
exports.default = useCommittedRef;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"c3Vvr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isTrivialHref", ()=>isTrivialHref
);
/* eslint-disable jsx-a11y/no-static-element-interactions */ /* eslint-disable jsx-a11y/anchor-has-content */ var _react = require("react");
var _hooks = require("@restart/hooks");
var _button = require("./Button");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "onKeyDown"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function isTrivialHref(href) {
    return !href || href.trim() === '#';
}
/**
 * An generic `<a>` component that covers a few A11y cases, ensuring that
 * cases where the `href` is missing or trivial like "#" are treated like buttons.
 */ const Anchor = /*#__PURE__*/ _react.forwardRef((_ref, ref)=>{
    let { onKeyDown  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    const [buttonProps] = _button.useButtonProps(Object.assign({
        tagName: 'a'
    }, props));
    const handleKeyDown = _hooks.useEventCallback((e)=>{
        buttonProps.onKeyDown(e);
        onKeyDown == null || onKeyDown(e);
    });
    if (isTrivialHref(props.href) && !props.role || props.role === 'button') return(/*#__PURE__*/ _jsxRuntime.jsx("a", Object.assign({
        ref: ref
    }, props, buttonProps, {
        onKeyDown: handleKeyDown
    })));
    return(/*#__PURE__*/ _jsxRuntime.jsx("a", Object.assign({
        ref: ref
    }, props, {
        onKeyDown: onKeyDown
    })));
});
Anchor.displayName = 'Anchor';
exports.default = Anchor;

},{"react":"4mchR","@restart/hooks":"lohNu","./Button":"3AURZ","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lohNu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCallbackRef", ()=>_useCallbackRefDefault.default
);
parcelHelpers.export(exports, "useCommittedRef", ()=>_useCommittedRefDefault.default
);
parcelHelpers.export(exports, "useEventCallback", ()=>_useEventCallbackDefault.default
);
parcelHelpers.export(exports, "useEventListener", ()=>_useEventListenerDefault.default
);
parcelHelpers.export(exports, "useGlobalListener", ()=>_useGlobalListenerDefault.default
);
parcelHelpers.export(exports, "useInterval", ()=>_useIntervalDefault.default
);
parcelHelpers.export(exports, "useRafInterval", ()=>_useRafIntervalDefault.default
);
parcelHelpers.export(exports, "useMergeState", ()=>_useMergeStateDefault.default
);
parcelHelpers.export(exports, "useMergeStateFromProps", ()=>_useMergeStateFromPropsDefault.default
);
parcelHelpers.export(exports, "useMounted", ()=>_useMountedDefault.default
);
parcelHelpers.export(exports, "usePrevious", ()=>_usePreviousDefault.default
);
parcelHelpers.export(exports, "useImage", ()=>_useImageDefault.default
);
parcelHelpers.export(exports, "useResizeObserver", ()=>_useResizeObserverDefault.default
);
var _useCallbackRef = require("./useCallbackRef");
var _useCallbackRefDefault = parcelHelpers.interopDefault(_useCallbackRef);
var _useCommittedRef = require("./useCommittedRef");
var _useCommittedRefDefault = parcelHelpers.interopDefault(_useCommittedRef);
var _useEventCallback = require("./useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useEventListener = require("./useEventListener");
var _useEventListenerDefault = parcelHelpers.interopDefault(_useEventListener);
var _useGlobalListener = require("./useGlobalListener");
var _useGlobalListenerDefault = parcelHelpers.interopDefault(_useGlobalListener);
var _useInterval = require("./useInterval");
var _useIntervalDefault = parcelHelpers.interopDefault(_useInterval);
var _useRafInterval = require("./useRafInterval");
var _useRafIntervalDefault = parcelHelpers.interopDefault(_useRafInterval);
var _useMergeState = require("./useMergeState");
var _useMergeStateDefault = parcelHelpers.interopDefault(_useMergeState);
var _useMergeStateFromProps = require("./useMergeStateFromProps");
var _useMergeStateFromPropsDefault = parcelHelpers.interopDefault(_useMergeStateFromProps);
var _useMounted = require("./useMounted");
var _useMountedDefault = parcelHelpers.interopDefault(_useMounted);
var _usePrevious = require("./usePrevious");
var _usePreviousDefault = parcelHelpers.interopDefault(_usePrevious);
var _useImage = require("./useImage");
var _useImageDefault = parcelHelpers.interopDefault(_useImage);
var _useResizeObserver = require("./useResizeObserver");
var _useResizeObserverDefault = parcelHelpers.interopDefault(_useResizeObserver);

},{"./useCallbackRef":"4MRqx","./useCommittedRef":"663QR","./useEventCallback":"8QyIg","./useEventListener":"eRR4h","./useGlobalListener":"6Qjt2","./useInterval":"201GY","./useRafInterval":"jTX44","./useMergeState":"jiNzV","./useMergeStateFromProps":"j2Nmn","./useMounted":"lesmc","./usePrevious":"6phQk","./useImage":"gb57o","./useResizeObserver":"kN5VU","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4MRqx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useCallbackRef() {
    return _react.useState(null);
}
exports.default = useCallbackRef;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eRR4h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useEventCallback = require("./useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
function useEventListener(eventTarget, event, listener, capture) {
    if (capture === void 0) capture = false;
    var handler = _useEventCallbackDefault.default(listener);
    _react.useEffect(function() {
        var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;
        target.addEventListener(event, handler, capture);
        return function() {
            return target.removeEventListener(event, handler, capture);
        };
    }, [
        eventTarget
    ]);
}
exports.default = useEventListener;

},{"react":"4mchR","./useEventCallback":"8QyIg","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6Qjt2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useEventListener = require("./useEventListener");
var _useEventListenerDefault = parcelHelpers.interopDefault(_useEventListener);
var _react = require("react");
function useGlobalListener(event, handler, capture) {
    if (capture === void 0) capture = false;
    var documentTarget = _react.useCallback(function() {
        return document;
    }, []);
    return _useEventListenerDefault.default(documentTarget, event, handler, capture);
}
exports.default = useGlobalListener;

},{"./useEventListener":"eRR4h","react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"201GY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useCommittedRef = require("./useCommittedRef");
var _useCommittedRefDefault = parcelHelpers.interopDefault(_useCommittedRef);
/**
 * Creates a `setInterval` that is properly cleaned up when a component unmounted
 *
 * ```tsx
 *  function Timer() {
 *    const [timer, setTimer] = useState(0)
 *    useInterval(() => setTimer(i => i + 1), 1000)
 *
 *    return <span>{timer} seconds past</span>
 *  }
 * ```
 *
 * @param fn an function run on each interval
 * @param ms The milliseconds duration of the interval
 */ function useInterval(fn, ms, paused, runImmediately) {
    if (paused === void 0) paused = false;
    if (runImmediately === void 0) runImmediately = false;
    var handle;
    var fnRef = _useCommittedRefDefault.default(fn); // this ref is necessary b/c useEffect will sometimes miss a paused toggle
    // orphaning a setTimeout chain in the aether, so relying on it's refresh logic is not reliable.
    var pausedRef = _useCommittedRefDefault.default(paused);
    var tick = function tick() {
        if (pausedRef.current) return;
        fnRef.current();
        schedule(); // eslint-disable-line no-use-before-define
    };
    var schedule = function schedule() {
        clearTimeout(handle);
        handle = setTimeout(tick, ms);
    };
    _react.useEffect(function() {
        if (runImmediately) tick();
        else schedule();
        return function() {
            return clearTimeout(handle);
        };
    }, [
        paused,
        runImmediately
    ]);
}
exports.default = useInterval;

},{"react":"4mchR","./useCommittedRef":"663QR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jTX44":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useCommittedRef = require("./useCommittedRef");
var _useCommittedRefDefault = parcelHelpers.interopDefault(_useCommittedRef);
function useRafInterval(fn, ms, paused) {
    if (paused === void 0) paused = false;
    var handle;
    var start = new Date().getTime();
    var fnRef = _useCommittedRefDefault.default(fn); // this ref is necessary b/c useEffect will sometimes miss a paused toggle
    // orphaning a setTimeout chain in the aether, so relying on it's refresh logic is not reliable.
    var pausedRef = _useCommittedRefDefault.default(paused);
    function loop() {
        var current = new Date().getTime();
        var delta = current - start;
        if (pausedRef.current) return;
        if (delta >= ms && fnRef.current) {
            fnRef.current();
            start = new Date().getTime();
        }
        cancelAnimationFrame(handle);
        handle = requestAnimationFrame(loop);
    }
    _react.useEffect(function() {
        handle = requestAnimationFrame(loop);
        return function() {
            return cancelAnimationFrame(handle);
        };
    }, []);
}
exports.default = useRafInterval;

},{"react":"4mchR","./useCommittedRef":"663QR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jiNzV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function useMergeState(initialState) {
    var _useState = _react.useState(initialState), state1 = _useState[0], setState = _useState[1];
    var updater = _react.useCallback(function(update) {
        if (update === null) return;
        if (typeof update === 'function') setState(function(state) {
            var nextState = update(state);
            return nextState == null ? state : _extends({
            }, state, nextState);
        });
        else setState(function(state) {
            return _extends({
            }, state, update);
        });
    }, [
        setState
    ]);
    return [
        state1,
        updater
    ];
}
exports.default = useMergeState;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"j2Nmn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useMergeState1 = require("./useMergeState");
var _useMergeStateDefault = parcelHelpers.interopDefault(_useMergeState1);
function useMergeStateFromProps(props, gDSFP, initialState) {
    var _useMergeState = _useMergeStateDefault.default(initialState), state = _useMergeState[0], setState = _useMergeState[1];
    var nextState = gDSFP(props, state);
    if (nextState !== null) setState(nextState);
    return [
        state,
        setState
    ];
}
exports.default = useMergeStateFromProps;

},{"./useMergeState":"jiNzV","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lesmc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useMounted() {
    var mounted = _react.useRef(true);
    var isMounted = _react.useRef(function() {
        return mounted.current;
    });
    _react.useEffect(function() {
        return function() {
            mounted.current = false;
        };
    }, []);
    return isMounted.current;
}
exports.default = useMounted;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6phQk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function usePrevious(value) {
    var ref = _react.useRef(null);
    _react.useEffect(function() {
        ref.current = value;
    });
    return ref.current;
}
exports.default = usePrevious;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gb57o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useImage(imageOrUrl, crossOrigin) {
    var _useState = _react.useState({
        image: null,
        error: null
    }), state = _useState[0], setState = _useState[1];
    _react.useEffect(function() {
        if (!imageOrUrl) return undefined;
        var image;
        if (typeof imageOrUrl === 'string') {
            image = new Image();
            if (crossOrigin) image.crossOrigin = crossOrigin;
            image.src = imageOrUrl;
        } else {
            image = imageOrUrl;
            if (image.complete && image.naturalHeight > 0) {
                setState({
                    image: image,
                    error: null
                });
                return;
            }
        }
        function onLoad() {
            setState({
                image: image,
                error: null
            });
        }
        function onError(error) {
            setState({
                image: image,
                error: error
            });
        }
        image.addEventListener('load', onLoad);
        image.addEventListener('error', onError);
        return function() {
            image.removeEventListener('load', onLoad);
            image.removeEventListener('error', onError);
        };
    }, [
        imageOrUrl,
        crossOrigin
    ]);
    return state;
}
exports.default = useImage;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kN5VU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useIsomorphicEffect = require("./useIsomorphicEffect");
var _useIsomorphicEffectDefault = parcelHelpers.interopDefault(_useIsomorphicEffect);
var targetMap = new WeakMap();
var resizeObserver;
function getResizeObserver() {
    // eslint-disable-next-line no-return-assign
    return resizeObserver = resizeObserver || new window.ResizeObserver(function(entries) {
        entries.forEach(function(entry) {
            var handler = targetMap.get(entry.target);
            if (handler) handler(entry.contentRect);
        });
    });
}
function useResizeObserver(element) {
    var _useState = _react.useState(null), rect1 = _useState[0], setRect = _useState[1];
    _useIsomorphicEffectDefault.default(function() {
        if (!element) return;
        getResizeObserver().observe(element);
        setRect(element.getBoundingClientRect());
        targetMap.set(element, function(rect) {
            setRect(rect);
        });
        return function() {
            targetMap.delete(element);
        };
    }, [
        element
    ]);
    return rect1;
}
exports.default = useResizeObserver;

},{"react":"4mchR","./useIsomorphicEffect":"e6sqn","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"e6sqn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var global = arguments[3];
var isReactNative = typeof global !== 'undefined' && global.navigator && global.navigator.product === 'ReactNative';
var isDOM = typeof document !== 'undefined';
exports.default = isDOM || isReactNative ? _react.useLayoutEffect : _react.useEffect;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3AURZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isTrivialHref", ()=>isTrivialHref
);
parcelHelpers.export(exports, "useButtonProps", ()=>useButtonProps
);
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "as",
    "disabled"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function isTrivialHref(href) {
    return !href || href.trim() === '#';
}
function useButtonProps({ tagName , disabled , href , target , rel , onClick , tabIndex =0 , type  }) {
    if (!tagName) {
        if (href != null || target != null || rel != null) tagName = 'a';
        else tagName = 'button';
    }
    const meta = {
        tagName
    };
    if (tagName === 'button') return [
        {
            type: type || 'button',
            disabled
        },
        meta
    ];
    const handleClick = (event)=>{
        if (disabled || tagName === 'a' && isTrivialHref(href)) event.preventDefault();
        if (disabled) {
            event.stopPropagation();
            return;
        }
        onClick == null || onClick(event);
    };
    const handleKeyDown = (event)=>{
        if (event.key === ' ') {
            event.preventDefault();
            handleClick(event);
        }
    };
    return [
        {
            role: 'button',
            // explicitly undefined so that it overrides the props disabled in a spread
            // e.g. <Tag {...props} {...hookProps} />
            disabled: undefined,
            tabIndex: disabled ? undefined : tabIndex,
            href: tagName === 'a' && disabled ? undefined : href,
            target: tagName === 'a' ? target : undefined,
            'aria-disabled': !disabled ? undefined : disabled,
            rel: tagName === 'a' ? rel : undefined,
            onClick: handleClick,
            onKeyDown: handleKeyDown
        },
        meta
    ];
}
const Button = /*#__PURE__*/ _react.forwardRef((_ref, ref)=>{
    let { as: asProp , disabled  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    const [buttonProps, { tagName: Component  }] = useButtonProps(Object.assign({
        tagName: asProp,
        disabled
    }, props));
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, Object.assign({
    }, props, buttonProps, {
        ref: ref
    })));
});
Button.displayName = 'Button';
exports.default = Button;

},{"react":"4mchR","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cHHEJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _transition = require("react-transition-group/Transition");
var _transitionEndListener = require("./transitionEndListener");
var _transitionEndListenerDefault = parcelHelpers.interopDefault(_transitionEndListener);
var _triggerBrowserReflow = require("./triggerBrowserReflow");
var _triggerBrowserReflowDefault = parcelHelpers.interopDefault(_triggerBrowserReflow);
var _transitionWrapper = require("./TransitionWrapper");
var _transitionWrapperDefault = parcelHelpers.interopDefault(_transitionWrapper);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    in: false,
    timeout: 300,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false
};
const fadeStyles = {
    [_transition.ENTERING]: 'show',
    [_transition.ENTERED]: 'show'
};
const Fade = /*#__PURE__*/ _react.forwardRef(({ className , children , transitionClasses ={
} , ...props }, ref)=>{
    const handleEnter = _react.useCallback((node, isAppearing)=>{
        _triggerBrowserReflowDefault.default(node);
        props.onEnter == null || props.onEnter(node, isAppearing);
    }, [
        props
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_transitionWrapperDefault.default, {
        ref: ref,
        addEndListener: _transitionEndListenerDefault.default,
        ...props,
        onEnter: handleEnter,
        childRef: children.ref,
        children: (status, innerProps)=>/*#__PURE__*/ _react.cloneElement(children, {
                ...innerProps,
                className: _classnamesDefault.default('fade', className, children.props.className, fadeStyles[status], transitionClasses[status])
            })
    }));
});
Fade.defaultProps = defaultProps;
Fade.displayName = 'Fade';
exports.default = Fade;

},{"classnames":"2cVcN","react":"4mchR","react-transition-group/Transition":"5xmpQ","./transitionEndListener":"6qkK8","./triggerBrowserReflow":"aOcXp","./TransitionWrapper":"7XqYo","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"arc5K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _jsxRuntime = require("react/jsx-runtime");
const propTypes = {
    'aria-label': _propTypesDefault.default.string,
    onClick: _propTypesDefault.default.func,
    /**
   * Render different color variant for the button.
   *
   * Omitting this will render the default dark color.
   */ variant: _propTypesDefault.default.oneOf([
        'white'
    ])
};
const defaultProps = {
    'aria-label': 'Close'
};
const CloseButton = /*#__PURE__*/ _react.forwardRef(({ className , variant , ...props }, ref)=>/*#__PURE__*/ _jsxRuntime.jsx("button", {
        ref: ref,
        type: "button",
        className: _classnamesDefault.default('btn-close', variant && `btn-close-${variant}`, className),
        ...props
    })
);
CloseButton.displayName = 'CloseButton';
CloseButton.propTypes = propTypes;
CloseButton.defaultProps = defaultProps;
exports.default = CloseButton;

},{"prop-types":"2bysO","react":"4mchR","classnames":"2cVcN","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"28Yge":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _jsxRuntime = require("react/jsx-runtime");
exports.default = (className)=>/*#__PURE__*/ _react.forwardRef((p, ref)=>/*#__PURE__*/ _jsxRuntime.jsx("div", {
            ...p,
            ref: ref,
            className: _classnamesDefault.default(p.className, className)
        })
    )
;

},{"react":"4mchR","classnames":"2cVcN","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8IH8I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _camelize = require("dom-helpers/camelize");
var _camelizeDefault = parcelHelpers.interopDefault(_camelize);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const pascalCase = (str)=>str[0].toUpperCase() + _camelizeDefault.default(str).slice(1)
;
function createWithBsPrefix(prefix, { displayName =pascalCase(prefix) , Component , defaultProps  } = {
}) {
    const BsComponent = /*#__PURE__*/ _react.forwardRef(({ className , bsPrefix , as: Tag = Component || 'div' , ...props }, ref)=>{
        const resolvedPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, prefix);
        return(/*#__PURE__*/ _jsxRuntime.jsx(Tag, {
            ref: ref,
            className: _classnamesDefault.default(className, resolvedPrefix),
            ...props
        }));
    });
    BsComponent.defaultProps = defaultProps;
    BsComponent.displayName = displayName;
    return BsComponent;
}
exports.default = createWithBsPrefix;

},{"classnames":"2cVcN","dom-helpers/camelize":"i1bzh","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"i1bzh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var rHyphen = /-(.)/g;
function camelize(string) {
    return string.replace(rHyphen, function(_, chr) {
        return chr.toUpperCase();
    });
}
exports.default = camelize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1sqBH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
exports.default = _anchorDefault.default;

},{"@restart/ui/Anchor":"c3Vvr","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"655UP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    bg: 'primary',
    pill: false
};
const Badge = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , bg , pill , text , className , as: Component = 'span' , ...props }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'badge');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`)
    }));
});
Badge.displayName = 'Badge';
Badge.defaultProps = defaultProps;
exports.default = Badge;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jersl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _breadcrumbItem = require("./BreadcrumbItem");
var _breadcrumbItemDefault = parcelHelpers.interopDefault(_breadcrumbItem);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    label: 'breadcrumb',
    listProps: {
    }
};
const Breadcrumb = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , listProps , children , label , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'nav' , ...props }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'breadcrumb');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        "aria-label": label,
        className: className,
        ref: ref,
        ...props,
        children: /*#__PURE__*/ _jsxRuntime.jsx("ol", {
            ...listProps,
            className: _classnamesDefault.default(prefix, listProps == null ? void 0 : listProps.className),
            children: children
        })
    }));
});
Breadcrumb.displayName = 'Breadcrumb';
Breadcrumb.defaultProps = defaultProps;
exports.default = Object.assign(Breadcrumb, {
    Item: _breadcrumbItemDefault.default
});

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./BreadcrumbItem":"h6vFq","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"h6vFq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    active: false,
    linkProps: {
    }
};
const BreadcrumbItem = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , active , children , className , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'li' , linkAs: LinkComponent = _anchorDefault.default , linkProps , href , title , target , ...props }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'breadcrumb-item');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(prefix, className, {
            active
        }),
        "aria-current": active ? 'page' : undefined,
        children: active ? children : /*#__PURE__*/ _jsxRuntime.jsx(LinkComponent, {
            ...linkProps,
            href: href,
            title: title,
            target: target,
            children: children
        })
    }));
});
BreadcrumbItem.displayName = 'BreadcrumbItem';
BreadcrumbItem.defaultProps = defaultProps;
exports.default = BreadcrumbItem;

},{"classnames":"2cVcN","react":"4mchR","@restart/ui/Anchor":"c3Vvr","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"64Pgd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _button = require("@restart/ui/Button");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    variant: 'primary',
    active: false,
    disabled: false
};
const Button = /*#__PURE__*/ _react.forwardRef(({ as , bsPrefix , variant , size , active , className , ...props }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'btn');
    const [buttonProps, { tagName  }] = _button.useButtonProps({
        tagName: as,
        ...props
    });
    const Component = tagName;
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ...buttonProps,
        ref: ref,
        className: _classnamesDefault.default(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')
    }));
});
Button.displayName = 'Button';
Button.defaultProps = defaultProps;
exports.default = Button;

},{"classnames":"2cVcN","react":"4mchR","@restart/ui/Button":"3AURZ","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lNHIX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    vertical: false,
    role: 'group'
};
const ButtonGroup = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , size , vertical , className , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , ...rest }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'btn-group');
    let baseClass = prefix;
    if (vertical) baseClass = `${prefix}-vertical`;
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...rest,
        ref: ref,
        className: _classnamesDefault.default(className, baseClass, size && `${prefix}-${size}`)
    }));
});
ButtonGroup.displayName = 'ButtonGroup';
ButtonGroup.defaultProps = defaultProps;
exports.default = ButtonGroup;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eZyti":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    role: 'toolbar'
};
const ButtonToolbar = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , ...props }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'btn-toolbar');
    return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
        ...props,
        ref: ref,
        className: _classnamesDefault.default(className, prefix)
    }));
});
ButtonToolbar.displayName = 'ButtonToolbar';
ButtonToolbar.defaultProps = defaultProps;
exports.default = ButtonToolbar;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jeXXJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _divWithClassName = require("./divWithClassName");
var _divWithClassNameDefault = parcelHelpers.interopDefault(_divWithClassName);
var _cardImg = require("./CardImg");
var _cardImgDefault = parcelHelpers.interopDefault(_cardImg);
var _cardHeader = require("./CardHeader");
var _cardHeaderDefault = parcelHelpers.interopDefault(_cardHeader);
var _jsxRuntime = require("react/jsx-runtime");
const DivStyledAsH5 = _divWithClassNameDefault.default('h5');
const DivStyledAsH6 = _divWithClassNameDefault.default('h6');
const CardBody = _createWithBsPrefixDefault.default('card-body');
const CardTitle = _createWithBsPrefixDefault.default('card-title', {
    Component: DivStyledAsH5
});
const CardSubtitle = _createWithBsPrefixDefault.default('card-subtitle', {
    Component: DivStyledAsH6
});
const CardLink = _createWithBsPrefixDefault.default('card-link', {
    Component: 'a'
});
const CardText = _createWithBsPrefixDefault.default('card-text', {
    Component: 'p'
});
const CardFooter = _createWithBsPrefixDefault.default('card-footer');
const CardImgOverlay = _createWithBsPrefixDefault.default('card-img-overlay');
const defaultProps = {
    body: false
};
const Card = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , bg , text , border , body , children , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , ...props }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'card');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),
        children: body ? /*#__PURE__*/ _jsxRuntime.jsx(CardBody, {
            children: children
        }) : children
    }));
});
Card.displayName = 'Card';
Card.defaultProps = defaultProps;
exports.default = Object.assign(Card, {
    Img: _cardImgDefault.default,
    Title: CardTitle,
    Subtitle: CardSubtitle,
    Body: CardBody,
    Link: CardLink,
    Text: CardText,
    Header: _cardHeaderDefault.default,
    Footer: CardFooter,
    ImgOverlay: CardImgOverlay
});

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./createWithBsPrefix":"8IH8I","./divWithClassName":"28Yge","./CardImg":"2QSkt","./CardHeader":"6Iz81","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2QSkt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const CardImg = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , variant , as: Component = 'img' , ...props }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'card-img');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        className: _classnamesDefault.default(variant ? `${prefix}-${variant}` : prefix, className),
        ...props
    }));
});
CardImg.displayName = 'CardImg';
exports.default = CardImg;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6Iz81":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _cardHeaderContext = require("./CardHeaderContext");
var _cardHeaderContextDefault = parcelHelpers.interopDefault(_cardHeaderContext);
var _jsxRuntime = require("react/jsx-runtime");
const CardHeader = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , ...props }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'card-header');
    const contextValue = _react.useMemo(()=>({
            cardHeaderBsPrefix: prefix
        })
    , [
        prefix
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_cardHeaderContextDefault.default.Provider, {
        value: contextValue,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, {
            ref: ref,
            ...props,
            className: _classnamesDefault.default(className, prefix)
        })
    }));
});
CardHeader.displayName = 'CardHeader';
exports.default = CardHeader;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./CardHeaderContext":"lEhgp","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lEhgp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const context = /*#__PURE__*/ _react.createContext(null);
context.displayName = 'CardHeaderContext';
exports.default = context;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cyfp1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('card-group');

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gCbs7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useUpdateEffect = require("@restart/hooks/useUpdateEffect");
var _useUpdateEffectDefault = parcelHelpers.interopDefault(_useUpdateEffect);
var _useCommittedRef = require("@restart/hooks/useCommittedRef");
var _useCommittedRefDefault = parcelHelpers.interopDefault(_useCommittedRef);
var _useTimeout = require("@restart/hooks/useTimeout");
var _useTimeoutDefault = parcelHelpers.interopDefault(_useTimeout);
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _carouselCaption = require("./CarouselCaption");
var _carouselCaptionDefault = parcelHelpers.interopDefault(_carouselCaption);
var _carouselItem = require("./CarouselItem");
var _carouselItemDefault = parcelHelpers.interopDefault(_carouselItem);
var _elementChildren = require("./ElementChildren");
var _themeProvider = require("./ThemeProvider");
var _transitionEndListener = require("./transitionEndListener");
var _transitionEndListenerDefault = parcelHelpers.interopDefault(_transitionEndListener);
var _triggerBrowserReflow = require("./triggerBrowserReflow");
var _triggerBrowserReflowDefault = parcelHelpers.interopDefault(_triggerBrowserReflow);
var _transitionWrapper = require("./TransitionWrapper");
var _transitionWrapperDefault = parcelHelpers.interopDefault(_transitionWrapper);
var _jsxRuntime = require("react/jsx-runtime");
const SWIPE_THRESHOLD = 40;
const defaultProps = {
    slide: true,
    fade: false,
    controls: true,
    indicators: true,
    indicatorLabels: [],
    defaultActiveIndex: 0,
    interval: 5000,
    keyboard: true,
    pause: 'hover',
    wrap: true,
    touch: true,
    prevIcon: /*#__PURE__*/ _jsxRuntime.jsx("span", {
        "aria-hidden": "true",
        className: "carousel-control-prev-icon"
    }),
    prevLabel: 'Previous',
    nextIcon: /*#__PURE__*/ _jsxRuntime.jsx("span", {
        "aria-hidden": "true",
        className: "carousel-control-next-icon"
    }),
    nextLabel: 'Next'
};
function isVisible(element) {
    if (!element || !element.style || !element.parentNode || !element.parentNode.style) return false;
    const elementStyle = getComputedStyle(element);
    return elementStyle.display !== 'none' && elementStyle.visibility !== 'hidden' && getComputedStyle(element.parentNode).display !== 'none';
}
const Carousel = /*#__PURE__*/ _react.forwardRef((uncontrolledProps, ref)=>{
    const { // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'div' , bsPrefix , slide , fade , controls , indicators , indicatorLabels , activeIndex , onSelect , onSlide , onSlid , interval , keyboard , onKeyDown , pause , onMouseOver , onMouseOut , wrap , touch , onTouchStart , onTouchMove , onTouchEnd , prevIcon , prevLabel , nextIcon , nextLabel , variant , className , children , ...props } = _uncontrollable.useUncontrolled(uncontrolledProps, {
        activeIndex: 'onSelect'
    });
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'carousel');
    const isRTL = _themeProvider.useIsRTL();
    const nextDirectionRef = _react.useRef(null);
    const [direction, setDirection] = _react.useState('next');
    const [paused, setPaused] = _react.useState(false);
    const [isSliding, setIsSliding] = _react.useState(false);
    const [renderedActiveIndex, setRenderedActiveIndex] = _react.useState(activeIndex || 0);
    if (!isSliding && activeIndex !== renderedActiveIndex) {
        if (nextDirectionRef.current) setDirection(nextDirectionRef.current);
        else setDirection((activeIndex || 0) > renderedActiveIndex ? 'next' : 'prev');
        if (slide) setIsSliding(true);
        setRenderedActiveIndex(activeIndex || 0);
    }
    _react.useEffect(()=>{
        if (nextDirectionRef.current) nextDirectionRef.current = null;
    });
    let numChildren = 0;
    let activeChildInterval; // Iterate to grab all of the children's interval values
    // (and count them, too)
    _elementChildren.forEach(children, (child, index)=>{
        ++numChildren;
        if (index === activeIndex) activeChildInterval = child.props.interval;
    });
    const activeChildIntervalRef = _useCommittedRefDefault.default(activeChildInterval);
    const prev = _react.useCallback((event)=>{
        if (isSliding) return;
        let nextActiveIndex = renderedActiveIndex - 1;
        if (nextActiveIndex < 0) {
            if (!wrap) return;
            nextActiveIndex = numChildren - 1;
        }
        nextDirectionRef.current = 'prev';
        onSelect == null || onSelect(nextActiveIndex, event);
    }, [
        isSliding,
        renderedActiveIndex,
        onSelect,
        wrap,
        numChildren
    ]); // This is used in the setInterval, so it should not invalidate.
    const next = _useEventCallbackDefault.default((event)=>{
        if (isSliding) return;
        let nextActiveIndex = renderedActiveIndex + 1;
        if (nextActiveIndex >= numChildren) {
            if (!wrap) return;
            nextActiveIndex = 0;
        }
        nextDirectionRef.current = 'next';
        onSelect == null || onSelect(nextActiveIndex, event);
    });
    const elementRef = _react.useRef();
    _react.useImperativeHandle(ref, ()=>({
            element: elementRef.current,
            prev,
            next
        })
    ); // This is used in the setInterval, so it should not invalidate.
    const nextWhenVisible = _useEventCallbackDefault.default(()=>{
        if (!document.hidden && isVisible(elementRef.current)) {
            if (isRTL) prev();
            else next();
        }
    });
    const slideDirection = direction === 'next' ? 'start' : 'end';
    _useUpdateEffectDefault.default(()=>{
        if (slide) // These callbacks will be handled by the <Transition> callbacks.
        return;
        onSlide == null || onSlide(renderedActiveIndex, slideDirection);
        onSlid == null || onSlid(renderedActiveIndex, slideDirection);
    }, [
        renderedActiveIndex
    ]);
    const orderClassName = `${prefix}-item-${direction}`;
    const directionalClassName = `${prefix}-item-${slideDirection}`;
    const handleEnter = _react.useCallback((node)=>{
        _triggerBrowserReflowDefault.default(node);
        onSlide == null || onSlide(renderedActiveIndex, slideDirection);
    }, [
        onSlide,
        renderedActiveIndex,
        slideDirection
    ]);
    const handleEntered = _react.useCallback(()=>{
        setIsSliding(false);
        onSlid == null || onSlid(renderedActiveIndex, slideDirection);
    }, [
        onSlid,
        renderedActiveIndex,
        slideDirection
    ]);
    const handleKeyDown = _react.useCallback((event)=>{
        if (keyboard && !/input|textarea/i.test(event.target.tagName)) switch(event.key){
            case 'ArrowLeft':
                event.preventDefault();
                if (isRTL) next(event);
                else prev(event);
                return;
            case 'ArrowRight':
                event.preventDefault();
                if (isRTL) prev(event);
                else next(event);
                return;
            default:
        }
        onKeyDown == null || onKeyDown(event);
    }, [
        keyboard,
        onKeyDown,
        prev,
        next,
        isRTL
    ]);
    const handleMouseOver = _react.useCallback((event)=>{
        if (pause === 'hover') setPaused(true);
        onMouseOver == null || onMouseOver(event);
    }, [
        pause,
        onMouseOver
    ]);
    const handleMouseOut = _react.useCallback((event)=>{
        setPaused(false);
        onMouseOut == null || onMouseOut(event);
    }, [
        onMouseOut
    ]);
    const touchStartXRef = _react.useRef(0);
    const touchDeltaXRef = _react.useRef(0);
    const touchUnpauseTimeout = _useTimeoutDefault.default();
    const handleTouchStart = _react.useCallback((event)=>{
        touchStartXRef.current = event.touches[0].clientX;
        touchDeltaXRef.current = 0;
        if (pause === 'hover') setPaused(true);
        onTouchStart == null || onTouchStart(event);
    }, [
        pause,
        onTouchStart
    ]);
    const handleTouchMove = _react.useCallback((event)=>{
        if (event.touches && event.touches.length > 1) touchDeltaXRef.current = 0;
        else touchDeltaXRef.current = event.touches[0].clientX - touchStartXRef.current;
        onTouchMove == null || onTouchMove(event);
    }, [
        onTouchMove
    ]);
    const handleTouchEnd = _react.useCallback((event)=>{
        if (touch) {
            const touchDeltaX = touchDeltaXRef.current;
            if (Math.abs(touchDeltaX) > SWIPE_THRESHOLD) {
                if (touchDeltaX > 0) prev(event);
                else next(event);
            }
        }
        if (pause === 'hover') touchUnpauseTimeout.set(()=>{
            setPaused(false);
        }, interval || undefined);
        onTouchEnd == null || onTouchEnd(event);
    }, [
        touch,
        pause,
        prev,
        next,
        touchUnpauseTimeout,
        interval,
        onTouchEnd
    ]);
    const shouldPlay = interval != null && !paused && !isSliding;
    const intervalHandleRef = _react.useRef();
    _react.useEffect(()=>{
        var _ref, _activeChildIntervalR;
        if (!shouldPlay) return undefined;
        const nextFunc = isRTL ? prev : next;
        intervalHandleRef.current = window.setInterval(document.visibilityState ? nextWhenVisible : nextFunc, (_ref = (_activeChildIntervalR = activeChildIntervalRef.current) != null ? _activeChildIntervalR : interval) != null ? _ref : undefined);
        return ()=>{
            if (intervalHandleRef.current !== null) clearInterval(intervalHandleRef.current);
        };
    }, [
        shouldPlay,
        prev,
        next,
        activeChildIntervalRef,
        interval,
        nextWhenVisible,
        isRTL
    ]);
    const indicatorOnClicks = _react.useMemo(()=>indicators && Array.from({
            length: numChildren
        }, (_, index)=>(event)=>{
                onSelect == null || onSelect(index, event);
            }
        )
    , [
        indicators,
        numChildren,
        onSelect
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsxs(Component, {
        ref: elementRef,
        ...props,
        onKeyDown: handleKeyDown,
        onMouseOver: handleMouseOver,
        onMouseOut: handleMouseOut,
        onTouchStart: handleTouchStart,
        onTouchMove: handleTouchMove,
        onTouchEnd: handleTouchEnd,
        className: _classnamesDefault.default(className, prefix, slide && 'slide', fade && `${prefix}-fade`, variant && `${prefix}-${variant}`),
        children: [
            indicators && /*#__PURE__*/ _jsxRuntime.jsx("div", {
                className: `${prefix}-indicators`,
                children: _elementChildren.map(children, (_, index)=>/*#__PURE__*/ _jsxRuntime.jsx("button", {
                        type: "button",
                        "data-bs-target": "" // Bootstrap requires this in their css.
                        ,
                        "aria-label": indicatorLabels != null && indicatorLabels.length ? indicatorLabels[index] : `Slide ${index + 1}`,
                        className: index === renderedActiveIndex ? 'active' : undefined,
                        onClick: indicatorOnClicks ? indicatorOnClicks[index] : undefined,
                        "aria-current": index === renderedActiveIndex
                    }, index)
                )
            }),
            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                className: `${prefix}-inner`,
                children: _elementChildren.map(children, (child, index)=>{
                    const isActive = index === renderedActiveIndex;
                    return slide ? /*#__PURE__*/ _jsxRuntime.jsx(_transitionWrapperDefault.default, {
                        in: isActive,
                        onEnter: isActive ? handleEnter : undefined,
                        onEntered: isActive ? handleEntered : undefined,
                        addEndListener: _transitionEndListenerDefault.default,
                        children: (status, innerProps)=>/*#__PURE__*/ _react.cloneElement(child, {
                                ...innerProps,
                                className: _classnamesDefault.default(child.props.className, isActive && status !== 'entered' && orderClassName, (status === 'entered' || status === 'exiting') && 'active', (status === 'entering' || status === 'exiting') && directionalClassName)
                            })
                    }) : /*#__PURE__*/ _react.cloneElement(child, {
                        className: _classnamesDefault.default(child.props.className, isActive && 'active')
                    });
                })
            }),
            controls && /*#__PURE__*/ _jsxRuntime.jsxs(_jsxRuntime.Fragment, {
                children: [
                    (wrap || activeIndex !== 0) && /*#__PURE__*/ _jsxRuntime.jsxs(_anchorDefault.default, {
                        className: `${prefix}-control-prev`,
                        onClick: prev,
                        children: [
                            prevIcon,
                            prevLabel && /*#__PURE__*/ _jsxRuntime.jsx("span", {
                                className: "visually-hidden",
                                children: prevLabel
                            })
                        ]
                    }),
                    (wrap || activeIndex !== numChildren - 1) && /*#__PURE__*/ _jsxRuntime.jsxs(_anchorDefault.default, {
                        className: `${prefix}-control-next`,
                        onClick: next,
                        children: [
                            nextIcon,
                            nextLabel && /*#__PURE__*/ _jsxRuntime.jsx("span", {
                                className: "visually-hidden",
                                children: nextLabel
                            })
                        ]
                    })
                ]
            })
        ]
    }));
});
Carousel.displayName = 'Carousel';
Carousel.defaultProps = defaultProps;
exports.default = Object.assign(Carousel, {
    Caption: _carouselCaptionDefault.default,
    Item: _carouselItemDefault.default
});

},{"@restart/hooks/useEventCallback":"8QyIg","@restart/hooks/useUpdateEffect":"179Fc","@restart/hooks/useCommittedRef":"663QR","@restart/hooks/useTimeout":"97tbq","@restart/ui/Anchor":"c3Vvr","classnames":"2cVcN","react":"4mchR","uncontrollable":"aG99Z","./CarouselCaption":"i3N24","./CarouselItem":"3uqGs","./ElementChildren":"eqDHF","./ThemeProvider":"oG7Uz","./transitionEndListener":"6qkK8","./triggerBrowserReflow":"aOcXp","./TransitionWrapper":"7XqYo","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"179Fc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
/**
 * Runs an effect only when the dependencies have changed, skipping the
 * initial "on mount" run. Caution, if the dependency list never changes,
 * the effect is **never run**
 *
 * ```ts
 *  const ref = useRef<HTMLInput>(null);
 *
 *  // focuses an element only if the focus changes, and not on mount
 *  useUpdateEffect(() => {
 *    const element = ref.current?.children[focusedIdx] as HTMLElement
 *
 *    element?.focus()
 *
 *  }, [focusedIndex])
 * ```
 * @param effect An effect to run on mount
 *
 * @category effects
 */ function useUpdateEffect(fn, deps) {
    var isFirst = _react.useRef(true);
    _react.useEffect(function() {
        if (isFirst.current) {
            isFirst.current = false;
            return;
        }
        return fn();
    }, deps);
}
exports.default = useUpdateEffect;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"97tbq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useMounted = require("./useMounted");
var _useMountedDefault = parcelHelpers.interopDefault(_useMounted);
var _useWillUnmount = require("./useWillUnmount");
var _useWillUnmountDefault = parcelHelpers.interopDefault(_useWillUnmount);
/*
 * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the
 * delay as a 32-bit signed integer internally. This causes an integer overflow
 * when using delays larger than 2,147,483,647 ms (about 24.8 days),
 * resulting in the timeout being executed immediately.
 *
 * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout
 */ var MAX_DELAY_MS = Math.pow(2, 31) - 1;
function setChainedTimeout(handleRef, fn, timeoutAtMs) {
    var delayMs = timeoutAtMs - Date.now();
    handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(function() {
        return setChainedTimeout(handleRef, fn, timeoutAtMs);
    }, MAX_DELAY_MS);
}
function useTimeout() {
    var isMounted = _useMountedDefault.default(); // types are confused between node and web here IDK
    var handleRef = _react.useRef();
    _useWillUnmountDefault.default(function() {
        return clearTimeout(handleRef.current);
    });
    return _react.useMemo(function() {
        var clear = function clear() {
            return clearTimeout(handleRef.current);
        };
        function set(fn, delayMs) {
            if (delayMs === void 0) delayMs = 0;
            if (!isMounted()) return;
            clear();
            if (delayMs <= MAX_DELAY_MS) // For simplicity, if the timeout is short, just set a normal timeout.
            handleRef.current = setTimeout(fn, delayMs);
            else setChainedTimeout(handleRef, fn, Date.now() + delayMs);
        }
        return {
            set: set,
            clear: clear
        };
    }, []);
}
exports.default = useTimeout;

},{"react":"4mchR","./useMounted":"lesmc","./useWillUnmount":"fr49k","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fr49k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _useUpdatedRef = require("./useUpdatedRef");
var _useUpdatedRefDefault = parcelHelpers.interopDefault(_useUpdatedRef);
var _react = require("react");
function useWillUnmount(fn) {
    var onUnmount = _useUpdatedRefDefault.default(fn);
    _react.useEffect(function() {
        return function() {
            return onUnmount.current();
        };
    }, []);
}
exports.default = useWillUnmount;

},{"./useUpdatedRef":"10mNT","react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"10mNT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useUpdatedRef(value) {
    var valueRef = _react.useRef(value);
    valueRef.current = value;
    return valueRef;
}
exports.default = useUpdatedRef;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"i3N24":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('carousel-caption');

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3uqGs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const CarouselItem = /*#__PURE__*/ _react.forwardRef(({ // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , bsPrefix , className , ...props }, ref)=>{
    const finalClassName = _classnamesDefault.default(className, _themeProvider.useBootstrapPrefix(bsPrefix, 'carousel-item'));
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        ...props,
        className: finalClassName
    }));
});
CarouselItem.displayName = 'CarouselItem';
exports.default = CarouselItem;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eqDHF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "forEach", ()=>forEach
);
parcelHelpers.export(exports, "hasChildOfType", ()=>hasChildOfType
);
var _react = require("react");
/**
 * Iterates through children that are typically specified as `props.children`,
 * but only maps over children that are "valid elements".
 *
 * The mapFunction provided index will be normalised to the components mapped,
 * so an invalid component would not increase the index.
 *
 */ function map(children, func) {
    let index = 0;
    return _react.Children.map(children, (child)=>/*#__PURE__*/ _react.isValidElement(child) ? func(child, index++) : child
    );
}
/**
 * Iterates through children that are "valid elements".
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child with the index reflecting the position relative to "valid components".
 */ function forEach(children, func) {
    let index = 0;
    _react.Children.forEach(children, (child)=>{
        if (/*#__PURE__*/ _react.isValidElement(child)) func(child, index++);
    });
}
/**
 * Finds whether a component's `children` prop includes a React element of the
 * specified type.
 */ function hasChildOfType(children, type) {
    return _react.Children.toArray(children).some((child)=>/*#__PURE__*/ _react.isValidElement(child) && child.type === type
    );
}

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kxhZp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCol", ()=>useCol
);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const DEVICE_SIZES = [
    'xxl',
    'xl',
    'lg',
    'md',
    'sm',
    'xs'
];
function useCol({ as , bsPrefix , className , ...props }) {
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'col');
    const spans = [];
    const classes = [];
    DEVICE_SIZES.forEach((brkPoint)=>{
        const propValue = props[brkPoint];
        delete props[brkPoint];
        let span;
        let offset;
        let order;
        if (typeof propValue === 'object' && propValue != null) ({ span , offset , order  } = propValue);
        else span = propValue;
        const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';
        if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);
        if (order != null) classes.push(`order${infix}-${order}`);
        if (offset != null) classes.push(`offset${infix}-${offset}`);
    });
    return [
        {
            ...props,
            className: _classnamesDefault.default(className, ...spans, ...classes)
        },
        {
            as,
            bsPrefix,
            spans
        }
    ];
}
const Col = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    const [{ className , ...colProps }, { as: Component = 'div' , bsPrefix , spans  }] = useCol(props);
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...colProps,
        ref: ref,
        className: _classnamesDefault.default(className, !spans.length && bsPrefix)
    }));
});
Col.displayName = 'Col';
exports.default = Col;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7gNYx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _dropdown = require("@restart/ui/Dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _uncontrollable = require("uncontrollable");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _dropdownContext = require("./DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _dropdownItem = require("./DropdownItem");
var _dropdownItemDefault = parcelHelpers.interopDefault(_dropdownItem);
var _dropdownMenu = require("./DropdownMenu");
var _dropdownMenuDefault = parcelHelpers.interopDefault(_dropdownMenu);
var _dropdownToggle = require("./DropdownToggle");
var _dropdownToggleDefault = parcelHelpers.interopDefault(_dropdownToggle);
var _inputGroupContext = require("./InputGroupContext");
var _inputGroupContextDefault = parcelHelpers.interopDefault(_inputGroupContext);
var _themeProvider = require("./ThemeProvider");
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _types = require("./types");
var _jsxRuntime = require("react/jsx-runtime");
const DropdownHeader = _createWithBsPrefixDefault.default('dropdown-header', {
    defaultProps: {
        role: 'heading'
    }
});
const DropdownDivider = _createWithBsPrefixDefault.default('dropdown-divider', {
    Component: 'hr',
    defaultProps: {
        role: 'separator'
    }
});
const DropdownItemText = _createWithBsPrefixDefault.default('dropdown-item-text', {
    Component: 'span'
});
const defaultProps = {
    navbar: false,
    align: 'start',
    autoClose: true
};
const Dropdown = /*#__PURE__*/ _react.forwardRef((pProps, ref)=>{
    const { bsPrefix , drop , show , className , align , onSelect , onToggle , focusFirstItemOnShow , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'div' , navbar: _4 , autoClose , ...props } = _uncontrollable.useUncontrolled(pProps, {
        show: 'onToggle'
    });
    const isInputGroup = _react.useContext(_inputGroupContextDefault.default);
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'dropdown');
    const isRTL = _themeProvider.useIsRTL();
    const isClosingPermitted = (source)=>{
        // autoClose=false only permits close on button click
        if (autoClose === false) return source === 'click'; // autoClose=inside doesn't permit close on rootClose
        if (autoClose === 'inside') return source !== 'rootClose'; // autoClose=outside doesn't permit close on select
        if (autoClose === 'outside') return source !== 'select';
        return true;
    };
    const handleToggle = _useEventCallbackDefault.default((nextShow, meta)=>{
        if (meta.originalEvent.currentTarget === document && (meta.source !== 'keydown' || meta.originalEvent.key === 'Escape')) meta.source = 'rootClose';
        if (isClosingPermitted(meta.source)) onToggle == null || onToggle(nextShow, meta);
    });
    const alignEnd = align === 'end';
    const placement = _dropdownMenu.getDropdownMenuPlacement(alignEnd, drop, isRTL);
    const contextValue = _react.useMemo(()=>({
            align,
            drop,
            isRTL
        })
    , [
        align,
        drop,
        isRTL
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_dropdownContextDefault.default.Provider, {
        value: contextValue,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_dropdownDefault.default, {
            placement: placement,
            show: show,
            onSelect: onSelect,
            onToggle: handleToggle,
            focusFirstItemOnShow: focusFirstItemOnShow,
            itemSelector: `.${prefix}-item:not(.disabled):not(:disabled)`,
            children: isInputGroup ? props.children : /*#__PURE__*/ _jsxRuntime.jsx(Component, {
                ...props,
                ref: ref,
                className: _classnamesDefault.default(className, show && 'show', (!drop || drop === 'down') && prefix, drop === 'up' && 'dropup', drop === 'end' && 'dropend', drop === 'start' && 'dropstart')
            })
        })
    }));
});
Dropdown.displayName = 'Dropdown';
Dropdown.defaultProps = defaultProps;
exports.default = Object.assign(Dropdown, {
    Toggle: _dropdownToggleDefault.default,
    Menu: _dropdownMenuDefault.default,
    Item: _dropdownItemDefault.default,
    ItemText: DropdownItemText,
    Divider: DropdownDivider,
    Header: DropdownHeader
});

},{"classnames":"2cVcN","react":"4mchR","@restart/ui/Dropdown":"alyHv","uncontrollable":"aG99Z","@restart/hooks/useEventCallback":"8QyIg","./DropdownContext":"kQHR9","./DropdownItem":"6Tbgp","./DropdownMenu":"Zo7sg","./DropdownToggle":"6tN0k","./InputGroupContext":"8dQQC","./ThemeProvider":"oG7Uz","./createWithBsPrefix":"8IH8I","./types":"gcZF4","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"alyHv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _querySelectorAll = require("dom-helpers/querySelectorAll");
var _querySelectorAllDefault = parcelHelpers.interopDefault(_querySelectorAll);
var _addEventListener = require("dom-helpers/addEventListener");
var _addEventListenerDefault = parcelHelpers.interopDefault(_addEventListener);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _usePrevious = require("@restart/hooks/usePrevious");
var _usePreviousDefault = parcelHelpers.interopDefault(_usePrevious);
var _useForceUpdate = require("@restart/hooks/useForceUpdate");
var _useForceUpdateDefault = parcelHelpers.interopDefault(_useForceUpdate);
var _useEventListener = require("@restart/hooks/useEventListener");
var _useEventListenerDefault = parcelHelpers.interopDefault(_useEventListener);
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _dropdownContext = require("./DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _dropdownMenu = require("./DropdownMenu");
var _dropdownMenuDefault = parcelHelpers.interopDefault(_dropdownMenu);
var _dropdownToggle = require("./DropdownToggle");
var _dropdownToggleDefault = parcelHelpers.interopDefault(_dropdownToggle);
var _dropdownItem = require("./DropdownItem");
var _dropdownItemDefault = parcelHelpers.interopDefault(_dropdownItem);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _dataKey = require("./DataKey");
var _useWindow = require("./useWindow");
var _useWindowDefault = parcelHelpers.interopDefault(_useWindow);
var _jsxRuntime = require("react/jsx-runtime");
function useRefWithUpdate() {
    const forceUpdate = _useForceUpdateDefault.default();
    const ref = _react.useRef(null);
    const attachRef = _react.useCallback((element)=>{
        ref.current = element; // ensure that a menu set triggers an update for consumers
        forceUpdate();
    }, [
        forceUpdate
    ]);
    return [
        ref,
        attachRef
    ];
}
/**
 * @displayName Dropdown
 * @public
 */ function Dropdown({ defaultShow , show: rawShow , onSelect , onToggle: rawOnToggle , itemSelector =`* [${_dataKey.dataAttr('dropdown-item')}]` , focusFirstItemOnShow , placement ='bottom-start' , children  }) {
    const window = _useWindowDefault.default();
    const [show, onToggle] = _uncontrollable.useUncontrolledProp(rawShow, defaultShow, rawOnToggle); // We use normal refs instead of useCallbackRef in order to populate the
    // the value as quickly as possible, otherwise the effect to focus the element
    // may run before the state value is set
    const [menuRef, setMenu] = useRefWithUpdate();
    const menuElement = menuRef.current;
    const [toggleRef, setToggle] = useRefWithUpdate();
    const toggleElement = toggleRef.current;
    const lastShow = _usePreviousDefault.default(show);
    const lastSourceEvent = _react.useRef(null);
    const focusInDropdown = _react.useRef(false);
    const onSelectCtx = _react.useContext(_selectableContextDefault.default);
    const toggle = _react.useCallback((nextShow, event, source = event == null ? void 0 : event.type)=>{
        onToggle(nextShow, {
            originalEvent: event,
            source
        });
    }, [
        onToggle
    ]);
    const handleSelect = _useEventCallbackDefault.default((key, event)=>{
        onSelect == null || onSelect(key, event);
        toggle(false, event, 'select');
        if (!event.isPropagationStopped()) onSelectCtx == null || onSelectCtx(key, event);
    });
    const context = _react.useMemo(()=>({
            toggle,
            placement,
            show,
            menuElement,
            toggleElement,
            setMenu,
            setToggle
        })
    , [
        toggle,
        placement,
        show,
        menuElement,
        toggleElement,
        setMenu,
        setToggle
    ]);
    if (menuElement && lastShow && !show) focusInDropdown.current = menuElement.contains(menuElement.ownerDocument.activeElement);
    const focusToggle = _useEventCallbackDefault.default(()=>{
        if (toggleElement && toggleElement.focus) toggleElement.focus();
    });
    const maybeFocusFirst = _useEventCallbackDefault.default(()=>{
        const type = lastSourceEvent.current;
        let focusType = focusFirstItemOnShow;
        if (focusType == null) focusType = menuRef.current && _dropdownToggle.isRoleMenu(menuRef.current) ? 'keyboard' : false;
        if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) return;
        const first = _querySelectorAllDefault.default(menuRef.current, itemSelector)[0];
        if (first && first.focus) first.focus();
    });
    _react.useEffect(()=>{
        if (show) maybeFocusFirst();
        else if (focusInDropdown.current) {
            focusInDropdown.current = false;
            focusToggle();
        } // only `show` should be changing
    }, [
        show,
        focusInDropdown,
        focusToggle,
        maybeFocusFirst
    ]);
    _react.useEffect(()=>{
        lastSourceEvent.current = null;
    });
    const getNextFocusedChild = (current, offset)=>{
        if (!menuRef.current) return null;
        const items = _querySelectorAllDefault.default(menuRef.current, itemSelector);
        let index = items.indexOf(current) + offset;
        index = Math.max(0, Math.min(index, items.length));
        return items[index];
    };
    _useEventListenerDefault.default(_react.useCallback(()=>window.document
    , [
        window
    ]), 'keydown', (event)=>{
        var _menuRef$current, _toggleRef$current;
        const { key  } = event;
        const target = event.target;
        const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);
        const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400
        // in inscrutability
        const isInput = /input|textarea/i.test(target.tagName);
        if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) return;
        if (!fromMenu && !fromToggle) return;
        if (key === 'Tab' && (!menuRef.current || !show)) return;
        lastSourceEvent.current = event.type;
        const meta = {
            originalEvent: event,
            source: event.type
        };
        switch(key){
            case 'ArrowUp':
                {
                    const next = getNextFocusedChild(target, -1);
                    if (next && next.focus) next.focus();
                    event.preventDefault();
                    return;
                }
            case 'ArrowDown':
                event.preventDefault();
                if (!show) onToggle(true, meta);
                else {
                    const next = getNextFocusedChild(target, 1);
                    if (next && next.focus) next.focus();
                }
                return;
            case 'Tab':
                // on keydown the target is the element being tabbed FROM, we need that
                // to know if this event is relevant to this dropdown (e.g. in this menu).
                // On `keyup` the target is the element being tagged TO which we use to check
                // if focus has left the menu
                _addEventListenerDefault.default(target.ownerDocument, 'keyup', (e)=>{
                    var _menuRef$current2;
                    if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) onToggle(false, meta);
                }, {
                    once: true
                });
                break;
            case 'Escape':
                if (key === 'Escape') {
                    event.preventDefault();
                    event.stopPropagation();
                }
                onToggle(false, meta);
                break;
            default:
        }
    });
    return(/*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
        value: handleSelect,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_dropdownContextDefault.default.Provider, {
            value: context,
            children: children
        })
    }));
}
Dropdown.displayName = 'Dropdown';
Dropdown.Menu = _dropdownMenuDefault.default;
Dropdown.Toggle = _dropdownToggleDefault.default;
Dropdown.Item = _dropdownItemDefault.default;
exports.default = Dropdown;

},{"dom-helpers/querySelectorAll":"6tNC8","dom-helpers/addEventListener":"kM7Ny","react":"4mchR","uncontrollable":"aG99Z","@restart/hooks/usePrevious":"6phQk","@restart/hooks/useForceUpdate":"jhYj4","@restart/hooks/useEventListener":"eRR4h","@restart/hooks/useEventCallback":"8QyIg","./DropdownContext":"5UG3w","./DropdownMenu":"70HyH","./DropdownToggle":"2VtXp","./DropdownItem":"kWtLf","./SelectableContext":"6DoIj","./DataKey":"djk1E","./useWindow":"hC2jg","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6tNC8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
function qsa(element, selector) {
    return toArray(element.querySelectorAll(selector));
}
exports.default = qsa;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jhYj4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function useForceUpdate() {
    // The toggling state value is designed to defeat React optimizations for skipping
    // updates when they are stricting equal to the last state value
    var _useReducer = _react.useReducer(function(state) {
        return !state;
    }, false), dispatch = _useReducer[1];
    return dispatch;
}
exports.default = useForceUpdate;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5UG3w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const DropdownContext = /*#__PURE__*/ _react.createContext(null);
exports.default = DropdownContext;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"70HyH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @memberOf Dropdown
 * @param {object}  options
 * @param {boolean} options.flip Automatically adjust the menu `drop` position based on viewport edge detection
 * @param {[number, number]} options.offset Define an offset distance between the Menu and the Toggle
 * @param {boolean} options.show Display the menu manually, ignored in the context of a `Dropdown`
 * @param {boolean} options.usePopper opt in/out of using PopperJS to position menus. When disabled you must position it yourself.
 * @param {string}  options.rootCloseEvent The pointer event to listen for when determining "clicks outside" the menu for triggering a close.
 * @param {object}  options.popperConfig Options passed to the [`usePopper`](/api/usePopper) hook.
 */ parcelHelpers.export(exports, "useDropdownMenu", ()=>useDropdownMenu
);
var _react = require("react");
var _useCallbackRef = require("@restart/hooks/useCallbackRef");
var _useCallbackRefDefault = parcelHelpers.interopDefault(_useCallbackRef);
var _dropdownContext = require("./DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _usePopper = require("./usePopper");
var _usePopperDefault = parcelHelpers.interopDefault(_usePopper);
var _useRootClose = require("./useRootClose");
var _useRootCloseDefault = parcelHelpers.interopDefault(_useRootClose);
var _mergeOptionsWithPopperConfig = require("./mergeOptionsWithPopperConfig");
var _mergeOptionsWithPopperConfigDefault = parcelHelpers.interopDefault(_mergeOptionsWithPopperConfig);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "children"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const noop = ()=>{
};
function useDropdownMenu(options = {
}) {
    const context = _react.useContext(_dropdownContextDefault.default);
    const [arrowElement, attachArrowRef] = _useCallbackRefDefault.default();
    const hasShownRef = _react.useRef(false);
    const { flip , offset , rootCloseEvent , fixed =false , placement: placementOverride , popperConfig ={
    } , enableEventListeners =true , usePopper: shouldUsePopper = !!context  } = options;
    const show = (context == null ? void 0 : context.show) == null ? !!options.show : context.show;
    if (show && !hasShownRef.current) hasShownRef.current = true;
    const handleClose = (e)=>{
        context == null || context.toggle(false, e);
    };
    const { placement , setMenu , menuElement , toggleElement  } = context || {
    };
    const popper = _usePopperDefault.default(toggleElement, menuElement, _mergeOptionsWithPopperConfigDefault.default({
        placement: placementOverride || placement || 'bottom-start',
        enabled: shouldUsePopper,
        enableEvents: enableEventListeners == null ? show : enableEventListeners,
        offset,
        flip,
        fixed,
        arrowElement,
        popperConfig
    }));
    const menuProps = Object.assign({
        ref: setMenu || noop,
        'aria-labelledby': toggleElement == null ? void 0 : toggleElement.id
    }, popper.attributes.popper, {
        style: popper.styles.popper
    });
    const metadata = {
        show,
        placement,
        hasShown: hasShownRef.current,
        toggle: context == null ? void 0 : context.toggle,
        popper: shouldUsePopper ? popper : null,
        arrowProps: shouldUsePopper ? Object.assign({
            ref: attachArrowRef
        }, popper.attributes.arrow, {
            style: popper.styles.arrow
        }) : {
        }
    };
    _useRootCloseDefault.default(menuElement, handleClose, {
        clickTrigger: rootCloseEvent,
        disabled: !show
    });
    return [
        menuProps,
        metadata
    ];
}
const defaultProps = {
    usePopper: true
};
/**
 * Also exported as `<Dropdown.Menu>` from `Dropdown`.
 *
 * @displayName DropdownMenu
 * @memberOf Dropdown
 */ function DropdownMenu(_ref) {
    let { children  } = _ref, options = _objectWithoutPropertiesLoose(_ref, _excluded);
    const [props, meta] = useDropdownMenu(options);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_jsxRuntime.Fragment, {
        children: children(props, meta)
    }));
}
DropdownMenu.displayName = 'DropdownMenu';
DropdownMenu.defaultProps = defaultProps;
exports.default = DropdownMenu;

},{"react":"4mchR","@restart/hooks/useCallbackRef":"4MRqx","./DropdownContext":"5UG3w","./usePopper":"608P5","./useRootClose":"gFxBS","./mergeOptionsWithPopperConfig":"4lnJO","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"608P5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _dequal = require("dequal");
var _useSafeState = require("@restart/hooks/useSafeState");
var _useSafeStateDefault = parcelHelpers.interopDefault(_useSafeState);
var _popper = require("./popper");
const _excluded = [
    "enabled",
    "placement",
    "strategy",
    "modifiers"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const disabledApplyStylesModifier = {
    name: 'applyStyles',
    enabled: false,
    phase: 'afterWrite',
    fn: ()=>undefined
}; // until docjs supports type exports...
const ariaDescribedByModifier = {
    name: 'ariaDescribedBy',
    enabled: true,
    phase: 'afterWrite',
    effect: ({ state  })=>()=>{
            const { reference , popper  } = state.elements;
            if ('removeAttribute' in reference) {
                const ids = (reference.getAttribute('aria-describedby') || '').split(',').filter((id)=>id.trim() !== popper.id
                );
                if (!ids.length) reference.removeAttribute('aria-describedby');
                else reference.setAttribute('aria-describedby', ids.join(','));
            }
        }
    ,
    fn: ({ state  })=>{
        var _popper$getAttribute;
        const { popper , reference  } = state.elements;
        const role = (_popper$getAttribute = popper.getAttribute('role')) == null ? void 0 : _popper$getAttribute.toLowerCase();
        if (popper.id && role === 'tooltip' && 'setAttribute' in reference) {
            const ids = reference.getAttribute('aria-describedby');
            if (ids && ids.split(',').indexOf(popper.id) !== -1) return;
            reference.setAttribute('aria-describedby', ids ? `${ids},${popper.id}` : popper.id);
        }
    }
};
const EMPTY_MODIFIERS = [];
/**
 * Position an element relative some reference element using Popper.js
 *
 * @param referenceElement
 * @param popperElement
 * @param {object}      options
 * @param {object=}     options.modifiers Popper.js modifiers
 * @param {boolean=}    options.enabled toggle the popper functionality on/off
 * @param {string=}     options.placement The popper element placement relative to the reference element
 * @param {string=}     options.strategy the positioning strategy
 * @param {function=}   options.onCreate called when the popper is created
 * @param {function=}   options.onUpdate called when the popper is updated
 *
 * @returns {UsePopperState} The popper state
 */ function usePopper(referenceElement, popperElement, _ref = {
}) {
    let { enabled =true , placement ='bottom' , strategy ='absolute' , modifiers =EMPTY_MODIFIERS  } = _ref, config = _objectWithoutPropertiesLoose(_ref, _excluded);
    const prevModifiers = _react.useRef(modifiers);
    const popperInstanceRef = _react.useRef();
    const update = _react.useCallback(()=>{
        var _popperInstanceRef$cu;
        (_popperInstanceRef$cu = popperInstanceRef.current) == null || _popperInstanceRef$cu.update();
    }, []);
    const forceUpdate = _react.useCallback(()=>{
        var _popperInstanceRef$cu2;
        (_popperInstanceRef$cu2 = popperInstanceRef.current) == null || _popperInstanceRef$cu2.forceUpdate();
    }, []);
    const [popperState, setState] = _useSafeStateDefault.default(_react.useState({
        placement,
        update,
        forceUpdate,
        attributes: {
        },
        styles: {
            popper: {
            },
            arrow: {
            }
        }
    }));
    const updateModifier = _react.useMemo(()=>({
            name: 'updateStateModifier',
            enabled: true,
            phase: 'write',
            requires: [
                'computeStyles'
            ],
            fn: ({ state  })=>{
                const styles = {
                };
                const attributes = {
                };
                Object.keys(state.elements).forEach((element)=>{
                    styles[element] = state.styles[element];
                    attributes[element] = state.attributes[element];
                });
                setState({
                    state,
                    styles,
                    attributes,
                    update,
                    forceUpdate,
                    placement: state.placement
                });
            }
        })
    , [
        update,
        forceUpdate,
        setState
    ]);
    const nextModifiers = _react.useMemo(()=>{
        if (!_dequal.dequal(prevModifiers.current, modifiers)) prevModifiers.current = modifiers;
        return prevModifiers.current;
    }, [
        modifiers
    ]);
    _react.useEffect(()=>{
        if (!popperInstanceRef.current || !enabled) return;
        popperInstanceRef.current.setOptions({
            placement,
            strategy,
            modifiers: [
                ...nextModifiers,
                updateModifier,
                disabledApplyStylesModifier
            ]
        });
    }, [
        strategy,
        placement,
        updateModifier,
        enabled,
        nextModifiers
    ]);
    _react.useEffect(()=>{
        if (!enabled || referenceElement == null || popperElement == null) return undefined;
        popperInstanceRef.current = _popper.createPopper(referenceElement, popperElement, Object.assign({
        }, config, {
            placement,
            strategy,
            modifiers: [
                ...nextModifiers,
                ariaDescribedByModifier,
                updateModifier
            ]
        }));
        return ()=>{
            if (popperInstanceRef.current != null) {
                popperInstanceRef.current.destroy();
                popperInstanceRef.current = undefined;
                setState((s)=>Object.assign({
                    }, s, {
                        attributes: {
                        },
                        styles: {
                            popper: {
                            }
                        }
                    })
                );
            }
        }; // This is only run once to _create_ the popper
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        enabled,
        referenceElement,
        popperElement
    ]);
    return popperState;
}
exports.default = usePopper;

},{"react":"4mchR","dequal":"8VXAH","@restart/hooks/useSafeState":"6gogv","./popper":"3vCF1","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8VXAH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dequal", ()=>dequal
);
var has = Object.prototype.hasOwnProperty;
function find(iter, tar, key) {
    for (key of iter.keys()){
        if (dequal(key, tar)) return key;
    }
}
function dequal(foo, bar) {
    var ctor, len, tmp;
    if (foo === bar) return true;
    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
        if (ctor === Date) return foo.getTime() === bar.getTime();
        if (ctor === RegExp) return foo.toString() === bar.toString();
        if (ctor === Array) {
            if ((len = foo.length) === bar.length) {
                while(len-- && dequal(foo[len], bar[len]));
            }
            return len === -1;
        }
        if (ctor === Set) {
            if (foo.size !== bar.size) return false;
            for (len of foo){
                tmp = len;
                if (tmp && typeof tmp === 'object') {
                    tmp = find(bar, tmp);
                    if (!tmp) return false;
                }
                if (!bar.has(tmp)) return false;
            }
            return true;
        }
        if (ctor === Map) {
            if (foo.size !== bar.size) return false;
            for (len of foo){
                tmp = len[0];
                if (tmp && typeof tmp === 'object') {
                    tmp = find(bar, tmp);
                    if (!tmp) return false;
                }
                if (!dequal(len[1], bar.get(tmp))) return false;
            }
            return true;
        }
        if (ctor === ArrayBuffer) {
            foo = new Uint8Array(foo);
            bar = new Uint8Array(bar);
        } else if (ctor === DataView) {
            if ((len = foo.byteLength) === bar.byteLength) {
                while((len--) && foo.getInt8(len) === bar.getInt8(len));
            }
            return len === -1;
        }
        if (ArrayBuffer.isView(foo)) {
            if ((len = foo.byteLength) === bar.byteLength) {
                while((len--) && foo[len] === bar[len]);
            }
            return len === -1;
        }
        if (!ctor || typeof foo === 'object') {
            len = 0;
            for(ctor in foo){
                if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
                if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
            }
            return Object.keys(bar).length === len;
        }
    }
    return foo !== foo && bar !== bar;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6gogv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useMounted = require("./useMounted");
var _useMountedDefault = parcelHelpers.interopDefault(_useMounted);
function useSafeState(state) {
    var isMounted = _useMountedDefault.default();
    return [
        state[0],
        _react.useCallback(function(nextState) {
            if (!isMounted()) return;
            return state[1](nextState);
        }, [
            isMounted,
            state[1]
        ])
    ];
}
exports.default = useSafeState;

},{"react":"4mchR","./useMounted":"lesmc","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3vCF1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopper", ()=>createPopper
);
parcelHelpers.export(exports, "placements", ()=>_enums.placements
);
var _arrow = require("@popperjs/core/lib/modifiers/arrow");
var _arrowDefault = parcelHelpers.interopDefault(_arrow);
var _computeStyles = require("@popperjs/core/lib/modifiers/computeStyles");
var _computeStylesDefault = parcelHelpers.interopDefault(_computeStyles);
var _eventListeners = require("@popperjs/core/lib/modifiers/eventListeners");
var _eventListenersDefault = parcelHelpers.interopDefault(_eventListeners);
var _flip = require("@popperjs/core/lib/modifiers/flip");
var _flipDefault = parcelHelpers.interopDefault(_flip);
var _hide = require("@popperjs/core/lib/modifiers/hide");
var _hideDefault = parcelHelpers.interopDefault(_hide);
var _offset = require("@popperjs/core/lib/modifiers/offset");
var _offsetDefault = parcelHelpers.interopDefault(_offset);
var _popperOffsets = require("@popperjs/core/lib/modifiers/popperOffsets");
var _popperOffsetsDefault = parcelHelpers.interopDefault(_popperOffsets);
var _preventOverflow = require("@popperjs/core/lib/modifiers/preventOverflow");
var _preventOverflowDefault = parcelHelpers.interopDefault(_preventOverflow);
var _enums = require("@popperjs/core/lib/enums");
var _popperBase = require("@popperjs/core/lib/popper-base"); // For the common JS build we will turn this file into a bundle with no imports.
const createPopper = _popperBase.popperGenerator({
    defaultModifiers: [
        _hideDefault.default,
        _popperOffsetsDefault.default,
        _computeStylesDefault.default,
        _eventListenersDefault.default,
        _offsetDefault.default,
        _flipDefault.default,
        _preventOverflowDefault.default,
        _arrowDefault.default
    ]
});

},{"@popperjs/core/lib/modifiers/arrow":"aFbbE","@popperjs/core/lib/modifiers/computeStyles":"jb5QZ","@popperjs/core/lib/modifiers/eventListeners":"6Xsje","@popperjs/core/lib/modifiers/flip":"6hQNA","@popperjs/core/lib/modifiers/hide":"1tv8l","@popperjs/core/lib/modifiers/offset":"228UQ","@popperjs/core/lib/modifiers/popperOffsets":"I1CrS","@popperjs/core/lib/modifiers/preventOverflow":"iquIt","@popperjs/core/lib/enums":"jZp3w","@popperjs/core/lib/popper-base":"68ueK","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aFbbE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _containsJs = require("../dom-utils/contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _withinJs = require("../utils/within.js");
var _mergePaddingObjectJs = require("../utils/mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("../utils/expandToHashMap.js");
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // eslint-disable-next-line import/no-unused-modules
var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({
    }, state.rects, {
        placement: state.placement
    })) : padding;
    return _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = _getBasePlacementJsDefault.default(state.placement);
    var axis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
    var isVertical = [
        _enumsJs.left,
        _enumsJs.right
    ].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) return;
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = _getLayoutRectJsDefault.default(arrowElement);
    var minProp = axis === 'y' ? _enumsJs.top : _enumsJs.left;
    var maxProp = axis === 'y' ? _enumsJs.bottom : _enumsJs.right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = _getOffsetParentJsDefault.default(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = _withinJs.within(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {
    }, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) return;
     // CSS selector
    if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!_instanceOfJs.isHTMLElement(arrowElement)) console.error([
        'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
        'To use an SVG arrow, wrap it in an HTMLElement that will be used as',
        'the arrow.'
    ].join(' '));
    if (!_containsJsDefault.default(state.elements.popper, arrowElement)) {
        console.error([
            'Popper: "arrow" modifier\'s `element` must be a child of the popper',
            'element.'
        ].join(' '));
        return;
    }
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: [
        'popperOffsets'
    ],
    requiresIfExists: [
        'preventOverflow'
    ]
};

},{"../utils/getBasePlacement.js":"c2UOX","../dom-utils/getLayoutRect.js":"3QcLC","../dom-utils/contains.js":"c5XYO","../dom-utils/getOffsetParent.js":"cEO6a","../utils/getMainAxisFromPlacement.js":"bDf0O","../utils/within.js":"91duw","../utils/mergePaddingObject.js":"h6lM0","../utils/expandToHashMap.js":"fPt6e","../enums.js":"jZp3w","../dom-utils/instanceOf.js":"fKIgP","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"c2UOX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
function getBasePlacement(placement) {
    return placement.split('-')[0];
}
exports.default = getBasePlacement;

},{"../enums.js":"jZp3w","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jZp3w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "top", ()=>top
);
parcelHelpers.export(exports, "bottom", ()=>bottom
);
parcelHelpers.export(exports, "right", ()=>right
);
parcelHelpers.export(exports, "left", ()=>left
);
parcelHelpers.export(exports, "auto", ()=>auto
);
parcelHelpers.export(exports, "basePlacements", ()=>basePlacements
);
parcelHelpers.export(exports, "start", ()=>start
);
parcelHelpers.export(exports, "end", ()=>end
);
parcelHelpers.export(exports, "clippingParents", ()=>clippingParents
);
parcelHelpers.export(exports, "viewport", ()=>viewport
);
parcelHelpers.export(exports, "popper", ()=>popper
);
parcelHelpers.export(exports, "reference", ()=>reference
);
parcelHelpers.export(exports, "variationPlacements", ()=>variationPlacements
);
parcelHelpers.export(exports, "placements", ()=>placements
);
parcelHelpers.export(exports, "beforeRead", ()=>beforeRead
);
parcelHelpers.export(exports, "read", ()=>read
);
parcelHelpers.export(exports, "afterRead", ()=>afterRead
);
parcelHelpers.export(exports, "beforeMain", ()=>beforeMain
);
parcelHelpers.export(exports, "main", ()=>main
);
parcelHelpers.export(exports, "afterMain", ()=>afterMain
);
parcelHelpers.export(exports, "beforeWrite", ()=>beforeWrite
);
parcelHelpers.export(exports, "write", ()=>write
);
parcelHelpers.export(exports, "afterWrite", ()=>afterWrite
);
parcelHelpers.export(exports, "modifierPhases", ()=>modifierPhases
);
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []); // modifiers that need to read the DOM
var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers
var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3QcLC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js"); // Returns the layout rect of an element relative to its offsetParent. Layout
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
function getLayoutRect(element) {
    var clientRect = _getBoundingClientRectJsDefault.default(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
    if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}
exports.default = getLayoutRect;

},{"./getBoundingClientRect.js":"ey7tS","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ey7tS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
var _mathJs = require("../utils/math.js");
function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) includeScale = false;
    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (_instanceOfJs.isHTMLElement(element) && includeScale) {
        var offsetHeight = element.offsetHeight;
        var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
        // Fallback to 1 in case both values are `0`
        if (offsetWidth > 0) scaleX = _mathJs.round(rect.width) / offsetWidth || 1;
        if (offsetHeight > 0) scaleY = _mathJs.round(rect.height) / offsetHeight || 1;
    }
    return {
        width: rect.width / scaleX,
        height: rect.height / scaleY,
        top: rect.top / scaleY,
        right: rect.right / scaleX,
        bottom: rect.bottom / scaleY,
        left: rect.left / scaleX,
        x: rect.left / scaleX,
        y: rect.top / scaleY
    };
}
exports.default = getBoundingClientRect;

},{"./instanceOf.js":"fKIgP","../utils/math.js":"fL6pm","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fKIgP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isElement", ()=>isElement
);
parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement
);
parcelHelpers.export(exports, "isShadowRoot", ()=>isShadowRoot
);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function isElement(node) {
    var OwnElement = _getWindowJsDefault.default(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = _getWindowJsDefault.default(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') return false;
    var OwnElement = _getWindowJsDefault.default(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}

},{"./getWindow.js":"htzDW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"htzDW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getWindow(node) {
    if (node == null) return window;
    if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}
exports.default = getWindow;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fL6pm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "min", ()=>min
);
parcelHelpers.export(exports, "round", ()=>round
);
var max = Math.max;
var min = Math.min;
var round = Math.round;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"c5XYO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) return true;
    else if (rootNode && _instanceOfJs.isShadowRoot(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
             // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        }while (next)
    } // Give up, the result is false
    return false;
}
exports.default = contains;

},{"./instanceOf.js":"fKIgP","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cEO6a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _isTableElementJs = require("./isTableElement.js");
var _isTableElementJsDefault = parcelHelpers.interopDefault(_isTableElementJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
function getTrueOffsetParent(element) {
    if (!_instanceOfJs.isHTMLElement(element) || _getComputedStyleJsDefault.default(element).position === 'fixed') return null;
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
    var isIE = navigator.userAgent.indexOf('Trident') !== -1;
    if (isIE && _instanceOfJs.isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = _getComputedStyleJsDefault.default(element);
        if (elementCss.position === 'fixed') return null;
    }
    var currentNode = _getParentNodeJsDefault.default(element);
    while(_instanceOfJs.isHTMLElement(currentNode) && [
        'html',
        'body'
    ].indexOf(_getNodeNameJsDefault.default(currentNode)) < 0){
        var css = _getComputedStyleJsDefault.default(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || [
            'transform',
            'perspective'
        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
function getOffsetParent(element) {
    var window = _getWindowJsDefault.default(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && _isTableElementJsDefault.default(offsetParent) && _getComputedStyleJsDefault.default(offsetParent).position === 'static')offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && (_getNodeNameJsDefault.default(offsetParent) === 'html' || _getNodeNameJsDefault.default(offsetParent) === 'body' && _getComputedStyleJsDefault.default(offsetParent).position === 'static')) return window;
    return offsetParent || getContainingBlock(element) || window;
}
exports.default = getOffsetParent;

},{"./getWindow.js":"htzDW","./getNodeName.js":"6JAN3","./getComputedStyle.js":"daHn5","./instanceOf.js":"fKIgP","./isTableElement.js":"lzjUw","./getParentNode.js":"alOJj","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6JAN3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
}
exports.default = getNodeName;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"daHn5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getComputedStyle(element) {
    return _getWindowJsDefault.default(element).getComputedStyle(element);
}
exports.default = getComputedStyle;

},{"./getWindow.js":"htzDW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lzjUw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
function isTableElement(element) {
    return [
        'table',
        'td',
        'th'
    ].indexOf(_getNodeNameJsDefault.default(element)) >= 0;
}
exports.default = isTableElement;

},{"./getNodeName.js":"6JAN3","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"alOJj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _instanceOfJs = require("./instanceOf.js");
function getParentNode(element) {
    if (_getNodeNameJsDefault.default(element) === 'html') return element;
    return(// $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || element.parentNode || (_instanceOfJs.isShadowRoot(element) ? element.host : null) || // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    _getDocumentElementJsDefault.default(element) // fallback
    );
}
exports.default = getParentNode;

},{"./getNodeName.js":"6JAN3","./getDocumentElement.js":"eJuqT","./instanceOf.js":"fKIgP","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eJuqT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _instanceOfJs = require("./instanceOf.js");
function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((_instanceOfJs.isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}
exports.default = getDocumentElement;

},{"./instanceOf.js":"fKIgP","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bDf0O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getMainAxisFromPlacement(placement) {
    return [
        'top',
        'bottom'
    ].indexOf(placement) >= 0 ? 'x' : 'y';
}
exports.default = getMainAxisFromPlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"91duw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "within", ()=>within
);
parcelHelpers.export(exports, "withinMaxClamp", ()=>withinMaxClamp
);
var _mathJs = require("./math.js");
function within(min, value, max) {
    return _mathJs.max(min, _mathJs.min(value, max));
}
function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
}

},{"./math.js":"fL6pm","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"h6lM0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getFreshSideObjectJs = require("./getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
function mergePaddingObject(paddingObject) {
    return Object.assign({
    }, _getFreshSideObjectJsDefault.default(), paddingObject);
}
exports.default = mergePaddingObject;

},{"./getFreshSideObject.js":"73NUq","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"73NUq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}
exports.default = getFreshSideObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fPt6e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {
    });
}
exports.default = expandToHashMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jb5QZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapToStyles", ()=>mapToStyles
);
var _enumsJs = require("../enums.js");
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getWindowJs = require("../dom-utils/getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("../dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _mathJs = require("../utils/math.js"); // eslint-disable-next-line import/no-unused-modules
var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR(_ref) {
    var x = _ref.x, y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: _mathJs.round(x * dpr) / dpr || 0,
        y: _mathJs.round(y * dpr) / dpr || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets, _ref3$x = _ref3.x, x = _ref3$x === void 0 ? 0 : _ref3$x, _ref3$y = _ref3.y, y = _ref3$y === void 0 ? 0 : _ref3$y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = _enumsJs.left;
    var sideY = _enumsJs.top;
    var win = window;
    if (adaptive) {
        var offsetParent = _getOffsetParentJsDefault.default(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';
        if (offsetParent === _getWindowJsDefault.default(popper)) {
            offsetParent = _getDocumentElementJsDefault.default(popper);
            if (_getComputedStyleJsDefault.default(offsetParent).position !== 'static' && position === 'absolute') {
                heightProp = 'scrollHeight';
                widthProp = 'scrollWidth';
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        if (placement === _enumsJs.top || (placement === _enumsJs.left || placement === _enumsJs.right) && variation === _enumsJs.end) {
            sideY = _enumsJs.bottom;
            var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === _enumsJs.left || (placement === _enumsJs.top || placement === _enumsJs.bottom) && variation === _enumsJs.end) {
            sideX = _enumsJs.right;
            var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({
        }, commonStyles, (_Object$assign = {
        }, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({
    }, commonStyles, (_Object$assign2 = {
    }, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles(_ref4) {
    var state = _ref4.state, options = _ref4.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var transitionProperty = _getComputedStyleJsDefault.default(state.elements.popper).transitionProperty || '';
    if (adaptive && [
        'transform',
        'top',
        'right',
        'bottom',
        'left'
    ].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
    })) console.warn([
        'Popper: Detected CSS transitions on at least one of the following',
        'CSS properties: "transform", "top", "right", "bottom", "left".',
        '\n\n',
        'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
        'for smooth transitions, or remove these properties from the CSS',
        'transition declaration on the popper element if only transitioning',
        'opacity or background-color for example.',
        '\n\n',
        'We recommend using the popper element as a wrapper around an inner',
        'element that can have any CSS property transitioned for animations.'
    ].join(' '));
    var commonStyles = {
        placement: _getBasePlacementJsDefault.default(state.placement),
        variation: _getVariationJsDefault.default(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({
    }, state.styles.popper, mapToStyles(Object.assign({
    }, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({
    }, state.styles.arrow, mapToStyles(Object.assign({
    }, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
    })));
    state.attributes.popper = Object.assign({
    }, state.attributes.popper, {
        'data-popper-placement': state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {
    }
};

},{"../enums.js":"jZp3w","../dom-utils/getOffsetParent.js":"cEO6a","../dom-utils/getWindow.js":"htzDW","../dom-utils/getDocumentElement.js":"eJuqT","../dom-utils/getComputedStyle.js":"daHn5","../utils/getBasePlacement.js":"c2UOX","../utils/getVariation.js":"f9eYT","../utils/math.js":"fL6pm","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"f9eYT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getVariation(placement) {
    return placement.split('-')[1];
}
exports.default = getVariation;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6Xsje":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("../dom-utils/getWindow.js"); // eslint-disable-next-line import/no-unused-modules
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = _getWindowJsDefault.default(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
    });
    if (resize) window.addEventListener('resize', instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
        });
        if (resize) window.removeEventListener('resize', instance.update, passive);
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {
    },
    effect: effect,
    data: {
    }
};

},{"../dom-utils/getWindow.js":"htzDW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6hQNA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getOppositePlacementJs = require("../utils/getOppositePlacement.js");
var _getOppositePlacementJsDefault = parcelHelpers.interopDefault(_getOppositePlacementJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getOppositeVariationPlacementJs = require("../utils/getOppositeVariationPlacement.js");
var _getOppositeVariationPlacementJsDefault = parcelHelpers.interopDefault(_getOppositeVariationPlacementJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _computeAutoPlacementJs = require("../utils/computeAutoPlacement.js");
var _computeAutoPlacementJsDefault = parcelHelpers.interopDefault(_computeAutoPlacementJs);
var _enumsJs = require("../enums.js");
var _getVariationJs = require("../utils/getVariation.js"); // eslint-disable-next-line import/no-unused-modules
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
function getExpandedFallbackPlacements(placement) {
    if (_getBasePlacementJsDefault.default(placement) === _enumsJs.auto) return [];
    var oppositePlacement = _getOppositePlacementJsDefault.default(placement);
    return [
        _getOppositeVariationPlacementJsDefault.default(placement),
        oppositePlacement,
        _getOppositeVariationPlacementJsDefault.default(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = _getBasePlacementJsDefault.default(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        _getOppositePlacementJsDefault.default(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement) {
        return acc.concat(_getBasePlacementJsDefault.default(placement) === _enumsJs.auto ? _computeAutoPlacementJsDefault.default(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for(var i = 0; i < placements.length; i++){
        var placement1 = placements[i];
        var _basePlacement = _getBasePlacementJsDefault.default(placement1);
        var isStartVariation = _getVariationJsDefault.default(placement1) === _enumsJs.start;
        var isVertical = [
            _enumsJs.top,
            _enumsJs.bottom
        ].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = _detectOverflowJsDefault.default(state, {
            placement: placement1,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? _enumsJs.right : _enumsJs.left : isStartVariation ? _enumsJs.bottom : _enumsJs.top;
        if (referenceRect[len] > popperRect[len]) mainVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
        var altVariationSide = _getOppositePlacementJsDefault.default(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement1;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement1, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function(placement) {
                var checks = checksMap.get(placement);
                if (checks) return checks.slice(0, _i).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i1 = numberOfChecks; _i1 > 0; _i1--){
            var _ret = _loop(_i1);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: [
        'offset'
    ],
    data: {
        _skip: false
    }
};

},{"../utils/getOppositePlacement.js":"8FB8g","../utils/getBasePlacement.js":"c2UOX","../utils/getOppositeVariationPlacement.js":"j1zX8","../utils/detectOverflow.js":"crSQf","../utils/computeAutoPlacement.js":"8qqHW","../enums.js":"jZp3w","../utils/getVariation.js":"f9eYT","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8FB8g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
    });
}
exports.default = getOppositePlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"j1zX8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var hash = {
    start: 'end',
    end: 'start'
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
    });
}
exports.default = getOppositeVariationPlacement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"crSQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getClippingRectJs = require("../dom-utils/getClippingRect.js");
var _getClippingRectJsDefault = parcelHelpers.interopDefault(_getClippingRectJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getBoundingClientRectJs = require("../dom-utils/getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _computeOffsetsJs = require("./computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
var _rectToClientRectJs = require("./rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js");
var _mergePaddingObjectJs = require("./mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("./expandToHashMap.js"); // eslint-disable-next-line import/no-unused-modules
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
function detectOverflow(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? _enumsJs.clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? _enumsJs.viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? _enumsJs.popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = _mergePaddingObjectJsDefault.default(typeof padding !== 'number' ? padding : _expandToHashMapJsDefault.default(padding, _enumsJs.basePlacements));
    var altContext = elementContext === _enumsJs.popper ? _enumsJs.reference : _enumsJs.popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = _getClippingRectJsDefault.default(_instanceOfJs.isElement(element) ? element : element.contextElement || _getDocumentElementJsDefault.default(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = _getBoundingClientRectJsDefault.default(state.elements.reference);
    var popperOffsets = _computeOffsetsJsDefault.default({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
    });
    var popperClientRect = _rectToClientRectJsDefault.default(Object.assign({
    }, popperRect, popperOffsets));
    var elementClientRect = elementContext === _enumsJs.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === _enumsJs.popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [
                _enumsJs.right,
                _enumsJs.bottom
            ].indexOf(key) >= 0 ? 1 : -1;
            var axis = [
                _enumsJs.top,
                _enumsJs.bottom
            ].indexOf(key) >= 0 ? 'y' : 'x';
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}
exports.default = detectOverflow;

},{"../dom-utils/getClippingRect.js":"5k2MU","../dom-utils/getDocumentElement.js":"eJuqT","../dom-utils/getBoundingClientRect.js":"ey7tS","./computeOffsets.js":"4rK4R","./rectToClientRect.js":"aZgXm","../enums.js":"jZp3w","../dom-utils/instanceOf.js":"fKIgP","./mergePaddingObject.js":"h6lM0","./expandToHashMap.js":"fPt6e","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5k2MU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getViewportRectJs = require("./getViewportRect.js");
var _getViewportRectJsDefault = parcelHelpers.interopDefault(_getViewportRectJs);
var _getDocumentRectJs = require("./getDocumentRect.js");
var _getDocumentRectJsDefault = parcelHelpers.interopDefault(_getDocumentRectJs);
var _listScrollParentsJs = require("./listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _rectToClientRectJs = require("../utils/rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _mathJs = require("../utils/math.js");
function getInnerBoundingClientRect(element) {
    var rect = _getBoundingClientRectJsDefault.default(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === _enumsJs.viewport ? _rectToClientRectJsDefault.default(_getViewportRectJsDefault.default(element)) : _instanceOfJs.isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : _rectToClientRectJsDefault.default(_getDocumentRectJsDefault.default(_getDocumentElementJsDefault.default(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents = _listScrollParentsJsDefault.default(_getParentNodeJsDefault.default(element));
    var canEscapeClipping = [
        'absolute',
        'fixed'
    ].indexOf(_getComputedStyleJsDefault.default(element).position) >= 0;
    var clipperElement = canEscapeClipping && _instanceOfJs.isHTMLElement(element) ? _getOffsetParentJsDefault.default(element) : element;
    if (!_instanceOfJs.isElement(clipperElement)) return [];
     // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function(clippingParent) {
        return _instanceOfJs.isElement(clippingParent) && _containsJsDefault.default(clippingParent, clipperElement) && _getNodeNameJsDefault.default(clippingParent) !== 'body' && (canEscapeClipping ? _getComputedStyleJsDefault.default(clippingParent).position !== 'static' : true);
    });
} // Gets the maximum area that the element is visible in due to any number of
function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = _mathJs.max(rect.top, accRect.top);
        accRect.right = _mathJs.min(rect.right, accRect.right);
        accRect.bottom = _mathJs.min(rect.bottom, accRect.bottom);
        accRect.left = _mathJs.max(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}
exports.default = getClippingRect;

},{"../enums.js":"jZp3w","./getViewportRect.js":"9whPD","./getDocumentRect.js":"e3m4U","./listScrollParents.js":"h9LnN","./getOffsetParent.js":"cEO6a","./getDocumentElement.js":"eJuqT","./getComputedStyle.js":"daHn5","./instanceOf.js":"fKIgP","./getBoundingClientRect.js":"ey7tS","./getParentNode.js":"alOJj","./contains.js":"c5XYO","./getNodeName.js":"6JAN3","../utils/rectToClientRect.js":"aZgXm","../utils/math.js":"fL6pm","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9whPD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
function getViewportRect(element) {
    var win = _getWindowJsDefault.default(element);
    var html = _getDocumentElementJsDefault.default(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent
        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + _getWindowScrollBarXJsDefault.default(element),
        y: y
    };
}
exports.default = getViewportRect;

},{"./getWindow.js":"htzDW","./getDocumentElement.js":"eJuqT","./getWindowScrollBarX.js":"3oin6","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3oin6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return _getBoundingClientRectJsDefault.default(_getDocumentElementJsDefault.default(element)).left + _getWindowScrollJsDefault.default(element).scrollLeft;
}
exports.default = getWindowScrollBarX;

},{"./getBoundingClientRect.js":"ey7tS","./getDocumentElement.js":"eJuqT","./getWindowScroll.js":"gZQL2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gZQL2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getWindowScroll(node) {
    var win = _getWindowJsDefault.default(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}
exports.default = getWindowScroll;

},{"./getWindow.js":"htzDW","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"e3m4U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _mathJs = require("../utils/math.js"); // Gets the entire size of the scrollable document area, even extending outside
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = _getDocumentElementJsDefault.default(element);
    var winScroll = _getWindowScrollJsDefault.default(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = _mathJs.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = _mathJs.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + _getWindowScrollBarXJsDefault.default(element);
    var y = -winScroll.scrollTop;
    if (_getComputedStyleJsDefault.default(body || html).direction === 'rtl') x += _mathJs.max(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}
exports.default = getDocumentRect;

},{"./getDocumentElement.js":"eJuqT","./getComputedStyle.js":"daHn5","./getWindowScrollBarX.js":"3oin6","./getWindowScroll.js":"gZQL2","../utils/math.js":"fL6pm","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"h9LnN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getScrollParentJs = require("./getScrollParent.js");
var _getScrollParentJsDefault = parcelHelpers.interopDefault(_getScrollParentJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) list = [];
    var scrollParent = _getScrollParentJsDefault.default(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = _getWindowJsDefault.default(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], _isScrollParentJsDefault.default(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(_getParentNodeJsDefault.default(target)));
}
exports.default = listScrollParents;

},{"./getScrollParent.js":"6KLmw","./getParentNode.js":"alOJj","./getWindow.js":"htzDW","./isScrollParent.js":"6o0f4","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6KLmw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
function getScrollParent(node) {
    if ([
        'html',
        'body',
        '#document'
    ].indexOf(_getNodeNameJsDefault.default(node)) >= 0) // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
    if (_instanceOfJs.isHTMLElement(node) && _isScrollParentJsDefault.default(node)) return node;
    return getScrollParent(_getParentNodeJsDefault.default(node));
}
exports.default = getScrollParent;

},{"./getParentNode.js":"alOJj","./isScrollParent.js":"6o0f4","./getNodeName.js":"6JAN3","./instanceOf.js":"fKIgP","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6o0f4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = _getComputedStyleJsDefault.default(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
exports.default = isScrollParent;

},{"./getComputedStyle.js":"daHn5","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aZgXm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function rectToClientRect(rect) {
    return Object.assign({
    }, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}
exports.default = rectToClientRect;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4rK4R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getMainAxisFromPlacementJs = require("./getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _enumsJs = require("../enums.js");
function computeOffsets(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? _getBasePlacementJsDefault.default(placement) : null;
    var variation = placement ? _getVariationJsDefault.default(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case _enumsJs.top:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case _enumsJs.bottom:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case _enumsJs.right:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case _enumsJs.left:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? _getMainAxisFromPlacementJsDefault.default(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';
        switch(variation){
            case _enumsJs.start:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case _enumsJs.end:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
            default:
        }
    }
    return offsets;
}
exports.default = computeOffsets;

},{"./getBasePlacement.js":"c2UOX","./getVariation.js":"f9eYT","./getMainAxisFromPlacement.js":"bDf0O","../enums.js":"jZp3w","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8qqHW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("./detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
function computeAutoPlacement(state, options) {
    if (options === void 0) options = {
    };
    var _options = options, placement1 = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enumsJs.placements : _options$allowedAutoP;
    var variation = _getVariationJsDefault.default(placement1);
    var placements = variation ? flipVariations ? _enumsJs.variationPlacements : _enumsJs.variationPlacements.filter(function(placement) {
        return _getVariationJsDefault.default(placement) === variation;
    }) : _enumsJs.basePlacements;
    var allowedPlacements = placements.filter(function(placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) {
        allowedPlacements = placements;
        console.error([
            'Popper: The `allowedAutoPlacements` option did not allow any',
            'placements. Ensure the `placement` option matches the variation',
            'of the allowed placements.',
            'For example, "auto" cannot be used to allow "bottom-start".',
            'Use "auto-start" instead.'
        ].join(' '));
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function(acc, placement) {
        acc[placement] = _detectOverflowJsDefault.default(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[_getBasePlacementJsDefault.default(placement)];
        return acc;
    }, {
    });
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}
exports.default = computeAutoPlacement;

},{"./getVariation.js":"f9eYT","../enums.js":"jZp3w","./detectOverflow.js":"crSQf","./getBasePlacement.js":"c2UOX","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1tv8l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) preventedOffsets = {
        x: 0,
        y: 0
    };
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [
        _enumsJs.top,
        _enumsJs.right,
        _enumsJs.bottom,
        _enumsJs.left
    ].some(function(side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = _detectOverflowJsDefault.default(state, {
        elementContext: 'reference'
    });
    var popperAltOverflow = _detectOverflowJsDefault.default(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({
    }, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: [
        'preventOverflow'
    ],
    fn: hide
};

},{"../enums.js":"jZp3w","../utils/detectOverflow.js":"crSQf","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"228UQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distanceAndSkiddingToXY", ()=>distanceAndSkiddingToXY
);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = _getBasePlacementJsDefault.default(placement);
    var invertDistance = [
        _enumsJs.left,
        _enumsJs.top
    ].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === 'function' ? offset(Object.assign({
    }, rects, {
        placement: placement
    })) : offset, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [
        _enumsJs.left,
        _enumsJs.right
    ].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset1(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = _enumsJs.placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
    }, {
    });
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: [
        'popperOffsets'
    ],
    fn: offset1
};

},{"../utils/getBasePlacement.js":"c2UOX","../enums.js":"jZp3w","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"I1CrS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _computeOffsetsJs = require("../utils/computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = _computeOffsetsJsDefault.default({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {
    }
};

},{"../utils/computeOffsets.js":"4rK4R","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iquIt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _getAltAxisJs = require("../utils/getAltAxis.js");
var _getAltAxisJsDefault = parcelHelpers.interopDefault(_getAltAxisJs);
var _withinJs = require("../utils/within.js");
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getFreshSideObjectJs = require("../utils/getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
var _mathJs = require("../utils/math.js");
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = _detectOverflowJsDefault.default(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = _getBasePlacementJsDefault.default(state.placement);
    var variation = _getVariationJsDefault.default(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = _getMainAxisFromPlacementJsDefault.default(basePlacement);
    var altAxis = _getAltAxisJsDefault.default(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({
    }, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
    } : Object.assign({
        mainAxis: 0,
        altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) return;
    if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === 'y' ? _enumsJs.top : _enumsJs.left;
        var altSide = mainAxis === 'y' ? _enumsJs.bottom : _enumsJs.right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min = offset + overflow[mainSide];
        var max = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === _enumsJs.start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === _enumsJs.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? _getLayoutRectJsDefault.default(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : _getFreshSideObjectJsDefault.default();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = _withinJs.within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && _getOffsetParentJsDefault.default(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = _withinJs.within(tether ? _mathJs.min(min, tetherMin) : min, offset, tether ? _mathJs.max(max, tetherMax) : max);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === 'x' ? _enumsJs.top : _enumsJs.left;
        var _altSide = mainAxis === 'x' ? _enumsJs.bottom : _enumsJs.right;
        var _offset = popperOffsets[altAxis];
        var _len = altAxis === 'y' ? 'height' : 'width';
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [
            _enumsJs.top,
            _enumsJs.left
        ].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? _withinJs.withinMaxClamp(_tetherMin, _offset, _tetherMax) : _withinJs.within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: [
        'offset'
    ]
};

},{"../enums.js":"jZp3w","../utils/getBasePlacement.js":"c2UOX","../utils/getMainAxisFromPlacement.js":"bDf0O","../utils/getAltAxis.js":"km1Cn","../utils/within.js":"91duw","../dom-utils/getLayoutRect.js":"3QcLC","../dom-utils/getOffsetParent.js":"cEO6a","../utils/detectOverflow.js":"crSQf","../utils/getVariation.js":"f9eYT","../utils/getFreshSideObject.js":"73NUq","../utils/math.js":"fL6pm","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"km1Cn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
}
exports.default = getAltAxis;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"68ueK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// eslint-disable-next-line import/no-unused-modules
parcelHelpers.export(exports, "createPopper", ()=>_createPopperJs.createPopper
);
parcelHelpers.export(exports, "popperGenerator", ()=>_createPopperJs.popperGenerator
);
parcelHelpers.export(exports, "detectOverflow", ()=>_createPopperJs.detectOverflow
);
var _createPopperJs = require("./createPopper.js");

},{"./createPopper.js":"6w8cU","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6w8cU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>popperGenerator
);
parcelHelpers.export(exports, "createPopper", ()=>createPopper
);
parcelHelpers.export(exports, "detectOverflow", ()=>_detectOverflowJsDefault.default
);
var _getCompositeRectJs = require("./dom-utils/getCompositeRect.js");
var _getCompositeRectJsDefault = parcelHelpers.interopDefault(_getCompositeRectJs);
var _getLayoutRectJs = require("./dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _listScrollParentsJs = require("./dom-utils/listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getComputedStyleJs = require("./dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _orderModifiersJs = require("./utils/orderModifiers.js");
var _orderModifiersJsDefault = parcelHelpers.interopDefault(_orderModifiersJs);
var _debounceJs = require("./utils/debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _validateModifiersJs = require("./utils/validateModifiers.js");
var _validateModifiersJsDefault = parcelHelpers.interopDefault(_validateModifiersJs);
var _uniqueByJs = require("./utils/uniqueBy.js");
var _uniqueByJsDefault = parcelHelpers.interopDefault(_uniqueByJs);
var _getBasePlacementJs = require("./utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _mergeByNameJs = require("./utils/mergeByName.js");
var _mergeByNameJsDefault = parcelHelpers.interopDefault(_mergeByNameJs);
var _detectOverflowJs = require("./utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _instanceOfJs = require("./dom-utils/instanceOf.js");
var _enumsJs = require("./enums.js");
var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {
    };
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference1, popper1, options1) {
        if (options1 === void 0) options1 = defaultOptions;
        var state1 = {
            placement: 'bottom',
            orderedModifiers: [],
            options: Object.assign({
            }, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {
            },
            elements: {
                reference: reference1,
                popper: popper1
            },
            attributes: {
            },
            styles: {
            }
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state1,
            setOptions: function setOptions(setOptionsAction) {
                var options = typeof setOptionsAction === 'function' ? setOptionsAction(state1.options) : setOptionsAction;
                cleanupModifierEffects();
                state1.options = Object.assign({
                }, defaultOptions, state1.options, options);
                state1.scrollParents = {
                    reference: _instanceOfJs.isElement(reference1) ? _listScrollParentsJsDefault.default(reference1) : reference1.contextElement ? _listScrollParentsJsDefault.default(reference1.contextElement) : [],
                    popper: _listScrollParentsJsDefault.default(popper1)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = _orderModifiersJsDefault.default(_mergeByNameJsDefault.default([].concat(defaultModifiers, state1.options.modifiers))); // Strip out disabled modifiers
                state1.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                }); // Validate the provided modifiers so that the consumer will get warned
                var modifiers = _uniqueByJsDefault.default([].concat(orderedModifiers, state1.options.modifiers), function(_ref) {
                    var name = _ref.name;
                    return name;
                });
                _validateModifiersJsDefault.default(modifiers);
                if (_getBasePlacementJsDefault.default(state1.options.placement) === _enumsJs.auto) {
                    var flipModifier = state1.orderedModifiers.find(function(_ref2) {
                        var name = _ref2.name;
                        return name === 'flip';
                    });
                    if (!flipModifier) console.error([
                        'Popper: "auto" placements require the "flip" modifier be',
                        'present and enabled to work.'
                    ].join(' '));
                }
                var _getComputedStyle = _getComputedStyleJsDefault.default(popper1), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
                // cause bugs with positioning, so we'll warn the consumer
                if ([
                    marginTop,
                    marginRight,
                    marginBottom,
                    marginLeft
                ].some(function(margin) {
                    return parseFloat(margin);
                })) console.warn([
                    'Popper: CSS "margin" styles cannot be used to apply padding',
                    'between the popper and its reference element or boundary.',
                    'To replicate margin, use the `offset` modifier, as well as',
                    'the `padding` option in the `preventOverflow` and `flip`',
                    'modifiers.'
                ].join(' '));
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state1.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference, popper)) {
                    console.error(INVALID_ELEMENT_ERROR);
                    return;
                } // Store the reference and popper rects to be read by modifiers
                state1.rects = {
                    reference: _getCompositeRectJsDefault.default(reference, _getOffsetParentJsDefault.default(popper), state1.options.strategy === 'fixed'),
                    popper: _getLayoutRectJsDefault.default(popper)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state1.reset = false;
                state1.placement = state1.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state1.orderedModifiers.forEach(function(modifier) {
                    return state1.modifiersData[modifier.name] = Object.assign({
                    }, modifier.data);
                });
                var __debug_loops__ = 0;
                for(var index = 0; index < state1.orderedModifiers.length; index++){
                    __debug_loops__ += 1;
                    if (__debug_loops__ > 100) {
                        console.error(INFINITE_LOOP_ERROR);
                        break;
                    }
                    if (state1.reset === true) {
                        state1.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state1.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {
                    } : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === 'function') state1 = fn({
                        state: state1,
                        options: _options,
                        name: name,
                        instance: instance
                    }) || state1;
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: _debounceJsDefault.default(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state1);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference1, popper1)) {
            console.error(INVALID_ELEMENT_ERROR);
            return instance;
        }
        instance.setOptions(options1).then(function(state) {
            if (!isDestroyed && options1.onFirstUpdate) options1.onFirstUpdate(state);
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state1.orderedModifiers.forEach(function(_ref3) {
                var name = _ref3.name, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {
                } : _ref3$options, effect = _ref3.effect;
                if (typeof effect === 'function') {
                    var cleanupFn = effect({
                        state: state1,
                        name: name,
                        instance: instance,
                        options: options
                    });
                    var noopFn = function noopFn() {
                    };
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var createPopper = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules

},{"./dom-utils/getCompositeRect.js":"8RbQq","./dom-utils/getLayoutRect.js":"3QcLC","./dom-utils/listScrollParents.js":"h9LnN","./dom-utils/getOffsetParent.js":"cEO6a","./dom-utils/getComputedStyle.js":"daHn5","./utils/orderModifiers.js":"6glJ2","./utils/debounce.js":"2MXaX","./utils/validateModifiers.js":"4YNnu","./utils/uniqueBy.js":"lqIFN","./utils/getBasePlacement.js":"c2UOX","./utils/mergeByName.js":"15Bos","./utils/detectOverflow.js":"crSQf","./dom-utils/instanceOf.js":"fKIgP","./enums.js":"jZp3w","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8RbQq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getNodeScrollJs = require("./getNodeScroll.js");
var _getNodeScrollJsDefault = parcelHelpers.interopDefault(_getNodeScrollJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _mathJs = require("../utils/math.js");
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = _mathJs.round(rect.width) / element.offsetWidth || 1;
    var scaleY = _mathJs.round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var isOffsetParentAnElement = _instanceOfJs.isHTMLElement(offsetParent);
    var offsetParentIsScaled = _instanceOfJs.isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = _getDocumentElementJsDefault.default(offsetParent);
    var rect = _getBoundingClientRectJsDefault.default(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (_getNodeNameJsDefault.default(offsetParent) !== 'body' || _isScrollParentJsDefault.default(documentElement)) scroll = _getNodeScrollJsDefault.default(offsetParent);
        if (_instanceOfJs.isHTMLElement(offsetParent)) {
            offsets = _getBoundingClientRectJsDefault.default(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = _getWindowScrollBarXJsDefault.default(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}
exports.default = getCompositeRect;

},{"./getBoundingClientRect.js":"ey7tS","./getNodeScroll.js":"bJ4uu","./getNodeName.js":"6JAN3","./instanceOf.js":"fKIgP","./getWindowScrollBarX.js":"3oin6","./getDocumentElement.js":"eJuqT","./isScrollParent.js":"6o0f4","../utils/math.js":"fL6pm","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bJ4uu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _instanceOfJs = require("./instanceOf.js");
var _getHTMLElementScrollJs = require("./getHTMLElementScroll.js");
var _getHTMLElementScrollJsDefault = parcelHelpers.interopDefault(_getHTMLElementScrollJs);
function getNodeScroll(node) {
    if (node === _getWindowJsDefault.default(node) || !_instanceOfJs.isHTMLElement(node)) return _getWindowScrollJsDefault.default(node);
    else return _getHTMLElementScrollJsDefault.default(node);
}
exports.default = getNodeScroll;

},{"./getWindowScroll.js":"gZQL2","./getWindow.js":"htzDW","./instanceOf.js":"fKIgP","./getHTMLElementScroll.js":"5uO18","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5uO18":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}
exports.default = getHTMLElementScroll;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6glJ2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js"); // source: https://stackoverflow.com/questions/49875255
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) // check for visited object
        sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return _enumsJs.modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}
exports.default = orderModifiers;

},{"../enums.js":"jZp3w","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2MXaX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function debounce(fn) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = undefined;
                resolve(fn());
            });
        });
        return pending;
    };
}
exports.default = debounce;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4YNnu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatJs = require("./format.js");
var _formatJsDefault = parcelHelpers.interopDefault(_formatJs);
var _enumsJs = require("../enums.js");
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = [
    'name',
    'enabled',
    'phase',
    'fn',
    'effect',
    'requires',
    'options'
];
function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function(value, index, self) {
            return self.indexOf(value) === index;
        }).forEach(function(key) {
            switch(key){
                case 'name':
                    if (typeof modifier.name !== 'string') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
                    break;
                case 'enabled':
                    if (typeof modifier.enabled !== 'boolean') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
                    break;
                case 'phase':
                    if (_enumsJs.modifierPhases.indexOf(modifier.phase) < 0) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enumsJs.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
                    break;
                case 'fn':
                    if (typeof modifier.fn !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'effect':
                    if (modifier.effect != null && typeof modifier.effect !== 'function') console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
                    break;
                case 'requires':
                    if (modifier.requires != null && !Array.isArray(modifier.requires)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
                    break;
                case 'requiresIfExists':
                    if (!Array.isArray(modifier.requiresIfExists)) console.error(_formatJsDefault.default(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
                    break;
                case 'options':
                case 'data':
                    break;
                default:
                    console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function(s) {
                        return "\"" + s + "\"";
                    }).join(', ') + "; but \"" + key + "\" was provided.");
            }
            modifier.requires && modifier.requires.forEach(function(requirement) {
                if (modifiers.find(function(mod) {
                    return mod.name === requirement;
                }) == null) console.error(_formatJsDefault.default(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            });
        });
    });
}
exports.default = validateModifiers;

},{"./format.js":"8LgWn","../enums.js":"jZp3w","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8LgWn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function format(str) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
    return [].concat(args).reduce(function(p, c) {
        return p.replace(/%s/, c);
    }, str);
}
exports.default = format;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lqIFN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function(item) {
        var identifier = fn(item);
        if (!identifiers.has(identifier)) {
            identifiers.add(identifier);
            return true;
        }
    });
}
exports.default = uniqueBy;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"15Bos":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function mergeByName(modifiers) {
    var merged1 = modifiers.reduce(function(merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({
        }, existing, current, {
            options: Object.assign({
            }, existing.options, current.options),
            data: Object.assign({
            }, existing.data, current.data)
        }) : current;
        return merged;
    }, {
    }); // IE11 does not support Object.values
    return Object.keys(merged1).map(function(key) {
        return merged1[key];
    });
}
exports.default = mergeByName;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gFxBS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _contains = require("dom-helpers/contains");
var _containsDefault = parcelHelpers.interopDefault(_contains);
var _listen = require("dom-helpers/listen");
var _listenDefault = parcelHelpers.interopDefault(_listen);
var _ownerDocument = require("dom-helpers/ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
const escapeKeyCode = 27;
const noop = ()=>{
};
function isLeftClickEvent(event) {
    return event.button === 0;
}
function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
const getRefTarget = (ref)=>ref && ('current' in ref ? ref.current : ref)
;
/**
 * The `useRootClose` hook registers your callback on the document
 * when rendered. Powers the `<Overlay/>` component. This is used achieve modal
 * style behavior where your callback is triggered when the user tries to
 * interact with the rest of the document or hits the `esc` key.
 *
 * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary
 * @param {function} onRootClose
 * @param {object=}  options
 * @param {boolean=} options.disabled
 * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on
 */ function useRootClose(ref, onRootClose, { disabled , clickTrigger ='click'  } = {
}) {
    const preventMouseRootCloseRef = _react.useRef(false);
    const onClose = onRootClose || noop;
    const handleMouseCapture = _react.useCallback((e)=>{
        const currentTarget = getRefTarget(ref);
        _warningDefault.default(!!currentTarget, "RootClose captured a close event but does not have a ref to compare it to. useRootClose(), should be passed a ref that resolves to a DOM node");
        preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!_containsDefault.default(currentTarget, e.target);
    }, [
        ref
    ]);
    const handleMouse = _useEventCallbackDefault.default((e)=>{
        if (!preventMouseRootCloseRef.current) onClose(e);
    });
    const handleKeyUp = _useEventCallbackDefault.default((e)=>{
        if (e.keyCode === escapeKeyCode) onClose(e);
    });
    _react.useEffect(()=>{
        if (disabled || ref == null) return undefined;
        const doc = _ownerDocumentDefault.default(getRefTarget(ref)); // Store the current event to avoid triggering handlers immediately
        // https://github.com/facebook/react/issues/20074
        let currentEvent = (doc.defaultView || window).event; // Use capture for this listener so it fires before React's listener, to
        // avoid false positives in the contains() check below if the target DOM
        // element is removed in the React mouse callback.
        const removeMouseCaptureListener = _listenDefault.default(doc, clickTrigger, handleMouseCapture, true);
        const removeMouseListener = _listenDefault.default(doc, clickTrigger, (e)=>{
            // skip if this event is the same as the one running when we added the handlers
            if (e === currentEvent) {
                currentEvent = undefined;
                return;
            }
            handleMouse(e);
        });
        const removeKeyupListener = _listenDefault.default(doc, 'keyup', (e)=>{
            // skip if this event is the same as the one running when we added the handlers
            if (e === currentEvent) {
                currentEvent = undefined;
                return;
            }
            handleKeyUp(e);
        });
        let mobileSafariHackListeners = [];
        if ('ontouchstart' in doc.documentElement) mobileSafariHackListeners = [].slice.call(doc.body.children).map((el)=>_listenDefault.default(el, 'mousemove', noop)
        );
        return ()=>{
            removeMouseCaptureListener();
            removeMouseListener();
            removeKeyupListener();
            mobileSafariHackListeners.forEach((remove)=>remove()
            );
        };
    }, [
        ref,
        disabled,
        clickTrigger,
        handleMouseCapture,
        handleMouse,
        handleKeyUp
    ]);
}
exports.default = useRootClose;

},{"dom-helpers/contains":"asPpd","dom-helpers/listen":"fotiI","dom-helpers/ownerDocument":"b8OFQ","react":"4mchR","@restart/hooks/useEventCallback":"8QyIg","warning":"4vouU","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"asPpd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function contains(context, node) {
    // HTML DOM and SVG DOM may have different support levels,
    // so we need to check on context instead of a document root element.
    if (context.contains) return context.contains(node);
    if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);
}
exports.default = contains;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4vouU":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */ var __DEV__ = true;
var warning = function() {
};
if (__DEV__) {
    var printWarning = function printWarning(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for(var key = 1; key < len; key++)args[key - 1] = arguments[key];
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function() {
            return args[argIndex++];
        });
        if (typeof console !== 'undefined') console.error(message);
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        } catch (x) {
        }
    };
    warning = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for(var key = 2; key < len; key++)args[key - 2] = arguments[key];
        if (format === undefined) throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
        if (!condition) printWarning.apply(null, [
            format
        ].concat(args));
    };
}
module.exports = warning;

},{}],"4lnJO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toModifierMap", ()=>toModifierMap
);
parcelHelpers.export(exports, "toModifierArray", ()=>toModifierArray
);
function toModifierMap(modifiers) {
    const result = {
    };
    if (!Array.isArray(modifiers)) return modifiers || result;
     // eslint-disable-next-line no-unused-expressions
    modifiers == null || modifiers.forEach((m)=>{
        result[m.name] = m;
    });
    return result;
}
function toModifierArray(map = {
}) {
    if (Array.isArray(map)) return map;
    return Object.keys(map).map((k)=>{
        map[k].name = k;
        return map[k];
    });
}
function mergeOptionsWithPopperConfig({ enabled , enableEvents , placement , flip , offset , fixed , containerPadding , arrowElement , popperConfig ={
}  }) {
    var _modifiers$preventOve, _modifiers$preventOve2, _modifiers$offset, _modifiers$arrow;
    const modifiers = toModifierMap(popperConfig.modifiers);
    return Object.assign({
    }, popperConfig, {
        placement,
        enabled,
        strategy: fixed ? 'fixed' : popperConfig.strategy,
        modifiers: toModifierArray(Object.assign({
        }, modifiers, {
            eventListeners: {
                enabled: enableEvents
            },
            preventOverflow: Object.assign({
            }, modifiers.preventOverflow, {
                options: containerPadding ? Object.assign({
                    padding: containerPadding
                }, (_modifiers$preventOve = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve.options) : (_modifiers$preventOve2 = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve2.options
            }),
            offset: {
                options: Object.assign({
                    offset
                }, (_modifiers$offset = modifiers.offset) == null ? void 0 : _modifiers$offset.options)
            },
            arrow: Object.assign({
            }, modifiers.arrow, {
                enabled: !!arrowElement,
                options: Object.assign({
                }, (_modifiers$arrow = modifiers.arrow) == null ? void 0 : _modifiers$arrow.options, {
                    element: arrowElement
                })
            }),
            flip: Object.assign({
                enabled: !!flip
            }, modifiers.flip)
        }))
    });
}
exports.default = mergeOptionsWithPopperConfig;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2VtXp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isRoleMenu", ()=>isRoleMenu
);
/**
 * Wires up Dropdown toggle functionality, returning a set a props to attach
 * to the element that functions as the dropdown toggle (generally a button).
 *
 * @memberOf Dropdown
 */ parcelHelpers.export(exports, "useDropdownToggle", ()=>useDropdownToggle
);
var _react = require("react");
var _ssr = require("./ssr");
var _dropdownContext = require("./DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _jsxRuntime = require("react/jsx-runtime");
const isRoleMenu = (el)=>{
    var _el$getAttribute;
    return ((_el$getAttribute = el.getAttribute('role')) == null ? void 0 : _el$getAttribute.toLowerCase()) === 'menu';
};
const noop = ()=>{
};
function useDropdownToggle() {
    const id = _ssr.useSSRSafeId();
    const { show =false , toggle =noop , setToggle , menuElement  } = _react.useContext(_dropdownContextDefault.default) || {
    };
    const handleClick = _react.useCallback((e)=>{
        toggle(!show, e);
    }, [
        show,
        toggle
    ]);
    const props = {
        id,
        ref: setToggle || noop,
        onClick: handleClick,
        'aria-expanded': !!show
    }; // This is maybe better down in an effect, but
    // the component is going to update anyway when the menu element
    // is set so might return new props.
    if (menuElement && isRoleMenu(menuElement)) props['aria-haspopup'] = true;
    return [
        props,
        {
            show,
            toggle
        }
    ];
}
/**
 * Also exported as `<Dropdown.Toggle>` from `Dropdown`.
 *
 * @displayName DropdownToggle
 * @memberOf Dropdown
 */ function DropdownToggle({ children  }) {
    const [props, meta] = useDropdownToggle();
    return(/*#__PURE__*/ _jsxRuntime.jsx(_jsxRuntime.Fragment, {
        children: children(props, meta)
    }));
}
DropdownToggle.displayName = 'DropdownToggle';
exports.default = DropdownToggle;

},{"react":"4mchR","./ssr":"kv7iw","./DropdownContext":"5UG3w","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kv7iw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useSSRSafeId", ()=>_ssr.useSSRSafeId
);
parcelHelpers.export(exports, "useIsSSR", ()=>_ssr.useIsSSR
);
parcelHelpers.export(exports, "SSRProvider", ()=>_ssr.SSRProvider
);
var _ssr = require("@react-aria/ssr");

},{"@react-aria/ssr":"hJUdj","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hJUdj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * When using SSR with React Aria, applications must be wrapped in an SSRProvider.
 * This ensures that auto generated ids are consistent between the client and server.
 */ parcelHelpers.export(exports, "SSRProvider", ()=>SSRProvider
);
/** @private */ parcelHelpers.export(exports, "useSSRSafeId", ()=>useSSRSafeId
);
/**
 * Returns whether the component is currently being server side rendered or
 * hydrated on the client. Can be used to delay browser-specific rendering
 * until after hydration.
 */ parcelHelpers.export(exports, "useIsSSR", ()=>useIsSSR
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
// Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.
const $f01a183cc7bdff77849e49ad26eb904$var$defaultContext = {
    prefix: String(Math.round(Math.random() * 10000000000)),
    current: 0
};
const $f01a183cc7bdff77849e49ad26eb904$var$SSRContext = /*#__PURE__*/ _reactDefault.default.createContext($f01a183cc7bdff77849e49ad26eb904$var$defaultContext);
function SSRProvider(props) {
    let cur = _react.useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext);
    let value = _react.useMemo(()=>({
            // If this is the first SSRProvider, start with an empty string prefix, otherwise
            // append and increment the counter.
            prefix: cur === $f01a183cc7bdff77849e49ad26eb904$var$defaultContext ? '' : cur.prefix + "-" + ++cur.current,
            current: 0
        })
    , [
        cur
    ]);
    return(/*#__PURE__*/ _reactDefault.default.createElement($f01a183cc7bdff77849e49ad26eb904$var$SSRContext.Provider, {
        value: value
    }, props.children));
}
let $f01a183cc7bdff77849e49ad26eb904$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
function useSSRSafeId(defaultId) {
    let ctx = _react.useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,
    // provide a warning to hint to the developer to add one.
    if (ctx === $f01a183cc7bdff77849e49ad26eb904$var$defaultContext && !$f01a183cc7bdff77849e49ad26eb904$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');
    return _react.useMemo(()=>defaultId || "react-aria" + ctx.prefix + "-" + ++ctx.current
    , [
        defaultId
    ]);
}
function useIsSSR() {
    let cur = _react.useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext);
    let isInSSRContext = cur !== $f01a183cc7bdff77849e49ad26eb904$var$defaultContext;
    let [isSSR, setIsSSR] = _react.useState(isInSSRContext); // If on the client, and the component was initially server rendered,
    // then schedule a layout effect to update the component after hydration.
    if (typeof window !== 'undefined' && isInSSRContext) // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useLayoutEffect(()=>{
        setIsSSR(false);
    }, []);
    return isSSR;
}

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kWtLf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a dropdown item. Returns a set of props for the dropdown item component
 * including an `onClick` handler that prevents selection when the item is disabled
 */ parcelHelpers.export(exports, "useDropdownItem", ()=>useDropdownItem
);
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _navContext = require("./NavContext");
var _navContextDefault = parcelHelpers.interopDefault(_navContext);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _dataKey = require("./DataKey");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "eventKey",
    "disabled",
    "onClick",
    "active",
    "as"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function useDropdownItem({ key , href , active , disabled , onClick  }) {
    const onSelectCtx = _react.useContext(_selectableContextDefault.default);
    const navContext = _react.useContext(_navContextDefault.default);
    const { activeKey  } = navContext || {
    };
    const eventKey = _selectableContext.makeEventKey(key, href);
    const isActive = active == null && key != null ? _selectableContext.makeEventKey(activeKey) === eventKey : active;
    const handleClick = _useEventCallbackDefault.default((event)=>{
        if (disabled) return;
        onClick == null || onClick(event);
        if (onSelectCtx && !event.isPropagationStopped()) onSelectCtx(eventKey, event);
    });
    return [
        {
            onClick: handleClick,
            'aria-disabled': disabled || undefined,
            'aria-selected': isActive,
            [_dataKey.dataAttr('dropdown-item')]: ''
        },
        {
            isActive
        }
    ];
}
const DropdownItem = /*#__PURE__*/ _react.forwardRef((_ref, ref)=>{
    let { eventKey , disabled , onClick , active , as: Component = _buttonDefault.default  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    const [dropdownItemProps] = useDropdownItem({
        key: eventKey,
        href: props.href,
        disabled,
        onClick,
        active
    });
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, Object.assign({
    }, props, {
        ref: ref
    }, dropdownItemProps)));
});
DropdownItem.displayName = 'DropdownItem';
exports.default = DropdownItem;

},{"react":"4mchR","@restart/hooks/useEventCallback":"8QyIg","./SelectableContext":"6DoIj","./NavContext":"8F9CB","./Button":"3AURZ","./DataKey":"djk1E","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6DoIj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "makeEventKey", ()=>makeEventKey
);
var _react = require("react");
const SelectableContext = /*#__PURE__*/ _react.createContext(null);
const makeEventKey = (eventKey, href = null)=>{
    if (eventKey != null) return String(eventKey);
    return href || null;
};
exports.default = SelectableContext;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8F9CB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const NavContext = /*#__PURE__*/ _react.createContext(null);
NavContext.displayName = 'NavContext';
exports.default = NavContext;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"djk1E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ATTRIBUTE_PREFIX", ()=>ATTRIBUTE_PREFIX
);
parcelHelpers.export(exports, "PROPERTY_PREFIX", ()=>PROPERTY_PREFIX
);
parcelHelpers.export(exports, "dataAttr", ()=>dataAttr
);
parcelHelpers.export(exports, "dataProp", ()=>dataProp
);
const ATTRIBUTE_PREFIX = `data-rr-ui-`;
const PROPERTY_PREFIX = `rrUi`;
function dataAttr(property) {
    return `${ATTRIBUTE_PREFIX}${property}`;
}
function dataProp(property) {
    return `${PROPERTY_PREFIX}${property}`;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hC2jg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WindowProvider", ()=>WindowProvider
);
var _react = require("react");
var _canUseDOM = require("dom-helpers/canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
const Context = /*#__PURE__*/ _react.createContext(_canUseDOMDefault.default ? window : undefined);
const WindowProvider = Context.Provider;
function useWindow() {
    return _react.useContext(Context);
}
exports.default = useWindow;

},{"react":"4mchR","dom-helpers/canUseDOM":"b2ppt","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kQHR9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const DropdownContext = /*#__PURE__*/ _react.createContext({
});
DropdownContext.displayName = 'DropdownContext';
exports.default = DropdownContext;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6Tbgp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _dropdownItem = require("@restart/ui/DropdownItem");
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const DropdownItem = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , eventKey , disabled =false , onClick , active , as: Component = _anchorDefault.default , ...props }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'dropdown-item');
    const [dropdownItemProps, meta] = _dropdownItem.useDropdownItem({
        key: eventKey,
        href: props.href,
        disabled,
        onClick,
        active
    });
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ...dropdownItemProps,
        ref: ref,
        className: _classnamesDefault.default(className, prefix, meta.isActive && 'active', disabled && 'disabled')
    }));
});
DropdownItem.displayName = 'DropdownItem';
exports.default = DropdownItem;

},{"classnames":"2cVcN","react":"4mchR","@restart/ui/DropdownItem":"kWtLf","@restart/ui/Anchor":"c3Vvr","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"Zo7sg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDropdownMenuPlacement", ()=>getDropdownMenuPlacement
);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _dropdownMenu = require("@restart/ui/DropdownMenu");
var _useIsomorphicEffect = require("@restart/hooks/useIsomorphicEffect");
var _useIsomorphicEffectDefault = parcelHelpers.interopDefault(_useIsomorphicEffect);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _dropdownContext = require("./DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _inputGroupContext = require("./InputGroupContext");
var _inputGroupContextDefault = parcelHelpers.interopDefault(_inputGroupContext);
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _themeProvider = require("./ThemeProvider");
var _useWrappedRefWithWarning = require("./useWrappedRefWithWarning");
var _useWrappedRefWithWarningDefault = parcelHelpers.interopDefault(_useWrappedRefWithWarning);
var _types = require("./types");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    flip: true
};
function getDropdownMenuPlacement(alignEnd, dropDirection, isRTL) {
    const topStart = isRTL ? 'top-end' : 'top-start';
    const topEnd = isRTL ? 'top-start' : 'top-end';
    const bottomStart = isRTL ? 'bottom-end' : 'bottom-start';
    const bottomEnd = isRTL ? 'bottom-start' : 'bottom-end';
    const leftStart = isRTL ? 'right-start' : 'left-start';
    const leftEnd = isRTL ? 'right-end' : 'left-end';
    const rightStart = isRTL ? 'left-start' : 'right-start';
    const rightEnd = isRTL ? 'left-end' : 'right-end';
    let placement = alignEnd ? bottomEnd : bottomStart;
    if (dropDirection === 'up') placement = alignEnd ? topEnd : topStart;
    else if (dropDirection === 'end') placement = alignEnd ? rightEnd : rightStart;
    else if (dropDirection === 'start') placement = alignEnd ? leftEnd : leftStart;
    return placement;
}
const DropdownMenu = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , align , rootCloseEvent , flip , show: showProps , renderOnMount , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , popperConfig , variant , ...props }, ref)=>{
    let alignEnd = false;
    const isNavbar = _react.useContext(_navbarContextDefault.default);
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'dropdown-menu');
    const { align: contextAlign , drop , isRTL  } = _react.useContext(_dropdownContextDefault.default);
    align = align || contextAlign;
    const isInputGroup = _react.useContext(_inputGroupContextDefault.default);
    const alignClasses = [];
    if (align) {
        if (typeof align === 'object') {
            const keys = Object.keys(align);
            _warningDefault.default(keys.length === 1, 'There should only be 1 breakpoint when passing an object to `align`');
            if (keys.length) {
                const brkPoint = keys[0];
                const direction = align[brkPoint]; // .dropdown-menu-end is required for responsively aligning
                // left in addition to align left classes.
                alignEnd = direction === 'start';
                alignClasses.push(`${prefix}-${brkPoint}-${direction}`);
            }
        } else if (align === 'end') alignEnd = true;
    }
    const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);
    const [menuProps, { hasShown , popper , show , toggle  }] = _dropdownMenu.useDropdownMenu({
        flip,
        rootCloseEvent,
        show: showProps,
        usePopper: !isNavbar && alignClasses.length === 0,
        offset: [
            0,
            2
        ],
        popperConfig,
        placement
    });
    menuProps.ref = _useMergedRefsDefault.default(_useWrappedRefWithWarningDefault.default(ref, 'DropdownMenu'), menuProps.ref);
    _useIsomorphicEffectDefault.default(()=>{
        // Popper's initial position for the menu is incorrect when
        // renderOnMount=true. Need to call update() to correct it.
        if (show) popper == null || popper.update();
    }, [
        show
    ]);
    if (!hasShown && !renderOnMount && !isInputGroup) return null; // For custom components provide additional, non-DOM, props;
    if (typeof Component !== 'string') {
        menuProps.show = show;
        menuProps.close = ()=>toggle == null ? void 0 : toggle(false)
        ;
        menuProps.align = align;
    }
    let style = props.style;
    if (popper != null && popper.placement) {
        // we don't need the default popper style,
        // menus are display: none when not shown.
        style = {
            ...props.style,
            ...menuProps.style
        };
        props['x-placement'] = popper.placement;
    }
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ...menuProps,
        style: style // Bootstrap css requires this data attrib to style responsive menus.
        ,
        ...(alignClasses.length || isNavbar) && {
            'data-bs-popper': 'static'
        },
        className: _classnamesDefault.default(className, prefix, show && 'show', alignEnd && `${prefix}-end`, variant && `${prefix}-${variant}`, ...alignClasses)
    }));
});
DropdownMenu.displayName = 'DropdownMenu';
DropdownMenu.defaultProps = defaultProps;
exports.default = DropdownMenu;

},{"classnames":"2cVcN","react":"4mchR","@restart/ui/DropdownMenu":"70HyH","@restart/hooks/useIsomorphicEffect":"e6sqn","@restart/hooks/useMergedRefs":"fj3d7","warning":"4vouU","./DropdownContext":"kQHR9","./InputGroupContext":"8dQQC","./NavbarContext":"1TV6u","./ThemeProvider":"oG7Uz","./useWrappedRefWithWarning":"aSYIB","./types":"gcZF4","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8dQQC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const context = /*#__PURE__*/ _react.createContext(null);
context.displayName = 'InputGroupContext';
exports.default = context;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1TV6u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react"); // TODO: check
const context = /*#__PURE__*/ _react.createContext(null);
context.displayName = 'NavbarContext';
exports.default = context;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aSYIB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _invariant = require("invariant");
var _invariantDefault = parcelHelpers.interopDefault(_invariant);
var _react = require("react");
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
function useWrappedRefWithWarning(ref, componentName) {
    const warningRef = _react.useCallback((refValue)=>{
        !(refValue == null || !refValue.isReactComponent) && _invariantDefault.default(false, `${componentName} injected a ref to a provided \`as\` component that resolved to a component instance instead of a DOM element. ` + 'Use `React.forwardRef` to provide the injected ref to the class component as a prop in order to pass it directly to a DOM element');
    }, [
        componentName
    ]); // eslint-disable-next-line react-hooks/rules-of-hooks
    return _useMergedRefsDefault.default(warningRef, ref);
}
exports.default = useWrappedRefWithWarning;

},{"invariant":"Xxs2W","react":"4mchR","@restart/hooks/useMergedRefs":"fj3d7","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gcZF4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "alignPropType", ()=>alignPropType
);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
const alignDirection = _propTypesDefault.default.oneOf([
    'start',
    'end'
]);
const alignPropType = _propTypesDefault.default.oneOfType([
    alignDirection,
    _propTypesDefault.default.shape({
        sm: alignDirection
    }),
    _propTypesDefault.default.shape({
        md: alignDirection
    }),
    _propTypesDefault.default.shape({
        lg: alignDirection
    }),
    _propTypesDefault.default.shape({
        xl: alignDirection
    }),
    _propTypesDefault.default.shape({
        xxl: alignDirection
    })
]);

},{"prop-types":"2bysO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6tN0k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _dropdownToggle = require("@restart/ui/DropdownToggle");
var _dropdownContext = require("@restart/ui/DropdownContext");
var _dropdownContextDefault = parcelHelpers.interopDefault(_dropdownContext);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _inputGroupContext = require("./InputGroupContext");
var _inputGroupContextDefault = parcelHelpers.interopDefault(_inputGroupContext);
var _themeProvider = require("./ThemeProvider");
var _useWrappedRefWithWarning = require("./useWrappedRefWithWarning");
var _useWrappedRefWithWarningDefault = parcelHelpers.interopDefault(_useWrappedRefWithWarning);
var _jsxRuntime = require("react/jsx-runtime");
const DropdownToggle = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , split , className , childBsPrefix , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = _buttonDefault.default , ...props }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'dropdown-toggle');
    const dropdownContext = _react.useContext(_dropdownContextDefault.default);
    const isInputGroup = _react.useContext(_inputGroupContextDefault.default);
    if (childBsPrefix !== undefined) props.bsPrefix = childBsPrefix;
    const [toggleProps] = _dropdownToggle.useDropdownToggle();
    toggleProps.ref = _useMergedRefsDefault.default(toggleProps.ref, _useWrappedRefWithWarningDefault.default(ref, 'DropdownToggle')); // This intentionally forwards size and variant (if set) to the
    // underlying component, to allow it to render size and style variants.
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        className: _classnamesDefault.default(className, prefix, split && `${prefix}-split`, !!isInputGroup && (dropdownContext == null ? void 0 : dropdownContext.show) && 'show'),
        ...toggleProps,
        ...props
    }));
});
DropdownToggle.displayName = 'DropdownToggle';
exports.default = DropdownToggle;

},{"classnames":"2cVcN","react":"4mchR","@restart/ui/DropdownToggle":"2VtXp","@restart/ui/DropdownContext":"5UG3w","@restart/hooks/useMergedRefs":"fj3d7","./Button":"64Pgd","./InputGroupContext":"8dQQC","./ThemeProvider":"oG7Uz","./useWrappedRefWithWarning":"aSYIB","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bqS2l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _dropdown = require("./Dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _dropdownToggle = require("./DropdownToggle");
var _dropdownToggleDefault = parcelHelpers.interopDefault(_dropdownToggle);
var _dropdownMenu = require("./DropdownMenu");
var _dropdownMenuDefault = parcelHelpers.interopDefault(_dropdownMenu);
var _types = require("./types");
var _jsxRuntime = require("react/jsx-runtime");
const propTypes = {
    /**
   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
   * @type {string}
   */ id: _propTypesDefault.default.string,
    /** An `href` passed to the Toggle component */ href: _propTypesDefault.default.string,
    /** An `onClick` handler passed to the Toggle component */ onClick: _propTypesDefault.default.func,
    /** The content of the non-toggle Button.  */ title: _propTypesDefault.default.node.isRequired,
    /** Disables both Buttons  */ disabled: _propTypesDefault.default.bool,
    /**
   * Aligns the dropdown menu.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   *
   * @type {"start"|"end"|{ sm: "start"|"end" }|{ md: "start"|"end" }|{ lg: "start"|"end" }|{ xl: "start"|"end"}|{ xxl: "start"|"end"} }
   */ align: _types.alignPropType,
    /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */ menuRole: _propTypesDefault.default.string,
    /** Whether to render the dropdown menu in the DOM before the first time it is shown */ renderMenuOnMount: _propTypesDefault.default.bool,
    /**
   *  Which event when fired outside the component will cause it to be closed.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   */ rootCloseEvent: _propTypesDefault.default.string,
    /**
   * Menu color variant.
   *
   * Omitting this will use the default light color.
   */ menuVariant: _propTypesDefault.default.oneOf([
        'dark'
    ]),
    /** @ignore */ bsPrefix: _propTypesDefault.default.string,
    /** @ignore */ variant: _propTypesDefault.default.string,
    /** @ignore */ size: _propTypesDefault.default.string
};
/**
 * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`
 * are passed directly to the default `Dropdown.Menu`. This component accepts all of
 * [`Dropdown`'s props](#dropdown-props).
 *
 * _All unknown props are passed through to the `Dropdown` component._ Only
 * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,
 * along with menu-related props are passed to the `Dropdown.Menu`
 */ const DropdownButton = /*#__PURE__*/ _react.forwardRef(({ title , children , bsPrefix , rootCloseEvent , variant , size , menuRole , renderMenuOnMount , disabled , href , id , menuVariant , ...props }, ref)=>/*#__PURE__*/ _jsxRuntime.jsxs(_dropdownDefault.default, {
        ref: ref,
        ...props,
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownToggleDefault.default, {
                id: id,
                href: href,
                size: size,
                variant: variant,
                disabled: disabled,
                childBsPrefix: bsPrefix,
                children: title
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownMenuDefault.default, {
                role: menuRole,
                renderOnMount: renderMenuOnMount,
                rootCloseEvent: rootCloseEvent,
                variant: menuVariant,
                children: children
            })
        ]
    })
);
DropdownButton.displayName = 'DropdownButton';
DropdownButton.propTypes = propTypes;
exports.default = DropdownButton;

},{"react":"4mchR","prop-types":"2bysO","./Dropdown":"7gNYx","./DropdownToggle":"6tN0k","./DropdownMenu":"Zo7sg","./types":"gcZF4","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"PeiIB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _formCheck = require("./FormCheck");
var _formCheckDefault = parcelHelpers.interopDefault(_formCheck);
var _formControl = require("./FormControl");
var _formControlDefault = parcelHelpers.interopDefault(_formControl);
var _formFloating = require("./FormFloating");
var _formFloatingDefault = parcelHelpers.interopDefault(_formFloating);
var _formGroup = require("./FormGroup");
var _formGroupDefault = parcelHelpers.interopDefault(_formGroup);
var _formLabel = require("./FormLabel");
var _formLabelDefault = parcelHelpers.interopDefault(_formLabel);
var _formRange = require("./FormRange");
var _formRangeDefault = parcelHelpers.interopDefault(_formRange);
var _formSelect = require("./FormSelect");
var _formSelectDefault = parcelHelpers.interopDefault(_formSelect);
var _formText = require("./FormText");
var _formTextDefault = parcelHelpers.interopDefault(_formText);
var _switch = require("./Switch");
var _switchDefault = parcelHelpers.interopDefault(_switch);
var _floatingLabel = require("./FloatingLabel");
var _floatingLabelDefault = parcelHelpers.interopDefault(_floatingLabel);
var _jsxRuntime = require("react/jsx-runtime");
const propTypes = {
    /**
   * The Form `ref` will be forwarded to the underlying element,
   * which means, unless it's rendered `as` a composite component,
   * it will be a DOM node, when resolved.
   *
   * @type {ReactRef}
   * @alias ref
   */ _ref: _propTypesDefault.default.any,
    /**
   * Mark a form as having been validated. Setting it to `true` will
   * toggle any validation styles on the forms elements.
   */ validated: _propTypesDefault.default.bool,
    as: _propTypesDefault.default.elementType
};
const Form = /*#__PURE__*/ _react.forwardRef(({ className , validated , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'form' , ...props }, ref)=>/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ref: ref,
        className: _classnamesDefault.default(className, validated && 'was-validated')
    })
);
Form.displayName = 'Form';
Form.propTypes = propTypes;
exports.default = Object.assign(Form, {
    Group: _formGroupDefault.default,
    Control: _formControlDefault.default,
    Floating: _formFloatingDefault.default,
    Check: _formCheckDefault.default,
    Switch: _switchDefault.default,
    Label: _formLabelDefault.default,
    Text: _formTextDefault.default,
    Range: _formRangeDefault.default,
    Select: _formSelectDefault.default,
    FloatingLabel: _floatingLabelDefault.default
});

},{"classnames":"2cVcN","prop-types":"2bysO","react":"4mchR","./FormCheck":"k9egm","./FormControl":"3iZ43","./FormFloating":"2z0Ti","./FormGroup":"6eZW8","./FormLabel":"4E1MN","./FormRange":"g1L56","./FormSelect":"cLBuq","./FormText":"gsCyO","./Switch":"U0RUx","./FloatingLabel":"1Xz1h","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"k9egm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _feedback = require("./Feedback");
var _feedbackDefault = parcelHelpers.interopDefault(_feedback);
var _formCheckInput = require("./FormCheckInput");
var _formCheckInputDefault = parcelHelpers.interopDefault(_formCheckInput);
var _formCheckLabel = require("./FormCheckLabel");
var _formCheckLabelDefault = parcelHelpers.interopDefault(_formCheckLabel);
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _themeProvider = require("./ThemeProvider");
var _elementChildren = require("./ElementChildren");
var _jsxRuntime = require("react/jsx-runtime");
const FormCheck = /*#__PURE__*/ _react.forwardRef(({ id , bsPrefix , bsSwitchPrefix , inline =false , disabled =false , isValid =false , isInvalid =false , feedbackTooltip =false , feedback , feedbackType , className , style , title ='' , type ='checkbox' , label , children , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as ='input' , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-check');
    bsSwitchPrefix = _themeProvider.useBootstrapPrefix(bsSwitchPrefix, 'form-switch');
    const { controlId  } = _react.useContext(_formContextDefault.default);
    const innerFormContext = _react.useMemo(()=>({
            controlId: id || controlId
        })
    , [
        controlId,
        id
    ]);
    const hasLabel = !children && label != null && label !== false || _elementChildren.hasChildOfType(children, _formCheckLabelDefault.default);
    const input = /*#__PURE__*/ _jsxRuntime.jsx(_formCheckInputDefault.default, {
        ...props,
        type: type === 'switch' ? 'checkbox' : type,
        ref: ref,
        isValid: isValid,
        isInvalid: isInvalid,
        disabled: disabled,
        as: as
    });
    return(/*#__PURE__*/ _jsxRuntime.jsx(_formContextDefault.default.Provider, {
        value: innerFormContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
            style: style,
            className: _classnamesDefault.default(className, hasLabel && bsPrefix, inline && `${bsPrefix}-inline`, type === 'switch' && bsSwitchPrefix),
            children: children || /*#__PURE__*/ _jsxRuntime.jsxs(_jsxRuntime.Fragment, {
                children: [
                    input,
                    hasLabel && /*#__PURE__*/ _jsxRuntime.jsx(_formCheckLabelDefault.default, {
                        title: title,
                        children: label
                    }),
                    feedback && /*#__PURE__*/ _jsxRuntime.jsx(_feedbackDefault.default, {
                        type: feedbackType,
                        tooltip: feedbackTooltip,
                        children: feedback
                    })
                ]
            })
        })
    }));
});
FormCheck.displayName = 'FormCheck';
exports.default = Object.assign(FormCheck, {
    Input: _formCheckInputDefault.default,
    Label: _formCheckLabelDefault.default
});

},{"classnames":"2cVcN","react":"4mchR","./Feedback":"3l6gp","./FormCheckInput":"fNTQv","./FormCheckLabel":"lyWnd","./FormContext":"axYdK","./ThemeProvider":"oG7Uz","./ElementChildren":"eqDHF","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3l6gp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _jsxRuntime = require("react/jsx-runtime");
const propTypes = {
    /**
   * Specify whether the feedback is for valid or invalid fields
   *
   * @type {('valid'|'invalid')}
   */ type: _propTypesDefault.default.string,
    /** Display feedback as a tooltip. */ tooltip: _propTypesDefault.default.bool,
    as: _propTypesDefault.default.elementType
};
const Feedback = /*#__PURE__*/ _react.forwardRef(({ as: Component = 'div' , className , type ='valid' , tooltip =false , ...props }, ref)=>/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ref: ref,
        className: _classnamesDefault.default(className, `${type}-${tooltip ? 'tooltip' : 'feedback'}`)
    })
);
Feedback.displayName = 'Feedback';
Feedback.propTypes = propTypes;
exports.default = Feedback;

},{"classnames":"2cVcN","react":"4mchR","prop-types":"2bysO","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fNTQv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const FormCheckInput = /*#__PURE__*/ _react.forwardRef(({ id , bsPrefix , className , type ='checkbox' , isValid =false , isInvalid =false , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'input' , ...props }, ref)=>{
    const { controlId  } = _react.useContext(_formContextDefault.default);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-check-input');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ref: ref,
        type: type,
        id: id || controlId,
        className: _classnamesDefault.default(className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid')
    }));
});
FormCheckInput.displayName = 'FormCheckInput';
exports.default = FormCheckInput;

},{"classnames":"2cVcN","react":"4mchR","./FormContext":"axYdK","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"axYdK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react"); // TODO
const FormContext = /*#__PURE__*/ _react.createContext({
});
exports.default = FormContext;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lyWnd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const FormCheckLabel = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , htmlFor , ...props }, ref)=>{
    const { controlId  } = _react.useContext(_formContextDefault.default);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-check-label');
    return(/*#__PURE__*/ _jsxRuntime.jsx("label", {
        ...props,
        ref: ref,
        htmlFor: htmlFor || controlId,
        className: _classnamesDefault.default(className, bsPrefix)
    }));
});
FormCheckLabel.displayName = 'FormCheckLabel';
exports.default = FormCheckLabel;

},{"classnames":"2cVcN","react":"4mchR","./FormContext":"axYdK","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3iZ43":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _feedback = require("./Feedback");
var _feedbackDefault = parcelHelpers.interopDefault(_feedback);
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const FormControl = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , type , size , htmlSize , id , className , isValid =false , isInvalid =false , plaintext , readOnly , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'input' , ...props }, ref)=>{
    const { controlId  } = _react.useContext(_formContextDefault.default);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-control');
    let classes;
    if (plaintext) classes = {
        [`${bsPrefix}-plaintext`]: true
    };
    else classes = {
        [bsPrefix]: true,
        [`${bsPrefix}-${size}`]: size
    };
    _warningDefault.default(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        type: type,
        size: htmlSize,
        ref: ref,
        readOnly: readOnly,
        id: id || controlId,
        className: _classnamesDefault.default(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === 'color' && `${bsPrefix}-color`)
    }));
});
FormControl.displayName = 'FormControl';
exports.default = Object.assign(FormControl, {
    Feedback: _feedbackDefault.default
});

},{"classnames":"2cVcN","react":"4mchR","warning":"4vouU","./Feedback":"3l6gp","./FormContext":"axYdK","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2z0Ti":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('form-floating');

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6eZW8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _jsxRuntime = require("react/jsx-runtime");
const FormGroup = /*#__PURE__*/ _react.forwardRef(({ controlId , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , ...props }, ref)=>{
    const context = _react.useMemo(()=>({
            controlId
        })
    , [
        controlId
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_formContextDefault.default.Provider, {
        value: context,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, {
            ...props,
            ref: ref
        })
    }));
});
FormGroup.displayName = 'FormGroup';
exports.default = FormGroup;

},{"react":"4mchR","./FormContext":"axYdK","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4E1MN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _col = require("./Col");
var _colDefault = parcelHelpers.interopDefault(_col);
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    column: false,
    visuallyHidden: false
};
const FormLabel = /*#__PURE__*/ _react.forwardRef(({ // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'label' , bsPrefix , column , visuallyHidden , className , htmlFor , ...props }, ref)=>{
    const { controlId  } = _react.useContext(_formContextDefault.default);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-label');
    let columnClass = 'col-form-label';
    if (typeof column === 'string') columnClass = `${columnClass} ${columnClass}-${column}`;
    const classes = _classnamesDefault.default(className, bsPrefix, visuallyHidden && 'visually-hidden', column && columnClass);
    _warningDefault.default(controlId == null || !htmlFor, '`controlId` is ignored on `<FormLabel>` when `htmlFor` is specified.');
    htmlFor = htmlFor || controlId;
    if (column) return(/*#__PURE__*/ _jsxRuntime.jsx(_colDefault.default, {
        ref: ref,
        as: "label",
        className: classes,
        htmlFor: htmlFor,
        ...props
    }));
    return(/*#__PURE__*/ // eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control
    _jsxRuntime.jsx(Component, {
        ref: ref,
        className: classes,
        htmlFor: htmlFor,
        ...props
    }));
});
FormLabel.displayName = 'FormLabel';
FormLabel.defaultProps = defaultProps;
exports.default = FormLabel;

},{"classnames":"2cVcN","react":"4mchR","warning":"4vouU","./Col":"kxhZp","./FormContext":"axYdK","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"g1L56":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _jsxRuntime = require("react/jsx-runtime");
const FormRange = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , id , ...props }, ref)=>{
    const { controlId  } = _react.useContext(_formContextDefault.default);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-range');
    return(/*#__PURE__*/ _jsxRuntime.jsx("input", {
        ...props,
        type: "range",
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix),
        id: id || controlId
    }));
});
FormRange.displayName = 'FormRange';
exports.default = FormRange;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./FormContext":"axYdK","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cLBuq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _formContext = require("./FormContext");
var _formContextDefault = parcelHelpers.interopDefault(_formContext);
var _jsxRuntime = require("react/jsx-runtime");
const FormSelect = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , size , htmlSize , className , isValid =false , isInvalid =false , id , ...props }, ref)=>{
    const { controlId  } = _react.useContext(_formContextDefault.default);
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-select');
    return(/*#__PURE__*/ _jsxRuntime.jsx("select", {
        ...props,
        size: htmlSize,
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix, size && `${bsPrefix}-${size}`, isValid && `is-valid`, isInvalid && `is-invalid`),
        id: id || controlId
    }));
});
FormSelect.displayName = 'FormSelect';
exports.default = FormSelect;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./FormContext":"axYdK","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gsCyO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const FormText = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , as: Component = 'small' , muted , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-text');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix, muted && 'text-muted')
    }));
});
FormText.displayName = 'FormText';
exports.default = FormText;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"U0RUx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _formCheck = require("./FormCheck");
var _formCheckDefault = parcelHelpers.interopDefault(_formCheck);
var _jsxRuntime = require("react/jsx-runtime");
const Switch = /*#__PURE__*/ _react.forwardRef((props, ref)=>/*#__PURE__*/ _jsxRuntime.jsx(_formCheckDefault.default, {
        ...props,
        ref: ref,
        type: "switch"
    })
);
Switch.displayName = 'Switch';
exports.default = Object.assign(Switch, {
    Input: _formCheckDefault.default.Input,
    Label: _formCheckDefault.default.Label
});

},{"react":"4mchR","./FormCheck":"k9egm","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1Xz1h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _formGroup = require("./FormGroup");
var _formGroupDefault = parcelHelpers.interopDefault(_formGroup);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const FloatingLabel = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , children , controlId , label , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'form-floating');
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_formGroupDefault.default, {
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix),
        controlId: controlId,
        ...props,
        children: [
            children,
            /*#__PURE__*/ _jsxRuntime.jsx("label", {
                htmlFor: controlId,
                children: label
            })
        ]
    }));
});
FloatingLabel.displayName = 'FloatingLabel';
exports.default = FloatingLabel;

},{"classnames":"2cVcN","react":"4mchR","./FormGroup":"6eZW8","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gFkXb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    fluid: false
};
const Container = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , fluid , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , className , ...props }, ref)=>{
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'container');
    const suffix = typeof fluid === 'string' ? `-${fluid}` : '-fluid';
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, fluid ? `${prefix}${suffix}` : prefix)
    }));
});
Container.displayName = 'Container';
Container.defaultProps = defaultProps;
exports.default = Container;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lntx1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "propTypes", ()=>propTypes
);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const propTypes = {
    /**
   * @default 'img'
   */ bsPrefix: _propTypesDefault.default.string,
    /**
   * Sets image as fluid image.
   */ fluid: _propTypesDefault.default.bool,
    /**
   * Sets image shape as rounded.
   */ rounded: _propTypesDefault.default.bool,
    /**
   * Sets image shape as circle.
   */ roundedCircle: _propTypesDefault.default.bool,
    /**
   * Sets image shape as thumbnail.
   */ thumbnail: _propTypesDefault.default.bool
};
const defaultProps = {
    fluid: false,
    rounded: false,
    roundedCircle: false,
    thumbnail: false
};
const Image = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , fluid , rounded , roundedCircle , thumbnail , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'img');
    return(/*#__PURE__*/ _jsxRuntime.jsx("img", {
        // eslint-disable-line jsx-a11y/alt-text
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, fluid && `${bsPrefix}-fluid`, rounded && `rounded`, roundedCircle && `rounded-circle`, thumbnail && `${bsPrefix}-thumbnail`)
    }));
});
Image.displayName = 'Image';
Image.defaultProps = defaultProps;
exports.default = Image;

},{"classnames":"2cVcN","react":"4mchR","prop-types":"2bysO","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dD7yw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _figureImage = require("./FigureImage");
var _figureImageDefault = parcelHelpers.interopDefault(_figureImage);
var _figureCaption = require("./FigureCaption");
var _figureCaptionDefault = parcelHelpers.interopDefault(_figureCaption);
const Figure = _createWithBsPrefixDefault.default('figure', {
    Component: 'figure'
});
exports.default = Object.assign(Figure, {
    Image: _figureImageDefault.default,
    Caption: _figureCaptionDefault.default
});

},{"./createWithBsPrefix":"8IH8I","./FigureImage":"9Daf1","./FigureCaption":"4ZHZG","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9Daf1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _image = require("./Image");
var _imageDefault = parcelHelpers.interopDefault(_image);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    fluid: true
};
const FigureImage = /*#__PURE__*/ _react.forwardRef(({ className , ...props }, ref)=>/*#__PURE__*/ _jsxRuntime.jsx(_imageDefault.default, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, 'figure-img')
    })
);
FigureImage.displayName = 'FigureImage';
FigureImage.propTypes = _image.propTypes;
FigureImage.defaultProps = defaultProps;
exports.default = FigureImage;

},{"classnames":"2cVcN","react":"4mchR","./Image":"lntx1","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4ZHZG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
const FigureCaption = _createWithBsPrefixDefault.default('figure-caption', {
    Component: 'figcaption'
});
exports.default = FigureCaption;

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jHgra":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _themeProvider = require("./ThemeProvider");
var _formCheckInput = require("./FormCheckInput");
var _formCheckInputDefault = parcelHelpers.interopDefault(_formCheckInput);
var _inputGroupContext = require("./InputGroupContext");
var _inputGroupContextDefault = parcelHelpers.interopDefault(_inputGroupContext);
var _jsxRuntime = require("react/jsx-runtime");
const InputGroupText = _createWithBsPrefixDefault.default('input-group-text', {
    Component: 'span'
});
const InputGroupCheckbox = (props)=>/*#__PURE__*/ _jsxRuntime.jsx(InputGroupText, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(_formCheckInputDefault.default, {
            type: "checkbox",
            ...props
        })
    })
;
const InputGroupRadio = (props)=>/*#__PURE__*/ _jsxRuntime.jsx(InputGroupText, {
        children: /*#__PURE__*/ _jsxRuntime.jsx(_formCheckInputDefault.default, {
            type: "radio",
            ...props
        })
    })
;
/**
 *
 * @property {InputGroupText} Text
 * @property {InputGroupRadio} Radio
 * @property {InputGroupCheckbox} Checkbox
 */ const InputGroup = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , size , hasValidation , className , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'input-group'); // Intentionally an empty object. Used in detecting if a dropdown
    // exists under an input group.
    const contextValue = _react.useMemo(()=>({
        })
    , []);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_inputGroupContextDefault.default.Provider, {
        value: contextValue,
        children: /*#__PURE__*/ _jsxRuntime.jsx(Component, {
            ref: ref,
            ...props,
            className: _classnamesDefault.default(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')
        })
    }));
});
InputGroup.displayName = 'InputGroup';
exports.default = Object.assign(InputGroup, {
    Text: InputGroupText,
    Radio: InputGroupRadio,
    Checkbox: InputGroupCheckbox
});

},{"classnames":"2cVcN","react":"4mchR","./createWithBsPrefix":"8IH8I","./ThemeProvider":"oG7Uz","./FormCheckInput":"fNTQv","./InputGroupContext":"8dQQC","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5ZBCJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _uncontrollable = require("uncontrollable");
var _nav = require("@restart/ui/Nav");
var _navDefault = parcelHelpers.interopDefault(_nav);
var _themeProvider = require("./ThemeProvider");
var _listGroupItem = require("./ListGroupItem");
var _listGroupItemDefault = parcelHelpers.interopDefault(_listGroupItem);
var _jsxRuntime = require("react/jsx-runtime");
const ListGroup = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    const { className , bsPrefix: initialBsPrefix , variant , horizontal , numbered , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as ='div' , ...controlledProps } = _uncontrollable.useUncontrolled(props, {
        activeKey: 'onSelect'
    });
    const bsPrefix = _themeProvider.useBootstrapPrefix(initialBsPrefix, 'list-group');
    let horizontalVariant;
    if (horizontal) horizontalVariant = horizontal === true ? 'horizontal' : `horizontal-${horizontal}`;
    _warningDefault.default(!(horizontal && variant === 'flush'), '`variant="flush"` and `horizontal` should not be used together.');
    return(/*#__PURE__*/ _jsxRuntime.jsx(_navDefault.default, {
        ref: ref,
        ...controlledProps,
        as: as,
        className: _classnamesDefault.default(className, bsPrefix, variant && `${bsPrefix}-${variant}`, horizontalVariant && `${bsPrefix}-${horizontalVariant}`, numbered && `${bsPrefix}-numbered`)
    }));
});
ListGroup.displayName = 'ListGroup';
exports.default = Object.assign(ListGroup, {
    Item: _listGroupItemDefault.default
});

},{"classnames":"2cVcN","react":"4mchR","warning":"4vouU","uncontrollable":"aG99Z","@restart/ui/Nav":"7lhRU","./ThemeProvider":"oG7Uz","./ListGroupItem":"lStPp","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7lhRU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _querySelectorAll = require("dom-helpers/querySelectorAll");
var _querySelectorAllDefault = parcelHelpers.interopDefault(_querySelectorAll);
var _react = require("react");
var _useForceUpdate = require("@restart/hooks/useForceUpdate");
var _useForceUpdateDefault = parcelHelpers.interopDefault(_useForceUpdate);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _navContext = require("./NavContext");
var _navContextDefault = parcelHelpers.interopDefault(_navContext);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _tabContext = require("./TabContext");
var _tabContextDefault = parcelHelpers.interopDefault(_tabContext);
var _dataKey = require("./DataKey");
var _navItem = require("./NavItem");
var _navItemDefault = parcelHelpers.interopDefault(_navItem);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "as",
    "onSelect",
    "activeKey",
    "role",
    "onKeyDown"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
// eslint-disable-next-line @typescript-eslint/no-empty-function
const noop = ()=>{
};
const EVENT_KEY_ATTR = _dataKey.dataAttr('event-key');
const Nav = /*#__PURE__*/ _react.forwardRef((_ref, ref)=>{
    let { // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'div' , onSelect , activeKey , role , onKeyDown  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    // A ref and forceUpdate for refocus, b/c we only want to trigger when needed
    // and don't want to reset the set in the effect
    const forceUpdate = _useForceUpdateDefault.default();
    const needsRefocusRef = _react.useRef(false);
    const parentOnSelect = _react.useContext(_selectableContextDefault.default);
    const tabContext = _react.useContext(_tabContextDefault.default);
    let getControlledId, getControllerId;
    if (tabContext) {
        role = role || 'tablist';
        activeKey = tabContext.activeKey; // TODO: do we need to duplicate these?
        getControlledId = tabContext.getControlledId;
        getControllerId = tabContext.getControllerId;
    }
    const listNode = _react.useRef(null);
    const getNextActiveTab = (offset)=>{
        const currentListNode = listNode.current;
        if (!currentListNode) return null;
        const items = _querySelectorAllDefault.default(currentListNode, `[${EVENT_KEY_ATTR}]:not([aria-disabled=true])`);
        const activeChild = currentListNode.querySelector('[aria-selected=true]');
        if (!activeChild) return null;
        const index = items.indexOf(activeChild);
        if (index === -1) return null;
        let nextIndex = index + offset;
        if (nextIndex >= items.length) nextIndex = 0;
        if (nextIndex < 0) nextIndex = items.length - 1;
        return items[nextIndex];
    };
    const handleSelect = (key, event)=>{
        if (key == null) return;
        onSelect == null || onSelect(key, event);
        parentOnSelect == null || parentOnSelect(key, event);
    };
    const handleKeyDown = (event)=>{
        onKeyDown == null || onKeyDown(event);
        if (!tabContext) return;
        let nextActiveChild;
        switch(event.key){
            case 'ArrowLeft':
            case 'ArrowUp':
                nextActiveChild = getNextActiveTab(-1);
                break;
            case 'ArrowRight':
            case 'ArrowDown':
                nextActiveChild = getNextActiveTab(1);
                break;
            default:
                return;
        }
        if (!nextActiveChild) return;
        event.preventDefault();
        handleSelect(nextActiveChild.dataset[_dataKey.dataProp('EventKey')] || null, event);
        needsRefocusRef.current = true;
        forceUpdate();
    };
    _react.useEffect(()=>{
        if (listNode.current && needsRefocusRef.current) {
            const activeChild = listNode.current.querySelector(`[${EVENT_KEY_ATTR}][aria-selected=true]`);
            activeChild == null || activeChild.focus();
        }
        needsRefocusRef.current = false;
    });
    const mergedRef = _useMergedRefsDefault.default(ref, listNode);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
        value: handleSelect,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_navContextDefault.default.Provider, {
            value: {
                role,
                // used by NavLink to determine it's role
                activeKey: _selectableContext.makeEventKey(activeKey),
                getControlledId: getControlledId || noop,
                getControllerId: getControllerId || noop
            },
            children: /*#__PURE__*/ _jsxRuntime.jsx(Component, Object.assign({
            }, props, {
                onKeyDown: handleKeyDown,
                ref: mergedRef,
                role: role
            }))
        })
    }));
});
Nav.displayName = 'Nav';
exports.default = Object.assign(Nav, {
    Item: _navItemDefault.default
});

},{"dom-helpers/querySelectorAll":"6tNC8","react":"4mchR","@restart/hooks/useForceUpdate":"jhYj4","@restart/hooks/useMergedRefs":"fj3d7","./NavContext":"8F9CB","./SelectableContext":"6DoIj","./TabContext":"gm1bN","./DataKey":"djk1E","./NavItem":"cgqID","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gm1bN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const TabContext = /*#__PURE__*/ _react.createContext(null);
exports.default = TabContext;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cgqID":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useNavItem", ()=>useNavItem
);
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _navContext = require("./NavContext");
var _navContextDefault = parcelHelpers.interopDefault(_navContext);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _dataKey = require("./DataKey");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "as",
    "active",
    "eventKey"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function useNavItem({ key , onClick , active , id , role , disabled  }) {
    const parentOnSelect = _react.useContext(_selectableContextDefault.default);
    const navContext = _react.useContext(_navContextDefault.default);
    let isActive = active;
    const props = {
        role
    };
    if (navContext) {
        if (!role && navContext.role === 'tablist') props.role = 'tab';
        const contextControllerId = navContext.getControllerId(key != null ? key : null);
        const contextControlledId = navContext.getControlledId(key != null ? key : null); // @ts-ignore
        props[_dataKey.dataAttr('event-key')] = key;
        props.id = contextControllerId || id;
        props['aria-controls'] = contextControlledId;
        isActive = active == null && key != null ? navContext.activeKey === key : active;
    }
    if (props.role === 'tab') {
        if (disabled) {
            props.tabIndex = -1;
            props['aria-disabled'] = true;
        }
        if (isActive) props['aria-selected'] = isActive;
        else props.tabIndex = -1;
    }
    props.onClick = _useEventCallbackDefault.default((e)=>{
        if (disabled) return;
        onClick == null || onClick(e);
        if (key == null) return;
        if (parentOnSelect && !e.isPropagationStopped()) parentOnSelect(key, e);
    });
    return [
        props,
        {
            isActive
        }
    ];
}
const NavItem = /*#__PURE__*/ _react.forwardRef((_ref, ref)=>{
    let { as: Component = _buttonDefault.default , active , eventKey  } = _ref, options = _objectWithoutPropertiesLoose(_ref, _excluded);
    const [props, meta] = useNavItem(Object.assign({
        key: _selectableContext.makeEventKey(eventKey, options.href),
        active
    }, options)); // @ts-ignore
    props[_dataKey.dataAttr('active')] = meta.isActive;
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, Object.assign({
    }, options, props, {
        ref: ref
    })));
});
NavItem.displayName = 'NavItem';
exports.default = NavItem;

},{"react":"4mchR","@restart/hooks/useEventCallback":"8QyIg","./NavContext":"8F9CB","./SelectableContext":"6DoIj","./Button":"3AURZ","./DataKey":"djk1E","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lStPp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _navItem = require("@restart/ui/NavItem");
var _selectableContext = require("@restart/ui/SelectableContext");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const ListGroupItem = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , active , disabled , eventKey , className , variant , action , as , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'list-group-item');
    const [navItemProps, meta] = _navItem.useNavItem({
        key: _selectableContext.makeEventKey(eventKey, props.href),
        active,
        ...props
    });
    const handleClick = _useEventCallbackDefault.default((event)=>{
        if (disabled) {
            event.preventDefault();
            event.stopPropagation();
            return;
        }
        navItemProps.onClick(event);
    });
    if (disabled && props.tabIndex === undefined) {
        props.tabIndex = -1;
        props['aria-disabled'] = true;
    } // eslint-disable-next-line no-nested-ternary
    const Component = as || (action ? props.href ? 'a' : 'button' : 'div');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        ...props,
        ...navItemProps,
        onClick: handleClick,
        className: _classnamesDefault.default(className, bsPrefix, meta.isActive && 'active', disabled && 'disabled', variant && `${bsPrefix}-${variant}`, action && `${bsPrefix}-action`)
    }));
});
ListGroupItem.displayName = 'ListGroupItem';
exports.default = ListGroupItem;

},{"classnames":"2cVcN","react":"4mchR","@restart/hooks/useEventCallback":"8QyIg","@restart/ui/NavItem":"cgqID","@restart/ui/SelectableContext":"6DoIj","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3e8qu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _addEventListener = require("dom-helpers/addEventListener");
var _addEventListenerDefault = parcelHelpers.interopDefault(_addEventListener);
var _canUseDOM = require("dom-helpers/canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
var _ownerDocument = require("dom-helpers/ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _removeEventListener = require("dom-helpers/removeEventListener");
var _removeEventListenerDefault = parcelHelpers.interopDefault(_removeEventListener);
var _scrollbarSize = require("dom-helpers/scrollbarSize");
var _scrollbarSizeDefault = parcelHelpers.interopDefault(_scrollbarSize);
var _useCallbackRef = require("@restart/hooks/useCallbackRef");
var _useCallbackRefDefault = parcelHelpers.interopDefault(_useCallbackRef);
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _useWillUnmount = require("@restart/hooks/useWillUnmount");
var _useWillUnmountDefault = parcelHelpers.interopDefault(_useWillUnmount);
var _transitionEnd = require("dom-helpers/transitionEnd");
var _transitionEndDefault = parcelHelpers.interopDefault(_transitionEnd);
var _react = require("react");
var _modal = require("@restart/ui/Modal");
var _modalDefault = parcelHelpers.interopDefault(_modal);
var _bootstrapModalManager = require("./BootstrapModalManager");
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _modalBody = require("./ModalBody");
var _modalBodyDefault = parcelHelpers.interopDefault(_modalBody);
var _modalContext = require("./ModalContext");
var _modalContextDefault = parcelHelpers.interopDefault(_modalContext);
var _modalDialog = require("./ModalDialog");
var _modalDialogDefault = parcelHelpers.interopDefault(_modalDialog);
var _modalFooter = require("./ModalFooter");
var _modalFooterDefault = parcelHelpers.interopDefault(_modalFooter);
var _modalHeader = require("./ModalHeader");
var _modalHeaderDefault = parcelHelpers.interopDefault(_modalHeader);
var _modalTitle = require("./ModalTitle");
var _modalTitleDefault = parcelHelpers.interopDefault(_modalTitle);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    show: false,
    backdrop: true,
    keyboard: true,
    autoFocus: true,
    enforceFocus: true,
    restoreFocus: true,
    animation: true,
    dialogAs: _modalDialogDefault.default
};
/* eslint-disable no-use-before-define, react/no-multi-comp */ function DialogTransition(props) {
    return(/*#__PURE__*/ _jsxRuntime.jsx(_fadeDefault.default, {
        ...props,
        timeout: null
    }));
}
function BackdropTransition(props) {
    return(/*#__PURE__*/ _jsxRuntime.jsx(_fadeDefault.default, {
        ...props,
        timeout: null
    }));
}
/* eslint-enable no-use-before-define */ const Modal = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , style , dialogClassName , contentClassName , children , dialogAs: Dialog , 'aria-labelledby': ariaLabelledby , /* BaseModal props */ show , animation , backdrop , keyboard , onEscapeKeyDown , onShow , onHide , container , autoFocus , enforceFocus , restoreFocus , restoreFocusOptions , onEntered , onExit , onExiting , onEnter , onEntering , onExited , backdropClassName , manager: propsManager , ...props }, ref)=>{
    const [modalStyle, setStyle] = _react.useState({
    });
    const [animateStaticModal, setAnimateStaticModal] = _react.useState(false);
    const waitingForMouseUpRef = _react.useRef(false);
    const ignoreBackdropClickRef = _react.useRef(false);
    const removeStaticModalAnimationRef = _react.useRef(null);
    const [modal, setModalRef] = _useCallbackRefDefault.default();
    const mergedRef = _useMergedRefsDefault.default(ref, setModalRef);
    const handleHide = _useEventCallbackDefault.default(onHide);
    const isRTL = _themeProvider.useIsRTL();
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'modal');
    const modalContext = _react.useMemo(()=>({
            onHide: handleHide
        })
    , [
        handleHide
    ]);
    function getModalManager() {
        if (propsManager) return propsManager;
        return _bootstrapModalManager.getSharedManager({
            isRTL
        });
    }
    function updateDialogStyle(node) {
        if (!_canUseDOMDefault.default) return;
        const containerIsOverflowing = getModalManager().getScrollbarWidth() > 0;
        const modalIsOverflowing = node.scrollHeight > _ownerDocumentDefault.default(node).documentElement.clientHeight;
        setStyle({
            paddingRight: containerIsOverflowing && !modalIsOverflowing ? _scrollbarSizeDefault.default() : undefined,
            paddingLeft: !containerIsOverflowing && modalIsOverflowing ? _scrollbarSizeDefault.default() : undefined
        });
    }
    const handleWindowResize = _useEventCallbackDefault.default(()=>{
        if (modal) updateDialogStyle(modal.dialog);
    });
    _useWillUnmountDefault.default(()=>{
        _removeEventListenerDefault.default(window, 'resize', handleWindowResize);
        removeStaticModalAnimationRef.current == null || removeStaticModalAnimationRef.current();
    }); // We prevent the modal from closing during a drag by detecting where the
    // the click originates from. If it starts in the modal and then ends outside
    // don't close.
    const handleDialogMouseDown = ()=>{
        waitingForMouseUpRef.current = true;
    };
    const handleMouseUp = (e)=>{
        if (waitingForMouseUpRef.current && modal && e.target === modal.dialog) ignoreBackdropClickRef.current = true;
        waitingForMouseUpRef.current = false;
    };
    const handleStaticModalAnimation = ()=>{
        setAnimateStaticModal(true);
        removeStaticModalAnimationRef.current = _transitionEndDefault.default(modal.dialog, ()=>{
            setAnimateStaticModal(false);
        });
    };
    const handleStaticBackdropClick = (e)=>{
        if (e.target !== e.currentTarget) return;
        handleStaticModalAnimation();
    };
    const handleClick = (e)=>{
        if (backdrop === 'static') {
            handleStaticBackdropClick(e);
            return;
        }
        if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {
            ignoreBackdropClickRef.current = false;
            return;
        }
        onHide == null || onHide();
    };
    const handleEscapeKeyDown = (e)=>{
        if (!keyboard && backdrop === 'static') {
            // Call preventDefault to stop modal from closing in restart ui,
            // then play our animation.
            e.preventDefault();
            handleStaticModalAnimation();
        } else if (keyboard && onEscapeKeyDown) onEscapeKeyDown(e);
    };
    const handleEnter = (node, isAppearing)=>{
        if (node) {
            node.style.display = 'block';
            updateDialogStyle(node);
        }
        onEnter == null || onEnter(node, isAppearing);
    };
    const handleExit = (node)=>{
        removeStaticModalAnimationRef.current == null || removeStaticModalAnimationRef.current();
        onExit == null || onExit(node);
    };
    const handleEntering = (node, isAppearing)=>{
        onEntering == null || onEntering(node, isAppearing); // FIXME: This should work even when animation is disabled.
        _addEventListenerDefault.default(window, 'resize', handleWindowResize);
    };
    const handleExited = (node)=>{
        if (node) node.style.display = ''; // RHL removes it sometimes
        onExited == null || onExited(node); // FIXME: This should work even when animation is disabled.
        _removeEventListenerDefault.default(window, 'resize', handleWindowResize);
    };
    const renderBackdrop = _react.useCallback((backdropProps)=>/*#__PURE__*/ _jsxRuntime.jsx("div", {
            ...backdropProps,
            className: _classnamesDefault.default(`${bsPrefix}-backdrop`, backdropClassName, !animation && 'show')
        })
    , [
        animation,
        backdropClassName,
        bsPrefix
    ]);
    const baseModalStyle = {
        ...style,
        ...modalStyle
    }; // Sets `display` always block when `animation` is false
    if (!animation) baseModalStyle.display = 'block';
    const renderDialog = (dialogProps)=>/*#__PURE__*/ _jsxRuntime.jsx("div", {
            role: "dialog",
            ...dialogProps,
            style: baseModalStyle,
            className: _classnamesDefault.default(className, bsPrefix, animateStaticModal && `${bsPrefix}-static`),
            onClick: backdrop ? handleClick : undefined,
            onMouseUp: handleMouseUp,
            "aria-labelledby": ariaLabelledby,
            children: /*#__PURE__*/ _jsxRuntime.jsx(Dialog, {
                ...props,
                onMouseDown: handleDialogMouseDown,
                className: dialogClassName,
                contentClassName: contentClassName,
                children: children
            })
        })
    ;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_modalContextDefault.default.Provider, {
        value: modalContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_modalDefault.default, {
            show: show,
            ref: mergedRef,
            backdrop: backdrop,
            container: container,
            keyboard: true // Always set true - see handleEscapeKeyDown
            ,
            autoFocus: autoFocus,
            enforceFocus: enforceFocus,
            restoreFocus: restoreFocus,
            restoreFocusOptions: restoreFocusOptions,
            onEscapeKeyDown: handleEscapeKeyDown,
            onShow: onShow,
            onHide: onHide,
            onEnter: handleEnter,
            onEntering: handleEntering,
            onEntered: onEntered,
            onExit: handleExit,
            onExiting: onExiting,
            onExited: handleExited,
            manager: getModalManager(),
            transition: animation ? DialogTransition : undefined,
            backdropTransition: animation ? BackdropTransition : undefined,
            renderBackdrop: renderBackdrop,
            renderDialog: renderDialog
        })
    }));
});
Modal.displayName = 'Modal';
Modal.defaultProps = defaultProps;
exports.default = Object.assign(Modal, {
    Body: _modalBodyDefault.default,
    Header: _modalHeaderDefault.default,
    Title: _modalTitleDefault.default,
    Footer: _modalFooterDefault.default,
    Dialog: _modalDialogDefault.default,
    TRANSITION_DURATION: 300,
    BACKDROP_TRANSITION_DURATION: 150
});

},{"classnames":"2cVcN","dom-helpers/addEventListener":"kM7Ny","dom-helpers/canUseDOM":"b2ppt","dom-helpers/ownerDocument":"b8OFQ","dom-helpers/removeEventListener":"6Rtjt","dom-helpers/scrollbarSize":"gkTjJ","@restart/hooks/useCallbackRef":"4MRqx","@restart/hooks/useEventCallback":"8QyIg","@restart/hooks/useMergedRefs":"fj3d7","@restart/hooks/useWillUnmount":"fr49k","dom-helpers/transitionEnd":"5WYHD","react":"4mchR","@restart/ui/Modal":"2BxPy","./BootstrapModalManager":"fLjhQ","./Fade":"cHHEJ","./ModalBody":"eiGfM","./ModalContext":"6Bu6N","./ModalDialog":"5L3Ev","./ModalFooter":"5ZZee","./ModalHeader":"jx4Qr","./ModalTitle":"bXx7g","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gkTjJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canUseDOM = require("./canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
var size;
function scrollbarSize(recalc) {
    if (!size && size !== 0 || recalc) {
        if (_canUseDOMDefault.default) {
            var scrollDiv = document.createElement('div');
            scrollDiv.style.position = 'absolute';
            scrollDiv.style.top = '-9999px';
            scrollDiv.style.width = '50px';
            scrollDiv.style.height = '50px';
            scrollDiv.style.overflow = 'scroll';
            document.body.appendChild(scrollDiv);
            size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            document.body.removeChild(scrollDiv);
        }
    }
    return size;
}
exports.default = scrollbarSize;

},{"./canUseDOM":"b2ppt","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2BxPy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable @typescript-eslint/no-use-before-define, react/prop-types */ var _activeElement = require("dom-helpers/activeElement");
var _activeElementDefault = parcelHelpers.interopDefault(_activeElement);
var _contains = require("dom-helpers/contains");
var _containsDefault = parcelHelpers.interopDefault(_contains);
var _canUseDOM = require("dom-helpers/canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
var _listen = require("dom-helpers/listen");
var _listenDefault = parcelHelpers.interopDefault(_listen);
var _react = require("react");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _useMounted = require("@restart/hooks/useMounted");
var _useMountedDefault = parcelHelpers.interopDefault(_useMounted);
var _useWillUnmount = require("@restart/hooks/useWillUnmount");
var _useWillUnmountDefault = parcelHelpers.interopDefault(_useWillUnmount);
var _usePrevious = require("@restart/hooks/usePrevious");
var _usePreviousDefault = parcelHelpers.interopDefault(_usePrevious);
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _modalManager = require("./ModalManager");
var _modalManagerDefault = parcelHelpers.interopDefault(_modalManager);
var _useWaitForDOMRef = require("./useWaitForDOMRef");
var _useWaitForDOMRefDefault = parcelHelpers.interopDefault(_useWaitForDOMRef);
var _useWindow = require("./useWindow");
var _useWindowDefault = parcelHelpers.interopDefault(_useWindow);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "show",
    "role",
    "className",
    "style",
    "children",
    "backdrop",
    "keyboard",
    "onBackdropClick",
    "onEscapeKeyDown",
    "transition",
    "backdropTransition",
    "autoFocus",
    "enforceFocus",
    "restoreFocus",
    "restoreFocusOptions",
    "renderDialog",
    "renderBackdrop",
    "manager",
    "container",
    "onShow",
    "onHide",
    "onExit",
    "onExited",
    "onExiting",
    "onEnter",
    "onEntering",
    "onEntered"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
let manager;
function getManager(window) {
    if (!manager) manager = new _modalManagerDefault.default({
        ownerDocument: window == null ? void 0 : window.document
    });
    return manager;
}
function useModalManager(provided) {
    const window = _useWindowDefault.default();
    const modalManager = provided || getManager(window);
    const modal = _react.useRef({
        dialog: null,
        backdrop: null
    });
    return Object.assign(modal.current, {
        add: ()=>modalManager.add(modal.current)
        ,
        remove: ()=>modalManager.remove(modal.current)
        ,
        isTopModal: ()=>modalManager.isTopModal(modal.current)
        ,
        setDialogRef: _react.useCallback((ref)=>{
            modal.current.dialog = ref;
        }, []),
        setBackdropRef: _react.useCallback((ref)=>{
            modal.current.backdrop = ref;
        }, [])
    });
}
const Modal = /*#__PURE__*/ _react.forwardRef((_ref, ref)=>{
    let { show =false , role ='dialog' , className , style , children , backdrop =true , keyboard =true , onBackdropClick , onEscapeKeyDown , transition , backdropTransition , autoFocus =true , enforceFocus =true , restoreFocus =true , restoreFocusOptions , renderDialog , renderBackdrop =(props)=>/*#__PURE__*/ _jsxRuntime.jsx("div", Object.assign({
        }, props))
     , manager: providedManager , container: containerRef , onShow , onHide =()=>{
    } , onExit , onExited , onExiting , onEnter , onEntering , onEntered  } = _ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded);
    const container = _useWaitForDOMRefDefault.default(containerRef);
    const modal = useModalManager(providedManager);
    const isMounted = _useMountedDefault.default();
    const prevShow = _usePreviousDefault.default(show);
    const [exited, setExited] = _react.useState(!show);
    const lastFocusRef = _react.useRef(null);
    _react.useImperativeHandle(ref, ()=>modal
    , [
        modal
    ]);
    if (_canUseDOMDefault.default && !prevShow && show) lastFocusRef.current = _activeElementDefault.default();
    if (!transition && !show && !exited) setExited(true);
    else if (show && exited) setExited(false);
    const handleShow = _useEventCallbackDefault.default(()=>{
        modal.add();
        removeKeydownListenerRef.current = _listenDefault.default(document, 'keydown', handleDocumentKeyDown);
        removeFocusListenerRef.current = _listenDefault.default(document, 'focus', // and so steals focus from it
        ()=>setTimeout(handleEnforceFocus)
        , true);
        if (onShow) onShow();
         // autofocus after onShow to not trigger a focus event for previous
        // modals before this one is shown.
        if (autoFocus) {
            const currentActiveElement = _activeElementDefault.default(document);
            if (modal.dialog && currentActiveElement && !_containsDefault.default(modal.dialog, currentActiveElement)) {
                lastFocusRef.current = currentActiveElement;
                modal.dialog.focus();
            }
        }
    });
    const handleHide = _useEventCallbackDefault.default(()=>{
        modal.remove();
        removeKeydownListenerRef.current == null || removeKeydownListenerRef.current();
        removeFocusListenerRef.current == null || removeFocusListenerRef.current();
        if (restoreFocus) {
            var _lastFocusRef$current;
            // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)
            (_lastFocusRef$current = lastFocusRef.current) == null || _lastFocusRef$current.focus == null || _lastFocusRef$current.focus(restoreFocusOptions);
            lastFocusRef.current = null;
        }
    }); // TODO: try and combine these effects: https://github.com/react-bootstrap/react-overlays/pull/794#discussion_r409954120
    // Show logic when:
    //  - show is `true` _and_ `container` has resolved
    _react.useEffect(()=>{
        if (!show || !container) return;
        handleShow();
    }, [
        show,
        container,
        /* should never change: */ handleShow
    ]); // Hide cleanup logic when:
    //  - `exited` switches to true
    //  - component unmounts;
    _react.useEffect(()=>{
        if (!exited) return;
        handleHide();
    }, [
        exited,
        handleHide
    ]);
    _useWillUnmountDefault.default(()=>{
        handleHide();
    }); // --------------------------------
    const handleEnforceFocus = _useEventCallbackDefault.default(()=>{
        if (!enforceFocus || !isMounted() || !modal.isTopModal()) return;
        const currentActiveElement = _activeElementDefault.default();
        if (modal.dialog && currentActiveElement && !_containsDefault.default(modal.dialog, currentActiveElement)) modal.dialog.focus();
    });
    const handleBackdropClick = _useEventCallbackDefault.default((e)=>{
        if (e.target !== e.currentTarget) return;
        onBackdropClick == null || onBackdropClick(e);
        if (backdrop === true) onHide();
    });
    const handleDocumentKeyDown = _useEventCallbackDefault.default((e)=>{
        if (keyboard && e.keyCode === 27 && modal.isTopModal()) {
            onEscapeKeyDown == null || onEscapeKeyDown(e);
            if (!e.defaultPrevented) onHide();
        }
    });
    const removeFocusListenerRef = _react.useRef();
    const removeKeydownListenerRef = _react.useRef();
    const handleHidden = (...args)=>{
        setExited(true);
        onExited == null || onExited(...args);
    };
    const Transition = transition;
    if (!container || !(show || Transition && !exited)) return null;
    const dialogProps = Object.assign({
        role,
        ref: modal.setDialogRef,
        // apparently only works on the dialog role element
        'aria-modal': role === 'dialog' ? true : undefined
    }, rest, {
        style,
        className,
        tabIndex: -1
    });
    let dialog = renderDialog ? renderDialog(dialogProps) : /*#__PURE__*/ _jsxRuntime.jsx("div", Object.assign({
    }, dialogProps, {
        children: /*#__PURE__*/ _react.cloneElement(children, {
            role: 'document'
        })
    }));
    if (Transition) dialog = /*#__PURE__*/ _jsxRuntime.jsx(Transition, {
        appear: true,
        unmountOnExit: true,
        in: !!show,
        onExit: onExit,
        onExiting: onExiting,
        onExited: handleHidden,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: onEntered,
        children: dialog
    });
    let backdropElement = null;
    if (backdrop) {
        const BackdropTransition = backdropTransition;
        backdropElement = renderBackdrop({
            ref: modal.setBackdropRef,
            onClick: handleBackdropClick
        });
        if (BackdropTransition) backdropElement = /*#__PURE__*/ _jsxRuntime.jsx(BackdropTransition, {
            appear: true,
            in: !!show,
            children: backdropElement
        });
    }
    return(/*#__PURE__*/ _jsxRuntime.jsx(_jsxRuntime.Fragment, {
        children: /*#__PURE__*/ _reactDomDefault.default.createPortal(/*#__PURE__*/ _jsxRuntime.jsxs(_jsxRuntime.Fragment, {
            children: [
                backdropElement,
                dialog
            ]
        }), container)
    }));
});
Modal.displayName = 'Modal';
exports.default = Object.assign(Modal, {
    Manager: _modalManagerDefault.default
});

},{"dom-helpers/activeElement":"7gRL6","dom-helpers/contains":"asPpd","dom-helpers/canUseDOM":"b2ppt","dom-helpers/listen":"fotiI","react":"4mchR","react-dom":"afyCw","@restart/hooks/useMounted":"lesmc","@restart/hooks/useWillUnmount":"fr49k","@restart/hooks/usePrevious":"6phQk","@restart/hooks/useEventCallback":"8QyIg","./ModalManager":"jg7yG","./useWaitForDOMRef":"fWRMw","./useWindow":"hC2jg","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7gRL6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ownerDocument = require("./ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
function activeElement(doc) {
    if (doc === void 0) doc = _ownerDocumentDefault.default();
    // Support: IE 9 only
    // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
    try {
        var active = doc.activeElement; // IE11 returns a seemingly empty object in some cases when accessing
        // document.activeElement from an <iframe>
        if (!active || !active.nodeName) return null;
        return active;
    } catch (e) {
        /* ie throws if no active element */ return doc.body;
    }
}
exports.default = activeElement;

},{"./ownerDocument":"b8OFQ","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jg7yG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OPEN_DATA_ATTRIBUTE", ()=>OPEN_DATA_ATTRIBUTE
);
var _css = require("dom-helpers/css");
var _cssDefault = parcelHelpers.interopDefault(_css);
var _dataKey = require("./DataKey");
var _getScrollbarWidth = require("./getScrollbarWidth");
var _getScrollbarWidthDefault = parcelHelpers.interopDefault(_getScrollbarWidth);
const OPEN_DATA_ATTRIBUTE = _dataKey.dataAttr('modal-open');
/**
 * Manages a stack of Modals as well as ensuring
 * body scrolling is is disabled and padding accounted for
 */ class ModalManager {
    constructor({ ownerDocument , handleContainerOverflow =true , isRTL =false  } = {
    }){
        this.handleContainerOverflow = handleContainerOverflow;
        this.isRTL = isRTL;
        this.modals = [];
        this.ownerDocument = ownerDocument;
    }
    getScrollbarWidth() {
        return _getScrollbarWidthDefault.default(this.ownerDocument);
    }
    getElement() {
        return (this.ownerDocument || document).body;
    }
    setModalAttributes(_modal) {
    }
    removeModalAttributes(_modal1) {
    }
    setContainerStyle(containerState) {
        const style = {
            overflow: 'hidden'
        }; // we are only interested in the actual `style` here
        // because we will override it
        const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';
        const container = this.getElement();
        containerState.style = {
            overflow: container.style.overflow,
            [paddingProp]: container.style[paddingProp]
        };
        if (containerState.scrollBarWidth) // use computed style, here to get the real padding
        // to add our scrollbar width
        style[paddingProp] = `${parseInt(_cssDefault.default(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;
        container.setAttribute(OPEN_DATA_ATTRIBUTE, '');
        _cssDefault.default(container, style);
    }
    reset() {
        [
            ...this.modals
        ].forEach((m)=>this.remove(m)
        );
    }
    removeContainerStyle(containerState1) {
        const container = this.getElement();
        container.removeAttribute(OPEN_DATA_ATTRIBUTE);
        Object.assign(container.style, containerState1.style);
    }
    add(modal) {
        let modalIdx = this.modals.indexOf(modal);
        if (modalIdx !== -1) return modalIdx;
        modalIdx = this.modals.length;
        this.modals.push(modal);
        this.setModalAttributes(modal);
        if (modalIdx !== 0) return modalIdx;
        this.state = {
            scrollBarWidth: this.getScrollbarWidth(),
            style: {
            }
        };
        if (this.handleContainerOverflow) this.setContainerStyle(this.state);
        return modalIdx;
    }
    remove(modal1) {
        const modalIdx = this.modals.indexOf(modal1);
        if (modalIdx === -1) return;
        this.modals.splice(modalIdx, 1); // if that was the last modal in a container,
        // clean up the container
        if (!this.modals.length && this.handleContainerOverflow) this.removeContainerStyle(this.state);
        this.removeModalAttributes(modal1);
    }
    isTopModal(modal2) {
        return !!this.modals.length && this.modals[this.modals.length - 1] === modal2;
    }
}
exports.default = ModalManager;

},{"dom-helpers/css":"k69TG","./DataKey":"djk1E","./getScrollbarWidth":"aOSpm","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aOSpm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function getBodyScrollbarWidth(ownerDocument = document) {
    const window = ownerDocument.defaultView;
    return Math.abs(window.innerWidth - ownerDocument.documentElement.clientWidth);
}
exports.default = getBodyScrollbarWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fWRMw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveContainerRef", ()=>resolveContainerRef
);
var _ownerDocument = require("dom-helpers/ownerDocument");
var _ownerDocumentDefault = parcelHelpers.interopDefault(_ownerDocument);
var _canUseDOM = require("dom-helpers/canUseDOM");
var _canUseDOMDefault = parcelHelpers.interopDefault(_canUseDOM);
var _react = require("react");
var _useWindow = require("./useWindow");
var _useWindowDefault = parcelHelpers.interopDefault(_useWindow);
const resolveContainerRef = (ref, document)=>{
    var _ref;
    if (!_canUseDOMDefault.default) return null;
    if (ref == null) return (document || _ownerDocumentDefault.default()).body;
    if (typeof ref === 'function') ref = ref();
    if (ref && 'current' in ref) ref = ref.current;
    if ((_ref = ref) != null && _ref.nodeType) return ref || null;
    return null;
};
function useWaitForDOMRef(ref, onResolved) {
    const window = _useWindowDefault.default();
    const [resolvedRef, setRef] = _react.useState(()=>resolveContainerRef(ref, window == null ? void 0 : window.document)
    );
    if (!resolvedRef) {
        const earlyRef = resolveContainerRef(ref);
        if (earlyRef) setRef(earlyRef);
    }
    _react.useEffect(()=>{
        if (onResolved && resolvedRef) onResolved(resolvedRef);
    }, [
        onResolved,
        resolvedRef
    ]);
    _react.useEffect(()=>{
        const nextRef = resolveContainerRef(ref);
        if (nextRef !== resolvedRef) setRef(nextRef);
    }, [
        ref,
        resolvedRef
    ]);
    return resolvedRef;
}
exports.default = useWaitForDOMRef;

},{"dom-helpers/ownerDocument":"b8OFQ","dom-helpers/canUseDOM":"b2ppt","react":"4mchR","./useWindow":"hC2jg","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fLjhQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSharedManager", ()=>getSharedManager
);
var _addClass = require("dom-helpers/addClass");
var _addClassDefault = parcelHelpers.interopDefault(_addClass);
var _css = require("dom-helpers/css");
var _cssDefault = parcelHelpers.interopDefault(_css);
var _querySelectorAll = require("dom-helpers/querySelectorAll");
var _querySelectorAllDefault = parcelHelpers.interopDefault(_querySelectorAll);
var _removeClass = require("dom-helpers/removeClass");
var _removeClassDefault = parcelHelpers.interopDefault(_removeClass);
var _modalManager = require("@restart/ui/ModalManager");
var _modalManagerDefault = parcelHelpers.interopDefault(_modalManager);
const Selector = {
    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
    STICKY_CONTENT: '.sticky-top',
    NAVBAR_TOGGLER: '.navbar-toggler'
};
class BootstrapModalManager extends _modalManagerDefault.default {
    adjustAndStore(prop, element, adjust) {
        const actual = element.style[prop]; // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible
        // @ts-ignore
        element.dataset[prop] = actual;
        _cssDefault.default(element, {
            [prop]: `${parseFloat(_cssDefault.default(element, prop)) + adjust}px`
        });
    }
    restore(prop1, element1) {
        const value = element1.dataset[prop1];
        if (value !== undefined) {
            delete element1.dataset[prop1];
            _cssDefault.default(element1, {
                [prop1]: value
            });
        }
    }
    setContainerStyle(containerState) {
        super.setContainerStyle(containerState);
        const container = this.getElement();
        _addClassDefault.default(container, 'modal-open');
        if (!containerState.scrollBarWidth) return;
        const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';
        const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';
        _querySelectorAllDefault.default(container, Selector.FIXED_CONTENT).forEach((el)=>this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth)
        );
        _querySelectorAllDefault.default(container, Selector.STICKY_CONTENT).forEach((el)=>this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth)
        );
        _querySelectorAllDefault.default(container, Selector.NAVBAR_TOGGLER).forEach((el)=>this.adjustAndStore(marginProp, el, containerState.scrollBarWidth)
        );
    }
    removeContainerStyle(containerState1) {
        super.removeContainerStyle(containerState1);
        const container = this.getElement();
        _removeClassDefault.default(container, 'modal-open');
        const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';
        const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';
        _querySelectorAllDefault.default(container, Selector.FIXED_CONTENT).forEach((el)=>this.restore(paddingProp, el)
        );
        _querySelectorAllDefault.default(container, Selector.STICKY_CONTENT).forEach((el)=>this.restore(marginProp, el)
        );
        _querySelectorAllDefault.default(container, Selector.NAVBAR_TOGGLER).forEach((el)=>this.restore(marginProp, el)
        );
    }
}
let sharedManager;
function getSharedManager(options) {
    if (!sharedManager) sharedManager = new BootstrapModalManager(options);
    return sharedManager;
}
exports.default = BootstrapModalManager;

},{"dom-helpers/addClass":"l4YUz","dom-helpers/css":"k69TG","dom-helpers/querySelectorAll":"6tNC8","dom-helpers/removeClass":"hVmiH","@restart/ui/ModalManager":"jg7yG","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"l4YUz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hasClass = require("./hasClass");
var _hasClassDefault = parcelHelpers.interopDefault(_hasClass);
function addClass(element, className) {
    if (element.classList) element.classList.add(className);
    else if (!_hasClassDefault.default(element, className)) {
        if (typeof element.className === 'string') element.className = element.className + " " + className;
        else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
    }
}
exports.default = addClass;

},{"./hasClass":"aIALm","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aIALm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function hasClass(element, className) {
    if (element.classList) return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}
exports.default = hasClass;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hVmiH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}
function removeClass(element, className) {
    if (element.classList) element.classList.remove(className);
    else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);
    else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
}
exports.default = removeClass;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eiGfM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('modal-body');

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6Bu6N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const ModalContext = /*#__PURE__*/ _react.createContext({
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onHide () {
    }
});
exports.default = ModalContext;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5L3Ev":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const ModalDialog = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , contentClassName , centered , size , fullscreen , children , scrollable , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'modal');
    const dialogClass = `${bsPrefix}-dialog`;
    const fullScreenClass = typeof fullscreen === 'string' ? `${bsPrefix}-fullscreen-${fullscreen}` : `${bsPrefix}-fullscreen`;
    return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
        ...props,
        ref: ref,
        className: _classnamesDefault.default(dialogClass, className, size && `${bsPrefix}-${size}`, centered && `${dialogClass}-centered`, scrollable && `${dialogClass}-scrollable`, fullscreen && fullScreenClass),
        children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
            className: _classnamesDefault.default(`${bsPrefix}-content`, contentClassName),
            children: children
        })
    }));
});
ModalDialog.displayName = 'ModalDialog';
exports.default = ModalDialog;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5ZZee":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('modal-footer');

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jx4Qr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _abstractModalHeader = require("./AbstractModalHeader");
var _abstractModalHeaderDefault = parcelHelpers.interopDefault(_abstractModalHeader);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    closeLabel: 'Close',
    closeButton: false
};
const ModalHeader = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'modal-header');
    return(/*#__PURE__*/ _jsxRuntime.jsx(_abstractModalHeaderDefault.default, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, bsPrefix)
    }));
});
ModalHeader.displayName = 'ModalHeader';
ModalHeader.defaultProps = defaultProps;
exports.default = ModalHeader;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./AbstractModalHeader":"7dtig","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7dtig":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _closeButton = require("./CloseButton");
var _closeButtonDefault = parcelHelpers.interopDefault(_closeButton);
var _modalContext = require("./ModalContext");
var _modalContextDefault = parcelHelpers.interopDefault(_modalContext);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    closeLabel: 'Close',
    closeButton: false
};
const AbstractModalHeader = /*#__PURE__*/ _react.forwardRef(({ closeLabel , closeVariant , closeButton , onHide , children , ...props }, ref)=>{
    const context = _react.useContext(_modalContextDefault.default);
    const handleClick = _useEventCallbackDefault.default(()=>{
        context == null || context.onHide();
        onHide == null || onHide();
    });
    return(/*#__PURE__*/ _jsxRuntime.jsxs("div", {
        ref: ref,
        ...props,
        children: [
            children,
            closeButton && /*#__PURE__*/ _jsxRuntime.jsx(_closeButtonDefault.default, {
                "aria-label": closeLabel,
                variant: closeVariant,
                onClick: handleClick
            })
        ]
    }));
});
AbstractModalHeader.defaultProps = defaultProps;
exports.default = AbstractModalHeader;

},{"react":"4mchR","@restart/hooks/useEventCallback":"8QyIg","./CloseButton":"arc5K","./ModalContext":"6Bu6N","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bXx7g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _divWithClassName = require("./divWithClassName");
var _divWithClassNameDefault = parcelHelpers.interopDefault(_divWithClassName);
const DivStyledAsH4 = _divWithClassNameDefault.default('h4');
exports.default = _createWithBsPrefixDefault.default('modal-title', {
    Component: DivStyledAsH4
});

},{"./createWithBsPrefix":"8IH8I","./divWithClassName":"28Yge","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3TTuV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _all = require("prop-types-extra/lib/all");
var _allDefault = parcelHelpers.interopDefault(_all);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _nav = require("@restart/ui/Nav");
var _navDefault = parcelHelpers.interopDefault(_nav);
var _themeProvider = require("./ThemeProvider");
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _cardHeaderContext = require("./CardHeaderContext");
var _cardHeaderContextDefault = parcelHelpers.interopDefault(_cardHeaderContext);
var _navItem = require("./NavItem");
var _navItemDefault = parcelHelpers.interopDefault(_navItem);
var _navLink = require("./NavLink");
var _navLinkDefault = parcelHelpers.interopDefault(_navLink);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    justify: false,
    fill: false
};
const Nav = /*#__PURE__*/ _react.forwardRef((uncontrolledProps, ref)=>{
    const { as ='div' , bsPrefix: initialBsPrefix , variant , fill , justify , navbar , navbarScroll , className , activeKey , ...props } = _uncontrollable.useUncontrolled(uncontrolledProps, {
        activeKey: 'onSelect'
    });
    const bsPrefix = _themeProvider.useBootstrapPrefix(initialBsPrefix, 'nav');
    let navbarBsPrefix;
    let cardHeaderBsPrefix;
    let isNavbar = false;
    const navbarContext = _react.useContext(_navbarContextDefault.default);
    const cardHeaderContext = _react.useContext(_cardHeaderContextDefault.default);
    if (navbarContext) {
        navbarBsPrefix = navbarContext.bsPrefix;
        isNavbar = navbar == null ? true : navbar;
    } else if (cardHeaderContext) ({ cardHeaderBsPrefix  } = cardHeaderContext);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_navDefault.default, {
        as: as,
        ref: ref,
        activeKey: activeKey,
        className: _classnamesDefault.default(className, {
            [bsPrefix]: !isNavbar,
            [`${navbarBsPrefix}-nav`]: isNavbar,
            [`${navbarBsPrefix}-nav-scroll`]: isNavbar && navbarScroll,
            [`${cardHeaderBsPrefix}-${variant}`]: !!cardHeaderBsPrefix,
            [`${bsPrefix}-${variant}`]: !!variant,
            [`${bsPrefix}-fill`]: fill,
            [`${bsPrefix}-justified`]: justify
        }),
        ...props
    }));
});
Nav.displayName = 'Nav';
Nav.defaultProps = defaultProps;
exports.default = Object.assign(Nav, {
    Item: _navItemDefault.default,
    Link: _navLinkDefault.default
});

},{"classnames":"2cVcN","prop-types-extra/lib/all":"b0cSl","react":"4mchR","uncontrollable":"aG99Z","@restart/ui/Nav":"7lhRU","./ThemeProvider":"oG7Uz","./NavbarContext":"1TV6u","./CardHeaderContext":"lEhgp","./NavItem":"lgp9h","./NavLink":"aGfFg","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b0cSl":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = all;
var _createChainableTypeChecker = require('./utils/createChainableTypeChecker');
var _createChainableTypeChecker2 = _interopRequireDefault(_createChainableTypeChecker);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function all() {
    for(var _len = arguments.length, validators = Array(_len), _key = 0; _key < _len; _key++)validators[_key] = arguments[_key];
    function allPropTypes() {
        for(var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        var error = null;
        validators.forEach(function(validator) {
            if (error != null) return;
            var result = validator.apply(undefined, args);
            if (result != null) error = result;
        });
        return error;
    }
    return (0, _createChainableTypeChecker2.default)(allPropTypes);
}
module.exports = exports['default'];

},{"./utils/createChainableTypeChecker":"iweW2"}],"iweW2":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = createChainableTypeChecker;
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */ // Mostly taken from ReactPropTypes.
function createChainableTypeChecker(validate) {
    function checkType(isRequired, props, propName, componentName, location, propFullName) {
        var componentNameSafe = componentName || '<<anonymous>>';
        var propFullNameSafe = propFullName || propName;
        if (props[propName] == null) {
            if (isRequired) return new Error('Required ' + location + ' `' + propFullNameSafe + '` was not specified ' + ('in `' + componentNameSafe + '`.'));
            return null;
        }
        for(var _len = arguments.length, args = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++)args[_key - 6] = arguments[_key];
        return validate.apply(undefined, [
            props,
            propName,
            componentNameSafe,
            location,
            propFullNameSafe
        ].concat(args));
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
}
module.exports = exports['default'];

},{}],"lgp9h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('nav-item');

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aGfFg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _navItem = require("@restart/ui/NavItem");
var _selectableContext = require("@restart/ui/SelectableContext");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    disabled: false
};
const NavLink = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , as: Component = _anchorDefault.default , active , eventKey , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'nav-link');
    const [navItemProps, meta] = _navItem.useNavItem({
        key: _selectableContext.makeEventKey(eventKey, props.href),
        active,
        ...props
    });
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ...navItemProps,
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix, props.disabled && 'disabled', meta.isActive && 'active')
    }));
});
NavLink.displayName = 'NavLink';
NavLink.defaultProps = defaultProps;
exports.default = NavLink;

},{"classnames":"2cVcN","react":"4mchR","@restart/ui/Anchor":"c3Vvr","@restart/ui/NavItem":"cgqID","@restart/ui/SelectableContext":"6DoIj","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6tJ6F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _selectableContext = require("@restart/ui/SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _uncontrollable = require("uncontrollable");
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _navbarBrand = require("./NavbarBrand");
var _navbarBrandDefault = parcelHelpers.interopDefault(_navbarBrand);
var _navbarCollapse = require("./NavbarCollapse");
var _navbarCollapseDefault = parcelHelpers.interopDefault(_navbarCollapse);
var _navbarToggle = require("./NavbarToggle");
var _navbarToggleDefault = parcelHelpers.interopDefault(_navbarToggle);
var _navbarOffcanvas = require("./NavbarOffcanvas");
var _navbarOffcanvasDefault = parcelHelpers.interopDefault(_navbarOffcanvas);
var _themeProvider = require("./ThemeProvider");
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _jsxRuntime = require("react/jsx-runtime");
const NavbarText = _createWithBsPrefixDefault.default('navbar-text', {
    Component: 'span'
});
const defaultProps = {
    expand: true,
    variant: 'light',
    collapseOnSelect: false
};
const Navbar = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    const { bsPrefix: initialBsPrefix , expand , variant , bg , fixed , sticky , className , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'nav' , expanded , onToggle , onSelect , collapseOnSelect , ...controlledProps } = _uncontrollable.useUncontrolled(props, {
        expanded: 'onToggle'
    });
    const bsPrefix = _themeProvider.useBootstrapPrefix(initialBsPrefix, 'navbar');
    const handleCollapse = _react.useCallback((...args)=>{
        onSelect == null || onSelect(...args);
        if (collapseOnSelect && expanded) onToggle == null || onToggle(false);
    }, [
        onSelect,
        collapseOnSelect,
        expanded,
        onToggle
    ]); // will result in some false positives but that seems better
    // than false negatives. strict `undefined` check allows explicit
    // "nulling" of the role if the user really doesn't want one
    if (controlledProps.role === undefined && Component !== 'nav') controlledProps.role = 'navigation';
    let expandClass = `${bsPrefix}-expand`;
    if (typeof expand === 'string') expandClass = `${expandClass}-${expand}`;
    const navbarContext = _react.useMemo(()=>({
            onToggle: ()=>onToggle == null ? void 0 : onToggle(!expanded)
            ,
            bsPrefix,
            expanded: !!expanded
        })
    , [
        bsPrefix,
        expanded,
        onToggle
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_navbarContextDefault.default.Provider, {
        value: navbarContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
            value: handleCollapse,
            children: /*#__PURE__*/ _jsxRuntime.jsx(Component, {
                ref: ref,
                ...controlledProps,
                className: _classnamesDefault.default(className, bsPrefix, expand && expandClass, variant && `${bsPrefix}-${variant}`, bg && `bg-${bg}`, sticky && `sticky-${sticky}`, fixed && `fixed-${fixed}`)
            })
        })
    }));
});
Navbar.defaultProps = defaultProps;
Navbar.displayName = 'Navbar';
exports.default = Object.assign(Navbar, {
    Brand: _navbarBrandDefault.default,
    Collapse: _navbarCollapseDefault.default,
    Offcanvas: _navbarOffcanvasDefault.default,
    Text: NavbarText,
    Toggle: _navbarToggleDefault.default
});

},{"classnames":"2cVcN","react":"4mchR","@restart/ui/SelectableContext":"6DoIj","uncontrollable":"aG99Z","./createWithBsPrefix":"8IH8I","./NavbarBrand":"3BfVc","./NavbarCollapse":"gt0Yo","./NavbarToggle":"2eclc","./NavbarOffcanvas":"5DaRS","./ThemeProvider":"oG7Uz","./NavbarContext":"1TV6u","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"3BfVc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const NavbarBrand = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , as , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'navbar-brand');
    const Component = as || (props.href ? 'a' : 'span');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix)
    }));
});
NavbarBrand.displayName = 'NavbarBrand';
exports.default = NavbarBrand;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gt0Yo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _collapse = require("./Collapse");
var _collapseDefault = parcelHelpers.interopDefault(_collapse);
var _themeProvider = require("./ThemeProvider");
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _jsxRuntime = require("react/jsx-runtime");
const NavbarCollapse = /*#__PURE__*/ _react.forwardRef(({ children , bsPrefix , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'navbar-collapse');
    const context = _react.useContext(_navbarContextDefault.default);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_collapseDefault.default, {
        in: !!(context && context.expanded),
        ...props,
        children: /*#__PURE__*/ _jsxRuntime.jsx("div", {
            ref: ref,
            className: bsPrefix,
            children: children
        })
    }));
});
NavbarCollapse.displayName = 'NavbarCollapse';
exports.default = NavbarCollapse;

},{"react":"4mchR","./Collapse":"ilxlq","./ThemeProvider":"oG7Uz","./NavbarContext":"1TV6u","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"2eclc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _themeProvider = require("./ThemeProvider");
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    label: 'Toggle navigation'
};
const NavbarToggle = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , children , label , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'button' , onClick , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'navbar-toggler');
    const { onToggle , expanded  } = _react.useContext(_navbarContextDefault.default) || {
    };
    const handleClick = _useEventCallbackDefault.default((e)=>{
        if (onClick) onClick(e);
        if (onToggle) onToggle();
    });
    if (Component === 'button') props.type = 'button';
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ref: ref,
        onClick: handleClick,
        "aria-label": label,
        className: _classnamesDefault.default(className, bsPrefix, !expanded && 'collapsed'),
        children: children || /*#__PURE__*/ _jsxRuntime.jsx("span", {
            className: `${bsPrefix}-icon`
        })
    }));
});
NavbarToggle.displayName = 'NavbarToggle';
NavbarToggle.defaultProps = defaultProps;
exports.default = NavbarToggle;

},{"classnames":"2cVcN","react":"4mchR","@restart/hooks/useEventCallback":"8QyIg","./ThemeProvider":"oG7Uz","./NavbarContext":"1TV6u","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5DaRS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _offcanvas = require("./Offcanvas");
var _offcanvasDefault = parcelHelpers.interopDefault(_offcanvas);
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _jsxRuntime = require("react/jsx-runtime");
const NavbarOffcanvas = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    const context = _react.useContext(_navbarContextDefault.default);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_offcanvasDefault.default, {
        ref: ref,
        show: !!(context != null && context.expanded),
        ...props
    }));
});
NavbarOffcanvas.displayName = 'NavbarOffcanvas';
exports.default = NavbarOffcanvas;

},{"react":"4mchR","./Offcanvas":"k5ln7","./NavbarContext":"1TV6u","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"k5ln7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _react = require("react");
var _modal = require("@restart/ui/Modal");
var _modalDefault = parcelHelpers.interopDefault(_modal);
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _offcanvasBody = require("./OffcanvasBody");
var _offcanvasBodyDefault = parcelHelpers.interopDefault(_offcanvasBody);
var _offcanvasToggling = require("./OffcanvasToggling");
var _offcanvasTogglingDefault = parcelHelpers.interopDefault(_offcanvasToggling);
var _modalContext = require("./ModalContext");
var _modalContextDefault = parcelHelpers.interopDefault(_modalContext);
var _navbarContext = require("./NavbarContext");
var _navbarContextDefault = parcelHelpers.interopDefault(_navbarContext);
var _offcanvasHeader = require("./OffcanvasHeader");
var _offcanvasHeaderDefault = parcelHelpers.interopDefault(_offcanvasHeader);
var _offcanvasTitle = require("./OffcanvasTitle");
var _offcanvasTitleDefault = parcelHelpers.interopDefault(_offcanvasTitle);
var _themeProvider = require("./ThemeProvider");
var _bootstrapModalManager = require("./BootstrapModalManager");
var _bootstrapModalManagerDefault = parcelHelpers.interopDefault(_bootstrapModalManager);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    show: false,
    backdrop: true,
    keyboard: true,
    scroll: false,
    autoFocus: true,
    enforceFocus: true,
    restoreFocus: true,
    placement: 'start'
};
function DialogTransition(props) {
    return(/*#__PURE__*/ _jsxRuntime.jsx(_offcanvasTogglingDefault.default, {
        ...props
    }));
}
function BackdropTransition(props) {
    return(/*#__PURE__*/ _jsxRuntime.jsx(_fadeDefault.default, {
        ...props
    }));
}
const Offcanvas = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , children , 'aria-labelledby': ariaLabelledby , placement , /* BaseModal props */ show , backdrop , keyboard , scroll , onEscapeKeyDown , onShow , onHide , container , autoFocus , enforceFocus , restoreFocus , restoreFocusOptions , onEntered , onExit , onExiting , onEnter , onEntering , onExited , backdropClassName , manager: propsManager , ...props }, ref)=>{
    const modalManager = _react.useRef();
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'offcanvas');
    const { onToggle  } = _react.useContext(_navbarContextDefault.default) || {
    };
    const handleHide = _useEventCallbackDefault.default(()=>{
        onToggle == null || onToggle();
        onHide == null || onHide();
    });
    const modalContext = _react.useMemo(()=>({
            onHide: handleHide
        })
    , [
        handleHide
    ]);
    function getModalManager() {
        if (propsManager) return propsManager;
        if (scroll) {
            // Have to use a different modal manager since the shared
            // one handles overflow.
            if (!modalManager.current) modalManager.current = new _bootstrapModalManagerDefault.default({
                handleContainerOverflow: false
            });
            return modalManager.current;
        }
        return _bootstrapModalManager.getSharedManager();
    }
    const handleEnter = (node, ...args)=>{
        if (node) node.style.visibility = 'visible';
        onEnter == null || onEnter(node, ...args);
    };
    const handleExited = (node, ...args)=>{
        if (node) node.style.visibility = '';
        onExited == null || onExited(...args);
    };
    const renderBackdrop = _react.useCallback((backdropProps)=>/*#__PURE__*/ _jsxRuntime.jsx("div", {
            ...backdropProps,
            className: _classnamesDefault.default(`${bsPrefix}-backdrop`, backdropClassName)
        })
    , [
        backdropClassName,
        bsPrefix
    ]);
    const renderDialog = (dialogProps)=>/*#__PURE__*/ _jsxRuntime.jsx("div", {
            role: "dialog",
            ...dialogProps,
            ...props,
            className: _classnamesDefault.default(className, bsPrefix, `${bsPrefix}-${placement}`),
            "aria-labelledby": ariaLabelledby,
            children: children
        })
    ;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_modalContextDefault.default.Provider, {
        value: modalContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_modalDefault.default, {
            show: show,
            ref: ref,
            backdrop: backdrop,
            container: container,
            keyboard: keyboard,
            autoFocus: autoFocus,
            enforceFocus: enforceFocus && !scroll,
            restoreFocus: restoreFocus,
            restoreFocusOptions: restoreFocusOptions,
            onEscapeKeyDown: onEscapeKeyDown,
            onShow: onShow,
            onHide: handleHide,
            onEnter: handleEnter,
            onEntering: onEntering,
            onEntered: onEntered,
            onExit: onExit,
            onExiting: onExiting,
            onExited: handleExited,
            manager: getModalManager(),
            transition: DialogTransition,
            backdropTransition: BackdropTransition,
            renderBackdrop: renderBackdrop,
            renderDialog: renderDialog
        })
    }));
});
Offcanvas.displayName = 'Offcanvas';
Offcanvas.defaultProps = defaultProps;
exports.default = Object.assign(Offcanvas, {
    Body: _offcanvasBodyDefault.default,
    Header: _offcanvasHeaderDefault.default,
    Title: _offcanvasTitleDefault.default
});

},{"classnames":"2cVcN","@restart/hooks/useEventCallback":"8QyIg","react":"4mchR","@restart/ui/Modal":"2BxPy","./Fade":"cHHEJ","./OffcanvasBody":"gbeym","./OffcanvasToggling":"dNxYF","./ModalContext":"6Bu6N","./NavbarContext":"1TV6u","./OffcanvasHeader":"8XL24","./OffcanvasTitle":"7WoM0","./ThemeProvider":"oG7Uz","./BootstrapModalManager":"fLjhQ","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gbeym":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('offcanvas-body');

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dNxYF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _transition = require("react-transition-group/Transition");
var _transitionEndListener = require("./transitionEndListener");
var _transitionEndListenerDefault = parcelHelpers.interopDefault(_transitionEndListener);
var _transitionWrapper = require("./TransitionWrapper");
var _transitionWrapperDefault = parcelHelpers.interopDefault(_transitionWrapper);
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false
};
const transitionStyles = {
    [_transition.ENTERING]: 'show',
    [_transition.ENTERED]: 'show'
};
const OffcanvasToggling = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , children , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'offcanvas');
    return(/*#__PURE__*/ _jsxRuntime.jsx(_transitionWrapperDefault.default, {
        ref: ref,
        addEndListener: _transitionEndListenerDefault.default,
        ...props,
        childRef: children.ref,
        children: (status, innerProps)=>/*#__PURE__*/ _react.cloneElement(children, {
                ...innerProps,
                className: _classnamesDefault.default(className, children.props.className, (status === _transition.ENTERING || status === _transition.EXITING) && `${bsPrefix}-toggling`, transitionStyles[status])
            })
    }));
});
OffcanvasToggling.defaultProps = defaultProps;
OffcanvasToggling.displayName = 'OffcanvasToggling';
exports.default = OffcanvasToggling;

},{"classnames":"2cVcN","react":"4mchR","react-transition-group/Transition":"5xmpQ","./transitionEndListener":"6qkK8","./TransitionWrapper":"7XqYo","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8XL24":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _abstractModalHeader = require("./AbstractModalHeader");
var _abstractModalHeaderDefault = parcelHelpers.interopDefault(_abstractModalHeader);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    closeLabel: 'Close',
    closeButton: false
};
const OffcanvasHeader = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'offcanvas-header');
    return(/*#__PURE__*/ _jsxRuntime.jsx(_abstractModalHeaderDefault.default, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, bsPrefix)
    }));
});
OffcanvasHeader.displayName = 'OffcanvasHeader';
OffcanvasHeader.defaultProps = defaultProps;
exports.default = OffcanvasHeader;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./AbstractModalHeader":"7dtig","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7WoM0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
var _divWithClassName = require("./divWithClassName");
var _divWithClassNameDefault = parcelHelpers.interopDefault(_divWithClassName);
const DivStyledAsH5 = _divWithClassNameDefault.default('h5');
exports.default = _createWithBsPrefixDefault.default('offcanvas-title', {
    Component: DivStyledAsH5
});

},{"./createWithBsPrefix":"8IH8I","./divWithClassName":"28Yge","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ieiTF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _dropdown = require("./Dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _navLink = require("./NavLink");
var _navLinkDefault = parcelHelpers.interopDefault(_navLink);
var _jsxRuntime = require("react/jsx-runtime");
const NavDropdown = /*#__PURE__*/ _react.forwardRef(({ id , title , children , bsPrefix , className , rootCloseEvent , menuRole , disabled , active , renderMenuOnMount , menuVariant , ...props }, ref)=>{
    /* NavItem has no additional logic, it's purely presentational. Can set nav item class here to support "as" */ const navItemPrefix = _themeProvider.useBootstrapPrefix(undefined, 'nav-item');
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_dropdownDefault.default, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, navItemPrefix),
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownDefault.default.Toggle, {
                id: id,
                eventKey: null,
                active: active,
                disabled: disabled,
                childBsPrefix: bsPrefix,
                as: _navLinkDefault.default,
                children: title
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownDefault.default.Menu, {
                role: menuRole,
                renderOnMount: renderMenuOnMount,
                rootCloseEvent: rootCloseEvent,
                variant: menuVariant,
                children: children
            })
        ]
    }));
});
NavDropdown.displayName = 'NavDropdown';
exports.default = Object.assign(NavDropdown, {
    Item: _dropdownDefault.default.Item,
    ItemText: _dropdownDefault.default.ItemText,
    Divider: _dropdownDefault.default.Divider,
    Header: _dropdownDefault.default.Header
});

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./Dropdown":"7gNYx","./NavLink":"aGfFg","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"92F4y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _overlay = require("@restart/ui/Overlay");
var _overlayDefault = parcelHelpers.interopDefault(_overlay);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _useOverlayOffset = require("./useOverlayOffset");
var _useOverlayOffsetDefault = parcelHelpers.interopDefault(_useOverlayOffset);
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _safeFindDOMNode = require("./safeFindDOMNode");
var _safeFindDOMNodeDefault = parcelHelpers.interopDefault(_safeFindDOMNode);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    transition: _fadeDefault.default,
    rootClose: false,
    show: false,
    placement: 'top'
};
function wrapRefs(props, arrowProps) {
    const { ref  } = props;
    const { ref: aRef  } = arrowProps;
    props.ref = ref.__wrapped || (ref.__wrapped = (r)=>ref(_safeFindDOMNodeDefault.default(r))
    );
    arrowProps.ref = aRef.__wrapped || (aRef.__wrapped = (r)=>aRef(_safeFindDOMNodeDefault.default(r))
    );
}
const Overlay = /*#__PURE__*/ _react.forwardRef(({ children: overlay , transition , popperConfig ={
} , ...outerProps }, outerRef)=>{
    const popperRef = _react.useRef({
    });
    const [ref, modifiers] = _useOverlayOffsetDefault.default();
    const mergedRef = _useMergedRefsDefault.default(outerRef, ref);
    const actualTransition = transition === true ? _fadeDefault.default : transition || undefined;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_overlayDefault.default, {
        ...outerProps,
        ref: mergedRef,
        popperConfig: {
            ...popperConfig,
            modifiers: modifiers.concat(popperConfig.modifiers || [])
        },
        transition: actualTransition,
        children: (overlayProps, { arrowProps , placement , popper: popperObj , show  })=>{
            var _popperObj$state, _popperObj$state$modi;
            wrapRefs(overlayProps, arrowProps);
            const popper = Object.assign(popperRef.current, {
                state: popperObj == null ? void 0 : popperObj.state,
                scheduleUpdate: popperObj == null ? void 0 : popperObj.update,
                placement,
                outOfBoundaries: (popperObj == null ? void 0 : (_popperObj$state = popperObj.state) == null ? void 0 : (_popperObj$state$modi = _popperObj$state.modifiersData.hide) == null ? void 0 : _popperObj$state$modi.isReferenceHidden) || false
            });
            if (typeof overlay === 'function') return overlay({
                ...overlayProps,
                placement,
                show,
                ...!transition && show && {
                    className: 'show'
                },
                popper,
                arrowProps
            });
            return(/*#__PURE__*/ _react.cloneElement(overlay, {
                ...overlayProps,
                placement,
                arrowProps,
                popper,
                className: _classnamesDefault.default(overlay.props.className, !transition && show && 'show'),
                style: {
                    ...overlay.props.style,
                    ...overlayProps.style
                }
            }));
        }
    }));
});
Overlay.displayName = 'Overlay';
Overlay.defaultProps = defaultProps;
exports.default = Overlay;

},{"react":"4mchR","classnames":"2cVcN","@restart/ui/Overlay":"kSc2X","@restart/hooks/useMergedRefs":"fj3d7","./useOverlayOffset":"JceeM","./Fade":"cHHEJ","./safeFindDOMNode":"7yjLB","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kSc2X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
var _useCallbackRef = require("@restart/hooks/useCallbackRef");
var _useCallbackRefDefault = parcelHelpers.interopDefault(_useCallbackRef);
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _usePopper = require("./usePopper");
var _usePopperDefault = parcelHelpers.interopDefault(_usePopper);
var _useRootClose = require("./useRootClose");
var _useRootCloseDefault = parcelHelpers.interopDefault(_useRootClose);
var _useWaitForDOMRef = require("./useWaitForDOMRef");
var _useWaitForDOMRefDefault = parcelHelpers.interopDefault(_useWaitForDOMRef);
var _mergeOptionsWithPopperConfig = require("./mergeOptionsWithPopperConfig");
var _mergeOptionsWithPopperConfigDefault = parcelHelpers.interopDefault(_mergeOptionsWithPopperConfig);
var _jsxRuntime = require("react/jsx-runtime");
/**
 * Built on top of `Popper.js`, the overlay component is
 * great for custom tooltip overlays.
 */ const Overlay = /*#__PURE__*/ _react.forwardRef((props, outerRef)=>{
    const { flip , offset , placement , containerPadding , popperConfig ={
    } , transition: Transition  } = props;
    const [rootElement, attachRef] = _useCallbackRefDefault.default();
    const [arrowElement, attachArrowRef] = _useCallbackRefDefault.default();
    const mergedRef = _useMergedRefsDefault.default(attachRef, outerRef);
    const container = _useWaitForDOMRefDefault.default(props.container);
    const target = _useWaitForDOMRefDefault.default(props.target);
    const [exited, setExited] = _react.useState(!props.show);
    const popper = _usePopperDefault.default(target, rootElement, _mergeOptionsWithPopperConfigDefault.default({
        placement,
        enableEvents: !!props.show,
        containerPadding: containerPadding || 5,
        flip,
        offset,
        arrowElement,
        popperConfig
    }));
    if (props.show) {
        if (exited) setExited(false);
    } else if (!props.transition && !exited) setExited(true);
    const handleHidden = (...args)=>{
        setExited(true);
        if (props.onExited) props.onExited(...args);
    }; // Don't un-render the overlay while it's transitioning out.
    const mountOverlay = props.show || Transition && !exited;
    _useRootCloseDefault.default(rootElement, props.onHide, {
        disabled: !props.rootClose || props.rootCloseDisabled,
        clickTrigger: props.rootCloseEvent
    });
    if (!mountOverlay) // Don't bother showing anything if we don't have to.
    return null;
    let child = props.children(Object.assign({
    }, popper.attributes.popper, {
        style: popper.styles.popper,
        ref: mergedRef
    }), {
        popper,
        placement,
        show: !!props.show,
        arrowProps: Object.assign({
        }, popper.attributes.arrow, {
            style: popper.styles.arrow,
            ref: attachArrowRef
        })
    });
    if (Transition) {
        const { onExit , onExiting , onEnter , onEntering , onEntered  } = props;
        child = /*#__PURE__*/ _jsxRuntime.jsx(Transition, {
            in: props.show,
            appear: true,
            onExit: onExit,
            onExiting: onExiting,
            onExited: handleHidden,
            onEnter: onEnter,
            onEntering: onEntering,
            onEntered: onEntered,
            children: child
        });
    }
    return container ? /*#__PURE__*/ _reactDomDefault.default.createPortal(child, container) : null;
});
Overlay.displayName = 'Overlay';
exports.default = Overlay;

},{"react":"4mchR","react-dom":"afyCw","@restart/hooks/useCallbackRef":"4MRqx","@restart/hooks/useMergedRefs":"fj3d7","./usePopper":"608P5","./useRootClose":"gFxBS","./useWaitForDOMRef":"fWRMw","./mergeOptionsWithPopperConfig":"4lnJO","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"JceeM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _hasClass = require("dom-helpers/hasClass");
var _hasClassDefault = parcelHelpers.interopDefault(_hasClass);
var _themeProvider = require("./ThemeProvider");
var _popover = require("./Popover"); // This is meant for internal use.
var _popoverDefault = parcelHelpers.interopDefault(_popover);
function useOverlayOffset() {
    const overlayRef = _react.useRef(null);
    const popoverClass = _themeProvider.useBootstrapPrefix(undefined, 'popover');
    const offset = _react.useMemo(()=>({
            name: 'offset',
            options: {
                offset: ()=>{
                    if (overlayRef.current && _hasClassDefault.default(overlayRef.current, popoverClass)) return _popoverDefault.default.POPPER_OFFSET;
                    return [
                        0,
                        0
                    ];
                }
            }
        })
    , [
        popoverClass
    ]);
    return [
        overlayRef,
        [
            offset
        ]
    ];
}
exports.default = useOverlayOffset;

},{"react":"4mchR","dom-helpers/hasClass":"aIALm","./ThemeProvider":"oG7Uz","./Popover":"cRMw9","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cRMw9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _popoverHeader = require("./PopoverHeader");
var _popoverHeaderDefault = parcelHelpers.interopDefault(_popoverHeader);
var _popoverBody = require("./PopoverBody");
var _popoverBodyDefault = parcelHelpers.interopDefault(_popoverBody);
var _helpers = require("./helpers");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    placement: 'right'
};
const Popover = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , placement , className , style , children , body , arrowProps , popper: _ , show: _1 , ...props }, ref)=>{
    const decoratedBsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'popover');
    const isRTL = _themeProvider.useIsRTL();
    const [primaryPlacement] = (placement == null ? void 0 : placement.split('-')) || [];
    const bsDirection = _helpers.getOverlayDirection(primaryPlacement, isRTL);
    return(/*#__PURE__*/ _jsxRuntime.jsxs("div", {
        ref: ref,
        role: "tooltip",
        style: style,
        "x-placement": primaryPlacement,
        className: _classnamesDefault.default(className, decoratedBsPrefix, primaryPlacement && `bs-popover-${bsDirection}`),
        ...props,
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                className: "popover-arrow",
                ...arrowProps
            }),
            body ? /*#__PURE__*/ _jsxRuntime.jsx(_popoverBodyDefault.default, {
                children: children
            }) : children
        ]
    }));
});
Popover.defaultProps = defaultProps;
exports.default = Object.assign(Popover, {
    Header: _popoverHeaderDefault.default,
    Body: _popoverBodyDefault.default,
    // Default popover offset.
    // https://github.com/twbs/bootstrap/blob/5c32767e0e0dbac2d934bcdee03719a65d3f1187/js/src/popover.js#L28
    POPPER_OFFSET: [
        0,
        8
    ]
});

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./PopoverHeader":"aQjaj","./PopoverBody":"4h2uh","./helpers":"4wQJ9","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aQjaj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('popover-header');

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4h2uh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('popover-body');

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4wQJ9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BsPrefixComponent", ()=>BsPrefixComponent
) // Need to use this instead of typeof Component to get proper type checking.
;
parcelHelpers.export(exports, "getOverlayDirection", ()=>getOverlayDirection
);
var _react = require("react");
class BsPrefixComponent extends _react.Component {
}
function getOverlayDirection(placement, isRTL) {
    let bsDirection = placement;
    if (placement === 'left') bsDirection = isRTL ? 'end' : 'start';
    else if (placement === 'right') bsDirection = isRTL ? 'start' : 'end';
    return bsDirection;
}

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"90D2y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _contains = require("dom-helpers/contains");
var _containsDefault = parcelHelpers.interopDefault(_contains);
var _react = require("react");
var _useTimeout = require("@restart/hooks/useTimeout");
var _useTimeoutDefault = parcelHelpers.interopDefault(_useTimeout);
var _warning = require("warning");
var _warningDefault = parcelHelpers.interopDefault(_warning);
var _uncontrollable = require("uncontrollable");
var _useMergedRefs = require("@restart/hooks/useMergedRefs");
var _useMergedRefsDefault = parcelHelpers.interopDefault(_useMergedRefs);
var _overlay = require("./Overlay");
var _overlayDefault = parcelHelpers.interopDefault(_overlay);
var _safeFindDOMNode = require("./safeFindDOMNode");
var _safeFindDOMNodeDefault = parcelHelpers.interopDefault(_safeFindDOMNode);
var _jsxRuntime = require("react/jsx-runtime");
function normalizeDelay(delay) {
    return delay && typeof delay === 'object' ? delay : {
        show: delay,
        hide: delay
    };
} // Simple implementation of mouseEnter and mouseLeave.
// React's built version is broken: https://github.com/facebook/react/issues/4251
// for cases when the trigger is disabled and mouseOut/Over can cause flicker
// moving from one child element to another.
function handleMouseOverOut(handler, args, relatedNative) {
    const [e] = args;
    const target = e.currentTarget;
    const related = e.relatedTarget || e.nativeEvent[relatedNative];
    if ((!related || related !== target) && !_containsDefault.default(target, related)) handler(...args);
}
const defaultProps = {
    defaultShow: false,
    trigger: [
        'hover',
        'focus'
    ]
};
function OverlayTrigger({ trigger , overlay , children , popperConfig ={
} , show: propsShow , defaultShow =false , onToggle , delay: propsDelay , placement , flip =placement && placement.indexOf('auto') !== -1 , ...props }) {
    const triggerNodeRef = _react.useRef(null);
    const mergedRef = _useMergedRefsDefault.default(triggerNodeRef, children.ref);
    const timeout = _useTimeoutDefault.default();
    const hoverStateRef = _react.useRef('');
    const [show, setShow] = _uncontrollable.useUncontrolledProp(propsShow, defaultShow, onToggle);
    const delay = normalizeDelay(propsDelay);
    const { onFocus , onBlur , onClick  } = typeof children !== 'function' ? _react.Children.only(children).props : {
    };
    const attachRef = (r)=>{
        mergedRef(_safeFindDOMNodeDefault.default(r));
    };
    const handleShow = _react.useCallback(()=>{
        timeout.clear();
        hoverStateRef.current = 'show';
        if (!delay.show) {
            setShow(true);
            return;
        }
        timeout.set(()=>{
            if (hoverStateRef.current === 'show') setShow(true);
        }, delay.show);
    }, [
        delay.show,
        setShow,
        timeout
    ]);
    const handleHide = _react.useCallback(()=>{
        timeout.clear();
        hoverStateRef.current = 'hide';
        if (!delay.hide) {
            setShow(false);
            return;
        }
        timeout.set(()=>{
            if (hoverStateRef.current === 'hide') setShow(false);
        }, delay.hide);
    }, [
        delay.hide,
        setShow,
        timeout
    ]);
    const handleFocus = _react.useCallback((...args)=>{
        handleShow();
        onFocus == null || onFocus(...args);
    }, [
        handleShow,
        onFocus
    ]);
    const handleBlur = _react.useCallback((...args)=>{
        handleHide();
        onBlur == null || onBlur(...args);
    }, [
        handleHide,
        onBlur
    ]);
    const handleClick = _react.useCallback((...args)=>{
        setShow(!show);
        onClick == null || onClick(...args);
    }, [
        onClick,
        setShow,
        show
    ]);
    const handleMouseOver = _react.useCallback((...args)=>{
        handleMouseOverOut(handleShow, args, 'fromElement');
    }, [
        handleShow
    ]);
    const handleMouseOut = _react.useCallback((...args)=>{
        handleMouseOverOut(handleHide, args, 'toElement');
    }, [
        handleHide
    ]);
    const triggers = trigger == null ? [] : [].concat(trigger);
    const triggerProps = {
        ref: attachRef
    };
    if (triggers.indexOf('click') !== -1) triggerProps.onClick = handleClick;
    if (triggers.indexOf('focus') !== -1) {
        triggerProps.onFocus = handleFocus;
        triggerProps.onBlur = handleBlur;
    }
    if (triggers.indexOf('hover') !== -1) {
        _warningDefault.default(triggers.length > 1, '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibility of the overlay to just mouse users. Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.');
        triggerProps.onMouseOver = handleMouseOver;
        triggerProps.onMouseOut = handleMouseOut;
    }
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_jsxRuntime.Fragment, {
        children: [
            typeof children === 'function' ? children(triggerProps) : /*#__PURE__*/ _react.cloneElement(children, triggerProps),
            /*#__PURE__*/ _jsxRuntime.jsx(_overlayDefault.default, {
                ...props,
                show: show,
                onHide: handleHide,
                flip: flip,
                placement: placement,
                popperConfig: popperConfig,
                target: triggerNodeRef.current,
                children: overlay
            })
        ]
    }));
}
OverlayTrigger.defaultProps = defaultProps;
exports.default = OverlayTrigger;

},{"dom-helpers/contains":"asPpd","react":"4mchR","@restart/hooks/useTimeout":"97tbq","warning":"4vouU","uncontrollable":"aG99Z","@restart/hooks/useMergedRefs":"fj3d7","./Overlay":"92F4y","./safeFindDOMNode":"7yjLB","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aLJu6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "First", ()=>First
);
parcelHelpers.export(exports, "Prev", ()=>Prev
);
parcelHelpers.export(exports, "Ellipsis", ()=>Ellipsis
);
parcelHelpers.export(exports, "Next", ()=>Next
);
parcelHelpers.export(exports, "Last", ()=>Last
);
/* eslint-disable react/no-multi-comp */ var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _anchor = require("@restart/ui/Anchor");
var _anchorDefault = parcelHelpers.interopDefault(_anchor);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    active: false,
    disabled: false,
    activeLabel: '(current)'
};
const PageItem = /*#__PURE__*/ _react.forwardRef(({ active , disabled , className , style , activeLabel , children , ...props }, ref)=>{
    const Component = active || disabled ? 'span' : _anchorDefault.default;
    return(/*#__PURE__*/ _jsxRuntime.jsx("li", {
        ref: ref,
        style: style,
        className: _classnamesDefault.default(className, 'page-item', {
            active,
            disabled
        }),
        children: /*#__PURE__*/ _jsxRuntime.jsxs(Component, {
            className: "page-link",
            disabled: disabled,
            ...props,
            children: [
                children,
                active && activeLabel && /*#__PURE__*/ _jsxRuntime.jsx("span", {
                    className: "visually-hidden",
                    children: activeLabel
                })
            ]
        })
    }));
});
PageItem.defaultProps = defaultProps;
PageItem.displayName = 'PageItem';
exports.default = PageItem;
function createButton(name, defaultValue, label = name) {
    function Button({ children , ...props }) {
        return(/*#__PURE__*/ _jsxRuntime.jsxs(PageItem, {
            ...props,
            children: [
                /*#__PURE__*/ _jsxRuntime.jsx("span", {
                    "aria-hidden": "true",
                    children: children || defaultValue
                }),
                /*#__PURE__*/ _jsxRuntime.jsx("span", {
                    className: "visually-hidden",
                    children: label
                })
            ]
        }));
    }
    Button.displayName = name;
    return Button;
}
const First = createButton('First', '«');
const Prev = createButton('Prev', '‹', 'Previous');
const Ellipsis = createButton('Ellipsis', '…', 'More');
const Next = createButton('Next', '›');
const Last = createButton('Last', '»');

},{"classnames":"2cVcN","react":"4mchR","@restart/ui/Anchor":"c3Vvr","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"j9EMR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _pageItem = require("./PageItem");
var _pageItemDefault = parcelHelpers.interopDefault(_pageItem);
var _jsxRuntime = require("react/jsx-runtime");
/**
 * @property {PageItem} Item
 * @property {PageItem} First
 * @property {PageItem} Prev
 * @property {PageItem} Ellipsis
 * @property {PageItem} Next
 * @property {PageItem} Last
 */ const Pagination = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , size , ...props }, ref)=>{
    const decoratedBsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'pagination');
    return(/*#__PURE__*/ _jsxRuntime.jsx("ul", {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, decoratedBsPrefix, size && `${decoratedBsPrefix}-${size}`)
    }));
});
Pagination.displayName = 'Pagination';
exports.default = Object.assign(Pagination, {
    First: _pageItem.First,
    Prev: _pageItem.Prev,
    Ellipsis: _pageItem.Ellipsis,
    Item: _pageItemDefault.default,
    Next: _pageItem.Next,
    Last: _pageItem.Last
});

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./PageItem":"aLJu6","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cGyxn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _usePlaceholder = require("./usePlaceholder");
var _usePlaceholderDefault = parcelHelpers.interopDefault(_usePlaceholder);
var _placeholderButton = require("./PlaceholderButton");
var _placeholderButtonDefault = parcelHelpers.interopDefault(_placeholderButton);
var _jsxRuntime = require("react/jsx-runtime");
const Placeholder = /*#__PURE__*/ _react.forwardRef(({ as: Component = 'span' , ...props }, ref)=>{
    const placeholderProps = _usePlaceholderDefault.default(props);
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...placeholderProps,
        ref: ref
    }));
});
Placeholder.displayName = 'Placeholder';
exports.default = Object.assign(Placeholder, {
    Button: _placeholderButtonDefault.default
});

},{"react":"4mchR","./usePlaceholder":"e4PAh","./PlaceholderButton":"GdRy3","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"e4PAh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _themeProvider = require("./ThemeProvider");
var _col = require("./Col");
function usePlaceholder({ animation , bg , bsPrefix , size , ...props }) {
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'placeholder');
    const [{ className , ...colProps }] = _col.useCol(props);
    return {
        ...colProps,
        className: _classnamesDefault.default(className, animation ? `${bsPrefix}-${animation}` : bsPrefix, size && `${bsPrefix}-${size}`, bg && `bg-${bg}`)
    };
}
exports.default = usePlaceholder;

},{"classnames":"2cVcN","./ThemeProvider":"oG7Uz","./Col":"kxhZp","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"GdRy3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _usePlaceholder = require("./usePlaceholder");
var _usePlaceholderDefault = parcelHelpers.interopDefault(_usePlaceholder);
var _jsxRuntime = require("react/jsx-runtime");
const PlaceholderButton = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    const placeholderProps = _usePlaceholderDefault.default(props);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_buttonDefault.default, {
        ...placeholderProps,
        ref: ref,
        disabled: true,
        tabIndex: -1
    }));
});
PlaceholderButton.displayName = 'PlaceholderButton';
exports.default = PlaceholderButton;

},{"react":"4mchR","./Button":"64Pgd","./usePlaceholder":"e4PAh","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fjWS2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _elementChildren = require("./ElementChildren");
var _jsxRuntime = require("react/jsx-runtime");
const ROUND_PRECISION = 1000;
/**
 * Validate that children, if any, are instances of `<ProgressBar>`.
 */ function onlyProgressBar(props, propName, componentName) {
    const children = props[propName];
    if (!children) return null;
    let error = null;
    _react.Children.forEach(children, (child)=>{
        if (error) return;
        /**
     * Compare types in a way that works with libraries that patch and proxy
     * components like react-hot-loader.
     *
     * see https://github.com/gaearon/react-hot-loader#checking-element-types
     */ // eslint-disable-next-line @typescript-eslint/no-use-before-define
        const element = /*#__PURE__*/ _jsxRuntime.jsx(ProgressBar, {
        });
        if (child.type === element.type) return;
        const childType = child.type;
        const childIdentifier = /*#__PURE__*/ _react.isValidElement(child) ? childType.displayName || childType.name || childType : child;
        error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);
    });
    return error;
}
const defaultProps = {
    min: 0,
    max: 100,
    animated: false,
    isChild: false,
    visuallyHidden: false,
    striped: false
};
function getPercentage(now, min, max) {
    const percentage = (now - min) / (max - min) * 100;
    return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;
}
function renderProgressBar({ min , now , max , label , visuallyHidden , striped , animated , className , style , variant , bsPrefix , ...props }, ref) {
    return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
        ref: ref,
        ...props,
        role: "progressbar",
        className: _classnamesDefault.default(className, `${bsPrefix}-bar`, {
            [`bg-${variant}`]: variant,
            [`${bsPrefix}-bar-animated`]: animated,
            [`${bsPrefix}-bar-striped`]: animated || striped
        }),
        style: {
            width: `${getPercentage(now, min, max)}%`,
            ...style
        },
        "aria-valuenow": now,
        "aria-valuemin": min,
        "aria-valuemax": max,
        children: visuallyHidden ? /*#__PURE__*/ _jsxRuntime.jsx("span", {
            className: "visually-hidden",
            children: label
        }) : label
    }));
}
const ProgressBar = /*#__PURE__*/ _react.forwardRef(({ isChild , ...props }, ref)=>{
    props.bsPrefix = _themeProvider.useBootstrapPrefix(props.bsPrefix, 'progress');
    if (isChild) return renderProgressBar(props, ref);
    const { min , now , max , label , visuallyHidden , striped , animated , bsPrefix , variant , className , children , ...wrapperProps } = props;
    return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
        ref: ref,
        ...wrapperProps,
        className: _classnamesDefault.default(className, bsPrefix),
        children: children ? _elementChildren.map(children, (child)=>/*#__PURE__*/ _react.cloneElement(child, {
                isChild: true
            })
        ) : renderProgressBar({
            min,
            now,
            max,
            label,
            visuallyHidden,
            striped,
            animated,
            bsPrefix,
            variant
        }, ref)
    }));
});
ProgressBar.displayName = 'ProgressBar';
ProgressBar.defaultProps = defaultProps;
exports.default = ProgressBar;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./ElementChildren":"eqDHF","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ap3iS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    aspectRatio: '1x1'
};
function toPercent(num) {
    if (num <= 0 || num > 100) return '100%';
    if (num < 1) return `${num * 100}%`;
    return `${num}%`;
}
const Ratio = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , children , aspectRatio , style , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'ratio');
    const isCustomRatio = typeof aspectRatio === 'number';
    return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
        ref: ref,
        ...props,
        style: {
            ...style,
            ...isCustomRatio && {
                '--bs-aspect-ratio': toPercent(aspectRatio)
            }
        },
        className: _classnamesDefault.default(bsPrefix, className, !isCustomRatio && `${bsPrefix}-${aspectRatio}`),
        children: _react.Children.only(children)
    }));
});
Ratio.defaultProps = defaultProps;
exports.default = Ratio;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"eR7YE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const DEVICE_SIZES = [
    'xxl',
    'xl',
    'lg',
    'md',
    'sm',
    'xs'
];
const Row = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , ...props }, ref)=>{
    const decoratedBsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'row');
    const sizePrefix = `${decoratedBsPrefix}-cols`;
    const classes = [];
    DEVICE_SIZES.forEach((brkPoint)=>{
        const propValue = props[brkPoint];
        delete props[brkPoint];
        let cols;
        if (propValue != null && typeof propValue === 'object') ({ cols  } = propValue);
        else cols = propValue;
        const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';
        if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);
    });
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, decoratedBsPrefix, ...classes)
    }));
});
Row.displayName = 'Row';
exports.default = Row;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"fIUSy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const Spinner = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , variant , animation , size , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , className , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'spinner');
    const bsSpinnerPrefix = `${bsPrefix}-${animation}`;
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(className, bsSpinnerPrefix, size && `${bsSpinnerPrefix}-${size}`, variant && `text-${variant}`)
    }));
});
Spinner.displayName = 'Spinner';
exports.default = Spinner;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cRJfo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _buttonGroup = require("./ButtonGroup");
var _buttonGroupDefault = parcelHelpers.interopDefault(_buttonGroup);
var _dropdown = require("./Dropdown");
var _dropdownDefault = parcelHelpers.interopDefault(_dropdown);
var _types = require("./types");
var _jsxRuntime = require("react/jsx-runtime");
const propTypes = {
    /**
   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
   * @type {string}
   * @required
   */ id: _propTypesDefault.default.string,
    /**
   * Accessible label for the toggle; the value of `title` if not specified.
   */ toggleLabel: _propTypesDefault.default.string,
    /** An `href` passed to the non-toggle Button */ href: _propTypesDefault.default.string,
    /** An anchor `target` passed to the non-toggle Button */ target: _propTypesDefault.default.string,
    /** An `onClick` handler passed to the non-toggle Button */ onClick: _propTypesDefault.default.func,
    /** The content of the non-toggle Button.  */ title: _propTypesDefault.default.node.isRequired,
    /** A `type` passed to the non-toggle Button */ type: _propTypesDefault.default.string,
    /** Disables both Buttons  */ disabled: _propTypesDefault.default.bool,
    /**
   * Aligns the dropdown menu.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   *
   * @type {"start"|"end"|{ sm: "start"|"end" }|{ md: "start"|"end" }|{ lg: "start"|"end" }|{ xl: "start"|"end"}|{ xxl: "start"|"end"} }
   */ align: _types.alignPropType,
    /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */ menuRole: _propTypesDefault.default.string,
    /** Whether to render the dropdown menu in the DOM before the first time it is shown */ renderMenuOnMount: _propTypesDefault.default.bool,
    /**
   *  Which event when fired outside the component will cause it to be closed.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   */ rootCloseEvent: _propTypesDefault.default.string,
    /** @ignore */ bsPrefix: _propTypesDefault.default.string,
    /** @ignore */ variant: _propTypesDefault.default.string,
    /** @ignore */ size: _propTypesDefault.default.string
};
const defaultProps = {
    toggleLabel: 'Toggle dropdown',
    type: 'button'
};
/**
 * A convenience component for simple or general use split button dropdowns. Renders a
 * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`
 * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s
 * props](#dropdown-props).
 *
 * _All unknown props are passed through to the `Dropdown` component._
 * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,
 * and menu-related props are passed to the `Dropdown.Menu`
 */ const SplitButton = /*#__PURE__*/ _react.forwardRef(({ id , bsPrefix , size , variant , title , type , toggleLabel , children , onClick , href , target , menuRole , renderMenuOnMount , rootCloseEvent , ...props }, ref)=>/*#__PURE__*/ _jsxRuntime.jsxs(_dropdownDefault.default, {
        ref: ref,
        ...props,
        as: _buttonGroupDefault.default,
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(_buttonDefault.default, {
                size: size,
                variant: variant,
                disabled: props.disabled,
                bsPrefix: bsPrefix,
                href: href,
                target: target,
                onClick: onClick,
                type: type,
                children: title
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownDefault.default.Toggle, {
                split: true,
                id: id,
                size: size,
                variant: variant,
                disabled: props.disabled,
                childBsPrefix: bsPrefix,
                children: /*#__PURE__*/ _jsxRuntime.jsx("span", {
                    className: "visually-hidden",
                    children: toggleLabel
                })
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_dropdownDefault.default.Menu, {
                role: menuRole,
                renderOnMount: renderMenuOnMount,
                rootCloseEvent: rootCloseEvent,
                children: children
            })
        ]
    })
);
SplitButton.propTypes = propTypes;
SplitButton.defaultProps = defaultProps;
SplitButton.displayName = 'SplitButton';
exports.default = SplitButton;

},{"react":"4mchR","prop-types":"2bysO","./Button":"64Pgd","./ButtonGroup":"lNHIX","./Dropdown":"7gNYx","./types":"gcZF4","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hFbgz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ssr = require("@restart/ui/ssr");
exports.default = _ssr.SSRProvider;

},{"@restart/ui/ssr":"kv7iw","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"jyr8Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _createUtilityClasses = require("./createUtilityClasses");
var _createUtilityClassesDefault = parcelHelpers.interopDefault(_createUtilityClasses);
var _jsxRuntime = require("react/jsx-runtime");
const Stack = /*#__PURE__*/ _react.forwardRef(({ as: Component = 'div' , bsPrefix , className , direction , gap , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, direction === 'horizontal' ? 'hstack' : 'vstack');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ref: ref,
        className: _classnamesDefault.default(className, bsPrefix, ..._createUtilityClassesDefault.default({
            gap
        }))
    }));
});
Stack.displayName = 'Stack';
exports.default = Stack;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./createUtilityClasses":"cvS42","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cvS42":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "responsivePropType", ()=>responsivePropType
);
parcelHelpers.export(exports, "DEVICE_SIZES", ()=>DEVICE_SIZES
);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
function responsivePropType(propType) {
    return _propTypesDefault.default.oneOfType([
        propType,
        _propTypesDefault.default.shape({
            xs: propType,
            sm: propType,
            md: propType,
            lg: propType,
            xl: propType,
            xxl: propType
        })
    ]);
}
const DEVICE_SIZES = [
    'xxl',
    'xl',
    'lg',
    'md',
    'sm',
    'xs'
];
function createUtilityClassName(utilityValues) {
    const classes = [];
    Object.entries(utilityValues).forEach(([utilName, utilValue])=>{
        if (utilValue != null) {
            if (typeof utilValue === 'object') DEVICE_SIZES.forEach((brkPoint)=>{
                const bpValue = utilValue[brkPoint];
                if (bpValue != null) {
                    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';
                    classes.push(`${utilName}${infix}-${bpValue}`);
                }
            });
            else classes.push(`${utilName}-${utilValue}`);
        }
    });
    return classes;
}
exports.default = createUtilityClassName;

},{"prop-types":"2bysO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aP3XF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _react = require("react");
var _tabContainer = require("./TabContainer");
var _tabContainerDefault = parcelHelpers.interopDefault(_tabContainer);
var _tabContent = require("./TabContent");
var _tabContentDefault = parcelHelpers.interopDefault(_tabContent);
var _tabPane = require("./TabPane");
var _tabPaneDefault = parcelHelpers.interopDefault(_tabPane);
var _jsxRuntime = require("react/jsx-runtime");
/* eslint-disable react/no-unused-prop-types */ const propTypes = {
    eventKey: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.string,
        _propTypesDefault.default.number
    ]),
    /**
   * Content for the tab title.
   */ title: _propTypesDefault.default.node.isRequired,
    /**
   * The disabled state of the tab.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * Class to pass to the underlying nav link.
   */ tabClassName: _propTypesDefault.default.string
};
const Tab = ()=>{
    throw new Error("ReactBootstrap: The `Tab` component is not meant to be rendered! It's an abstract component that is only valid as a direct Child of the `Tabs` Component. For custom tabs components use TabPane and TabsContainer directly"); // Needed otherwise docs error out.
};
Tab.propTypes = propTypes;
exports.default = Object.assign(Tab, {
    Container: _tabContainerDefault.default,
    Content: _tabContentDefault.default,
    Pane: _tabPaneDefault.default
});

},{"prop-types":"2bysO","react":"4mchR","./TabContainer":"ciJeM","./TabContent":"kjnDo","./TabPane":"dgZMl","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ciJeM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _tabs = require("@restart/ui/Tabs");
var _tabsDefault = parcelHelpers.interopDefault(_tabs);
var _getTabTransitionComponent = require("./getTabTransitionComponent");
var _getTabTransitionComponentDefault = parcelHelpers.interopDefault(_getTabTransitionComponent);
var _jsxRuntime = require("react/jsx-runtime");
const TabContainer = ({ transition , ...props })=>/*#__PURE__*/ _jsxRuntime.jsx(_tabsDefault.default, {
        ...props,
        transition: _getTabTransitionComponentDefault.default(transition)
    })
;
TabContainer.displayName = 'TabContainer';
exports.default = TabContainer;

},{"react":"4mchR","@restart/ui/Tabs":"aJNfG","./getTabTransitionComponent":"ir4Do","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aJNfG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _ssr = require("./ssr");
var _tabContext = require("./TabContext");
var _tabContextDefault = parcelHelpers.interopDefault(_tabContext);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _tabPanel = require("./TabPanel");
var _tabPanelDefault = parcelHelpers.interopDefault(_tabPanel);
var _jsxRuntime = require("react/jsx-runtime");
const Tabs = (props)=>{
    const { id: userId , generateChildId: generateCustomChildId , onSelect: propsOnSelect , activeKey: propsActiveKey , defaultActiveKey , transition , mountOnEnter , unmountOnExit , children  } = props;
    const [activeKey, onSelect] = _uncontrollable.useUncontrolledProp(propsActiveKey, defaultActiveKey, propsOnSelect);
    const id = _ssr.useSSRSafeId(userId);
    const generateChildId = _react.useMemo(()=>generateCustomChildId || ((key, type)=>id ? `${id}-${type}-${key}` : null
        )
    , [
        id,
        generateCustomChildId
    ]);
    const tabContext = _react.useMemo(()=>({
            onSelect,
            activeKey,
            transition,
            mountOnEnter: mountOnEnter || false,
            unmountOnExit: unmountOnExit || false,
            getControlledId: (key)=>generateChildId(key, 'tabpane')
            ,
            getControllerId: (key)=>generateChildId(key, 'tab')
        })
    , [
        onSelect,
        activeKey,
        transition,
        mountOnEnter,
        unmountOnExit,
        generateChildId
    ]);
    return(/*#__PURE__*/ _jsxRuntime.jsx(_tabContextDefault.default.Provider, {
        value: tabContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
            value: onSelect || null,
            children: children
        })
    }));
};
Tabs.Panel = _tabPanelDefault.default;
exports.default = Tabs;

},{"react":"4mchR","uncontrollable":"aG99Z","./ssr":"kv7iw","./TabContext":"gm1bN","./SelectableContext":"6DoIj","./TabPanel":"b38ff","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b38ff":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useTabPanel", ()=>useTabPanel
);
var _react = require("react");
var _tabContext = require("./TabContext");
var _tabContextDefault = parcelHelpers.interopDefault(_tabContext);
var _selectableContext = require("./SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _noopTransition = require("./NoopTransition");
var _noopTransitionDefault = parcelHelpers.interopDefault(_noopTransition);
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = [
    "active",
    "eventKey",
    "mountOnEnter",
    "transition",
    "unmountOnExit"
], _excluded2 = [
    "activeKey",
    "getControlledId",
    "getControllerId"
], _excluded3 = [
    "as"
];
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function useTabPanel(_ref) {
    let { active , eventKey , mountOnEnter , transition , unmountOnExit  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    const context = _react.useContext(_tabContextDefault.default);
    if (!context) return [
        props,
        {
            eventKey,
            isActive: active,
            mountOnEnter,
            transition,
            unmountOnExit
        }
    ];
    const { activeKey , getControlledId , getControllerId  } = context, rest = _objectWithoutPropertiesLoose(context, _excluded2);
    const key = _selectableContext.makeEventKey(eventKey);
    return [
        Object.assign({
        }, props, {
            id: getControlledId(eventKey),
            'aria-labelledby': getControllerId(eventKey)
        }),
        {
            eventKey,
            isActive: active == null && key != null ? _selectableContext.makeEventKey(activeKey) === key : active,
            transition: transition || rest.transition,
            mountOnEnter: mountOnEnter != null ? mountOnEnter : rest.mountOnEnter,
            unmountOnExit: unmountOnExit != null ? unmountOnExit : rest.unmountOnExit
        }
    ];
}
const TabPanel = /*#__PURE__*/ _react.forwardRef((_ref2, ref)=>{
    let { as: Component = 'div'  } = _ref2, props = _objectWithoutPropertiesLoose(_ref2, _excluded3);
    const [tabPanelProps, { isActive , onEnter , onEntering , onEntered , onExit , onExiting , onExited , mountOnEnter , unmountOnExit , transition: Transition = _noopTransitionDefault.default  }] = useTabPanel(props); // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't
    // conflict with the top level one.
    return(/*#__PURE__*/ _jsxRuntime.jsx(_tabContextDefault.default.Provider, {
        value: null,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
            value: null,
            children: /*#__PURE__*/ _jsxRuntime.jsx(Transition, {
                in: isActive,
                onEnter: onEnter,
                onEntering: onEntering,
                onEntered: onEntered,
                onExit: onExit,
                onExiting: onExiting,
                onExited: onExited,
                mountOnEnter: mountOnEnter,
                unmountOnExit: unmountOnExit,
                children: /*#__PURE__*/ _jsxRuntime.jsx(Component, Object.assign({
                }, tabPanelProps, {
                    ref: ref,
                    role: "tabpanel",
                    hidden: !isActive,
                    "aria-hidden": !isActive
                }))
            })
        })
    }));
});
TabPanel.displayName = 'TabPanel';
exports.default = TabPanel;

},{"react":"4mchR","./TabContext":"gm1bN","./SelectableContext":"6DoIj","./NoopTransition":"7iQSh","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7iQSh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
function NoopTransition({ children , in: inProp , mountOnEnter , unmountOnExit  }) {
    const hasEnteredRef = _react.useRef(inProp);
    _react.useEffect(()=>{
        if (inProp) hasEnteredRef.current = true;
    }, [
        inProp
    ]);
    if (inProp) return children; // not in
    //
    // if (!mountOnEnter && !unmountOnExit) {
    //   return children;
    // }
    if (unmountOnExit) return null;
    if (!hasEnteredRef.current && mountOnEnter) return null;
    return children;
}
exports.default = NoopTransition;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ir4Do":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
function getTabTransitionComponent(transition) {
    if (typeof transition === 'boolean') return transition ? _fadeDefault.default : undefined;
    return transition;
}
exports.default = getTabTransitionComponent;

},{"./Fade":"cHHEJ","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kjnDo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('tab-content');

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"dgZMl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _noopTransition = require("@restart/ui/NoopTransition");
var _noopTransitionDefault = parcelHelpers.interopDefault(_noopTransition);
var _selectableContext = require("@restart/ui/SelectableContext");
var _selectableContextDefault = parcelHelpers.interopDefault(_selectableContext);
var _tabContext = require("@restart/ui/TabContext");
var _tabContextDefault = parcelHelpers.interopDefault(_tabContext);
var _tabPanel = require("@restart/ui/TabPanel");
var _themeProvider = require("./ThemeProvider");
var _getTabTransitionComponent = require("./getTabTransitionComponent");
var _getTabTransitionComponentDefault = parcelHelpers.interopDefault(_getTabTransitionComponent);
var _jsxRuntime = require("react/jsx-runtime");
const TabPane = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , transition , ...props }, ref)=>{
    const [{ className , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    as: Component = 'div' , ...rest }, { isActive , onEnter , onEntering , onEntered , onExit , onExiting , onExited , mountOnEnter , unmountOnExit , transition: Transition = _noopTransitionDefault.default  }] = _tabPanel.useTabPanel({
        ...props,
        transition: _getTabTransitionComponentDefault.default(transition)
    });
    const prefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'tab-pane'); // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't
    // conflict with the top level one.
    return(/*#__PURE__*/ _jsxRuntime.jsx(_tabContextDefault.default.Provider, {
        value: null,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_selectableContextDefault.default.Provider, {
            value: null,
            children: /*#__PURE__*/ _jsxRuntime.jsx(Transition, {
                in: isActive,
                onEnter: onEnter,
                onEntering: onEntering,
                onEntered: onEntered,
                onExit: onExit,
                onExiting: onExiting,
                onExited: onExited,
                mountOnEnter: mountOnEnter,
                unmountOnExit: unmountOnExit,
                children: /*#__PURE__*/ _jsxRuntime.jsx(Component, {
                    ...rest,
                    ref: ref,
                    className: _classnamesDefault.default(className, prefix, isActive && 'active')
                })
            })
        })
    }));
});
TabPane.displayName = 'TabPane';
exports.default = TabPane;

},{"classnames":"2cVcN","react":"4mchR","@restart/ui/NoopTransition":"7iQSh","@restart/ui/SelectableContext":"6DoIj","@restart/ui/TabContext":"gm1bN","@restart/ui/TabPanel":"b38ff","./ThemeProvider":"oG7Uz","./getTabTransitionComponent":"ir4Do","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"g38lh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const Table = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , striped , bordered , borderless , hover , size , variant , responsive , ...props }, ref)=>{
    const decoratedBsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'table');
    const classes = _classnamesDefault.default(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);
    const table = /*#__PURE__*/ _jsxRuntime.jsx("table", {
        ...props,
        className: classes,
        ref: ref
    });
    if (responsive) {
        let responsiveClass = `${decoratedBsPrefix}-responsive`;
        if (typeof responsive === 'string') responsiveClass = `${responsiveClass}-${responsive}`;
        return(/*#__PURE__*/ _jsxRuntime.jsx("div", {
            className: responsiveClass,
            children: table
        }));
    }
    return table;
});
exports.default = Table;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"7zOeE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _uncontrollable = require("uncontrollable");
var _tabs = require("@restart/ui/Tabs");
var _tabsDefault = parcelHelpers.interopDefault(_tabs);
var _nav = require("./Nav");
var _navDefault = parcelHelpers.interopDefault(_nav);
var _navLink = require("./NavLink");
var _navLinkDefault = parcelHelpers.interopDefault(_navLink);
var _navItem = require("./NavItem");
var _navItemDefault = parcelHelpers.interopDefault(_navItem);
var _tabContent = require("./TabContent");
var _tabContentDefault = parcelHelpers.interopDefault(_tabContent);
var _tabPane = require("./TabPane");
var _tabPaneDefault = parcelHelpers.interopDefault(_tabPane);
var _elementChildren = require("./ElementChildren");
var _getTabTransitionComponent = require("./getTabTransitionComponent");
var _getTabTransitionComponentDefault = parcelHelpers.interopDefault(_getTabTransitionComponent);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    variant: 'tabs',
    mountOnEnter: false,
    unmountOnExit: false
};
function getDefaultActiveKey(children) {
    let defaultActiveKey;
    _elementChildren.forEach(children, (child)=>{
        if (defaultActiveKey == null) defaultActiveKey = child.props.eventKey;
    });
    return defaultActiveKey;
}
function renderTab(child) {
    const { title , eventKey , disabled , tabClassName , id  } = child.props;
    if (title == null) return null;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_navItemDefault.default, {
        as: "li",
        role: "presentation",
        children: /*#__PURE__*/ _jsxRuntime.jsx(_navLinkDefault.default, {
            as: "button",
            type: "button",
            eventKey: eventKey,
            disabled: disabled,
            id: id,
            className: tabClassName,
            children: title
        })
    }));
}
const Tabs = (props)=>{
    const { id , onSelect , transition , mountOnEnter , unmountOnExit , children , activeKey =getDefaultActiveKey(children) , ...controlledProps } = _uncontrollable.useUncontrolled(props, {
        activeKey: 'onSelect'
    });
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_tabsDefault.default, {
        id: id,
        activeKey: activeKey,
        onSelect: onSelect,
        transition: _getTabTransitionComponentDefault.default(transition),
        mountOnEnter: mountOnEnter,
        unmountOnExit: unmountOnExit,
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx(_navDefault.default, {
                ...controlledProps,
                role: "tablist",
                as: "ul",
                children: _elementChildren.map(children, renderTab)
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_tabContentDefault.default, {
                children: _elementChildren.map(children, (child)=>{
                    const childProps = {
                        ...child.props
                    };
                    delete childProps.title;
                    delete childProps.disabled;
                    delete childProps.tabClassName;
                    return(/*#__PURE__*/ _jsxRuntime.jsx(_tabPaneDefault.default, {
                        ...childProps
                    }));
                })
            })
        ]
    }));
};
Tabs.defaultProps = defaultProps;
Tabs.displayName = 'Tabs';
exports.default = Tabs;

},{"react":"4mchR","uncontrollable":"aG99Z","@restart/ui/Tabs":"aJNfG","./Nav":"3TTuV","./NavLink":"aGfFg","./NavItem":"lgp9h","./TabContent":"kjnDo","./TabPane":"dgZMl","./ElementChildren":"eqDHF","./getTabTransitionComponent":"ir4Do","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"b3kl2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _useTimeout = require("@restart/hooks/useTimeout");
var _useTimeoutDefault = parcelHelpers.interopDefault(_useTimeout);
var _toastFade = require("./ToastFade");
var _toastFadeDefault = parcelHelpers.interopDefault(_toastFade);
var _toastHeader = require("./ToastHeader");
var _toastHeaderDefault = parcelHelpers.interopDefault(_toastHeader);
var _toastBody = require("./ToastBody");
var _toastBodyDefault = parcelHelpers.interopDefault(_toastBody);
var _themeProvider = require("./ThemeProvider");
var _toastContext = require("./ToastContext");
var _toastContextDefault = parcelHelpers.interopDefault(_toastContext);
var _jsxRuntime = require("react/jsx-runtime");
const Toast = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , className , transition: Transition = _toastFadeDefault.default , show =true , animation =true , delay =5000 , autohide =false , onClose , bg , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'toast'); // We use refs for these, because we don't want to restart the autohide
    // timer in case these values change.
    const delayRef = _react.useRef(delay);
    const onCloseRef = _react.useRef(onClose);
    _react.useEffect(()=>{
        delayRef.current = delay;
        onCloseRef.current = onClose;
    }, [
        delay,
        onClose
    ]);
    const autohideTimeout = _useTimeoutDefault.default();
    const autohideToast = !!(autohide && show);
    const autohideFunc = _react.useCallback(()=>{
        if (autohideToast) onCloseRef.current == null || onCloseRef.current();
    }, [
        autohideToast
    ]);
    _react.useEffect(()=>{
        // Only reset timer if show or autohide changes.
        autohideTimeout.set(autohideFunc, delayRef.current);
    }, [
        autohideTimeout,
        autohideFunc
    ]);
    const toastContext = _react.useMemo(()=>({
            onClose
        })
    , [
        onClose
    ]);
    const hasAnimation = !!(Transition && animation);
    const toast = /*#__PURE__*/ _jsxRuntime.jsx("div", {
        ...props,
        ref: ref,
        className: _classnamesDefault.default(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),
        role: "alert",
        "aria-live": "assertive",
        "aria-atomic": "true"
    });
    return(/*#__PURE__*/ _jsxRuntime.jsx(_toastContextDefault.default.Provider, {
        value: toastContext,
        children: hasAnimation && Transition ? /*#__PURE__*/ _jsxRuntime.jsx(Transition, {
            in: show,
            unmountOnExit: true,
            children: toast
        }) : toast
    }));
});
Toast.displayName = 'Toast';
exports.default = Object.assign(Toast, {
    Body: _toastBodyDefault.default,
    Header: _toastHeaderDefault.default
});

},{"react":"4mchR","classnames":"2cVcN","@restart/hooks/useTimeout":"97tbq","./ToastFade":"hq4Gx","./ToastHeader":"e7EVr","./ToastBody":"1FEN9","./ThemeProvider":"oG7Uz","./ToastContext":"6iuw1","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"hq4Gx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _transition = require("react-transition-group/Transition");
var _fade = require("./Fade");
var _fadeDefault = parcelHelpers.interopDefault(_fade);
var _jsxRuntime = require("react/jsx-runtime");
const fadeStyles = {
    [_transition.ENTERING]: 'showing',
    [_transition.EXITING]: 'showing show'
};
const ToastFade = /*#__PURE__*/ _react.forwardRef((props, ref)=>/*#__PURE__*/ _jsxRuntime.jsx(_fadeDefault.default, {
        ...props,
        ref: ref,
        transitionClasses: fadeStyles
    })
);
ToastFade.displayName = 'ToastFade';
exports.default = ToastFade;

},{"react":"4mchR","react-transition-group/Transition":"5xmpQ","./Fade":"cHHEJ","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"e7EVr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _useEventCallback = require("@restart/hooks/useEventCallback");
var _useEventCallbackDefault = parcelHelpers.interopDefault(_useEventCallback);
var _themeProvider = require("./ThemeProvider");
var _closeButton = require("./CloseButton");
var _closeButtonDefault = parcelHelpers.interopDefault(_closeButton);
var _toastContext = require("./ToastContext");
var _toastContextDefault = parcelHelpers.interopDefault(_toastContext);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    closeLabel: 'Close',
    closeButton: true
};
const ToastHeader = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , closeLabel , closeVariant , closeButton , className , children , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'toast-header');
    const context = _react.useContext(_toastContextDefault.default);
    const handleClick = _useEventCallbackDefault.default((e)=>{
        context == null || context.onClose == null || context.onClose(e);
    });
    return(/*#__PURE__*/ _jsxRuntime.jsxs("div", {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(bsPrefix, className),
        children: [
            children,
            closeButton && /*#__PURE__*/ _jsxRuntime.jsx(_closeButtonDefault.default, {
                "aria-label": closeLabel,
                variant: closeVariant,
                onClick: handleClick,
                "data-dismiss": "toast"
            })
        ]
    }));
});
ToastHeader.displayName = 'ToastHeader';
ToastHeader.defaultProps = defaultProps;
exports.default = ToastHeader;

},{"classnames":"2cVcN","react":"4mchR","@restart/hooks/useEventCallback":"8QyIg","./ThemeProvider":"oG7Uz","./CloseButton":"arc5K","./ToastContext":"6iuw1","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6iuw1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
const ToastContext = /*#__PURE__*/ _react.createContext({
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    onClose () {
    }
});
exports.default = ToastContext;

},{"react":"4mchR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1FEN9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWithBsPrefix = require("./createWithBsPrefix");
var _createWithBsPrefixDefault = parcelHelpers.interopDefault(_createWithBsPrefix);
exports.default = _createWithBsPrefixDefault.default('toast-body');

},{"./createWithBsPrefix":"8IH8I","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8m5Zr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
const positionClasses = {
    'top-start': 'top-0 start-0',
    'top-center': 'top-0 start-50 translate-middle-x',
    'top-end': 'top-0 end-0',
    'middle-start': 'top-50 start-0 translate-middle-y',
    'middle-center': 'top-50 start-50 translate-middle',
    'middle-end': 'top-50 end-0 translate-middle-y',
    'bottom-start': 'bottom-0 start-0',
    'bottom-center': 'bottom-0 start-50 translate-middle-x',
    'bottom-end': 'bottom-0 end-0'
};
const ToastContainer = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , position , className , // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
as: Component = 'div' , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'toast-container');
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ref: ref,
        ...props,
        className: _classnamesDefault.default(bsPrefix, position && `position-absolute ${positionClasses[position]}`, className)
    }));
});
ToastContainer.displayName = 'ToastContainer';
exports.default = ToastContainer;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"g8FN5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _button = require("./Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _jsxRuntime = require("react/jsx-runtime");
const noop = ()=>undefined
;
const ToggleButton = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , name , className , checked , type , onChange , value , disabled , id , inputRef , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'btn-check');
    return(/*#__PURE__*/ _jsxRuntime.jsxs(_jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx("input", {
                className: bsPrefix,
                name: name,
                type: type,
                value: value,
                ref: inputRef,
                autoComplete: "off",
                checked: !!checked,
                disabled: !!disabled,
                onChange: onChange || noop,
                id: id
            }),
            /*#__PURE__*/ _jsxRuntime.jsx(_buttonDefault.default, {
                ...props,
                ref: ref,
                className: _classnamesDefault.default(className, disabled && 'disabled'),
                type: undefined,
                as: "label",
                htmlFor: id
            })
        ]
    }));
});
ToggleButton.displayName = 'ToggleButton';
exports.default = ToggleButton;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./Button":"64Pgd","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"c1Mk9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _invariant = require("invariant");
var _invariantDefault = parcelHelpers.interopDefault(_invariant);
var _uncontrollable = require("uncontrollable");
var _createChainedFunction = require("./createChainedFunction");
var _createChainedFunctionDefault = parcelHelpers.interopDefault(_createChainedFunction);
var _elementChildren = require("./ElementChildren");
var _buttonGroup = require("./ButtonGroup");
var _buttonGroupDefault = parcelHelpers.interopDefault(_buttonGroup);
var _toggleButton = require("./ToggleButton");
var _toggleButtonDefault = parcelHelpers.interopDefault(_toggleButton);
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    type: 'radio',
    vertical: false
};
const ToggleButtonGroup = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    const { children , type , name , value , onChange , ...controlledProps } = _uncontrollable.useUncontrolled(props, {
        value: 'onChange'
    });
    const getValues = ()=>value == null ? [] : [].concat(value)
    ;
    const handleToggle = (inputVal, event)=>{
        if (!onChange) return;
        const values = getValues();
        const isActive = values.indexOf(inputVal) !== -1;
        if (type === 'radio') {
            if (!isActive && onChange) onChange(inputVal, event);
            return;
        }
        if (isActive) onChange(values.filter((n)=>n !== inputVal
        ), event);
        else onChange([
            ...values,
            inputVal
        ], event);
    };
    !(type !== 'radio' || !!name) && _invariantDefault.default(false, "A `name` is required to group the toggle buttons when the `type` is set to \"radio\"");
    return(/*#__PURE__*/ _jsxRuntime.jsx(_buttonGroupDefault.default, {
        ...controlledProps,
        ref: ref,
        children: _elementChildren.map(children, (child)=>{
            const values = getValues();
            const { value: childVal , onChange: childOnChange  } = child.props;
            const handler = (e)=>handleToggle(childVal, e)
            ;
            return(/*#__PURE__*/ _react.cloneElement(child, {
                type,
                name: child.name || name,
                checked: values.indexOf(childVal) !== -1,
                onChange: _createChainedFunctionDefault.default(childOnChange, handler)
            }));
        })
    }));
});
ToggleButtonGroup.defaultProps = defaultProps;
exports.default = Object.assign(ToggleButtonGroup, {
    Button: _toggleButtonDefault.default
});

},{"react":"4mchR","invariant":"Xxs2W","uncontrollable":"aG99Z","./createChainedFunction":"bhPCF","./ElementChildren":"eqDHF","./ButtonGroup":"lNHIX","./ToggleButton":"g8FN5","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aUst3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _classnames = require("classnames");
var _classnamesDefault = parcelHelpers.interopDefault(_classnames);
var _react = require("react");
var _themeProvider = require("./ThemeProvider");
var _helpers = require("./helpers");
var _jsxRuntime = require("react/jsx-runtime");
const defaultProps = {
    placement: 'right'
};
const Tooltip = /*#__PURE__*/ _react.forwardRef(({ bsPrefix , placement , className , style , children , arrowProps , popper: _ , show: _2 , ...props }, ref)=>{
    bsPrefix = _themeProvider.useBootstrapPrefix(bsPrefix, 'tooltip');
    const isRTL = _themeProvider.useIsRTL();
    const [primaryPlacement] = (placement == null ? void 0 : placement.split('-')) || [];
    const bsDirection = _helpers.getOverlayDirection(primaryPlacement, isRTL);
    return(/*#__PURE__*/ _jsxRuntime.jsxs("div", {
        ref: ref,
        style: style,
        role: "tooltip",
        "x-placement": primaryPlacement,
        className: _classnamesDefault.default(className, bsPrefix, `bs-tooltip-${bsDirection}`),
        ...props,
        children: [
            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                className: "tooltip-arrow",
                ...arrowProps
            }),
            /*#__PURE__*/ _jsxRuntime.jsx("div", {
                className: `${bsPrefix}-inner`,
                children: children
            })
        ]
    }));
});
Tooltip.defaultProps = defaultProps;
Tooltip.displayName = 'Tooltip';
exports.default = Tooltip;

},{"classnames":"2cVcN","react":"4mchR","./ThemeProvider":"oG7Uz","./helpers":"4wQJ9","react/jsx-runtime":"6Ds2u","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5dhe6":[function() {},{}],"bzRas":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NFA", ()=>NFA1
);
parcelHelpers.export(exports, "GNFA", ()=>GNFA1
);
var _expression = require("./expression");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Automata1 = function() {
    function Automata(automation) {
        this._automation = automation;
    }
    Automata.prototype.getStates = function() {
        return Object.keys(this._automation.states);
    };
    return Automata;
}();
var NFA1 = function(_super) {
    __extends(NFA, _super);
    function NFA(automation) {
        var _this = _super.call(this, automation) || this;
        NFA.validateNFA(automation);
        return _this;
    }
    /**
     * validate a raw structure of an NFA
     * @param nfa
     */ NFA.validateNFA = function(nfa) {
        if (nfa.start === undefined || nfa.start === null) throw new Error('NFA must have a start state');
        if (!nfa.accept) throw new Error('NFA must have accept states');
        if (!nfa.states) throw new Error('NFA must have states');
        if (!nfa.states[nfa.start]) throw new Error("".concat(nfa.start, " is not a valid start state"));
        for(var _i = 0, _a = nfa.accept; _i < _a.length; _i++){
            var accept = _a[_i];
            if (!nfa.states[accept]) throw new Error("".concat(accept, " is not a valid accept state"));
        }
        for(var state in nfa.states)for(var char in nfa.states[state]){
            if (!nfa.states[state][char]) throw new Error("remove unused transition from ".concat(state, " on expression ").concat(char));
            for(var _b = 0, _c = nfa.states[state][char]; _b < _c.length; _b++){
                var next = _c[_b];
                if (!nfa.states[next]) throw new Error("".concat(next, " is not a valid state"));
            }
        }
    };
    return NFA;
}(Automata1);
var GNFA1 = function(_super) {
    __extends(GNFA, _super);
    function GNFA(automation) {
        var _this = _super.call(this, automation) || this;
        _this.convertAutomataToGNFA();
        _this.states = Object.keys(_this._automation.states);
        _this.graphIds = {
        };
        _this.states.forEach(function(s, id) {
            return _this.graphIds[s] = id;
        });
        _this.generatePathMap();
        return _this;
    }
    /**
     * returns a map from given keys
     * all values are undefined
     * @param keys keys to map
     * @private
     */ GNFA.mapFromKeys = function(keys) {
        var map = {
        };
        for(var _i = 0, keys_1 = keys; _i < keys_1.length; _i++){
            var key = keys_1[_i];
            map[key] = undefined;
        }
        return map;
    };
    GNFA.prototype.generatePathMap = function() {
        var _this = this;
        this._pathMap = {
        };
        var _loop_1 = function(from) {
            var states = this_1.getStates();
            this_1._pathMap[from] = __assign({
            }, GNFA.mapFromKeys(this_1.getStates()));
            var _loop_2 = function(char) {
                this_1._automation.states[from][char].forEach(function(to) {
                    var literal = new _expression.Literal(char);
                    if (!_this._pathMap[from][to]) _this._pathMap[from][to] = literal;
                    else _this._pathMap[from][to] = new _expression.Or(_this._pathMap[from][to], literal);
                });
            };
            for(var char1 in this_1._automation.states[from])_loop_2(char1);
        };
        var this_1 = this;
        for(var from in this._automation.states)_loop_1(from);
    };
    GNFA.prototype.getPureStates = function() {
        return this.getStates().filter(function(s) {
            return s !== '@' && s !== '#';
        });
    };
    GNFA.prototype.getStates = function() {
        return this.states;
    };
    GNFA.prototype.ripState = function(state) {
        var newPathMap = {
        };
        if (!(state in this._pathMap)) throw new Error("".concat(state, " is not a valid state"));
        if (state === '@' || state === '#') throw new Error("start and accept states cannot be ripped");
        this.states = this.getStates().filter(function(s) {
            return s !== state;
        });
        for(var _i = 0, _a = this.states; _i < _a.length; _i++){
            var from = _a[_i];
            newPathMap[from] = __assign({
            }, GNFA.mapFromKeys(this.states));
            for(var _b = 0, _c = this.states; _b < _c.length; _b++){
                var to = _c[_b];
                var directPath = this._pathMap[from][to];
                var fts = this._pathMap[from][state];
                var stt = this._pathMap[state][to];
                var sts = this._pathMap[state][state];
                var otherPath = void 0;
                if (fts && stt) {
                    otherPath = fts;
                    if (sts) otherPath = new _expression.Concatenation(otherPath, new _expression.Star(sts));
                    otherPath = new _expression.Concatenation(otherPath, stt);
                }
                if (otherPath && directPath) newPathMap[from][to] = new _expression.Or(otherPath, directPath);
                else newPathMap[from][to] = otherPath || directPath;
            }
        }
        this._pathMap = newPathMap;
    };
    GNFA.prototype.convertAutomataToGNFA = function() {
        this._automation.states['@'] = {
            '$': [
                this._automation.start
            ]
        };
        this._automation.states['#'] = {
        };
        for(var _i = 0, _a = this._automation.accept; _i < _a.length; _i++){
            var accept = _a[_i];
            this._automation.states[accept]['$'] = [
                '#'
            ];
        }
        this._automation.start = '@';
        this._automation.accept = [
            '#'
        ];
    };
    GNFA.prototype.getStateId = function(state) {
        return this.graphIds[state];
    };
    GNFA.prototype.getGraph = function() {
        var _this = this;
        var res = {
            nodes: null,
            edges: []
        };
        var states = this.getStates();
        res.nodes = states.map(function(s) {
            return {
                id: _this.getStateId(s),
                label: s
            };
        });
        for(var _i = 0, states_1 = states; _i < states_1.length; _i++){
            var from = states_1[_i];
            for(var _a = 0, states_2 = states; _a < states_2.length; _a++){
                var to = states_2[_a];
                if (this._pathMap[from][to]) res.edges.push({
                    from: this.getStateId(from),
                    to: this.getStateId(to),
                    label: this._pathMap[from][to].evaluate()
                });
            }
        }
        return res;
    };
    return GNFA;
}(NFA1);

},{"./expression":"458EZ","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"458EZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Star", ()=>Star1
);
parcelHelpers.export(exports, "Or", ()=>Or1
);
parcelHelpers.export(exports, "Concatenation", ()=>Concatenation1
);
parcelHelpers.export(exports, "Literal", ()=>Literal1
);
var Star1 = function() {
    function Star(expression) {
        this.expression = expression;
    }
    Star.prototype.evaluate = function() {
        var expression = this.expression.evaluate();
        if (expression === '$') return '$';
        if (this.expression instanceof Literal1) return expression + "*";
        return "(" + expression + ")*";
    };
    return Star;
}();
var Or1 = function() {
    function Or(left, right) {
        this.left = left;
        this.right = right;
    }
    Or.prototype.evaluate = function() {
        var left = this.left.evaluate();
        var right = this.right.evaluate();
        return left + "+" + right;
    };
    return Or;
}();
var Concatenation1 = function() {
    function Concatenation(left, right) {
        this.left = left;
        this.right = right;
    }
    Concatenation.prototype.evaluate = function() {
        var left = this.left.evaluate();
        var right = this.right.evaluate();
        if (this.left instanceof Or1) left = "(" + left + ")";
        if (this.right instanceof Or1) right = "(" + right + ")";
        if (left === '$') left = '';
        if (right === '$') right = '';
        return left + right || '$';
    };
    return Concatenation;
}();
var Literal1 = function() {
    function Literal(value) {
        this.value = value;
        if (!value) this.value = '$';
    }
    Literal.prototype.evaluate = function() {
        return this.value;
    };
    return Literal;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}]},["emU3S","gT4u9","ipvmp"], "ipvmp", "parcelRequire9cf5")

//# sourceMappingURL=index.9978ec32.js.map
